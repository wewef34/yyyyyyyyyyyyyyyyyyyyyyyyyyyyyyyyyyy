var $jscomp = $jscomp || {};
$jscomp.scope = {};
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
    return val !== void 0
}
;
goog.isString = function(val) {
    return typeof val == 'string'
}
;
goog.isBoolean = function(val) {
    return typeof val == 'boolean'
}
;
goog.isNumber = function(val) {
    return typeof val == 'number'
}
;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
    var parts = name.split('.');
    var cur = opt_objectToExportTo || goog.global;
    if (!(parts[0]in cur) && cur.execScript)
        cur.execScript('var ' + parts[0]);
    for (var part; parts.length && (part = parts.shift()); )
        if (!parts.length && goog.isDef(opt_object))
            cur[part] = opt_object;
        else if (cur[part] && cur[part] !== Object.prototype[part])
            cur = cur[part];
        else
            cur = cur[part] = {}
}
;
goog.define = function(name, defaultValue) {
    var value = defaultValue;
    if (!COMPILED)
        if (goog.global.CLOSURE_UNCOMPILED_DEFINES && goog.global.CLOSURE_UNCOMPILED_DEFINES.nodeType === undefined && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name))
            value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
        else if (goog.global.CLOSURE_DEFINES && goog.global.CLOSURE_DEFINES.nodeType === undefined && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name))
            value = goog.global.CLOSURE_DEFINES[name];
    goog.exportPath_(name, value)
}
;
goog.DEBUG = true;
goog.LOCALE = 'en';
goog.TRUSTED_SITE = true;
goog.STRICT_MODE_COMPATIBLE = false;
goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG;
goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = false;
goog.provide = function(name) {
    if (goog.isInModuleLoader_())
        throw new Error('goog.provide can not be used within a goog.module.');
    if (!COMPILED)
        if (goog.isProvided_(name))
            throw new Error('Namespace "' + name + '" already declared.');
    goog.constructNamespace_(name)
}
;
goog.constructNamespace_ = function(name, opt_obj) {
    if (!COMPILED) {
        delete goog.implicitNamespaces_[name];
        var namespace = name;
        while (namespace = namespace.substring(0, namespace.lastIndexOf('.'))) {
            if (goog.getObjectByName(namespace))
                break;
            goog.implicitNamespaces_[namespace] = true
        }
    }
    goog.exportPath_(name, opt_obj)
}
;
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
    if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1)
        throw new Error('Invalid module identifier');
    if (!goog.isInModuleLoader_())
        throw new Error('Module ' + name + ' has been loaded incorrectly. Note, ' + 'modules cannot be loaded as normal scripts. They require some kind of ' + "pre-processing step. You're likely trying to load a module via a " + 'script tag or as a part of a concatenated bundle without rewriting the ' + 'module. For more info see: ' + 'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');
    if (goog.moduleLoaderState_.moduleName)
        throw new Error('goog.module may only be called once per module.');
    goog.moduleLoaderState_.moduleName = name;
    if (!COMPILED) {
        if (goog.isProvided_(name))
            throw new Error('Namespace "' + name + '" already declared.');
        delete goog.implicitNamespaces_[name]
    }
}
;
goog.module.get = function(name) {
    return goog.module.getInternal_(name)
}
;
goog.module.getInternal_ = function(name) {
    if (!COMPILED)
        if (name in goog.loadedModules_)
            return goog.loadedModules_[name];
        else if (!goog.implicitNamespaces_[name]) {
            var ns = goog.getObjectByName(name);
            return ns != null ? ns : null
        }
    return null
}
;
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
    return goog.moduleLoaderState_ != null
}
;
goog.module.declareLegacyNamespace = function() {
    if (!COMPILED && !goog.isInModuleLoader_())
        throw new Error('goog.module.declareLegacyNamespace must be called from ' + 'within a goog.module');
    if (!COMPILED && !goog.moduleLoaderState_.moduleName)
        throw new Error('goog.module must be called prior to ' + 'goog.module.declareLegacyNamespace.');
    goog.moduleLoaderState_.declareLegacyNamespace = true
}
;
goog.setTestOnly = function(opt_message) {
    if (goog.DISALLOW_TEST_ONLY_CODE) {
        opt_message = opt_message || '';
        throw new Error('Importing test-only code into non-debug environment' + (opt_message ? ': ' + opt_message : '.'));
    }
}
;
goog.forwardDeclare = function(name) {}
;
if (!COMPILED) {
    goog.isProvided_ = function(name) {
        return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name))
    }
    ;
    goog.implicitNamespaces_ = {
        'goog.module': true
    }
}
goog.getObjectByName = function(name, opt_obj) {
    var parts = name.split('.');
    var cur = opt_obj || goog.global;
    for (var i = 0; i < parts.length; i++) {
        cur = cur[parts[i]];
        if (!goog.isDefAndNotNull(cur))
            return null
    }
    return cur
}
;
goog.globalize = function(obj, opt_global) {
    var global = opt_global || goog.global;
    for (var x in obj)
        global[x] = obj[x]
}
;
goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
    if (goog.DEPENDENCIES_ENABLED) {
        var provide, require;
        var path = relPath.replace(/\\/g, '/');
        var deps = goog.dependencies_;
        if (!opt_loadFlags || typeof opt_loadFlags === 'boolean')
            opt_loadFlags = opt_loadFlags ? {
                'module': 'goog'
            } : {};
        for (var i = 0; provide = provides[i]; i++) {
            deps.nameToPath[provide] = path;
            deps.loadFlags[path] = opt_loadFlags
        }
        for (var j = 0; require = requires[j]; j++) {
            if (!(path in deps.requires))
                deps.requires[path] = {};
            deps.requires[path][require] = true
        }
    }
}
;
goog.ENABLE_DEBUG_LOADER = true;
goog.logToConsole_ = function(msg) {
    if (goog.global.console)
        goog.global.console['error'](msg)
}
;
goog.require = function(name) {
    if (!COMPILED) {
        if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_)
            goog.maybeProcessDeferredDep_(name);
        if (goog.isProvided_(name)) {
            if (goog.isInModuleLoader_())
                return goog.module.getInternal_(name)
        } else if (goog.ENABLE_DEBUG_LOADER) {
            var path = goog.getPathFromDeps_(name);
            if (path)
                goog.writeScripts_(path);
            else {
                var errorMessage = 'goog.require could not find: ' + name;
                goog.logToConsole_(errorMessage);
                throw new Error(errorMessage);
            }
        }
        return null
    }
}
;
goog.basePath = '';
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {}
;
goog.abstractMethod = function() {
    throw new Error('unimplemented abstract method');
}
;
goog.addSingletonGetter = function(ctor) {
    ctor.instance_ = undefined;
    ctor.getInstance = function() {
        if (ctor.instance_)
            return ctor.instance_;
        if (goog.DEBUG)
            goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
        return ctor.instance_ = new ctor
    }
}
;
goog.instantiatedSingletons_ = [];
goog.LOAD_MODULE_USING_EVAL = true;
goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.TRANSPILE = 'detect';
goog.TRANSPILER = 'transpile.js';
if (goog.DEPENDENCIES_ENABLED) {
    goog.dependencies_ = {
        loadFlags: {},
        nameToPath: {},
        requires: {},
        visited: {},
        written: {},
        deferred: {}
    };
    goog.inHtmlDocument_ = function() {
        var doc = goog.global.document;
        return doc != null && 'write'in doc
    }
    ;
    goog.findBasePath_ = function() {
        if (goog.isDef(goog.global.CLOSURE_BASE_PATH) && goog.isString(goog.global.CLOSURE_BASE_PATH)) {
            goog.basePath = goog.global.CLOSURE_BASE_PATH;
            return
        } else if (!goog.inHtmlDocument_())
            return;
        var doc = goog.global.document;
        var currentScript = doc.currentScript;
        if (currentScript)
            var scripts = [currentScript];
        else
            var scripts = doc.getElementsByTagName('SCRIPT');
        for (var i = scripts.length - 1; i >= 0; --i) {
            var script = scripts[i];
            var src = script.src;
            var qmark = src.lastIndexOf('?');
            var l = qmark == -1 ? src.length : qmark;
            if (src.substr(l - 7, 7) == 'base.js') {
                goog.basePath = src.substr(0, l - 7);
                return
            }
        }
    }
    ;
    goog.importScript_ = function(src, opt_sourceText) {
        var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
        if (importScript(src, opt_sourceText))
            goog.dependencies_.written[src] = true
    }
    ;
    goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
    goog.oldIeWaiting_ = false;
    goog.importProcessedScript_ = function(src, isModule, needsTranspile) {
        var bootstrap = 'goog.retrieveAndExec_("' + src + '", ' + isModule + ', ' + needsTranspile + ');';
        goog.importScript_('', bootstrap)
    }
    ;
    goog.queuedModules_ = [];
    goog.wrapModule_ = function(srcUrl, scriptText) {
        if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON))
            return '' + 'goog.loadModule(function(exports) {' + '"use strict";' + scriptText + '\n' + ';return exports' + '});' + '\n//# sourceURL\x3d' + srcUrl + '\n';
        else
            return '' + 'goog.loadModule(' + goog.global.JSON.stringify(scriptText + '\n//# sourceURL\x3d' + srcUrl + '\n') + ');'
    }
    ;
    goog.loadQueuedModules_ = function() {
        var count = goog.queuedModules_.length;
        if (count > 0) {
            var queue = goog.queuedModules_;
            goog.queuedModules_ = [];
            for (var i = 0; i < count; i++) {
                var path = queue[i];
                goog.maybeProcessDeferredPath_(path)
            }
        }
        goog.oldIeWaiting_ = false
    }
    ;
    goog.maybeProcessDeferredDep_ = function(name) {
        if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
            var path = goog.getPathFromDeps_(name);
            goog.maybeProcessDeferredPath_(goog.basePath + path)
        }
    }
    ;
    goog.isDeferredModule_ = function(name) {
        var path = goog.getPathFromDeps_(name);
        var loadFlags = path && goog.dependencies_.loadFlags[path] || {};
        var languageLevel = loadFlags['lang'] || 'es3';
        if (path && (loadFlags['module'] == 'goog' || goog.needsTranspile_(languageLevel))) {
            var abspath = goog.basePath + path;
            return abspath in goog.dependencies_.deferred
        }
        return false
    }
    ;
    goog.allDepsAreAvailable_ = function(name) {
        var path = goog.getPathFromDeps_(name);
        if (path && path in goog.dependencies_.requires)
            for (var requireName in goog.dependencies_.requires[path])
                if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName))
                    return false;
        return true
    }
    ;
    goog.maybeProcessDeferredPath_ = function(abspath) {
        if (abspath in goog.dependencies_.deferred) {
            var src = goog.dependencies_.deferred[abspath];
            delete goog.dependencies_.deferred[abspath];
            goog.globalEval(src)
        }
    }
    ;
    goog.loadModuleFromUrl = function(url) {
        goog.retrieveAndExec_(url, true, false)
    }
    ;
    goog.writeScriptSrcNode_ = function(src) {
        goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + 'script\x3e')
    }
    ;
    goog.appendScriptSrcNode_ = function(src) {
        var doc = goog.global.document;
        var scriptEl = doc.createElement('script');
        scriptEl.type = 'text/javascript';
        scriptEl.src = src;
        scriptEl.defer = false;
        scriptEl.async = false;
        doc.head.appendChild(scriptEl)
    }
    ;
    goog.writeScriptTag_ = function(src, opt_sourceText) {
        if (goog.inHtmlDocument_()) {
            var doc = goog.global.document;
            if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == 'complete') {
                var isDeps = /\bdeps.js$/.test(src);
                if (isDeps)
                    return false;
                else
                    throw new Error('Cannot write "' + src + '" after document load');
            }
            if (opt_sourceText === undefined)
                if (!goog.IS_OLD_IE_)
                    if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING)
                        goog.appendScriptSrcNode_(src);
                    else
                        goog.writeScriptSrcNode_(src);
                else {
                    goog.oldIeWaiting_ = true;
                    var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
                    doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + '\x3e\x3c/' + 'script\x3e')
                }
            else
                doc.write('\x3cscript type\x3d"text/javascript"\x3e' + goog.protectScriptTag_(opt_sourceText) + '\x3c/' + 'script\x3e');
            return true
        } else
            return false
    }
    ;
    goog.protectScriptTag_ = function(str) {
        return str.replace(/<\/(SCRIPT)/ig, '\\x3c/$1')
    }
    ;
    goog.needsTranspile_ = function(lang) {
        if (goog.TRANSPILE == 'always')
            return true;
        else if (goog.TRANSPILE == 'never')
            return false;
        else if (!goog.requiresTranspilation_)
            goog.requiresTranspilation_ = goog.createRequiresTranspilation_();
        if (lang in goog.requiresTranspilation_)
            return goog.requiresTranspilation_[lang];
        else
            throw new Error('Unknown language mode: ' + lang);
    }
    ;
    goog.requiresTranspilation_ = null;
    goog.lastNonModuleScriptIndex_ = 0;
    goog.onScriptLoad_ = function(script, scriptIndex) {
        if (script.readyState == 'complete' && goog.lastNonModuleScriptIndex_ == scriptIndex)
            goog.loadQueuedModules_();
        return true
    }
    ;
    goog.writeScripts_ = function(pathToLoad) {
        var scripts = [];
        var seenScript = {};
        var deps = goog.dependencies_;
        function visitNode(path) {
            if (path in deps.written)
                return;
            if (path in deps.visited)
                return;
            deps.visited[path] = true;
            if (path in deps.requires)
                for (var requireName in deps.requires[path])
                    if (!goog.isProvided_(requireName))
                        if (requireName in deps.nameToPath)
                            visitNode(deps.nameToPath[requireName]);
                        else
                            throw new Error('Undefined nameToPath for ' + requireName);
            if (!(path in seenScript)) {
                seenScript[path] = true;
                scripts.push(path)
            }
        }
        visitNode(pathToLoad);
        for (var i = 0; i < scripts.length; i++) {
            var path = scripts[i];
            goog.dependencies_.written[path] = true
        }
        var moduleState = goog.moduleLoaderState_;
        goog.moduleLoaderState_ = null;
        for (var i = 0; i < scripts.length; i++) {
            var path = scripts[i];
            if (path) {
                var loadFlags = deps.loadFlags[path] || {};
                var languageLevel = loadFlags['lang'] || 'es3';
                var needsTranspile = goog.needsTranspile_(languageLevel);
                if (loadFlags['module'] == 'goog' || needsTranspile)
                    goog.importProcessedScript_(goog.basePath + path, loadFlags['module'] == 'goog', needsTranspile);
                else
                    goog.importScript_(goog.basePath + path)
            } else {
                goog.moduleLoaderState_ = moduleState;
                throw new Error('Undefined script input');
            }
        }
        goog.moduleLoaderState_ = moduleState
    }
    ;
    goog.getPathFromDeps_ = function(rule) {
        if (rule in goog.dependencies_.nameToPath)
            return goog.dependencies_.nameToPath[rule];
        else
            return null
    }
    ;
    goog.findBasePath_();
    if (!goog.global.CLOSURE_NO_DEPS)
        goog.importScript_(goog.basePath + 'deps.js')
}
goog.hasBadLetScoping = null;
goog.useSafari10Workaround = function() {
    if (goog.hasBadLetScoping == null) {
        var hasBadLetScoping;
        try {
            hasBadLetScoping = !eval('"use strict";' + 'let x \x3d 1; function f() { return typeof x; };' + 'f() \x3d\x3d "number";')
        } catch (e) {
            hasBadLetScoping = false
        }
        goog.hasBadLetScoping = hasBadLetScoping
    }
    return goog.hasBadLetScoping
}
;
goog.workaroundSafari10EvalBug = function(moduleDef) {
    return '(function(){' + moduleDef + '\n' + ';' + '})();\n'
}
;
goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
        goog.moduleLoaderState_ = {
            moduleName: undefined,
            declareLegacyNamespace: false
        };
        var exports;
        if (goog.isFunction(moduleDef))
            exports = moduleDef.call(undefined, {});
        else if (goog.isString(moduleDef)) {
            if (goog.useSafari10Workaround())
                moduleDef = goog.workaroundSafari10EvalBug(moduleDef);
            exports = goog.loadModuleFromSource_.call(undefined, moduleDef)
        } else
            throw new Error('Invalid module definition');
        var moduleName = goog.moduleLoaderState_.moduleName;
        if (!goog.isString(moduleName) || !moduleName)
            throw new Error('Invalid module name "' + moduleName + '"');
        if (goog.moduleLoaderState_.declareLegacyNamespace)
            goog.constructNamespace_(moduleName, exports);
        else if (goog.SEAL_MODULE_EXPORTS && Object.seal && typeof exports == 'object' && exports != null)
            Object.seal(exports);
        goog.loadedModules_[moduleName] = exports
    } finally {
        goog.moduleLoaderState_ = previousState
    }
}
;
goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports
}
;
goog.normalizePath_ = function(path) {
    var components = path.split('/');
    var i = 0;
    while (i < components.length)
        if (components[i] == '.')
            components.splice(i, 1);
        else if (i && components[i] == '..' && components[i - 1] && components[i - 1] != '..')
            components.splice(--i, 2);
        else
            i++;
    return components.join('/')
}
;
goog.global.CLOSURE_LOAD_FILE_SYNC;
goog.loadFileSync_ = function(src) {
    if (goog.global.CLOSURE_LOAD_FILE_SYNC)
        return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
    else
        try {
            var xhr = new goog.global['XMLHttpRequest'];
            xhr.open('get', src, false);
            xhr.send();
            return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null
        } catch (err) {
            return null
        }
}
;
goog.retrieveAndExec_ = function(src, isModule, needsTranspile) {
    if (!COMPILED) {
        var originalPath = src;
        src = goog.normalizePath_(src);
        var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
        var scriptText = goog.loadFileSync_(src);
        if (scriptText == null)
            throw new Error('Load of "' + src + '" failed');
        if (needsTranspile)
            scriptText = goog.transpile_.call(goog.global, scriptText, src);
        if (isModule)
            scriptText = goog.wrapModule_(src, scriptText);
        else
            scriptText += '\n//# sourceURL\x3d' + src;
        var isOldIE = goog.IS_OLD_IE_;
        if (isOldIE && goog.oldIeWaiting_) {
            goog.dependencies_.deferred[originalPath] = scriptText;
            goog.queuedModules_.push(originalPath)
        } else
            importScript(src, scriptText)
    }
}
;
goog.transpile_ = function(code, path) {
    var jscomp = goog.global['$jscomp'];
    if (!jscomp)
        goog.global['$jscomp'] = jscomp = {};
    var transpile = jscomp.transpile;
    if (!transpile) {
        var transpilerPath = goog.basePath + goog.TRANSPILER;
        var transpilerCode = goog.loadFileSync_(transpilerPath);
        if (transpilerCode) {
            eval(transpilerCode + '\n//# sourceURL\x3d' + transpilerPath);
            if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp'] && !goog.global['$gwtExport']['$jscomp']['transpile'])
                throw new Error('The transpiler did not properly export the "transpile" ' + 'method. $gwtExport: ' + JSON.stringify(goog.global['$gwtExport']));
            goog.global['$jscomp'].transpile = goog.global['$gwtExport']['$jscomp']['transpile'];
            jscomp = goog.global['$jscomp'];
            transpile = jscomp.transpile
        }
    }
    if (!transpile) {
        var suffix = ' requires transpilation but no transpiler was found.';
        transpile = jscomp.transpile = function(code, path) {
            goog.logToConsole_(path + suffix);
            return code
        }
    }
    return transpile(code, path)
}
;
goog.typeOf = function(value) {
    var s = typeof value;
    if (s == 'object')
        if (value) {
            if (value instanceof Array)
                return 'array';
            else if (value instanceof Object)
                return s;
            var className = Object.prototype.toString.call(value);
            if (className == '[object Window]')
                return 'object';
            if (className == '[object Array]' || typeof value.length == 'number' && typeof value.splice != 'undefined' && typeof value.propertyIsEnumerable != 'undefined' && !value.propertyIsEnumerable('splice'))
                return 'array';
            if (className == '[object Function]' || typeof value.call != 'undefined' && typeof value.propertyIsEnumerable != 'undefined' && !value.propertyIsEnumerable('call'))
                return 'function'
        } else
            return 'null';
    else if (s == 'function' && typeof value.call == 'undefined')
        return 'object';
    return s
}
;
goog.isNull = function(val) {
    return val === null
}
;
goog.isDefAndNotNull = function(val) {
    return val != null
}
;
goog.isArray = function(val) {
    return goog.typeOf(val) == 'array'
}
;
goog.isArrayLike = function(val) {
    var type = goog.typeOf(val);
    return type == 'array' || type == 'object' && typeof val.length == 'number'
}
;
goog.isDateLike = function(val) {
    return goog.isObject(val) && typeof val.getFullYear == 'function'
}
;
goog.isFunction = function(val) {
    return goog.typeOf(val) == 'function'
}
;
goog.isObject = function(val) {
    var type = typeof val;
    return type == 'object' && val != null || type == 'function'
}
;
goog.getUid = function(obj) {
    return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
}
;
goog.hasUid = function(obj) {
    return !!obj[goog.UID_PROPERTY_]
}
;
goog.removeUid = function(obj) {
    if (obj !== null && 'removeAttribute'in obj)
        obj.removeAttribute(goog.UID_PROPERTY_);
    try {
        delete obj[goog.UID_PROPERTY_]
    } catch (ex) {}
}
;
goog.UID_PROPERTY_ = 'closure_uid_' + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
    var type = goog.typeOf(obj);
    if (type == 'object' || type == 'array') {
        if (obj.clone)
            return obj.clone();
        var clone = type == 'array' ? [] : {};
        for (var key in obj)
            clone[key] = goog.cloneObject(obj[key]);
        return clone
    }
    return obj
}
;
goog.bindNative_ = function(fn, selfObj, var_args) {
    return fn.call.apply(fn.bind, arguments)
}
;
goog.bindJs_ = function(fn, selfObj, var_args) {
    if (!fn)
        throw new Error;
    if (arguments.length > 2) {
        var boundArgs = Array.prototype.slice.call(arguments, 2);
        return function() {
            var newArgs = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(newArgs, boundArgs);
            return fn.apply(selfObj, newArgs)
        }
    } else
        return function() {
            return fn.apply(selfObj, arguments)
        }
}
;
goog.bind = function(fn, selfObj, var_args) {
    if (Function.prototype.bind && Function.prototype.bind.toString().indexOf('native code') != -1)
        goog.bind = goog.bindNative_;
    else
        goog.bind = goog.bindJs_;
    return goog.bind.apply(null, arguments)
}
;
goog.partial = function(fn, var_args) {
    var args = Array.prototype.slice.call(arguments, 1);
    return function() {
        var newArgs = args.slice();
        newArgs.push.apply(newArgs, arguments);
        return fn.apply(this, newArgs)
    }
}
;
goog.mixin = function(target, source) {
    for (var x in source)
        target[x] = source[x]
}
;
goog.now = goog.TRUSTED_SITE && Date.now || function() {
    return +new Date
}
;
goog.globalEval = function(script) {
    if (goog.global.execScript)
        goog.global.execScript(script, 'JavaScript');
    else if (goog.global.eval) {
        if (goog.evalWorksForGlobals_ == null) {
            goog.global.eval('var _evalTest_ \x3d 1;');
            if (typeof goog.global['_evalTest_'] != 'undefined') {
                try {
                    delete goog.global['_evalTest_']
                } catch (ignore) {}
                goog.evalWorksForGlobals_ = true
            } else
                goog.evalWorksForGlobals_ = false
        }
        if (goog.evalWorksForGlobals_)
            goog.global.eval(script);
        else {
            var doc = goog.global.document;
            var scriptElt = doc.createElement('SCRIPT');
            scriptElt.type = 'text/javascript';
            scriptElt.defer = false;
            scriptElt.appendChild(doc.createTextNode(script));
            doc.body.appendChild(scriptElt);
            doc.body.removeChild(scriptElt)
        }
    } else
        throw new Error('goog.globalEval not available');
}
;
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.global.CLOSURE_CSS_NAME_MAP_FN;
goog.getCssName = function(className, opt_modifier) {
    if (String(className).charAt(0) == '.')
        throw new Error('className passed in goog.getCssName must not start with ".".' + ' You passed: ' + className);
    var getMapping = function(cssName) {
        return goog.cssNameMapping_[cssName] || cssName
    };
    var renameByParts = function(cssName) {
        var parts = cssName.split('-');
        var mapped = [];
        for (var i = 0; i < parts.length; i++)
            mapped.push(getMapping(parts[i]));
        return mapped.join('-')
    };
    var rename;
    if (goog.cssNameMapping_)
        rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;
    else
        rename = function(a) {
            return a
        }
        ;
    var result = opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);
    if (goog.global.CLOSURE_CSS_NAME_MAP_FN)
        return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);
    return result
}
;
goog.setCssNameMapping = function(mapping, opt_style) {
    goog.cssNameMapping_ = mapping;
    goog.cssNameMappingStyle_ = opt_style
}
;
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING)
    goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
goog.getMsg = function(str, opt_values) {
    if (opt_values)
        str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
            return opt_values != null && key in opt_values ? opt_values[key] : match
        });
    return str
}
;
goog.getMsgWithFallback = function(a, b) {
    return a
}
;
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
    goog.exportPath_(publicPath, object, opt_objectToExportTo)
}
;
goog.exportProperty = function(object, publicName, symbol) {
    object[publicName] = symbol
}
;
goog.inherits = function(childCtor, parentCtor) {
    function tempCtor() {}
    tempCtor.prototype = parentCtor.prototype;
    childCtor.superClass_ = parentCtor.prototype;
    childCtor.prototype = new tempCtor;
    childCtor.prototype.constructor = childCtor;
    childCtor.base = function(me, methodName, var_args) {
        var args = new Array(arguments.length - 2);
        for (var i = 2; i < arguments.length; i++)
            args[i - 2] = arguments[i];
        return parentCtor.prototype[methodName].apply(me, args)
    }
}
;
goog.base = function(me, opt_methodName, var_args) {
    var caller = arguments.callee.caller;
    if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller)
        throw new Error('arguments.caller not defined.  goog.base() cannot be used ' + 'with strict mode code. See ' + 'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
    if (caller.superClass_) {
        var ctorArgs = new Array(arguments.length - 1);
        for (var i = 1; i < arguments.length; i++)
            ctorArgs[i - 1] = arguments[i];
        return caller.superClass_.constructor.apply(me, ctorArgs)
    }
    var args = new Array(arguments.length - 2);
    for (var i = 2; i < arguments.length; i++)
        args[i - 2] = arguments[i];
    var foundCaller = false;
    for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor)
        if (ctor.prototype[opt_methodName] === caller)
            foundCaller = true;
        else if (foundCaller)
            return ctor.prototype[opt_methodName].apply(me, args);
    if (me[opt_methodName] === caller)
        return me.constructor.prototype[opt_methodName].apply(me, args);
    else
        throw new Error('goog.base called from a method of one name ' + 'to a method of a different name');
}
;
goog.scope = function(fn) {
    if (goog.isInModuleLoader_())
        throw new Error('goog.scope is not supported within a goog.module.');
    fn.call(goog.global)
}
;
if (!COMPILED)
    goog.global['COMPILED'] = COMPILED;
goog.defineClass = function(superClass, def) {
    var constructor = def.constructor;
    var statics = def.statics;
    if (!constructor || constructor == Object.prototype.constructor)
        constructor = function() {
            throw new Error('cannot instantiate an interface (no constructor defined).');
        }
        ;
    var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
    if (superClass)
        goog.inherits(cls, superClass);
    delete def.constructor;
    delete def.statics;
    goog.defineClass.applyProperties_(cls.prototype, def);
    if (statics != null)
        if (statics instanceof Function)
            statics(cls);
        else
            goog.defineClass.applyProperties_(cls, statics);
    return cls
}
;
goog.defineClass.ClassDescriptor;
goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
    if (!goog.defineClass.SEAL_CLASS_INSTANCES)
        return ctr;
    var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
    var wrappedCtr = function() {
        var instance = ctr.apply(this, arguments) || this;
        instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
        if (this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function)
            Object.seal(instance);
        return instance
    };
    return wrappedCtr
}
;
goog.defineClass.isUnsealable_ = function(ctr) {
    return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]
}
;
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
goog.defineClass.applyProperties_ = function(target, source) {
    var key;
    for (key in source)
        if (Object.prototype.hasOwnProperty.call(source, key))
            target[key] = source[key];
    for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
        key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
        if (Object.prototype.hasOwnProperty.call(source, key))
            target[key] = source[key]
    }
}
;
goog.tagUnsealableClass = function(ctr) {
    if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES)
        ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true
}
;
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';
goog.createRequiresTranspilation_ = function() {
    var requiresTranspilation = {
        'es3': false
    };
    var transpilationRequiredForAllLaterModes = false;
    function addNewerLanguageTranspilationCheck(modeName, isSupported) {
        if (transpilationRequiredForAllLaterModes)
            requiresTranspilation[modeName] = true;
        else if (isSupported())
            requiresTranspilation[modeName] = false;
        else {
            requiresTranspilation[modeName] = true;
            transpilationRequiredForAllLaterModes = true
        }
    }
    function evalCheck(code) {
        try {
            return !!eval(code)
        } catch (ignored) {
            return false
        }
    }
    var userAgent = goog.global.navigator && goog.global.navigator.userAgent ? goog.global.navigator.userAgent : '';
    addNewerLanguageTranspilationCheck('es5', function() {
        return evalCheck('[1,].length\x3d\x3d1')
    });
    addNewerLanguageTranspilationCheck('es6', function() {
        var re = /Edge\/(\d+)(\.\d)*/i;
        var edgeUserAgent = userAgent.match(re);
        if (edgeUserAgent && Number(edgeUserAgent[1]) < 15)
            return false;
        var es6fullTest = 'class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}' + 'let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof ' + 'String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function ' + 'f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()' + '\x3d\x3d3}';
        return evalCheck('(()\x3d\x3e{"use strict";' + es6fullTest + '})()')
    });
    addNewerLanguageTranspilationCheck('es6-impl', function() {
        return true
    });
    addNewerLanguageTranspilationCheck('es7', function() {
        return evalCheck('2 ** 2 \x3d\x3d 4')
    });
    addNewerLanguageTranspilationCheck('es8', function() {
        return evalCheck('async () \x3d\x3e 1, true')
    });
    return requiresTranspilation
}
;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
goog.object = {};
goog.object.is = function(v, v2) {
    if (v === v2)
        return v !== 0 || 1 / v === 1 / v2;
    return v !== v && v2 !== v2
}
;
goog.object.forEach = function(obj, f, opt_obj) {
    for (var key in obj)
        f.call(opt_obj, obj[key], key, obj)
}
;
goog.object.filter = function(obj, f, opt_obj) {
    var res = {};
    for (var key in obj)
        if (f.call(opt_obj, obj[key], key, obj))
            res[key] = obj[key];
    return res
}
;
goog.object.map = function(obj, f, opt_obj) {
    var res = {};
    for (var key in obj)
        res[key] = f.call(opt_obj, obj[key], key, obj);
    return res
}
;
goog.object.some = function(obj, f, opt_obj) {
    for (var key in obj)
        if (f.call(opt_obj, obj[key], key, obj))
            return true;
    return false
}
;
goog.object.every = function(obj, f, opt_obj) {
    for (var key in obj)
        if (!f.call(opt_obj, obj[key], key, obj))
            return false;
    return true
}
;
goog.object.getCount = function(obj) {
    var rv = 0;
    for (var key in obj)
        rv++;
    return rv
}
;
goog.object.getAnyKey = function(obj) {
    for (var key in obj)
        return key
}
;
goog.object.getAnyValue = function(obj) {
    for (var key in obj)
        return obj[key]
}
;
goog.object.contains = function(obj, val) {
    return goog.object.containsValue(obj, val)
}
;
goog.object.getValues = function(obj) {
    var res = [];
    var i = 0;
    for (var key in obj)
        res[i++] = obj[key];
    return res
}
;
goog.object.getKeys = function(obj) {
    var res = [];
    var i = 0;
    for (var key in obj)
        res[i++] = key;
    return res
}
;
goog.object.getValueByKeys = function(obj, var_args) {
    var isArrayLike = goog.isArrayLike(var_args);
    var keys = isArrayLike ? var_args : arguments;
    for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {
        if (obj == null)
            return undefined;
        obj = obj[keys[i]]
    }
    return obj
}
;
goog.object.containsKey = function(obj, key) {
    return obj !== null && key in obj
}
;
goog.object.containsValue = function(obj, val) {
    for (var key in obj)
        if (obj[key] == val)
            return true;
    return false
}
;
goog.object.findKey = function(obj, f, opt_this) {
    for (var key in obj)
        if (f.call(opt_this, obj[key], key, obj))
            return key;
    return undefined
}
;
goog.object.findValue = function(obj, f, opt_this) {
    var key = goog.object.findKey(obj, f, opt_this);
    return key && obj[key]
}
;
goog.object.isEmpty = function(obj) {
    for (var key in obj)
        return false;
    return true
}
;
goog.object.clear = function(obj) {
    for (var i in obj)
        delete obj[i]
}
;
goog.object.remove = function(obj, key) {
    var rv;
    if (rv = key in obj)
        delete obj[key];
    return rv
}
;
goog.object.add = function(obj, key, val) {
    if (obj !== null && key in obj)
        throw new Error('The object already contains the key "' + key + '"');
    goog.object.set(obj, key, val)
}
;
goog.object.get = function(obj, key, opt_val) {
    if (obj !== null && key in obj)
        return obj[key];
    return opt_val
}
;
goog.object.set = function(obj, key, value) {
    obj[key] = value
}
;
goog.object.setIfUndefined = function(obj, key, value) {
    return key in obj ? obj[key] : obj[key] = value
}
;
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
    if (key in obj)
        return obj[key];
    var val = f();
    obj[key] = val;
    return val
}
;
goog.object.equals = function(a, b) {
    for (var k in a)
        if (!(k in b) || a[k] !== b[k])
            return false;
    for (var k in b)
        if (!(k in a))
            return false;
    return true
}
;
goog.object.clone = function(obj) {
    var res = {};
    for (var key in obj)
        res[key] = obj[key];
    return res
}
;
goog.object.unsafeClone = function(obj) {
    var type = goog.typeOf(obj);
    if (type == 'object' || type == 'array') {
        if (goog.isFunction(obj.clone))
            return obj.clone();
        var clone = type == 'array' ? [] : {};
        for (var key in obj)
            clone[key] = goog.object.unsafeClone(obj[key]);
        return clone
    }
    return obj
}
;
goog.object.transpose = function(obj) {
    var transposed = {};
    for (var key in obj)
        transposed[obj[key]] = key;
    return transposed
}
;
goog.object.PROTOTYPE_FIELDS_ = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
goog.object.extend = function(target, var_args) {
    var key, source;
    for (var i = 1; i < arguments.length; i++) {
        source = arguments[i];
        for (key in source)
            target[key] = source[key];
        for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
            key = goog.object.PROTOTYPE_FIELDS_[j];
            if (Object.prototype.hasOwnProperty.call(source, key))
                target[key] = source[key]
        }
    }
}
;
goog.object.create = function(var_args) {
    var argLength = arguments.length;
    if (argLength == 1 && goog.isArray(arguments[0]))
        return goog.object.create.apply(null, arguments[0]);
    if (argLength % 2)
        throw new Error('Uneven number of arguments');
    var rv = {};
    for (var i = 0; i < argLength; i += 2)
        rv[arguments[i]] = arguments[i + 1];
    return rv
}
;
goog.object.createSet = function(var_args) {
    var argLength = arguments.length;
    if (argLength == 1 && goog.isArray(arguments[0]))
        return goog.object.createSet.apply(null, arguments[0]);
    var rv = {};
    for (var i = 0; i < argLength; i++)
        rv[arguments[i]] = true;
    return rv
}
;
goog.object.createImmutableView = function(obj) {
    var result = obj;
    if (Object.isFrozen && !Object.isFrozen(obj)) {
        result = Object.create(obj);
        Object.freeze(result)
    }
    return result
}
;
goog.object.isImmutableView = function(obj) {
    return !!Object.isFrozen && Object.isFrozen(obj)
}
;
goog.object.getAllPropertyNames = function(obj, opt_includeObjectPrototype, opt_includeFunctionPrototype) {
    if (!obj)
        return [];
    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf)
        return goog.object.getKeys(obj);
    var visitedSet = {};
    var proto = obj;
    while (proto && (proto !== Object.prototype || !!opt_includeObjectPrototype) && (proto !== Function.prototype || !!opt_includeFunctionPrototype)) {
        var names = Object.getOwnPropertyNames(proto);
        for (var i = 0; i < names.length; i++)
            visitedSet[names[i]] = true;
        proto = Object.getPrototypeOf(proto)
    }
    return goog.object.getKeys(visitedSet)
}
;
goog.events = {};
goog.events.EventId = function(eventId) {
    this.id = eventId
}
;
goog.events.EventId.prototype.toString = function() {
    return this.id
}
;
goog.events.Listenable = function() {}
;
goog.events.Listenable.IMPLEMENTED_BY_PROP = 'closure_listenable_' + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
    cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true
}
;
goog.events.Listenable.isImplementedBy = function(obj) {
    return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP])
}
;
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {}
;
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
    return ++goog.events.ListenableKey.counter_
}
;
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
    if (goog.events.Listener.ENABLE_MONITORING)
        this.creationStack = (new Error).stack;
    this.listener = listener;
    this.proxy = proxy;
    this.src = src;
    this.type = type;
    this.capture = !!capture;
    this.handler = opt_handler;
    this.key = goog.events.ListenableKey.reserveKey();
    this.callOnce = false;
    this.removed = false
}
;
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
    this.removed = true;
    this.listener = null;
    this.proxy = null;
    this.src = null;
    this.handler = null
}
;
goog.string = {};
goog.string.DETECT_DOUBLE_ESCAPING = false;
goog.string.FORCE_NON_DOM_HTML_UNESCAPING = false;
goog.string.Unicode = {
    NBSP: '\u00a0'
};
goog.string.startsWith = function(str, prefix) {
    return str.lastIndexOf(prefix, 0) == 0
}
;
goog.string.endsWith = function(str, suffix) {
    var l = str.length - suffix.length;
    return l >= 0 && str.indexOf(suffix, l) == l
}
;
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
    return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0
}
;
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
    return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0
}
;
goog.string.caseInsensitiveEquals = function(str1, str2) {
    return str1.toLowerCase() == str2.toLowerCase()
}
;
goog.string.subs = function(str, var_args) {
    var splitParts = str.split('%s');
    var returnString = '';
    var subsArguments = Array.prototype.slice.call(arguments, 1);
    while (subsArguments.length && splitParts.length > 1)
        returnString += splitParts.shift() + subsArguments.shift();
    return returnString + splitParts.join('%s')
}
;
goog.string.collapseWhitespace = function(str) {
    return str.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '')
}
;
goog.string.isEmptyOrWhitespace = function(str) {
    return /^[\s\xa0]*$/.test(str)
}
;
goog.string.isEmptyString = function(str) {
    return str.length == 0
}
;
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
    return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))
}
;
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
    return !/[^\t\n\r ]/.test(str)
}
;
goog.string.isAlpha = function(str) {
    return !/[^a-zA-Z]/.test(str)
}
;
goog.string.isNumeric = function(str) {
    return !/[^0-9]/.test(str)
}
;
goog.string.isAlphaNumeric = function(str) {
    return !/[^a-zA-Z0-9]/.test(str)
}
;
goog.string.isSpace = function(ch) {
    return ch == ' '
}
;
goog.string.isUnicodeChar = function(ch) {
    return ch.length == 1 && ch >= ' ' && ch <= '~' || ch >= '\u0080' && ch <= '\ufffd'
}
;
goog.string.stripNewlines = function(str) {
    return str.replace(/(\r\n|\r|\n)+/g, ' ')
}
;
goog.string.canonicalizeNewlines = function(str) {
    return str.replace(/(\r\n|\r|\n)/g, '\n')
}
;
goog.string.normalizeWhitespace = function(str) {
    return str.replace(/\xa0|\s/g, ' ')
}
;
goog.string.normalizeSpaces = function(str) {
    return str.replace(/\xa0|[ \t]+/g, ' ')
}
;
goog.string.collapseBreakingSpaces = function(str) {
    return str.replace(/[\t\r\n ]+/g, ' ').replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, '')
}
;
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
    return str.trim()
}
: function(str) {
    return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '')
}
;
goog.string.trimLeft = function(str) {
    return str.replace(/^[\s\xa0]+/, '')
}
;
goog.string.trimRight = function(str) {
    return str.replace(/[\s\xa0]+$/, '')
}
;
goog.string.caseInsensitiveCompare = function(str1, str2) {
    var test1 = String(str1).toLowerCase();
    var test2 = String(str2).toLowerCase();
    if (test1 < test2)
        return -1;
    else if (test1 == test2)
        return 0;
    else
        return 1
}
;
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
    if (str1 == str2)
        return 0;
    if (!str1)
        return -1;
    if (!str2)
        return 1;
    var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
    var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
    var count = Math.min(tokens1.length, tokens2.length);
    for (var i = 0; i < count; i++) {
        var a = tokens1[i];
        var b = tokens2[i];
        if (a != b) {
            var num1 = parseInt(a, 10);
            if (!isNaN(num1)) {
                var num2 = parseInt(b, 10);
                if (!isNaN(num2) && num1 - num2)
                    return num1 - num2
            }
            return a < b ? -1 : 1
        }
    }
    if (tokens1.length != tokens2.length)
        return tokens1.length - tokens2.length;
    return str1 < str2 ? -1 : 1
}
;
goog.string.intAwareCompare = function(str1, str2) {
    return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g)
}
;
goog.string.floatAwareCompare = function(str1, str2) {
    return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g)
}
;
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
    return encodeURIComponent(String(str))
}
;
goog.string.urlDecode = function(str) {
    return decodeURIComponent(str.replace(/\+/g, ' '))
}
;
goog.string.newLineToBr = function(str, opt_xml) {
    return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '\x3cbr /\x3e' : '\x3cbr\x3e')
}
;
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
    if (opt_isLikelyToContainHtmlChars) {
        str = str.replace(goog.string.AMP_RE_, '\x26amp;').replace(goog.string.LT_RE_, '\x26lt;').replace(goog.string.GT_RE_, '\x26gt;').replace(goog.string.QUOT_RE_, '\x26quot;').replace(goog.string.SINGLE_QUOTE_RE_, '\x26#39;').replace(goog.string.NULL_RE_, '\x26#0;');
        if (goog.string.DETECT_DOUBLE_ESCAPING)
            str = str.replace(goog.string.E_RE_, '\x26#101;');
        return str
    } else {
        if (!goog.string.ALL_RE_.test(str))
            return str;
        if (str.indexOf('\x26') != -1)
            str = str.replace(goog.string.AMP_RE_, '\x26amp;');
        if (str.indexOf('\x3c') != -1)
            str = str.replace(goog.string.LT_RE_, '\x26lt;');
        if (str.indexOf('\x3e') != -1)
            str = str.replace(goog.string.GT_RE_, '\x26gt;');
        if (str.indexOf('"') != -1)
            str = str.replace(goog.string.QUOT_RE_, '\x26quot;');
        if (str.indexOf("'") != -1)
            str = str.replace(goog.string.SINGLE_QUOTE_RE_, '\x26#39;');
        if (str.indexOf('\x00') != -1)
            str = str.replace(goog.string.NULL_RE_, '\x26#0;');
        if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf('e') != -1)
            str = str.replace(goog.string.E_RE_, '\x26#101;');
        return str
    }
}
;
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
    if (goog.string.contains(str, '\x26'))
        if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && 'document'in goog.global)
            return goog.string.unescapeEntitiesUsingDom_(str);
        else
            return goog.string.unescapePureXmlEntities_(str);
    return str
}
;
goog.string.unescapeEntitiesWithDocument = function(str, document) {
    if (goog.string.contains(str, '\x26'))
        return goog.string.unescapeEntitiesUsingDom_(str, document);
    return str
}
;
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
    var seen = {
        '\x26amp;': '\x26',
        '\x26lt;': '\x3c',
        '\x26gt;': '\x3e',
        '\x26quot;': '"'
    };
    var div;
    if (opt_document)
        div = opt_document.createElement('div');
    else
        div = goog.global.document.createElement('div');
    return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
        var value = seen[s];
        if (value)
            return value;
        if (entity.charAt(0) == '#') {
            var n = Number('0' + entity.substr(1));
            if (!isNaN(n))
                value = String.fromCharCode(n)
        }
        if (!value) {
            div.innerHTML = s + ' ';
            value = div.firstChild.nodeValue.slice(0, -1)
        }
        return seen[s] = value
    })
}
;
goog.string.unescapePureXmlEntities_ = function(str) {
    return str.replace(/&([^;]+);/g, function(s, entity) {
        switch (entity) {
        case 'amp':
            return '\x26';
        case 'lt':
            return '\x3c';
        case 'gt':
            return '\x3e';
        case 'quot':
            return '"';
        default:
            if (entity.charAt(0) == '#') {
                var n = Number('0' + entity.substr(1));
                if (!isNaN(n))
                    return String.fromCharCode(n)
            }
            return s
        }
    })
}
;
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
    return goog.string.newLineToBr(str.replace(/  /g, ' \x26#160;'), opt_xml)
}
;
goog.string.preserveSpaces = function(str) {
    return str.replace(/(^|[\n ]) /g, '$1' + goog.string.Unicode.NBSP)
}
;
goog.string.stripQuotes = function(str, quoteChars) {
    var length = quoteChars.length;
    for (var i = 0; i < length; i++) {
        var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
        if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar)
            return str.substring(1, str.length - 1)
    }
    return str
}
;
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
    if (opt_protectEscapedCharacters)
        str = goog.string.unescapeEntities(str);
    if (str.length > chars)
        str = str.substring(0, chars - 3) + '...';
    if (opt_protectEscapedCharacters)
        str = goog.string.htmlEscape(str);
    return str
}
;
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
    if (opt_protectEscapedCharacters)
        str = goog.string.unescapeEntities(str);
    if (opt_trailingChars && str.length > chars) {
        if (opt_trailingChars > chars)
            opt_trailingChars = chars;
        var endPoint = str.length - opt_trailingChars;
        var startPoint = chars - opt_trailingChars;
        str = str.substring(0, startPoint) + '...' + str.substring(endPoint)
    } else if (str.length > chars) {
        var half = Math.floor(chars / 2);
        var endPos = str.length - half;
        half += chars % 2;
        str = str.substring(0, half) + '...' + str.substring(endPos)
    }
    if (opt_protectEscapedCharacters)
        str = goog.string.htmlEscape(str);
    return str
}
;
goog.string.specialEscapeChars_ = {
    '\x00': '\\0',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\x0B': '\\x0B',
    '"': '\\"',
    '\\': '\\\\',
    '\x3c': '\x3c'
};
goog.string.jsEscapeCache_ = {
    "'": "\\'"
};
goog.string.quote = function(s) {
    s = String(s);
    var sb = ['"'];
    for (var i = 0; i < s.length; i++) {
        var ch = s.charAt(i);
        var cc = ch.charCodeAt(0);
        sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch))
    }
    sb.push('"');
    return sb.join('')
}
;
goog.string.escapeString = function(str) {
    var sb = [];
    for (var i = 0; i < str.length; i++)
        sb[i] = goog.string.escapeChar(str.charAt(i));
    return sb.join('')
}
;
goog.string.escapeChar = function(c) {
    if (c in goog.string.jsEscapeCache_)
        return goog.string.jsEscapeCache_[c];
    if (c in goog.string.specialEscapeChars_)
        return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
    var rv = c;
    var cc = c.charCodeAt(0);
    if (cc > 31 && cc < 127)
        rv = c;
    else {
        if (cc < 256) {
            rv = '\\x';
            if (cc < 16 || cc > 256)
                rv += '0'
        } else {
            rv = '\\u';
            if (cc < 4096)
                rv += '0'
        }
        rv += cc.toString(16).toUpperCase()
    }
    return goog.string.jsEscapeCache_[c] = rv
}
;
goog.string.contains = function(str, subString) {
    return str.indexOf(subString) != -1
}
;
goog.string.caseInsensitiveContains = function(str, subString) {
    return goog.string.contains(str.toLowerCase(), subString.toLowerCase())
}
;
goog.string.countOf = function(s, ss) {
    return s && ss ? s.split(ss).length - 1 : 0
}
;
goog.string.removeAt = function(s, index, stringLength) {
    var resultStr = s;
    if (index >= 0 && index < s.length && stringLength > 0)
        resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
    return resultStr
}
;
goog.string.remove = function(str, substr) {
    return str.replace(substr, '')
}
;
goog.string.removeAll = function(s, ss) {
    var re = new RegExp(goog.string.regExpEscape(ss),'g');
    return s.replace(re, '')
}
;
goog.string.replaceAll = function(s, ss, replacement) {
    var re = new RegExp(goog.string.regExpEscape(ss),'g');
    return s.replace(re, replacement.replace(/\$/g, '$$$$'))
}
;
goog.string.regExpEscape = function(s) {
    return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08')
}
;
goog.string.repeat = String.prototype.repeat ? function(string, length) {
    return string.repeat(length)
}
: function(string, length) {
    return (new Array(length + 1)).join(string)
}
;
goog.string.padNumber = function(num, length, opt_precision) {
    var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
    var index = s.indexOf('.');
    if (index == -1)
        index = s.length;
    return goog.string.repeat('0', Math.max(0, length - index)) + s
}
;
goog.string.makeSafe = function(obj) {
    return obj == null ? '' : String(obj)
}
;
goog.string.buildString = function(var_args) {
    return Array.prototype.join.call(arguments, '')
}
;
goog.string.getRandomString = function() {
    var x = 2147483648;
    return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36)
}
;
goog.string.compareVersions = function(version1, version2) {
    var order = 0;
    var v1Subs = goog.string.trim(String(version1)).split('.');
    var v2Subs = goog.string.trim(String(version2)).split('.');
    var subCount = Math.max(v1Subs.length, v2Subs.length);
    for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
        var v1Sub = v1Subs[subIdx] || '';
        var v2Sub = v2Subs[subIdx] || '';
        do {
            var v1Comp = /(\d*)(\D*)(.*)/.exec(v1Sub) || ['', '', '', ''];
            var v2Comp = /(\d*)(\D*)(.*)/.exec(v2Sub) || ['', '', '', ''];
            if (v1Comp[0].length == 0 && v2Comp[0].length == 0)
                break;
            var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
            var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
            order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
            v1Sub = v1Comp[3];
            v2Sub = v2Comp[3]
        } while (order == 0)
    }
    return order
}
;
goog.string.compareElements_ = function(left, right) {
    if (left < right)
        return -1;
    else if (left > right)
        return 1;
    return 0
}
;
goog.string.hashCode = function(str) {
    var result = 0;
    for (var i = 0; i < str.length; ++i)
        result = 31 * result + str.charCodeAt(i) >>> 0;
    return result
}
;
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
    return 'goog_' + goog.string.uniqueStringCounter_++
}
;
goog.string.toNumber = function(str) {
    var num = Number(str);
    if (num == 0 && goog.string.isEmptyOrWhitespace(str))
        return NaN;
    return num
}
;
goog.string.isLowerCamelCase = function(str) {
    return /^[a-z]+([A-Z][a-z]*)*$/.test(str)
}
;
goog.string.isUpperCamelCase = function(str) {
    return /^([A-Z][a-z]*)+$/.test(str)
}
;
goog.string.toCamelCase = function(str) {
    return String(str).replace(/\-([a-z])/g, function(all, match) {
        return match.toUpperCase()
    })
}
;
goog.string.toSelectorCase = function(str) {
    return String(str).replace(/([A-Z])/g, '-$1').toLowerCase()
}
;
goog.string.toTitleCase = function(str, opt_delimiters) {
    var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : '\\s';
    delimiters = delimiters ? '|[' + delimiters + ']+' : '';
    var regexp = new RegExp('(^' + delimiters + ')([a-z])','g');
    return str.replace(regexp, function(all, p1, p2) {
        return p1 + p2.toUpperCase()
    })
}
;
goog.string.capitalize = function(str) {
    return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase()
}
;
goog.string.parseInt = function(value) {
    if (isFinite(value))
        value = String(value);
    if (goog.isString(value))
        return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
    return NaN
}
;
goog.string.splitLimit = function(str, separator, limit) {
    var parts = str.split(separator);
    var returnVal = [];
    while (limit > 0 && parts.length) {
        returnVal.push(parts.shift());
        limit--
    }
    if (parts.length)
        returnVal.push(parts.join(separator));
    return returnVal
}
;
goog.string.lastComponent = function(str, separators) {
    if (!separators)
        return str;
    else if (typeof separators == 'string')
        separators = [separators];
    var lastSeparatorIndex = -1;
    for (var i = 0; i < separators.length; i++) {
        if (separators[i] == '')
            continue;
        var currentSeparatorIndex = str.lastIndexOf(separators[i]);
        if (currentSeparatorIndex > lastSeparatorIndex)
            lastSeparatorIndex = currentSeparatorIndex
    }
    if (lastSeparatorIndex == -1)
        return str;
    return str.slice(lastSeparatorIndex + 1)
}
;
goog.string.editDistance = function(a, b) {
    var v0 = [];
    var v1 = [];
    if (a == b)
        return 0;
    if (!a.length || !b.length)
        return Math.max(a.length, b.length);
    for (var i = 0; i < b.length + 1; i++)
        v0[i] = i;
    for (var i = 0; i < a.length; i++) {
        v1[0] = i + 1;
        for (var j = 0; j < b.length; j++) {
            var cost = Number(a[i] != b[j]);
            v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost)
        }
        for (var j = 0; j < v0.length; j++)
            v0[j] = v1[j]
    }
    return v1[b.length]
}
;
goog.dom = {};
goog.dom.NodeType = {
    ELEMENT: 1,
    ATTRIBUTE: 2,
    TEXT: 3,
    CDATA_SECTION: 4,
    ENTITY_REFERENCE: 5,
    ENTITY: 6,
    PROCESSING_INSTRUCTION: 7,
    COMMENT: 8,
    DOCUMENT: 9,
    DOCUMENT_TYPE: 10,
    DOCUMENT_FRAGMENT: 11,
    NOTATION: 12
};
goog.debug = {};
goog.debug.Error = function(opt_msg) {
    if (Error.captureStackTrace)
        Error.captureStackTrace(this, goog.debug.Error);
    else {
        var stack = (new Error).stack;
        if (stack)
            this.stack = stack
    }
    if (opt_msg)
        this.message = String(opt_msg);
    this.reportErrorToServer = true
}
;
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = 'CustomError';
goog.asserts = {};
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
    messageArgs.unshift(messagePattern);
    goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
    messageArgs.shift();
    this.messagePattern = messagePattern
}
;
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = 'AssertionError';
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
    throw e;
}
;
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
    var message = 'Assertion failed';
    if (givenMessage) {
        message += ': ' + givenMessage;
        var args = givenArgs
    } else if (defaultMessage) {
        message += ': ' + defaultMessage;
        args = defaultArgs
    }
    var e = new goog.asserts.AssertionError('' + message,args || []);
    goog.asserts.errorHandler_(e)
}
;
goog.asserts.setErrorHandler = function(errorHandler) {
    if (goog.asserts.ENABLE_ASSERTS)
        goog.asserts.errorHandler_ = errorHandler
}
;
goog.asserts.assert = function(condition, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !condition)
        goog.asserts.doAssertFailure_('', null, opt_message, Array.prototype.slice.call(arguments, 2));
    return condition
}
;
goog.asserts.fail = function(opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS)
        goog.asserts.errorHandler_(new goog.asserts.AssertionError('Failure' + (opt_message ? ': ' + opt_message : ''),Array.prototype.slice.call(arguments, 1)))
}
;
goog.asserts.assertNumber = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value))
        goog.asserts.doAssertFailure_('Expected number but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertString = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value))
        goog.asserts.doAssertFailure_('Expected string but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertFunction = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value))
        goog.asserts.doAssertFailure_('Expected function but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertObject = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value))
        goog.asserts.doAssertFailure_('Expected object but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertArray = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value))
        goog.asserts.doAssertFailure_('Expected array but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value))
        goog.asserts.doAssertFailure_('Expected boolean but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertElement = function(value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT))
        goog.asserts.doAssertFailure_('Expected Element but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    return value
}
;
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type))
        goog.asserts.doAssertFailure_('Expected instanceof %s but got %s.', [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
    return value
}
;
goog.asserts.assertObjectPrototypeIsIntact = function() {
    for (var key in Object.prototype)
        goog.asserts.fail(key + ' should not be enumerable in Object.prototype.')
}
;
goog.asserts.getType_ = function(value) {
    if (value instanceof Function)
        return value.displayName || value.name || 'unknown type name';
    else if (value instanceof Object)
        return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    else
        return value === null ? 'null' : typeof value
}
;
goog.array = {};
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ASSUME_NATIVE_FUNCTIONS = false;
goog.array.peek = function(array) {
    return array[array.length - 1]
}
;
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(arr, obj, opt_fromIndex) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.indexOf.call(arr, obj, opt_fromIndex)
}
: function(arr, obj, opt_fromIndex) {
    var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
    if (goog.isString(arr)) {
        if (!goog.isString(obj) || obj.length != 1)
            return -1;
        return arr.indexOf(obj, fromIndex)
    }
    for (var i = fromIndex; i < arr.length; i++)
        if (i in arr && arr[i] === obj)
            return i;
    return -1
}
;
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
    goog.asserts.assert(arr.length != null);
    var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
    return Array.prototype.lastIndexOf.call(arr, obj, fromIndex)
}
: function(arr, obj, opt_fromIndex) {
    var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
    if (fromIndex < 0)
        fromIndex = Math.max(0, arr.length + fromIndex);
    if (goog.isString(arr)) {
        if (!goog.isString(obj) || obj.length != 1)
            return -1;
        return arr.lastIndexOf(obj, fromIndex)
    }
    for (var i = fromIndex; i >= 0; i--)
        if (i in arr && arr[i] === obj)
            return i;
    return -1
}
;
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(arr, f, opt_obj) {
    goog.asserts.assert(arr.length != null);
    Array.prototype.forEach.call(arr, f, opt_obj)
}
: function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2)
            f.call(opt_obj, arr2[i], i, arr)
}
;
goog.array.forEachRight = function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = l - 1; i >= 0; --i)
        if (i in arr2)
            f.call(opt_obj, arr2[i], i, arr)
}
;
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(arr, f, opt_obj) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.filter.call(arr, f, opt_obj)
}
: function(arr, f, opt_obj) {
    var l = arr.length;
    var res = [];
    var resLength = 0;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2) {
            var val = arr2[i];
            if (f.call(opt_obj, val, i, arr))
                res[resLength++] = val
        }
    return res
}
;
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(arr, f, opt_obj) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.map.call(arr, f, opt_obj)
}
: function(arr, f, opt_obj) {
    var l = arr.length;
    var res = new Array(l);
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2)
            res[i] = f.call(opt_obj, arr2[i], i, arr);
    return res
}
;
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(arr, f, val, opt_obj) {
    goog.asserts.assert(arr.length != null);
    if (opt_obj)
        f = goog.bind(f, opt_obj);
    return Array.prototype.reduce.call(arr, f, val)
}
: function(arr, f, val, opt_obj) {
    var rval = val;
    goog.array.forEach(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr)
    });
    return rval
}
;
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(arr, f, val, opt_obj) {
    goog.asserts.assert(arr.length != null);
    goog.asserts.assert(f != null);
    if (opt_obj)
        f = goog.bind(f, opt_obj);
    return Array.prototype.reduceRight.call(arr, f, val)
}
: function(arr, f, val, opt_obj) {
    var rval = val;
    goog.array.forEachRight(arr, function(val, index) {
        rval = f.call(opt_obj, rval, val, index, arr)
    });
    return rval
}
;
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(arr, f, opt_obj) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.some.call(arr, f, opt_obj)
}
: function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr))
            return true;
    return false
}
;
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(arr, f, opt_obj) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.every.call(arr, f, opt_obj)
}
: function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr))
            return false;
    return true
}
;
goog.array.count = function(arr, f, opt_obj) {
    var count = 0;
    goog.array.forEach(arr, function(element, index, arr) {
        if (f.call(opt_obj, element, index, arr))
            ++count
    }, opt_obj);
    return count
}
;
goog.array.find = function(arr, f, opt_obj) {
    var i = goog.array.findIndex(arr, f, opt_obj);
    return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
}
;
goog.array.findIndex = function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++)
        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr))
            return i;
    return -1
}
;
goog.array.findRight = function(arr, f, opt_obj) {
    var i = goog.array.findIndexRight(arr, f, opt_obj);
    return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
}
;
goog.array.findIndexRight = function(arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = l - 1; i >= 0; i--)
        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr))
            return i;
    return -1
}
;
goog.array.contains = function(arr, obj) {
    return goog.array.indexOf(arr, obj) >= 0
}
;
goog.array.isEmpty = function(arr) {
    return arr.length == 0
}
;
goog.array.clear = function(arr) {
    if (!goog.isArray(arr))
        for (var i = arr.length - 1; i >= 0; i--)
            delete arr[i];
    arr.length = 0
}
;
goog.array.insert = function(arr, obj) {
    if (!goog.array.contains(arr, obj))
        arr.push(obj)
}
;
goog.array.insertAt = function(arr, obj, opt_i) {
    goog.array.splice(arr, opt_i, 0, obj)
}
;
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
    goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
}
;
goog.array.insertBefore = function(arr, obj, opt_obj2) {
    var i;
    if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0)
        arr.push(obj);
    else
        goog.array.insertAt(arr, obj, i)
}
;
goog.array.remove = function(arr, obj) {
    var i = goog.array.indexOf(arr, obj);
    var rv;
    if (rv = i >= 0)
        goog.array.removeAt(arr, i);
    return rv
}
;
goog.array.removeLast = function(arr, obj) {
    var i = goog.array.lastIndexOf(arr, obj);
    if (i >= 0) {
        goog.array.removeAt(arr, i);
        return true
    }
    return false
}
;
goog.array.removeAt = function(arr, i) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.splice.call(arr, i, 1).length == 1
}
;
goog.array.removeIf = function(arr, f, opt_obj) {
    var i = goog.array.findIndex(arr, f, opt_obj);
    if (i >= 0) {
        goog.array.removeAt(arr, i);
        return true
    }
    return false
}
;
goog.array.removeAllIf = function(arr, f, opt_obj) {
    var removedCount = 0;
    goog.array.forEachRight(arr, function(val, index) {
        if (f.call(opt_obj, val, index, arr))
            if (goog.array.removeAt(arr, index))
                removedCount++
    });
    return removedCount
}
;
goog.array.concat = function(var_args) {
    return Array.prototype.concat.apply([], arguments)
}
;
goog.array.join = function(var_args) {
    return Array.prototype.concat.apply([], arguments)
}
;
goog.array.toArray = function(object) {
    var length = object.length;
    if (length > 0) {
        var rv = new Array(length);
        for (var i = 0; i < length; i++)
            rv[i] = object[i];
        return rv
    }
    return []
}
;
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
    for (var i = 1; i < arguments.length; i++) {
        var arr2 = arguments[i];
        if (goog.isArrayLike(arr2)) {
            var len1 = arr1.length || 0;
            var len2 = arr2.length || 0;
            arr1.length = len1 + len2;
            for (var j = 0; j < len2; j++)
                arr1[len1 + j] = arr2[j]
        } else
            arr1.push(arr2)
    }
}
;
goog.array.splice = function(arr, index, howMany, var_args) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1))
}
;
goog.array.slice = function(arr, start, opt_end) {
    goog.asserts.assert(arr.length != null);
    if (arguments.length <= 2)
        return Array.prototype.slice.call(arr, start);
    else
        return Array.prototype.slice.call(arr, start, opt_end)
}
;
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
    var returnArray = opt_rv || arr;
    var defaultHashFn = function(item) {
        return goog.isObject(item) ? 'o' + goog.getUid(item) : (typeof item).charAt(0) + item
    };
    var hashFn = opt_hashFn || defaultHashFn;
    var seen = {}
      , cursorInsert = 0
      , cursorRead = 0;
    while (cursorRead < arr.length) {
        var current = arr[cursorRead++];
        var key = hashFn(current);
        if (!Object.prototype.hasOwnProperty.call(seen, key)) {
            seen[key] = true;
            returnArray[cursorInsert++] = current
        }
    }
    returnArray.length = cursorInsert
}
;
goog.array.binarySearch = function(arr, target, opt_compareFn) {
    return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target)
}
;
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
    return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj)
}
;
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
    var left = 0;
    var right = arr.length;
    var found;
    while (left < right) {
        var middle = left + right >> 1;
        var compareResult;
        if (isEvaluator)
            compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
        else
            compareResult = compareFn(opt_target, arr[middle]);
        if (compareResult > 0)
            left = middle + 1;
        else {
            right = middle;
            found = !compareResult
        }
    }
    return found ? left : ~left
}
;
goog.array.sort = function(arr, opt_compareFn) {
    arr.sort(opt_compareFn || goog.array.defaultCompare)
}
;
goog.array.stableSort = function(arr, opt_compareFn) {
    var compArr = new Array(arr.length);
    for (var i = 0; i < arr.length; i++)
        compArr[i] = {
            index: i,
            value: arr[i]
        };
    var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
    function stableCompareFn(obj1, obj2) {
        return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
    }
    goog.array.sort(compArr, stableCompareFn);
    for (var i = 0; i < arr.length; i++)
        arr[i] = compArr[i].value
}
;
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
    var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
    goog.array.sort(arr, function(a, b) {
        return keyCompareFn(keyFn(a), keyFn(b))
    })
}
;
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
    goog.array.sortByKey(arr, function(obj) {
        return obj[key]
    }, opt_compareFn)
}
;
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
    var compare = opt_compareFn || goog.array.defaultCompare;
    for (var i = 1; i < arr.length; i++) {
        var compareResult = compare(arr[i - 1], arr[i]);
        if (compareResult > 0 || compareResult == 0 && opt_strict)
            return false
    }
    return true
}
;
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
    if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length)
        return false;
    var l = arr1.length;
    var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
    for (var i = 0; i < l; i++)
        if (!equalsFn(arr1[i], arr2[i]))
            return false;
    return true
}
;
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
    var compare = opt_compareFn || goog.array.defaultCompare;
    var l = Math.min(arr1.length, arr2.length);
    for (var i = 0; i < l; i++) {
        var result = compare(arr1[i], arr2[i]);
        if (result != 0)
            return result
    }
    return goog.array.defaultCompare(arr1.length, arr2.length)
}
;
goog.array.defaultCompare = function(a, b) {
    return a > b ? 1 : a < b ? -1 : 0
}
;
goog.array.inverseDefaultCompare = function(a, b) {
    return -goog.array.defaultCompare(a, b)
}
;
goog.array.defaultCompareEquality = function(a, b) {
    return a === b
}
;
goog.array.binaryInsert = function(array, value, opt_compareFn) {
    var index = goog.array.binarySearch(array, value, opt_compareFn);
    if (index < 0) {
        goog.array.insertAt(array, value, -(index + 1));
        return true
    }
    return false
}
;
goog.array.binaryRemove = function(array, value, opt_compareFn) {
    var index = goog.array.binarySearch(array, value, opt_compareFn);
    return index >= 0 ? goog.array.removeAt(array, index) : false
}
;
goog.array.bucket = function(array, sorter, opt_obj) {
    var buckets = {};
    for (var i = 0; i < array.length; i++) {
        var value = array[i];
        var key = sorter.call(opt_obj, value, i, array);
        if (goog.isDef(key)) {
            var bucket = buckets[key] || (buckets[key] = []);
            bucket.push(value)
        }
    }
    return buckets
}
;
goog.array.toObject = function(arr, keyFunc, opt_obj) {
    var ret = {};
    goog.array.forEach(arr, function(element, index) {
        ret[keyFunc.call(opt_obj, element, index, arr)] = element
    });
    return ret
}
;
goog.array.range = function(startOrEnd, opt_end, opt_step) {
    var array = [];
    var start = 0;
    var end = startOrEnd;
    var step = opt_step || 1;
    if (opt_end !== undefined) {
        start = startOrEnd;
        end = opt_end
    }
    if (step * (end - start) < 0)
        return [];
    if (step > 0)
        for (var i = start; i < end; i += step)
            array.push(i);
    else
        for (var i = start; i > end; i += step)
            array.push(i);
    return array
}
;
goog.array.repeat = function(value, n) {
    var array = [];
    for (var i = 0; i < n; i++)
        array[i] = value;
    return array
}
;
goog.array.flatten = function(var_args) {
    var CHUNK_SIZE = 8192;
    var result = [];
    for (var i = 0; i < arguments.length; i++) {
        var element = arguments[i];
        if (goog.isArray(element))
            for (var c = 0; c < element.length; c += CHUNK_SIZE) {
                var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
                var recurseResult = goog.array.flatten.apply(null, chunk);
                for (var r = 0; r < recurseResult.length; r++)
                    result.push(recurseResult[r])
            }
        else
            result.push(element)
    }
    return result
}
;
goog.array.rotate = function(array, n) {
    goog.asserts.assert(array.length != null);
    if (array.length) {
        n %= array.length;
        if (n > 0)
            Array.prototype.unshift.apply(array, array.splice(-n, n));
        else if (n < 0)
            Array.prototype.push.apply(array, array.splice(0, -n))
    }
    return array
}
;
goog.array.moveItem = function(arr, fromIndex, toIndex) {
    goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
    goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
    var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
    Array.prototype.splice.call(arr, toIndex, 0, removedItems[0])
}
;
goog.array.zip = function(var_args) {
    if (!arguments.length)
        return [];
    var result = [];
    var minLen = arguments[0].length;
    for (var i = 1; i < arguments.length; i++)
        if (arguments[i].length < minLen)
            minLen = arguments[i].length;
    for (var i = 0; i < minLen; i++) {
        var value = [];
        for (var j = 0; j < arguments.length; j++)
            value.push(arguments[j][i]);
        result.push(value)
    }
    return result
}
;
goog.array.shuffle = function(arr, opt_randFn) {
    var randFn = opt_randFn || Math.random;
    for (var i = arr.length - 1; i > 0; i--) {
        var j = Math.floor(randFn() * (i + 1));
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp
    }
}
;
goog.array.copyByIndex = function(arr, index_arr) {
    var result = [];
    goog.array.forEach(index_arr, function(index) {
        result.push(arr[index])
    });
    return result
}
;
goog.array.concatMap = function(arr, f, opt_obj) {
    return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj))
}
;
goog.events.ListenerMap = function(src) {
    this.src = src;
    this.listeners = {};
    this.typeCount_ = 0
}
;
goog.events.ListenerMap.prototype.getTypeCount = function() {
    return this.typeCount_
}
;
goog.events.ListenerMap.prototype.getListenerCount = function() {
    var count = 0;
    for (var type in this.listeners)
        count += this.listeners[type].length;
    return count
}
;
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    var typeStr = type.toString();
    var listenerArray = this.listeners[typeStr];
    if (!listenerArray) {
        listenerArray = this.listeners[typeStr] = [];
        this.typeCount_++
    }
    var listenerObj;
    var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
        listenerObj = listenerArray[index];
        if (!callOnce)
            listenerObj.callOnce = false
    } else {
        listenerObj = new goog.events.Listener(listener,null,this.src,typeStr,!!opt_useCapture,opt_listenerScope);
        listenerObj.callOnce = callOnce;
        listenerArray.push(listenerObj)
    }
    return listenerObj
}
;
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
    var typeStr = type.toString();
    if (!(typeStr in this.listeners))
        return false;
    var listenerArray = this.listeners[typeStr];
    var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
        var listenerObj = listenerArray[index];
        listenerObj.markAsRemoved();
        goog.array.removeAt(listenerArray, index);
        if (listenerArray.length == 0) {
            delete this.listeners[typeStr];
            this.typeCount_--
        }
        return true
    }
    return false
}
;
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
    var type = listener.type;
    if (!(type in this.listeners))
        return false;
    var removed = goog.array.remove(this.listeners[type], listener);
    if (removed) {
        listener.markAsRemoved();
        if (this.listeners[type].length == 0) {
            delete this.listeners[type];
            this.typeCount_--
        }
    }
    return removed
}
;
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
    var typeStr = opt_type && opt_type.toString();
    var count = 0;
    for (var type in this.listeners)
        if (!typeStr || type == typeStr) {
            var listenerArray = this.listeners[type];
            for (var i = 0; i < listenerArray.length; i++) {
                ++count;
                listenerArray[i].markAsRemoved()
            }
            delete this.listeners[type];
            this.typeCount_--
        }
    return count
}
;
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
    var listenerArray = this.listeners[type.toString()];
    var rv = [];
    if (listenerArray)
        for (var i = 0; i < listenerArray.length; ++i) {
            var listenerObj = listenerArray[i];
            if (listenerObj.capture == capture)
                rv.push(listenerObj)
        }
    return rv
}
;
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.listeners[type.toString()];
    var i = -1;
    if (listenerArray)
        i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    return i > -1 ? listenerArray[i] : null
}
;
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var typeStr = hasType ? opt_type.toString() : '';
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.listeners, function(listenerArray, type) {
        for (var i = 0; i < listenerArray.length; ++i)
            if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture))
                return true;
        return false
    })
}
;
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0; i < listenerArray.length; ++i) {
        var listenerObj = listenerArray[i];
        if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)
            return i
    }
    return -1
}
;
goog.disposable = {};
goog.disposable.IDisposable = function() {}
;
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.Disposable = function() {
    this.creationStack;
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
        if (goog.Disposable.INCLUDE_STACK_ON_CREATION)
            this.creationStack = (new Error).stack;
        goog.Disposable.instances_[goog.getUid(this)] = this
    }
    this.disposed_ = this.disposed_;
    this.onDisposeCallbacks_ = this.onDisposeCallbacks_
}
;
goog.Disposable.MonitoringMode = {
    OFF: 0,
    PERMANENT: 1,
    INTERACTIVE: 2
};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.INCLUDE_STACK_ON_CREATION = true;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
    var ret = [];
    for (var id in goog.Disposable.instances_)
        if (goog.Disposable.instances_.hasOwnProperty(id))
            ret.push(goog.Disposable.instances_[Number(id)]);
    return ret
}
;
goog.Disposable.clearUndisposedObjects = function() {
    goog.Disposable.instances_ = {}
}
;
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.isDisposed = function() {
    return this.disposed_
}
;
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
    if (!this.disposed_) {
        this.disposed_ = true;
        this.disposeInternal();
        if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
            var uid = goog.getUid(this);
            if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid))
                throw new Error(this + ' did not call the goog.Disposable base ' + 'constructor or was disposed of after a clearUndisposedObjects ' + 'call');
            delete goog.Disposable.instances_[uid]
        }
    }
}
;
goog.Disposable.prototype.registerDisposable = function(disposable) {
    this.addOnDisposeCallback(goog.partial(goog.dispose, disposable))
}
;
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
    if (this.disposed_) {
        goog.isDef(opt_scope) ? callback.call(opt_scope) : callback();
        return
    }
    if (!this.onDisposeCallbacks_)
        this.onDisposeCallbacks_ = [];
    this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback)
}
;
goog.Disposable.prototype.disposeInternal = function() {
    if (this.onDisposeCallbacks_)
        while (this.onDisposeCallbacks_.length)
            this.onDisposeCallbacks_.shift()()
}
;
goog.Disposable.isDisposed = function(obj) {
    if (obj && typeof obj.isDisposed == 'function')
        return obj.isDisposed();
    return false
}
;
goog.dispose = function(obj) {
    if (obj && typeof obj.dispose == 'function')
        obj.dispose()
}
;
goog.disposeAll = function(var_args) {
    for (var i = 0, len = arguments.length; i < len; ++i) {
        var disposable = arguments[i];
        if (goog.isArrayLike(disposable))
            goog.disposeAll.apply(null, disposable);
        else
            goog.dispose(disposable)
    }
}
;
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
    this.type = type instanceof goog.events.EventId ? String(type) : type;
    this.target = opt_target;
    this.currentTarget = this.target;
    this.propagationStopped_ = false;
    this.defaultPrevented = false;
    this.returnValue_ = true
}
;
goog.events.Event.prototype.stopPropagation = function() {
    this.propagationStopped_ = true
}
;
goog.events.Event.prototype.preventDefault = function() {
    this.defaultPrevented = true;
    this.returnValue_ = false
}
;
goog.events.Event.stopPropagation = function(e) {
    e.stopPropagation()
}
;
goog.events.Event.preventDefault = function(e) {
    e.preventDefault()
}
;
goog.reflect = {};
goog.reflect.object = function(type, object) {
    return object
}
;
goog.reflect.objectProperty = function(prop, object) {
    return prop
}
;
goog.reflect.sinkValue = function(x) {
    goog.reflect.sinkValue[' '](x);
    return x
}
;
goog.reflect.sinkValue[' '] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
    try {
        goog.reflect.sinkValue(obj[prop]);
        return true
    } catch (e) {}
    return false
}
;
goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
    var storedKey = opt_keyFn ? opt_keyFn(key) : key;
    if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey))
        return cacheObj[storedKey];
    return cacheObj[storedKey] = valueFn(key)
}
;
goog.labs = {};
goog.labs.userAgent = {};
goog.labs.userAgent.util = {};
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
    var navigator = goog.labs.userAgent.util.getNavigator_();
    if (navigator) {
        var userAgent = navigator.userAgent;
        if (userAgent)
            return userAgent
    }
    return ''
}
;
goog.labs.userAgent.util.getNavigator_ = function() {
    return goog.global.navigator
}
;
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
    goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_()
}
;
goog.labs.userAgent.util.getUserAgent = function() {
    return goog.labs.userAgent.util.userAgent_
}
;
goog.labs.userAgent.util.matchUserAgent = function(str) {
    var userAgent = goog.labs.userAgent.util.getUserAgent();
    return goog.string.contains(userAgent, str)
}
;
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
    var userAgent = goog.labs.userAgent.util.getUserAgent();
    return goog.string.caseInsensitiveContains(userAgent, str)
}
;
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
    var versionRegExp = new RegExp('(\\w[\\w ]+)' + '/' + '([^\\s]+)' + '\\s*' + '(?:\\((.*?)\\))?','g');
    var data = [];
    var match;
    while (match = versionRegExp.exec(userAgent))
        data.push([match[1], match[2], match[3] || undefined]);
    return data
}
;
goog.labs.userAgent.platform = {};
goog.labs.userAgent.platform.isAndroid = function() {
    return goog.labs.userAgent.util.matchUserAgent('Android')
}
;
goog.labs.userAgent.platform.isIpod = function() {
    return goog.labs.userAgent.util.matchUserAgent('iPod')
}
;
goog.labs.userAgent.platform.isIphone = function() {
    return goog.labs.userAgent.util.matchUserAgent('iPhone') && !goog.labs.userAgent.util.matchUserAgent('iPod') && !goog.labs.userAgent.util.matchUserAgent('iPad')
}
;
goog.labs.userAgent.platform.isIpad = function() {
    return goog.labs.userAgent.util.matchUserAgent('iPad')
}
;
goog.labs.userAgent.platform.isIos = function() {
    return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod()
}
;
goog.labs.userAgent.platform.isMacintosh = function() {
    return goog.labs.userAgent.util.matchUserAgent('Macintosh')
}
;
goog.labs.userAgent.platform.isLinux = function() {
    return goog.labs.userAgent.util.matchUserAgent('Linux')
}
;
goog.labs.userAgent.platform.isWindows = function() {
    return goog.labs.userAgent.util.matchUserAgent('Windows')
}
;
goog.labs.userAgent.platform.isChromeOS = function() {
    return goog.labs.userAgent.util.matchUserAgent('CrOS')
}
;
goog.labs.userAgent.platform.getVersion = function() {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    var version = '', re;
    if (goog.labs.userAgent.platform.isWindows()) {
        re = /Windows (?:NT|Phone) ([0-9.]+)/;
        var match = re.exec(userAgentString);
        if (match)
            version = match[1];
        else
            version = '0.0'
    } else if (goog.labs.userAgent.platform.isIos()) {
        re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
        var match = re.exec(userAgentString);
        version = match && match[1].replace(/_/g, '.')
    } else if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, '.') : '10'
    } else if (goog.labs.userAgent.platform.isAndroid()) {
        re = /Android\s+([^\);]+)(\)|;)/;
        var match = re.exec(userAgentString);
        version = match && match[1]
    } else if (goog.labs.userAgent.platform.isChromeOS()) {
        re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
        var match = re.exec(userAgentString);
        version = match && match[1]
    }
    return version || ''
}
;
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
    return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0
}
;
goog.labs.userAgent.engine = {};
goog.labs.userAgent.engine.isPresto = function() {
    return goog.labs.userAgent.util.matchUserAgent('Presto')
}
;
goog.labs.userAgent.engine.isTrident = function() {
    return goog.labs.userAgent.util.matchUserAgent('Trident') || goog.labs.userAgent.util.matchUserAgent('MSIE')
}
;
goog.labs.userAgent.engine.isEdge = function() {
    return goog.labs.userAgent.util.matchUserAgent('Edge')
}
;
goog.labs.userAgent.engine.isWebKit = function() {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase('WebKit') && !goog.labs.userAgent.engine.isEdge()
}
;
goog.labs.userAgent.engine.isGecko = function() {
    return goog.labs.userAgent.util.matchUserAgent('Gecko') && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge()
}
;
goog.labs.userAgent.engine.getVersion = function() {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    if (userAgentString) {
        var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
        var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
        if (engineTuple) {
            if (engineTuple[0] == 'Gecko')
                return goog.labs.userAgent.engine.getVersionForKey_(tuples, 'Firefox');
            return engineTuple[1]
        }
        var browserTuple = tuples[0];
        var info;
        if (browserTuple && (info = browserTuple[2])) {
            var match = /Trident\/([^\s;]+)/.exec(info);
            if (match)
                return match[1]
        }
    }
    return ''
}
;
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
    if (!goog.labs.userAgent.engine.isEdge())
        return tuples[1];
    for (var i = 0; i < tuples.length; i++) {
        var tuple = tuples[i];
        if (tuple[0] == 'Edge')
            return tuple
    }
}
;
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
    return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0
}
;
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
    var pair = goog.array.find(tuples, function(pair) {
        return key == pair[0]
    });
    return pair && pair[1] || ''
}
;
goog.labs.userAgent.browser = {};
goog.labs.userAgent.browser.matchOpera_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Opera')
}
;
goog.labs.userAgent.browser.matchIE_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Trident') || goog.labs.userAgent.util.matchUserAgent('MSIE')
}
;
goog.labs.userAgent.browser.matchEdge_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Edge')
}
;
goog.labs.userAgent.browser.matchFirefox_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Firefox')
}
;
goog.labs.userAgent.browser.matchSafari_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Safari') && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent('Android'))
}
;
goog.labs.userAgent.browser.matchCoast_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Coast')
}
;
goog.labs.userAgent.browser.matchIosWebview_ = function() {
    return (goog.labs.userAgent.util.matchUserAgent('iPad') || goog.labs.userAgent.util.matchUserAgent('iPhone')) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent('AppleWebKit')
}
;
goog.labs.userAgent.browser.matchChrome_ = function() {
    return (goog.labs.userAgent.util.matchUserAgent('Chrome') || goog.labs.userAgent.util.matchUserAgent('CriOS')) && !goog.labs.userAgent.browser.matchEdge_()
}
;
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
    return goog.labs.userAgent.util.matchUserAgent('Android') && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk())
}
;
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
    return goog.labs.userAgent.util.matchUserAgent('Silk')
}
;
goog.labs.userAgent.browser.getVersion = function() {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    if (goog.labs.userAgent.browser.isIE())
        return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
    var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var versionMap = {};
    goog.array.forEach(versionTuples, function(tuple) {
        var key = tuple[0];
        var value = tuple[1];
        versionMap[key] = value
    });
    var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
    function lookUpValueWithKeys(keys) {
        var key = goog.array.find(keys, versionMapHasKey);
        return versionMap[key] || ''
    }
    if (goog.labs.userAgent.browser.isOpera())
        return lookUpValueWithKeys(['Version', 'Opera']);
    if (goog.labs.userAgent.browser.isEdge())
        return lookUpValueWithKeys(['Edge']);
    if (goog.labs.userAgent.browser.isChrome())
        return lookUpValueWithKeys(['Chrome', 'CriOS']);
    var tuple = versionTuples[2];
    return tuple && tuple[1] || ''
}
;
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
    return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0
}
;
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
    var rv = /rv: *([\d\.]*)/.exec(userAgent);
    if (rv && rv[1])
        return rv[1];
    var version = '';
    var msie = /MSIE +([\d\.]+)/.exec(userAgent);
    if (msie && msie[1]) {
        var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
        if (msie[1] == '7.0')
            if (tridentVersion && tridentVersion[1])
                switch (tridentVersion[1]) {
                case '4.0':
                    version = '8.0';
                    break;
                case '5.0':
                    version = '9.0';
                    break;
                case '6.0':
                    version = '10.0';
                    break;
                case '7.0':
                    version = '11.0';
                    break
                }
            else
                version = '7.0';
        else
            version = msie[1]
    }
    return version
}
;
goog.userAgent = {};
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_EDGE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
    return goog.labs.userAgent.util.getUserAgent()
}
;
goog.userAgent.getNavigator = function() {
    return goog.global['navigator'] || null
}
;
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
    return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent('Mobile')
}
;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
    var navigator = goog.userAgent.getNavigator();
    return navigator && navigator.platform || ''
}
;
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.ASSUME_IPOD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
    return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS()
}
;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
    var navigator = goog.userAgent.getNavigator();
    return !!navigator && goog.string.contains(navigator['appVersion'] || '', 'X11')
}
;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
goog.userAgent.determineVersion_ = function() {
    var version = '';
    var arr = goog.userAgent.getVersionRegexResult_();
    if (arr)
        version = arr ? arr[1] : '';
    if (goog.userAgent.IE) {
        var docMode = goog.userAgent.getDocumentMode_();
        if (docMode != null && docMode > parseFloat(version))
            return String(docMode)
    }
    return version
}
;
goog.userAgent.getVersionRegexResult_ = function() {
    var userAgent = goog.userAgent.getUserAgentString();
    if (goog.userAgent.GECKO)
        return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
    if (goog.userAgent.EDGE)
        return /Edge\/([\d\.]+)/.exec(userAgent);
    if (goog.userAgent.IE)
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
    if (goog.userAgent.WEBKIT)
        return /WebKit\/(\S+)/.exec(userAgent);
    if (goog.userAgent.OPERA)
        return /(?:Version)[ \/]?(\S+)/.exec(userAgent);
    return undefined
}
;
goog.userAgent.getDocumentMode_ = function() {
    var doc = goog.global['document'];
    return doc ? doc['documentMode'] : undefined
}
;
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
    return goog.string.compareVersions(v1, v2)
}
;
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
    return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, version, function() {
        return goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0
    })
}
;
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
    return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode
}
;
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
    var doc = goog.global['document'];
    var mode = goog.userAgent.getDocumentMode_();
    if (!doc || !goog.userAgent.IE)
        return undefined;
    return mode || (doc['compatMode'] == 'CSS1Compat' ? parseInt(goog.userAgent.VERSION, 10) : 5)
}();
$jscomp.scope.purify = function(fn) {
    return {
        valueOf: fn
    }.valueOf()
}
;
goog.events.BrowserFeature = {
    HAS_W3C_BUTTON: !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),
    HAS_W3C_EVENT_SUPPORT: !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),
    SET_KEY_CODE_TO_PREVENT_DEFAULT: goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),
    HAS_NAVIGATOR_ONLINE_PROPERTY: !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher('528'),
    HAS_HTML5_NETWORK_EVENT_SUPPORT: goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9b') || goog.userAgent.IE && goog.userAgent.isVersionOrHigher('8') || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher('9.5') || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('528'),
    HTML5_NETWORK_EVENTS_FIRE_ON_BODY: goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher('8') || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),
    TOUCH_ENABLED: 'ontouchstart'in goog.global || !!(goog.global['document'] && document.documentElement && 'ontouchstart'in document.documentElement) || !!(goog.global['navigator'] && (goog.global['navigator']['maxTouchPoints'] || goog.global['navigator']['msMaxTouchPoints'])),
    POINTER_EVENTS: 'PointerEvent'in goog.global,
    MSPOINTER_EVENTS: 'MSPointerEvent'in goog.global && !!(goog.global['navigator'] && goog.global['navigator']['msPointerEnabled']),
    PASSIVE_EVENTS: (0,
    $jscomp.scope.purify)(function() {
        if (!goog.global.addEventListener || !Object.defineProperty)
            return false;
        var passive = false;
        var options = Object.defineProperty({}, 'passive', {
            get: function() {
                passive = true
            }
        });
        goog.global.addEventListener('test', goog.nullFunction, options);
        goog.global.removeEventListener('test', goog.nullFunction, options);
        return passive
    })
};
goog.events.getVendorPrefixedName_ = function(eventName) {
    return goog.userAgent.WEBKIT ? 'webkit' + eventName : goog.userAgent.OPERA ? 'o' + eventName.toLowerCase() : eventName.toLowerCase()
}
;
goog.events.EventType = {
    CLICK: 'click',
    RIGHTCLICK: 'rightclick',
    DBLCLICK: 'dblclick',
    MOUSEDOWN: 'mousedown',
    MOUSEUP: 'mouseup',
    MOUSEOVER: 'mouseover',
    MOUSEOUT: 'mouseout',
    MOUSEMOVE: 'mousemove',
    MOUSEENTER: 'mouseenter',
    MOUSELEAVE: 'mouseleave',
    SELECTIONCHANGE: 'selectionchange',
    SELECTSTART: 'selectstart',
    WHEEL: 'wheel',
    KEYPRESS: 'keypress',
    KEYDOWN: 'keydown',
    KEYUP: 'keyup',
    BLUR: 'blur',
    FOCUS: 'focus',
    DEACTIVATE: 'deactivate',
    FOCUSIN: goog.userAgent.IE ? 'focusin' : 'DOMFocusIn',
    FOCUSOUT: goog.userAgent.IE ? 'focusout' : 'DOMFocusOut',
    CHANGE: 'change',
    RESET: 'reset',
    SELECT: 'select',
    SUBMIT: 'submit',
    INPUT: 'input',
    PROPERTYCHANGE: 'propertychange',
    DRAGSTART: 'dragstart',
    DRAG: 'drag',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DRAGLEAVE: 'dragleave',
    DROP: 'drop',
    DRAGEND: 'dragend',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    TOUCHCANCEL: 'touchcancel',
    BEFOREUNLOAD: 'beforeunload',
    CONSOLEMESSAGE: 'consolemessage',
    CONTEXTMENU: 'contextmenu',
    DEVICEMOTION: 'devicemotion',
    DEVICEORIENTATION: 'deviceorientation',
    DOMCONTENTLOADED: 'DOMContentLoaded',
    ERROR: 'error',
    HELP: 'help',
    LOAD: 'load',
    LOSECAPTURE: 'losecapture',
    ORIENTATIONCHANGE: 'orientationchange',
    READYSTATECHANGE: 'readystatechange',
    RESIZE: 'resize',
    SCROLL: 'scroll',
    UNLOAD: 'unload',
    CANPLAY: 'canplay',
    CANPLAYTHROUGH: 'canplaythrough',
    DURATIONCHANGE: 'durationchange',
    EMPTIED: 'emptied',
    ENDED: 'ended',
    LOADEDDATA: 'loadeddata',
    LOADEDMETADATA: 'loadedmetadata',
    PAUSE: 'pause',
    PLAY: 'play',
    PLAYING: 'playing',
    RATECHANGE: 'ratechange',
    SEEKED: 'seeked',
    SEEKING: 'seeking',
    STALLED: 'stalled',
    SUSPEND: 'suspend',
    TIMEUPDATE: 'timeupdate',
    VOLUMECHANGE: 'volumechange',
    WAITING: 'waiting',
    SOURCEOPEN: 'sourceopen',
    SOURCEENDED: 'sourceended',
    SOURCECLOSED: 'sourceclosed',
    ABORT: 'abort',
    UPDATE: 'update',
    UPDATESTART: 'updatestart',
    UPDATEEND: 'updateend',
    HASHCHANGE: 'hashchange',
    PAGEHIDE: 'pagehide',
    PAGESHOW: 'pageshow',
    POPSTATE: 'popstate',
    COPY: 'copy',
    PASTE: 'paste',
    CUT: 'cut',
    BEFORECOPY: 'beforecopy',
    BEFORECUT: 'beforecut',
    BEFOREPASTE: 'beforepaste',
    ONLINE: 'online',
    OFFLINE: 'offline',
    MESSAGE: 'message',
    CONNECT: 'connect',
    INSTALL: 'install',
    ACTIVATE: 'activate',
    FETCH: 'fetch',
    FOREIGNFETCH: 'foreignfetch',
    MESSAGEERROR: 'messageerror',
    STATECHANGE: 'statechange',
    UPDATEFOUND: 'updatefound',
    CONTROLLERCHANGE: 'controllerchange',
    ANIMATIONSTART: goog.events.getVendorPrefixedName_('AnimationStart'),
    ANIMATIONEND: goog.events.getVendorPrefixedName_('AnimationEnd'),
    ANIMATIONITERATION: goog.events.getVendorPrefixedName_('AnimationIteration'),
    TRANSITIONEND: goog.events.getVendorPrefixedName_('TransitionEnd'),
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTERCANCEL: 'pointercancel',
    POINTERMOVE: 'pointermove',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    GOTPOINTERCAPTURE: 'gotpointercapture',
    LOSTPOINTERCAPTURE: 'lostpointercapture',
    MSGESTURECHANGE: 'MSGestureChange',
    MSGESTUREEND: 'MSGestureEnd',
    MSGESTUREHOLD: 'MSGestureHold',
    MSGESTURESTART: 'MSGestureStart',
    MSGESTURETAP: 'MSGestureTap',
    MSGOTPOINTERCAPTURE: 'MSGotPointerCapture',
    MSINERTIASTART: 'MSInertiaStart',
    MSLOSTPOINTERCAPTURE: 'MSLostPointerCapture',
    MSPOINTERCANCEL: 'MSPointerCancel',
    MSPOINTERDOWN: 'MSPointerDown',
    MSPOINTERENTER: 'MSPointerEnter',
    MSPOINTERHOVER: 'MSPointerHover',
    MSPOINTERLEAVE: 'MSPointerLeave',
    MSPOINTERMOVE: 'MSPointerMove',
    MSPOINTEROUT: 'MSPointerOut',
    MSPOINTEROVER: 'MSPointerOver',
    MSPOINTERUP: 'MSPointerUp',
    TEXT: 'text',
    TEXTINPUT: goog.userAgent.IE ? 'textinput' : 'textInput',
    COMPOSITIONSTART: 'compositionstart',
    COMPOSITIONUPDATE: 'compositionupdate',
    COMPOSITIONEND: 'compositionend',
    BEFOREINPUT: 'beforeinput',
    EXIT: 'exit',
    LOADABORT: 'loadabort',
    LOADCOMMIT: 'loadcommit',
    LOADREDIRECT: 'loadredirect',
    LOADSTART: 'loadstart',
    LOADSTOP: 'loadstop',
    RESPONSIVE: 'responsive',
    SIZECHANGED: 'sizechanged',
    UNRESPONSIVE: 'unresponsive',
    VISIBILITYCHANGE: 'visibilitychange',
    STORAGE: 'storage',
    DOMSUBTREEMODIFIED: 'DOMSubtreeModified',
    DOMNODEINSERTED: 'DOMNodeInserted',
    DOMNODEREMOVED: 'DOMNodeRemoved',
    DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',
    DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',
    DOMATTRMODIFIED: 'DOMAttrModified',
    DOMCHARACTERDATAMODIFIED: 'DOMCharacterDataModified',
    BEFOREPRINT: 'beforeprint',
    AFTERPRINT: 'afterprint'
};
goog.events.getPointerFallbackEventName_ = function(pointerEventName, msPointerEventName, mouseEventName) {
    if (goog.events.BrowserFeature.POINTER_EVENTS)
        return pointerEventName;
    if (goog.events.BrowserFeature.MSPOINTER_EVENTS)
        return msPointerEventName;
    return mouseEventName
}
;
goog.events.PointerFallbackEventType = {
    POINTERDOWN: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERDOWN, goog.events.EventType.MSPOINTERDOWN, goog.events.EventType.MOUSEDOWN),
    POINTERUP: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERUP, goog.events.EventType.MSPOINTERUP, goog.events.EventType.MOUSEUP),
    POINTERCANCEL: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERCANCEL, goog.events.EventType.MSPOINTERCANCEL, 'mousecancel'),
    POINTERMOVE: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERMOVE, goog.events.EventType.MSPOINTERMOVE, goog.events.EventType.MOUSEMOVE),
    POINTEROVER: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROVER, goog.events.EventType.MSPOINTEROVER, goog.events.EventType.MOUSEOVER),
    POINTEROUT: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROUT, goog.events.EventType.MSPOINTEROUT, goog.events.EventType.MOUSEOUT),
    POINTERENTER: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERENTER, goog.events.EventType.MSPOINTERENTER, goog.events.EventType.MOUSEENTER),
    POINTERLEAVE: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERLEAVE, goog.events.EventType.MSPOINTERLEAVE, goog.events.EventType.MOUSELEAVE)
};
goog.debug.errorcontext = {};
goog.debug.errorcontext.addErrorContext = function(err, contextKey, contextValue) {
    if (!err[goog.debug.errorcontext.CONTEXT_KEY_])
        err[goog.debug.errorcontext.CONTEXT_KEY_] = {};
    err[goog.debug.errorcontext.CONTEXT_KEY_][contextKey] = contextValue
}
;
goog.debug.errorcontext.getErrorContext = function(err) {
    return err[goog.debug.errorcontext.CONTEXT_KEY_] || {}
}
;
goog.debug.errorcontext.CONTEXT_KEY_ = '__closure__error__context__984382';
goog.debug.LOGGING_ENABLED = goog.DEBUG;
goog.debug.FORCE_SLOPPY_STACKS = false;
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
    var target = opt_target || goog.global;
    var oldErrorHandler = target.onerror;
    var retVal = !!opt_cancel;
    if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher('535.3'))
        retVal = !retVal;
    target.onerror = function(message, url, line, opt_col, opt_error) {
        if (oldErrorHandler)
            oldErrorHandler(message, url, line, opt_col, opt_error);
        logFunc({
            message: message,
            fileName: url,
            line: line,
            col: opt_col,
            error: opt_error
        });
        return retVal
    }
}
;
goog.debug.expose = function(obj, opt_showFn) {
    if (typeof obj == 'undefined')
        return 'undefined';
    if (obj == null)
        return 'NULL';
    var str = [];
    for (var x in obj) {
        if (!opt_showFn && goog.isFunction(obj[x]))
            continue;
        var s = x + ' \x3d ';
        try {
            s += obj[x]
        } catch (e) {
            s += '*** ' + e + ' ***'
        }
        str.push(s)
    }
    return str.join('\n')
}
;
goog.debug.deepExpose = function(obj, opt_showFn) {
    var str = [];
    var uidsToCleanup = [];
    var ancestorUids = {};
    var helper = function(obj, space) {
        var nestspace = space + '  ';
        var indentMultiline = function(str) {
            return str.replace(/\n/g, '\n' + space)
        };
        try {
            if (!goog.isDef(obj))
                str.push('undefined');
            else if (goog.isNull(obj))
                str.push('NULL');
            else if (goog.isString(obj))
                str.push('"' + indentMultiline(obj) + '"');
            else if (goog.isFunction(obj))
                str.push(indentMultiline(String(obj)));
            else if (goog.isObject(obj)) {
                if (!goog.hasUid(obj))
                    uidsToCleanup.push(obj);
                var uid = goog.getUid(obj);
                if (ancestorUids[uid])
                    str.push('*** reference loop detected (id\x3d' + uid + ') ***');
                else {
                    ancestorUids[uid] = true;
                    str.push('{');
                    for (var x in obj) {
                        if (!opt_showFn && goog.isFunction(obj[x]))
                            continue;
                        str.push('\n');
                        str.push(nestspace);
                        str.push(x + ' \x3d ');
                        helper(obj[x], nestspace)
                    }
                    str.push('\n' + space + '}');
                    delete ancestorUids[uid]
                }
            } else
                str.push(obj)
        } catch (e) {
            str.push('*** ' + e + ' ***')
        }
    };
    helper(obj, '');
    for (var i = 0; i < uidsToCleanup.length; i++)
        goog.removeUid(uidsToCleanup[i]);
    return str.join('')
}
;
goog.debug.exposeArray = function(arr) {
    var str = [];
    for (var i = 0; i < arr.length; i++)
        if (goog.isArray(arr[i]))
            str.push(goog.debug.exposeArray(arr[i]));
        else
            str.push(arr[i]);
    return '[ ' + str.join(', ') + ' ]'
}
;
goog.debug.normalizeErrorObject = function(err) {
    var href = goog.getObjectByName('window.location.href');
    if (goog.isString(err))
        return {
            'message': err,
            'name': 'Unknown error',
            'lineNumber': 'Not available',
            'fileName': href,
            'stack': 'Not available'
        };
    var lineNumber, fileName;
    var threwError = false;
    try {
        lineNumber = err.lineNumber || err.line || 'Not available'
    } catch (e) {
        lineNumber = 'Not available';
        threwError = true
    }
    try {
        fileName = err.fileName || err.filename || err.sourceURL || goog.global['$googDebugFname'] || href
    } catch (e) {
        fileName = 'Not available';
        threwError = true
    }
    if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name)
        return {
            'message': err.message || 'Not available',
            'name': err.name || 'UnknownError',
            'lineNumber': lineNumber,
            'fileName': fileName,
            'stack': err.stack || 'Not available'
        };
    return err
}
;
goog.debug.enhanceError = function(err, opt_message) {
    var error;
    if (!(err instanceof Error)) {
        error = Error(err);
        if (Error.captureStackTrace)
            Error.captureStackTrace(error, goog.debug.enhanceError)
    } else
        error = err;
    if (!error.stack)
        error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
    if (opt_message) {
        var x = 0;
        while (error['message' + x])
            ++x;
        error['message' + x] = String(opt_message)
    }
    return error
}
;
goog.debug.enhanceErrorWithContext = function(err, opt_context) {
    var error = goog.debug.enhanceError(err);
    if (opt_context)
        for (var key in opt_context)
            goog.debug.errorcontext.addErrorContext(error, key, opt_context[key]);
    return error
}
;
goog.debug.getStacktraceSimple = function(opt_depth) {
    if (!goog.debug.FORCE_SLOPPY_STACKS) {
        var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
        if (stack)
            return stack
    }
    var sb = [];
    var fn = arguments.callee.caller;
    var depth = 0;
    while (fn && (!opt_depth || depth < opt_depth)) {
        sb.push(goog.debug.getFunctionName(fn));
        sb.push('()\n');
        try {
            fn = fn.caller
        } catch (e) {
            sb.push('[exception trying to get caller]\n');
            break
        }
        depth++;
        if (depth >= goog.debug.MAX_STACK_DEPTH) {
            sb.push('[...long stack...]');
            break
        }
    }
    if (opt_depth && depth >= opt_depth)
        sb.push('[...reached max depth limit...]');
    else
        sb.push('[end]');
    return sb.join('')
}
;
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
    var tempErr = new Error;
    if (Error.captureStackTrace) {
        Error.captureStackTrace(tempErr, fn);
        return String(tempErr.stack)
    } else {
        try {
            throw tempErr;
        } catch (e) {
            tempErr = e
        }
        var stack = tempErr.stack;
        if (stack)
            return String(stack)
    }
    return null
}
;
goog.debug.getStacktrace = function(fn) {
    var stack;
    if (!goog.debug.FORCE_SLOPPY_STACKS) {
        var contextFn = fn || goog.debug.getStacktrace;
        stack = goog.debug.getNativeStackTrace_(contextFn)
    }
    if (!stack)
        stack = goog.debug.getStacktraceHelper_(fn || arguments.callee.caller, []);
    return stack
}
;
goog.debug.getStacktraceHelper_ = function(fn, visited) {
    var sb = [];
    if (goog.array.contains(visited, fn))
        sb.push('[...circular reference...]');
    else if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
        sb.push(goog.debug.getFunctionName(fn) + '(');
        var args = fn.arguments;
        for (var i = 0; args && i < args.length; i++) {
            if (i > 0)
                sb.push(', ');
            var argDesc;
            var arg = args[i];
            switch (typeof arg) {
            case 'object':
                argDesc = arg ? 'object' : 'null';
                break;
            case 'string':
                argDesc = arg;
                break;
            case 'number':
                argDesc = String(arg);
                break;
            case 'boolean':
                argDesc = arg ? 'true' : 'false';
                break;
            case 'function':
                argDesc = goog.debug.getFunctionName(arg);
                argDesc = argDesc ? argDesc : '[fn]';
                break;
            case 'undefined':
            default:
                argDesc = typeof arg;
                break
            }
            if (argDesc.length > 40)
                argDesc = argDesc.substr(0, 40) + '...';
            sb.push(argDesc)
        }
        visited.push(fn);
        sb.push(')\n');
        try {
            sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited))
        } catch (e) {
            sb.push('[exception trying to get caller]\n')
        }
    } else if (fn)
        sb.push('[...long stack...]');
    else
        sb.push('[end]');
    return sb.join('')
}
;
goog.debug.setFunctionResolver = function(resolver) {
    goog.debug.fnNameResolver_ = resolver
}
;
goog.debug.getFunctionName = function(fn) {
    if (goog.debug.fnNameCache_[fn])
        return goog.debug.fnNameCache_[fn];
    if (goog.debug.fnNameResolver_) {
        var name = goog.debug.fnNameResolver_(fn);
        if (name) {
            goog.debug.fnNameCache_[fn] = name;
            return name
        }
    }
    var functionSource = String(fn);
    if (!goog.debug.fnNameCache_[functionSource]) {
        var matches = /function ([^\(]+)/.exec(functionSource);
        if (matches) {
            var method = matches[1];
            goog.debug.fnNameCache_[functionSource] = method
        } else
            goog.debug.fnNameCache_[functionSource] = '[Anonymous]'
    }
    return goog.debug.fnNameCache_[functionSource]
}
;
goog.debug.makeWhitespaceVisible = function(string) {
    return string.replace(/ /g, '[_]').replace(/\f/g, '[f]').replace(/\n/g, '[n]\n').replace(/\r/g, '[r]').replace(/\t/g, '[t]')
}
;
goog.debug.runtimeType = function(value) {
    if (value instanceof Function)
        return value.displayName || value.name || 'unknown type name';
    else if (value instanceof Object)
        return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    else
        return value === null ? 'null' : typeof value
}
;
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.debug.freezeInternal_ = goog.DEBUG && Object.freeze || function(arg) {
    return arg
}
;
goog.debug.freeze = function(arg) {
    return {
        valueOf: function() {
            return goog.debug.freezeInternal_(arg)
        }
    }.valueOf()
}
;
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
    goog.events.Event.call(this, opt_e ? opt_e.type : '');
    this.target = null;
    this.currentTarget = null;
    this.relatedTarget = null;
    this.offsetX = 0;
    this.offsetY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.screenX = 0;
    this.screenY = 0;
    this.button = 0;
    this.key = '';
    this.keyCode = 0;
    this.charCode = 0;
    this.ctrlKey = false;
    this.altKey = false;
    this.shiftKey = false;
    this.metaKey = false;
    this.state = null;
    this.platformModifierKey = false;
    this.pointerId = 0;
    this.pointerType = '';
    this.event_ = null;
    if (opt_e)
        this.init(opt_e, opt_currentTarget)
}
;
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2
};
goog.events.BrowserEvent.PointerType = {
    MOUSE: 'mouse',
    PEN: 'pen',
    TOUCH: 'touch'
};
goog.events.BrowserEvent.IEButtonMap = goog.debug.freeze([1, 4, 2]);
goog.events.BrowserEvent.IE_BUTTON_MAP = goog.events.BrowserEvent.IEButtonMap;
goog.events.BrowserEvent.IE_POINTER_TYPE_MAP = goog.debug.freeze({
    2: goog.events.BrowserEvent.PointerType.TOUCH,
    3: goog.events.BrowserEvent.PointerType.PEN,
    4: goog.events.BrowserEvent.PointerType.MOUSE
});
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
    var type = this.type = e.type;
    var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
    this.target = e.target || e.srcElement;
    this.currentTarget = opt_currentTarget;
    var relatedTarget = e.relatedTarget;
    if (relatedTarget) {
        if (goog.userAgent.GECKO)
            if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName'))
                relatedTarget = null
    } else if (type == goog.events.EventType.MOUSEOVER)
        relatedTarget = e.fromElement;
    else if (type == goog.events.EventType.MOUSEOUT)
        relatedTarget = e.toElement;
    this.relatedTarget = relatedTarget;
    if (!goog.isNull(relevantTouch)) {
        this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
        this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
        this.screenX = relevantTouch.screenX || 0;
        this.screenY = relevantTouch.screenY || 0
    } else {
        this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
        this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
        this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
        this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
        this.screenX = e.screenX || 0;
        this.screenY = e.screenY || 0
    }
    this.button = e.button;
    this.keyCode = e.keyCode || 0;
    this.key = e.key || '';
    this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);
    this.ctrlKey = e.ctrlKey;
    this.altKey = e.altKey;
    this.shiftKey = e.shiftKey;
    this.metaKey = e.metaKey;
    this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
    this.pointerId = e.pointerId || 0;
    this.pointerType = goog.events.BrowserEvent.getPointerType_(e);
    this.state = e.state;
    this.event_ = e;
    if (e.defaultPrevented)
        this.preventDefault()
}
;
goog.events.BrowserEvent.prototype.isButton = function(button) {
    if (!goog.events.BrowserFeature.HAS_W3C_BUTTON)
        if (this.type == 'click')
            return button == goog.events.BrowserEvent.MouseButton.LEFT;
        else
            return !!(this.event_.button & goog.events.BrowserEvent.IE_BUTTON_MAP[button]);
    else
        return this.event_.button == button
}
;
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
    return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey)
}
;
goog.events.BrowserEvent.prototype.stopPropagation = function() {
    goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
    if (this.event_.stopPropagation)
        this.event_.stopPropagation();
    else
        this.event_.cancelBubble = true
}
;
goog.events.BrowserEvent.prototype.preventDefault = function() {
    goog.events.BrowserEvent.superClass_.preventDefault.call(this);
    var be = this.event_;
    if (!be.preventDefault) {
        be.returnValue = false;
        if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT)
            try {
                var VK_F1 = 112;
                var VK_F12 = 123;
                if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12)
                    be.keyCode = -1
            } catch (ex) {}
    } else
        be.preventDefault()
}
;
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
    return this.event_
}
;
goog.events.BrowserEvent.getPointerType_ = function(e) {
    if (goog.isString(e.pointerType))
        return e.pointerType;
    return goog.events.BrowserEvent.IE_POINTER_TYPE_MAP[e.pointerType] || ''
}
;
goog.debug.entryPointRegistry = {};
goog.debug.EntryPointMonitor = function() {}
;
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
    goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
    if (goog.debug.entryPointRegistry.monitorsMayExist_) {
        var monitors = goog.debug.entryPointRegistry.monitors_;
        for (var i = 0; i < monitors.length; i++)
            callback(goog.bind(monitors[i].wrap, monitors[i]))
    }
}
;
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
    goog.debug.entryPointRegistry.monitorsMayExist_ = true;
    var transformer = goog.bind(monitor.wrap, monitor);
    for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++)
        goog.debug.entryPointRegistry.refList_[i](transformer);
    goog.debug.entryPointRegistry.monitors_.push(monitor)
}
;
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    goog.asserts.assert(monitor == monitors[monitors.length - 1], 'Only the most recent monitor can be unwrapped.');
    var transformer = goog.bind(monitor.unwrap, monitor);
    for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++)
        goog.debug.entryPointRegistry.refList_[i](transformer);
    monitors.length--
}
;
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = 'closure_lm_' + (Math.random() * 1E6 | 0);
goog.events.onString_ = 'on';
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {
    OFF_AND_FAIL: 0,
    OFF_AND_SILENT: 1,
    ON: 2
};
goog.events.CAPTURE_SIMULATION_MODE = 2;
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_options, opt_handler) {
    if (opt_options && opt_options.once)
        return goog.events.listenOnce(src, type, listener, opt_options, opt_handler);
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++)
            goog.events.listen(src, type[i], listener, opt_options, opt_handler);
        return null
    }
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src)) {
        var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
        return src.listen(type, listener, capture, opt_handler)
    } else
        return goog.events.listen_(src, type, listener, false, opt_options, opt_handler)
}
;
goog.events.listen_ = function(src, type, listener, callOnce, opt_options, opt_handler) {
    if (!type)
        throw new Error('Invalid event type');
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT)
        if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
            goog.asserts.fail('Can not register capture listener in IE8-.');
            return null
        } else if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT)
            return null;
    var listenerMap = goog.events.getListenerMap_(src);
    if (!listenerMap)
        src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
    var listenerObj = listenerMap.add(type, listener, callOnce, capture, opt_handler);
    if (listenerObj.proxy)
        return listenerObj;
    var proxy = goog.events.getProxy();
    listenerObj.proxy = proxy;
    proxy.src = src;
    proxy.listener = listenerObj;
    if (src.addEventListener) {
        if (!goog.events.BrowserFeature.PASSIVE_EVENTS)
            opt_options = capture;
        if (opt_options === undefined)
            opt_options = false;
        src.addEventListener(type.toString(), proxy, opt_options)
    } else if (src.attachEvent)
        src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    else
        throw new Error('addEventListener and attachEvent are unavailable.');
    goog.events.listenerCountEstimate_++;
    return listenerObj
}
;
goog.events.getProxy = function() {
    var proxyCallbackFunction = goog.events.handleBrowserEvent_;
    var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
        return proxyCallbackFunction.call(f.src, f.listener, eventObject)
    }
    : function(eventObject) {
        var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
        if (!v)
            return v
    }
    ;
    return f
}
;
goog.events.listenOnce = function(src, type, listener, opt_options, opt_handler) {
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++)
            goog.events.listenOnce(src, type[i], listener, opt_options, opt_handler);
        return null
    }
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src)) {
        var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
        return src.listenOnce(type, listener, capture, opt_handler)
    } else
        return goog.events.listen_(src, type, listener, true, opt_options, opt_handler)
}
;
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
    wrapper.listen(src, listener, opt_capt, opt_handler)
}
;
goog.events.unlisten = function(src, type, listener, opt_options, opt_handler) {
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++)
            goog.events.unlisten(src, type[i], listener, opt_options, opt_handler);
        return null
    }
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src))
        return src.unlisten(type, listener, capture, opt_handler);
    if (!src)
        return false;
    var listenerMap = goog.events.getListenerMap_(src);
    if (listenerMap) {
        var listenerObj = listenerMap.getListener(type, listener, capture, opt_handler);
        if (listenerObj)
            return goog.events.unlistenByKey(listenerObj)
    }
    return false
}
;
goog.events.unlistenByKey = function(key) {
    if (goog.isNumber(key))
        return false;
    var listener = key;
    if (!listener || listener.removed)
        return false;
    var src = listener.src;
    if (goog.events.Listenable.isImplementedBy(src))
        return src.unlistenByKey(listener);
    var type = listener.type;
    var proxy = listener.proxy;
    if (src.removeEventListener)
        src.removeEventListener(type, proxy, listener.capture);
    else if (src.detachEvent)
        src.detachEvent(goog.events.getOnString_(type), proxy);
    goog.events.listenerCountEstimate_--;
    var listenerMap = goog.events.getListenerMap_(src);
    if (listenerMap) {
        listenerMap.removeByKey(listener);
        if (listenerMap.getTypeCount() == 0) {
            listenerMap.src = null;
            src[goog.events.LISTENER_MAP_PROP_] = null
        }
    } else
        listener.markAsRemoved();
    return true
}
;
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
    wrapper.unlisten(src, listener, opt_capt, opt_handler)
}
;
goog.events.removeAll = function(obj, opt_type) {
    if (!obj)
        return 0;
    if (goog.events.Listenable.isImplementedBy(obj))
        return obj.removeAllListeners(opt_type);
    var listenerMap = goog.events.getListenerMap_(obj);
    if (!listenerMap)
        return 0;
    var count = 0;
    var typeStr = opt_type && opt_type.toString();
    for (var type in listenerMap.listeners)
        if (!typeStr || type == typeStr) {
            var listeners = listenerMap.listeners[type].concat();
            for (var i = 0; i < listeners.length; ++i)
                if (goog.events.unlistenByKey(listeners[i]))
                    ++count
        }
    return count
}
;
goog.events.getListeners = function(obj, type, capture) {
    if (goog.events.Listenable.isImplementedBy(obj))
        return obj.getListeners(type, capture);
    else {
        if (!obj)
            return [];
        var listenerMap = goog.events.getListenerMap_(obj);
        return listenerMap ? listenerMap.getListeners(type, capture) : []
    }
}
;
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
    type = type;
    listener = goog.events.wrapListener(listener);
    var capture = !!opt_capt;
    if (goog.events.Listenable.isImplementedBy(src))
        return src.getListener(type, listener, capture, opt_handler);
    if (!src)
        return null;
    var listenerMap = goog.events.getListenerMap_(src);
    if (listenerMap)
        return listenerMap.getListener(type, listener, capture, opt_handler);
    return null
}
;
goog.events.hasListener = function(obj, opt_type, opt_capture) {
    if (goog.events.Listenable.isImplementedBy(obj))
        return obj.hasListener(opt_type, opt_capture);
    var listenerMap = goog.events.getListenerMap_(obj);
    return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture)
}
;
goog.events.expose = function(e) {
    var str = [];
    for (var key in e)
        if (e[key] && e[key].id)
            str.push(key + ' \x3d ' + e[key] + ' (' + e[key].id + ')');
        else
            str.push(key + ' \x3d ' + e[key]);
    return str.join('\n')
}
;
goog.events.getOnString_ = function(type) {
    if (type in goog.events.onStringMap_)
        return goog.events.onStringMap_[type];
    return goog.events.onStringMap_[type] = goog.events.onString_ + type
}
;
goog.events.fireListeners = function(obj, type, capture, eventObject) {
    if (goog.events.Listenable.isImplementedBy(obj))
        return obj.fireListeners(type, capture, eventObject);
    return goog.events.fireListeners_(obj, type, capture, eventObject)
}
;
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
    var retval = true;
    var listenerMap = goog.events.getListenerMap_(obj);
    if (listenerMap) {
        var listenerArray = listenerMap.listeners[type.toString()];
        if (listenerArray) {
            listenerArray = listenerArray.concat();
            for (var i = 0; i < listenerArray.length; i++) {
                var listener = listenerArray[i];
                if (listener && listener.capture == capture && !listener.removed) {
                    var result = goog.events.fireListener(listener, eventObject);
                    retval = retval && result !== false
                }
            }
        }
    }
    return retval
}
;
goog.events.fireListener = function(listener, eventObject) {
    var listenerFn = listener.listener;
    var listenerHandler = listener.handler || listener.src;
    if (listener.callOnce)
        goog.events.unlistenByKey(listener);
    return listenerFn.call(listenerHandler, eventObject)
}
;
goog.events.getTotalListenerCount = function() {
    return goog.events.listenerCountEstimate_
}
;
goog.events.dispatchEvent = function(src, e) {
    goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), 'Can not use goog.events.dispatchEvent with ' + 'non-goog.events.Listenable instance.');
    return src.dispatchEvent(e)
}
;
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
    goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_)
}
;
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
    if (listener.removed)
        return true;
    if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
        var ieEvent = opt_evt || goog.getObjectByName('window.event');
        var evt = new goog.events.BrowserEvent(ieEvent,this);
        var retval = true;
        if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
            if (!goog.events.isMarkedIeEvent_(ieEvent)) {
                goog.events.markIeEvent_(ieEvent);
                var ancestors = [];
                for (var parent = evt.currentTarget; parent; parent = parent.parentNode)
                    ancestors.push(parent);
                var type = listener.type;
                for (var i = ancestors.length - 1; !evt.propagationStopped_ && i >= 0; i--) {
                    evt.currentTarget = ancestors[i];
                    var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
                    retval = retval && result
                }
                for (var i = 0; !evt.propagationStopped_ && i < ancestors.length; i++) {
                    evt.currentTarget = ancestors[i];
                    var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
                    retval = retval && result
                }
            }
        } else
            retval = goog.events.fireListener(listener, evt);
        return retval
    }
    return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt,this))
}
;
goog.events.markIeEvent_ = function(e) {
    var useReturnValue = false;
    if (e.keyCode == 0)
        try {
            e.keyCode = -1;
            return
        } catch (ex) {
            useReturnValue = true
        }
    if (useReturnValue || e.returnValue == undefined)
        e.returnValue = true
}
;
goog.events.isMarkedIeEvent_ = function(e) {
    return e.keyCode < 0 || e.returnValue != undefined
}
;
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
    return identifier + '_' + goog.events.uniqueIdCounter_++
}
;
goog.events.getListenerMap_ = function(src) {
    var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
    return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null
}
;
goog.events.LISTENER_WRAPPER_PROP_ = '__closure_events_fn_' + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
    goog.asserts.assert(listener, 'Listener can not be null.');
    if (goog.isFunction(listener))
        return listener;
    goog.asserts.assert(listener.handleEvent, 'An object listener must have handleEvent method.');
    if (!listener[goog.events.LISTENER_WRAPPER_PROP_])
        listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
            return listener.handleEvent(e)
        }
        ;
    return listener[goog.events.LISTENER_WRAPPER_PROP_]
}
;
goog.debug.entryPointRegistry.register(function(transformer) {
    goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_)
});
goog.events.EventTarget = function() {
    goog.Disposable.call(this);
    this.eventTargetListeners_ = new goog.events.ListenerMap(this);
    this.actualEventTarget_ = this;
    this.parentEventTarget_ = null
}
;
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
    return this.parentEventTarget_
}
;
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
    this.parentEventTarget_ = parent
}
;
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
    goog.events.listen(this, type, handler, opt_capture, opt_handlerScope)
}
;
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
    goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope)
}
;
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
    this.assertInitialized_();
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
        ancestorsTree = [];
        var ancestorCount = 1;
        for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
            ancestorsTree.push(ancestor);
            goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, 'infinite loop')
        }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree)
}
;
goog.events.EventTarget.prototype.disposeInternal = function() {
    goog.events.EventTarget.superClass_.disposeInternal.call(this);
    this.removeAllListeners();
    this.parentEventTarget_ = null
}
;
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    this.assertInitialized_();
    return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope)
}
;
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope)
}
;
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope)
}
;
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    return this.eventTargetListeners_.removeByKey(key)
}
;
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
    if (!this.eventTargetListeners_)
        return 0;
    return this.eventTargetListeners_.removeAll(opt_type)
}
;
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    var listenerArray = this.eventTargetListeners_.listeners[String(type)];
    if (!listenerArray)
        return true;
    listenerArray = listenerArray.concat();
    var rv = true;
    for (var i = 0; i < listenerArray.length; ++i) {
        var listener = listenerArray[i];
        if (listener && !listener.removed && listener.capture == capture) {
            var listenerFn = listener.listener;
            var listenerHandler = listener.handler || listener.src;
            if (listener.callOnce)
                this.unlistenByKey(listener);
            rv = listenerFn.call(listenerHandler, eventObject) !== false && rv
        }
    }
    return rv && eventObject.returnValue_ != false
}
;
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    return this.eventTargetListeners_.getListeners(String(type), capture)
}
;
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope)
}
;
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
    return this.eventTargetListeners_.hasListener(id, opt_capture)
}
;
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target
}
;
goog.events.EventTarget.prototype.assertInitialized_ = function() {
    goog.asserts.assert(this.eventTargetListeners_, 'Event target is not initialized. Did you call the superclass ' + '(goog.events.EventTarget) constructor?')
}
;
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || e;
    if (goog.isString(e))
        e = new goog.events.Event(e,target);
    else if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type,target);
        goog.object.extend(e, oldEvent)
    } else
        e.target = e.target || target;
    var rv = true, currentTarget;
    if (opt_ancestorsTree)
        for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0; i--) {
            currentTarget = e.currentTarget = opt_ancestorsTree[i];
            rv = currentTarget.fireListeners(type, true, e) && rv
        }
    if (!e.propagationStopped_) {
        currentTarget = e.currentTarget = target;
        rv = currentTarget.fireListeners(type, true, e) && rv;
        if (!e.propagationStopped_)
            rv = currentTarget.fireListeners(type, false, e) && rv
    }
    if (opt_ancestorsTree)
        for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {
            currentTarget = e.currentTarget = opt_ancestorsTree[i];
            rv = currentTarget.fireListeners(type, false, e) && rv
        }
    return rv
}
;
var spine = {};
spine.animation = {};
spine.animation.Timeline = function() {}
;
goog.exportSymbol('spine.animation.Timeline', spine.animation.Timeline);
spine.animation.Timeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {}
;
spine.animation.Timeline.prototype.getPropertyId = function() {}
;
spine.animation.Timeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Timeline',
        qName: 'spine.animation.Timeline',
        kind: 'interface'
    }]
};
spine.animation.Timeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.Timeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.Timeline'
                }
            }
        }
    }
}
;
spine.animation.CurveTimeline = function(frameCount) {
    this.curves = org.apache.royale.utils.Language.Vector((frameCount - 1) * spine.animation.CurveTimeline.BEZIER_SIZE, 'Number')
}
;
goog.exportSymbol('spine.animation.CurveTimeline', spine.animation.CurveTimeline);
spine.animation.CurveTimeline.LINEAR = 0;
spine.animation.CurveTimeline.STEPPED = 1;
spine.animation.CurveTimeline.BEZIER = 2;
spine.animation.CurveTimeline.BEZIER_SIZE = 10 * 2 - 1;
spine.animation.CurveTimeline.prototype.curves;
spine.animation.CurveTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {}
;
spine.animation.CurveTimeline.prototype.getPropertyId = function() {
    return 0
}
;
spine.animation.CurveTimeline.prototype.setLinear = function(frameIndex) {
    this.curves[org.apache.royale.utils.Language._int(frameIndex * spine.animation.CurveTimeline.BEZIER_SIZE)] = spine.animation.CurveTimeline.LINEAR
}
;
spine.animation.CurveTimeline.prototype.setStepped = function(frameIndex) {
    this.curves[org.apache.royale.utils.Language._int(frameIndex * spine.animation.CurveTimeline.BEZIER_SIZE)] = spine.animation.CurveTimeline.STEPPED
}
;
spine.animation.CurveTimeline.prototype.setCurve = function(frameIndex, cx1, cy1, cx2, cy2) {
    var tmpx = (-cx1 * 2 + cx2) * .03
      , tmpy = (-cy1 * 2 + cy2) * .03;
    var dddfx = ((cx1 - cx2) * 3 + 1) * .006
      , dddfy = ((cy1 - cy2) * 3 + 1) * .006;
    var ddfx = tmpx * 2 + dddfx
      , ddfy = tmpy * 2 + dddfy;
    var dfx = cx1 * .3 + tmpx + dddfx * .16666667
      , dfy = cy1 * .3 + tmpy + dddfy * .16666667;
    var i = frameIndex * spine.animation.CurveTimeline.BEZIER_SIZE;
    var curves = this.curves;
    curves[org.apache.royale.utils.Language._int(i++)] = spine.animation.CurveTimeline.BEZIER;
    var x = dfx
      , y = dfy;
    for (var n = i + spine.animation.CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {
        curves[i] = x;
        curves[org.apache.royale.utils.Language._int(i + 1)] = y;
        dfx += ddfx;
        dfy += ddfy;
        ddfx += dddfx;
        ddfy += dddfy;
        x += dfx;
        y += dfy
    }
}
;
spine.animation.CurveTimeline.prototype.getCurvePercent = function(frameIndex, percent) {
    percent = spine.MathUtils.clamp(percent, 0, 1);
    var curves = this.curves;
    var i = frameIndex * spine.animation.CurveTimeline.BEZIER_SIZE;
    var type = Number(curves[i]);
    if (type == spine.animation.CurveTimeline.LINEAR)
        return percent;
    if (type == spine.animation.CurveTimeline.STEPPED)
        return 0;
    i++;
    var x = 0;
    var n = i + spine.animation.CurveTimeline.BEZIER_SIZE - 1;
    for (var start = i; i < n; i += 2) {
        x = Number(curves[i]);
        if (x >= percent) {
            var prevX, prevY;
            if (i == start) {
                prevX = 0;
                prevY = 0
            } else {
                prevX = Number(curves[org.apache.royale.utils.Language._int(i - 2)]);
                prevY = Number(curves[org.apache.royale.utils.Language._int(i - 1)])
            }
            return prevY + (curves[org.apache.royale.utils.Language._int(i + 1)] - prevY) * (percent - prevX) / (x - prevX)
        }
    }
    var y = Number(curves[org.apache.royale.utils.Language._int(i - 1)]);
    return y + (1 - y) * (percent - x) / (1 - x)
}
;
spine.animation.CurveTimeline.prototype.get__frameCount = function() {
    return this.curves.length / spine.animation.CurveTimeline.BEZIER_SIZE + 1
}
;
Object.defineProperties(spine.animation.CurveTimeline.prototype, {
    frameCount: {
        get: spine.animation.CurveTimeline.prototype.get__frameCount
    }
});
spine.animation.CurveTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'CurveTimeline',
        qName: 'spine.animation.CurveTimeline',
        kind: 'class'
    }],
    interfaces: [spine.animation.Timeline]
};
spine.animation.CurveTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'frameCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.animation.CurveTimeline'
                }
            }
        },
        methods: function() {
            return {
                'CurveTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.CurveTimeline'
                },
                'setLinear': {
                    type: 'void',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'setStepped': {
                    type: 'void',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'setCurve': {
                    type: 'void',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'getCurvePercent': {
                    type: 'Number',
                    declaredBy: 'spine.animation.CurveTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.TranslateTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.TranslateTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.TranslateTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.TranslateTimeline', spine.animation.TranslateTimeline);
spine.animation.TranslateTimeline.ENTRIES = 3;
spine.animation.TranslateTimeline.PREV_TIME = -3;
spine.animation.TranslateTimeline.PREV_X = -2;
spine.animation.TranslateTimeline.PREV_Y = -1;
spine.animation.TranslateTimeline.X = 1;
spine.animation.TranslateTimeline.Y = 2;
spine.animation.TranslateTimeline.prototype.boneIndex = 0;
spine.animation.TranslateTimeline.prototype.frames;
spine.animation.TranslateTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.translate.ordinal << 24) + this.boneIndex
}
;
spine.animation.TranslateTimeline.prototype.setFrame = function(frameIndex, time, x, y) {
    frameIndex *= spine.animation.TranslateTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.TranslateTimeline.X)] = x;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.TranslateTimeline.Y)] = y
}
;
spine.animation.TranslateTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var bone = skeleton.bones[this.boneIndex];
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            bone.x = bone.data.x;
            bone.y = bone.data.y;
            return;
        case spine.animation.MixPose.current:
            bone.x += (bone.data.x - bone.x) * alpha;
            bone.y += (bone.data.y - bone.y) * alpha
        }
        return
    }
    var x, y;
    if (time >= frames[frames.length - spine.animation.TranslateTimeline.ENTRIES]) {
        x = Number(frames[frames.length + spine.animation.TranslateTimeline.PREV_X]);
        y = Number(frames[frames.length + spine.animation.TranslateTimeline.PREV_Y])
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.TranslateTimeline.ENTRIES);
        x = Number(frames[frame + spine.animation.TranslateTimeline.PREV_X]);
        y = Number(frames[frame + spine.animation.TranslateTimeline.PREV_Y]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.TranslateTimeline.PREV_TIME] - frameTime));
        x += (frames[frame + spine.animation.TranslateTimeline.X] - x) * percent;
        y += (frames[frame + spine.animation.TranslateTimeline.Y] - y) * percent
    }
    if (pose == spine.animation.MixPose.setup) {
        bone.x = bone.data.x + x * alpha;
        bone.y = bone.data.y + y * alpha
    } else {
        bone.x += (bone.data.x + x - bone.x) * alpha;
        bone.y += (bone.data.y + y - bone.y) * alpha
    }
}
;
spine.animation.TranslateTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TranslateTimeline',
        qName: 'spine.animation.TranslateTimeline',
        kind: 'class'
    }]
};
spine.animation.TranslateTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'boneIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TranslateTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.TranslateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.TranslateTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.TranslateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.TranslateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.flash = {};
spine.flash.SkeletonSprite = function(skeletonData) {
    openfl.display.Sprite.call(this);
    this.wrappers = new openfl.utils.Dictionary(true);
    spine.flash.SkeletonSprite.blendModes = [openfl.display.BlendMode.NORMAL, openfl.display.BlendMode.ADD, openfl.display.BlendMode.MULTIPLY, openfl.display.BlendMode.SCREEN];
    spine.Bone.yDown = true;
    this._skeleton = new spine.Skeleton(skeletonData);
    this._skeleton.updateWorldTransform();
    this.lastTime = openfl.utils.getTimer();
    this.addEventListener(openfl.events.Event.ADDED_TO_STAGE, org.apache.royale.utils.Language.closure(this.onAdd, this, 'onAdd'));
    this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE, org.apache.royale.utils.Language.closure(this.onRemove, this, 'onRemove'))
}
;
goog.inherits(spine.flash.SkeletonSprite, openfl.display.Sprite);
goog.exportSymbol('spine.flash.SkeletonSprite', spine.flash.SkeletonSprite);
spine.flash.SkeletonSprite.blendModes;
spine.flash.SkeletonSprite.prototype._skeleton;
spine.flash.SkeletonSprite.prototype._timeScale = 1;
spine.flash.SkeletonSprite.prototype.lastTime = 0;
spine.flash.SkeletonSprite.prototype.wrappers;
spine.flash.SkeletonSprite.prototype.onRemove = function(e) {
    this.removeEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.enterFrame, this, 'enterFrame'))
}
;
spine.flash.SkeletonSprite.prototype.clearListeners = function() {
    this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE, org.apache.royale.utils.Language.closure(this.onAdd, this, 'onAdd'));
    this.removeEventListener(openfl.events.Event.REMOVED_FROM_STAGE, org.apache.royale.utils.Language.closure(this.onRemove, this, 'onRemove'))
}
;
spine.flash.SkeletonSprite.prototype.onAdd = function(event) {
    this.lastTime = openfl.utils.getTimer();
    this.enterFrame(null);
    this.addEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.enterFrame, this, 'enterFrame'))
}
;
spine.flash.SkeletonSprite.prototype.enterFrame = function(event) {
    var time = openfl.utils.getTimer();
    this.advanceTime((time - this.lastTime) / 1E3);
    this.lastTime = time
}
;
spine.flash.SkeletonSprite.prototype.advanceTime = function(delta) {
    this._skeleton.update(delta * this._timeScale);
    this.removeChildren();
    var drawOrder = this.skeleton.drawOrder;
    var n = drawOrder.length;
    for (var i = 0; i < n; i++) {
        var slot = drawOrder[i];
        var regionAttachment = org.apache.royale.utils.Language.as(slot.attachment, spine.attachments.RegionAttachment);
        if (!regionAttachment)
            continue;
        var wrapper = this.wrappers[regionAttachment];
        if (!wrapper) {
            var region = org.apache.royale.utils.Language.as(regionAttachment.rendererObject, spine.atlas.AtlasRegion, true);
            var regionHeight = region.rotate ? region.width : region.height;
            var regionData = org.apache.royale.utils.Language.as(region.rendererObject, openfl.display.BitmapData);
            if (!regionData) {
                var bitmapData = org.apache.royale.utils.Language.as(region.page.rendererObject, openfl.display.BitmapData);
                var regionWidth = region.rotate ? region.height : region.width;
                regionData = new openfl.display.BitmapData(regionWidth,regionHeight);
                regionData.copyPixels(bitmapData, new openfl.geom.Rectangle(region.x,region.y,regionWidth,regionHeight), new openfl.geom.Point);
                region.rendererObject = regionData
            }
            var bitmap = new openfl.display.Bitmap(regionData);
            bitmap.smoothing = true;
            bitmap.rotation = -regionAttachment.rotation;
            bitmap.scaleX = regionAttachment.scaleX * (regionAttachment.width / region.width);
            bitmap.scaleY = regionAttachment.scaleY * (regionAttachment.height / region.height);
            var radians = -regionAttachment.rotation * Math.PI / 180;
            var cos = Math.cos(radians);
            var sin = Math.sin(radians);
            var shiftX = -regionAttachment.width / 2 * regionAttachment.scaleX;
            var shiftY = -regionAttachment.height / 2 * regionAttachment.scaleY;
            if (region.rotate) {
                bitmap.rotation += 90;
                shiftX += regionHeight * (regionAttachment.width / region.width)
            }
            bitmap.x = regionAttachment.x + shiftX * cos - shiftY * sin;
            bitmap.y = -regionAttachment.y + shiftX * sin + shiftY * cos;
            wrapper = new openfl.display.Sprite;
            wrapper.transform.colorTransform = new openfl.geom.ColorTransform;
            wrapper.addChild(bitmap);
            this.wrappers[regionAttachment] = wrapper
        }
        wrapper.blendMode = org.apache.royale.utils.Language.string(spine.flash.SkeletonSprite.blendModes[slot.data.blendMode.ordinal]);
        var colorTransform = wrapper.transform.colorTransform;
        colorTransform.redMultiplier = this.skeleton.color.r * slot.color.r * regionAttachment.color.r;
        colorTransform.greenMultiplier = this.skeleton.color.g * slot.color.g * regionAttachment.color.g;
        colorTransform.blueMultiplier = this.skeleton.color.b * slot.color.b * regionAttachment.color.b;
        colorTransform.alphaMultiplier = this.skeleton.color.a * slot.color.a * regionAttachment.color.a;
        wrapper.transform.colorTransform = colorTransform;
        var bone = slot.bone;
        var flipX = this.skeleton.flipX ? -1 : 1;
        var flipY = this.skeleton.flipY ? -1 : 1;
        wrapper.x = bone.worldX;
        wrapper.y = bone.worldY;
        wrapper.rotation = bone.worldRotationX * flipX * flipY;
        wrapper.scaleX = bone.worldScaleX * flipX;
        wrapper.scaleY = bone.worldScaleY * flipY;
        this.addChild(wrapper)
    }
}
;
spine.flash.SkeletonSprite.prototype.get__timeScale = function() {
    return this._timeScale
}
;
spine.flash.SkeletonSprite.prototype.set__timeScale = function(v) {
    this._timeScale = v
}
;
spine.flash.SkeletonSprite.prototype.get__skeleton = function() {
    return this._skeleton
}
;
Object.defineProperties(spine.flash.SkeletonSprite.prototype, {
    timeScale: {
        get: spine.flash.SkeletonSprite.prototype.get__timeScale,
        set: spine.flash.SkeletonSprite.prototype.set__timeScale
    },
    skeleton: {
        get: spine.flash.SkeletonSprite.prototype.get__skeleton
    }
});
spine.flash.SkeletonSprite.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SkeletonSprite',
        qName: 'spine.flash.SkeletonSprite',
        kind: 'class'
    }]
};
spine.flash.SkeletonSprite.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'timeScale': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'spine.flash.SkeletonSprite'
                },
                'skeleton': {
                    type: 'spine.Skeleton',
                    access: 'readonly',
                    declaredBy: 'spine.flash.SkeletonSprite'
                }
            }
        },
        methods: function() {
            return {
                'SkeletonSprite': {
                    type: '',
                    declaredBy: 'spine.flash.SkeletonSprite',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.SkeletonData',
                            optional: false
                        }]
                    }
                },
                'clearListeners': {
                    type: 'void',
                    declaredBy: 'spine.flash.SkeletonSprite'
                },
                'advanceTime': {
                    type: 'void',
                    declaredBy: 'spine.flash.SkeletonSprite',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.flash.SkeletonAnimation = function(skeletonData, stateData) {
    stateData = typeof stateData !== 'undefined' ? stateData : null;
    spine.flash.SkeletonSprite.call(this, skeletonData);
    this.state = new spine.animation.AnimationState(stateData ? stateData : new spine.animation.AnimationStateData(skeletonData))
}
;
goog.inherits(spine.flash.SkeletonAnimation, spine.flash.SkeletonSprite);
goog.exportSymbol('spine.flash.SkeletonAnimation', spine.flash.SkeletonAnimation);
spine.flash.SkeletonAnimation.prototype.state;
spine.flash.SkeletonAnimation.prototype.onRemove = function(e) {
    this.state.clearListeners();
    this.state.clearListenerNotifications();
    spine.flash.SkeletonAnimation.superClass_.onRemove.apply(this, [e])
}
;
spine.flash.SkeletonAnimation.prototype.advanceTime = function(time) {
    this.state.update(time * this.timeScale);
    this.state.apply(this.skeleton);
    this.skeleton.updateWorldTransform();
    spine.flash.SkeletonAnimation.superClass_.advanceTime.apply(this, [time])
}
;
spine.flash.SkeletonAnimation.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SkeletonAnimation',
        qName: 'spine.flash.SkeletonAnimation',
        kind: 'class'
    }]
};
spine.flash.SkeletonAnimation.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'state': {
                    type: 'spine.animation.AnimationState'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'SkeletonAnimation': {
                    type: '',
                    declaredBy: 'spine.flash.SkeletonAnimation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.SkeletonData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.animation.AnimationStateData',
                            optional: true
                        }]
                    }
                },
                'advanceTime': {
                    type: 'void',
                    declaredBy: 'spine.flash.SkeletonAnimation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.TransformConstraintTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.TransformConstraintTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.TransformConstraintTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.TransformConstraintTimeline', spine.animation.TransformConstraintTimeline);
spine.animation.TransformConstraintTimeline.ENTRIES = 5;
spine.animation.TransformConstraintTimeline.PREV_TIME = -5;
spine.animation.TransformConstraintTimeline.PREV_ROTATE = -4;
spine.animation.TransformConstraintTimeline.PREV_TRANSLATE = -3;
spine.animation.TransformConstraintTimeline.PREV_SCALE = -2;
spine.animation.TransformConstraintTimeline.PREV_SHEAR = -1;
spine.animation.TransformConstraintTimeline.ROTATE = 1;
spine.animation.TransformConstraintTimeline.TRANSLATE = 2;
spine.animation.TransformConstraintTimeline.SCALE = 3;
spine.animation.TransformConstraintTimeline.SHEAR = 4;
spine.animation.TransformConstraintTimeline.prototype.transformConstraintIndex = 0;
spine.animation.TransformConstraintTimeline.prototype.frames;
spine.animation.TransformConstraintTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.transformConstraint.ordinal << 24) + this.transformConstraintIndex
}
;
spine.animation.TransformConstraintTimeline.prototype.setFrame = function(frameIndex, time, rotateMix, translateMix, scaleMix, shearMix) {
    frameIndex *= spine.animation.TransformConstraintTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[frameIndex + spine.animation.TransformConstraintTimeline.ROTATE] = rotateMix;
    this.frames[frameIndex + spine.animation.TransformConstraintTimeline.TRANSLATE] = translateMix;
    this.frames[frameIndex + spine.animation.TransformConstraintTimeline.SCALE] = scaleMix;
    this.frames[frameIndex + spine.animation.TransformConstraintTimeline.SHEAR] = shearMix
}
;
spine.animation.TransformConstraintTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
    var data;
    if (time < frames[0]) {
        data = constraint.data;
        switch (pose) {
        case spine.animation.MixPose.setup:
            constraint.rotateMix = data.rotateMix;
            constraint.translateMix = data.translateMix;
            constraint.scaleMix = data.scaleMix;
            constraint.shearMix = data.shearMix;
            return;
        case spine.animation.MixPose.current:
            constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;
            constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;
            constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;
            constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha
        }
        return
    }
    var rotate, translate, scale, shear;
    if (time >= frames[frames.length - spine.animation.TransformConstraintTimeline.ENTRIES]) {
        var i = frames.length;
        rotate = Number(frames[i + spine.animation.TransformConstraintTimeline.PREV_ROTATE]);
        translate = Number(frames[i + spine.animation.TransformConstraintTimeline.PREV_TRANSLATE]);
        scale = Number(frames[i + spine.animation.TransformConstraintTimeline.PREV_SCALE]);
        shear = Number(frames[i + spine.animation.TransformConstraintTimeline.PREV_SHEAR])
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.TransformConstraintTimeline.ENTRIES);
        rotate = Number(frames[frame + spine.animation.TransformConstraintTimeline.PREV_ROTATE]);
        translate = Number(frames[frame + spine.animation.TransformConstraintTimeline.PREV_TRANSLATE]);
        scale = Number(frames[frame + spine.animation.TransformConstraintTimeline.PREV_SCALE]);
        shear = Number(frames[frame + spine.animation.TransformConstraintTimeline.PREV_SHEAR]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.TransformConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.TransformConstraintTimeline.PREV_TIME] - frameTime));
        rotate += (frames[frame + spine.animation.TransformConstraintTimeline.ROTATE] - rotate) * percent;
        translate += (frames[frame + spine.animation.TransformConstraintTimeline.TRANSLATE] - translate) * percent;
        scale += (frames[frame + spine.animation.TransformConstraintTimeline.SCALE] - scale) * percent;
        shear += (frames[frame + spine.animation.TransformConstraintTimeline.SHEAR] - shear) * percent
    }
    if (pose == spine.animation.MixPose.setup) {
        data = constraint.data;
        constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;
        constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;
        constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;
        constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha
    } else {
        constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
        constraint.translateMix += (translate - constraint.translateMix) * alpha;
        constraint.scaleMix += (scale - constraint.scaleMix) * alpha;
        constraint.shearMix += (shear - constraint.shearMix) * alpha
    }
}
;
spine.animation.TransformConstraintTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TransformConstraintTimeline',
        qName: 'spine.animation.TransformConstraintTimeline',
        kind: 'class'
    }]
};
spine.animation.TransformConstraintTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'transformConstraintIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TransformConstraintTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.TransformConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.TransformConstraintTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.TransformConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.TransformConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
var pigg = {};
pigg.puzzle = {};
pigg.puzzle.manager = {};
pigg.puzzle.manager.VersionManager = function() {}
;
goog.exportSymbol('pigg.puzzle.manager.VersionManager', pigg.puzzle.manager.VersionManager);
pigg.puzzle.manager.VersionManager.RELEASE_VERSION1 = '?v\x3d181113';
pigg.puzzle.manager.VersionManager.RELEASE_VERSION2 = '?v\x3d190205';
pigg.puzzle.manager.VersionManager.prototype.getVersionUrl = function(baseUrl) {
    var version;
    var url;
    switch (baseUrl) {
    case pigg.puzzle.data.CommonData.URL_COMMON_MENU_PARTS:
    case pigg.puzzle.data.CommonData.URL_IMG_COMMON_PARTS:
        version = pigg.puzzle.manager.VersionManager.RELEASE_VERSION2;
        break;
    default:
        version = pigg.puzzle.manager.VersionManager.RELEASE_VERSION1;
        break
    }
    url = baseUrl + version;
    return url
}
;
pigg.puzzle.manager.VersionManager.prototype.getSpineUrl = function(animal, type) {
    var version;
    var url;
    switch (animal) {
    default:
        version = pigg.puzzle.manager.VersionManager.RELEASE_VERSION1;
        break
    }
    url = pigg.puzzle.data.CommonData.URL_SPINE_BASE + animal + '.' + type + version;
    return url
}
;
pigg.puzzle.manager.VersionManager.prototype.getBgUrl = function(type, appType) {
    var version;
    var url;
    switch (type) {
    default:
        version = pigg.puzzle.manager.VersionManager.RELEASE_VERSION1;
        break
    }
    if (appType == 'game')
        url = pigg.puzzle.data.CommonData.URL_GAME_BG_BASE + type + '.png' + version;
    else if (appType == 'mypage')
        url = pigg.puzzle.data.CommonData.URL_MYPAGE_BG_BASE + type + '.png' + version;
    return url
}
;
pigg.puzzle.manager.VersionManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'VersionManager',
        qName: 'pigg.puzzle.manager.VersionManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.VersionManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'VersionManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.VersionManager'
                },
                'getVersionUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.manager.VersionManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getSpineUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.manager.VersionManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getBgUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.manager.VersionManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.PathConstraintData = function(name) {
    this._bones = org.apache.royale.utils.Language.Vector();
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.PathConstraintData', spine.PathConstraintData);
spine.PathConstraintData.prototype._name;
spine.PathConstraintData.prototype.order;
spine.PathConstraintData.prototype._bones;
spine.PathConstraintData.prototype.target;
spine.PathConstraintData.prototype.positionMode;
spine.PathConstraintData.prototype.spacingMode;
spine.PathConstraintData.prototype.rotateMode;
spine.PathConstraintData.prototype.offsetRotation;
spine.PathConstraintData.prototype.position;
spine.PathConstraintData.prototype.spacing;
spine.PathConstraintData.prototype.rotateMix;
spine.PathConstraintData.prototype.translateMix;
spine.PathConstraintData.prototype.toString = function() {
    return this.name
}
;
spine.PathConstraintData.prototype.get__bones = function() {
    return this._bones
}
;
spine.PathConstraintData.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.PathConstraintData.prototype, {
    bones: {
        get: spine.PathConstraintData.prototype.get__bones
    },
    name: {
        get: spine.PathConstraintData.prototype.get__name
    }
});
spine.PathConstraintData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathConstraintData',
        qName: 'spine.PathConstraintData',
        kind: 'class'
    }]
};
spine.PathConstraintData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'order': {
                    type: 'Number'
                },
                'target': {
                    type: 'spine.SlotData'
                },
                'positionMode': {
                    type: 'spine.PositionMode'
                },
                'spacingMode': {
                    type: 'spine.SpacingMode'
                },
                'rotateMode': {
                    type: 'spine.RotateMode'
                },
                'offsetRotation': {
                    type: 'Number'
                },
                'position': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cspine.BoneData\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.PathConstraintData'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.PathConstraintData'
                }
            }
        },
        methods: function() {
            return {
                'PathConstraintData': {
                    type: '',
                    declaredBy: 'spine.PathConstraintData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.PathConstraintData'
                }
            }
        }
    }
}
;
spine.animation.Animation = function(name, timelines, duration) {
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    if (timelines == null)
        throw new openfl.errors.ArgumentError('timelines cannot be null.');
    this._name = name;
    this._timelines = timelines;
    this.duration = duration
}
;
goog.exportSymbol('spine.animation.Animation', spine.animation.Animation);
spine.animation.Animation.prototype._name;
spine.animation.Animation.prototype._timelines;
spine.animation.Animation.prototype.duration;
spine.animation.Animation.prototype.apply = function(skeleton, lastTime, time, loop, events, alpha, pose, direction) {
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    if (loop && this.duration != 0) {
        time %= this.duration;
        if (lastTime > 0)
            lastTime %= this.duration
    }
    var n = this.timelines.length;
    for (var i = 0; i < n; i++)
        this.timelines[i].apply(skeleton, lastTime, time, events, alpha, pose, direction)
}
;
spine.animation.Animation.prototype.toString = function() {
    return this._name
}
;
spine.animation.Animation.binarySearch = function(values, target, step) {
    var low = 0;
    var high = values.length / step - 2;
    if (high == 0)
        return step;
    var current = high >>> 1;
    while (true) {
        if (values[org.apache.royale.utils.Language._int((current + 1) * step)] <= target)
            low = current + 1;
        else
            high = current;
        if (low == high)
            return (low + 1) * step;
        current = low + high >>> 1
    }
    return 0
}
;
spine.animation.Animation.binarySearch1 = function(values, target) {
    var low = 0;
    var high = values.length - 2;
    if (high == 0)
        return 1;
    var current = high >>> 1;
    while (true) {
        if (values[org.apache.royale.utils.Language._int(current + 1)] <= target)
            low = current + 1;
        else
            high = current;
        if (low == high)
            return low + 1;
        current = low + high >>> 1
    }
    return 0
}
;
spine.animation.Animation.linearSearch = function(values, target, step) {
    for (; i <= last; i += step)
        if (values[i] > target)
            return i;
    return -1
}
;
spine.animation.Animation.prototype.get__timelines = function() {
    return this._timelines
}
;
spine.animation.Animation.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.animation.Animation.prototype, {
    timelines: {
        get: spine.animation.Animation.prototype.get__timelines
    },
    name: {
        get: spine.animation.Animation.prototype.get__name
    }
});
spine.animation.Animation.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Animation',
        qName: 'spine.animation.Animation',
        kind: 'class'
    }]
};
spine.animation.Animation.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '_timelines': {
                    type: 'Vector.\x3cspine.animation.Timeline\x3e'
                },
                'duration': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'timelines': {
                    type: 'Vector.\x3cspine.animation.Timeline\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.animation.Animation'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.animation.Animation'
                }
            }
        },
        methods: function() {
            return {
                'Animation': {
                    type: '',
                    declaredBy: 'spine.animation.Animation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Vector.\x3cspine.animation.Timeline\x3e',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.Animation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Boolean',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 8,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.animation.Animation'
                },
                '|binarySearch': {
                    type: 'int',
                    declaredBy: 'spine.animation.Animation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                '|binarySearch1': {
                    type: 'int',
                    declaredBy: 'spine.animation.Animation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|linearSearch': {
                    type: 'int',
                    declaredBy: 'spine.animation.Animation',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
var comm = {};
comm.adobe = {};
comm.adobe.serialization = {};
comm.adobe.serialization.json = {};
comm.adobe.serialization.json.JSONDecoder = function(s, strict) {
    this.strict = strict;
    this.tokenizer = new comm.adobe.serialization.json.JSONTokenizer(s,strict);
    this.nextToken();
    this.value = this.parseValue();
    if (strict && this.nextToken() != null)
        this.tokenizer.parseError('Unexpected characters left in input stream')
}
;
goog.exportSymbol('comm.adobe.serialization.json.JSONDecoder', comm.adobe.serialization.json.JSONDecoder);
comm.adobe.serialization.json.JSONDecoder.prototype.strict;
comm.adobe.serialization.json.JSONDecoder.prototype.value;
comm.adobe.serialization.json.JSONDecoder.prototype.tokenizer;
comm.adobe.serialization.json.JSONDecoder.prototype.token;
comm.adobe.serialization.json.JSONDecoder.prototype.getValue = function() {
    return this.value
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.nextToken = function() {
    return this.token = this.tokenizer.getNextToken()
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.nextValidToken = function() {
    this.token = this.tokenizer.getNextToken();
    this.checkValidToken();
    return this.token
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.checkValidToken = function() {
    if (this.token == null)
        this.tokenizer.parseError('Unexpected end of input')
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.parseArray = function() {
    var a = new Array;
    this.nextValidToken();
    if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET)
        return a;
    else if (!this.strict && this.token.type == comm.adobe.serialization.json.JSONTokenType.COMMA) {
        this.nextValidToken();
        if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET)
            return a;
        else
            this.tokenizer.parseError("Leading commas are not supported.  Expecting ']' but found " + this.token.value)
    }
    while (true) {
        a.push(this.parseValue());
        this.nextValidToken();
        if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET)
            return a;
        else if (this.token.type == comm.adobe.serialization.json.JSONTokenType.COMMA) {
            this.nextToken();
            if (!this.strict) {
                this.checkValidToken();
                if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET)
                    return a
            }
        } else
            this.tokenizer.parseError('Expecting ] or , but found ' + this.token.value)
    }
    return null
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.parseObject = function() {
    var o = new Object;
    var key;
    this.nextValidToken();
    if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE)
        return o;
    else if (!this.strict && this.token.type == comm.adobe.serialization.json.JSONTokenType.COMMA) {
        this.nextValidToken();
        if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE)
            return o;
        else
            this.tokenizer.parseError("Leading commas are not supported.  Expecting '}' but found " + this.token.value)
    }
    while (true)
        if (this.token.type == comm.adobe.serialization.json.JSONTokenType.STRING) {
            key = String(this.token.value);
            this.nextValidToken();
            if (this.token.type == comm.adobe.serialization.json.JSONTokenType.COLON) {
                this.nextToken();
                o[key] = this.parseValue();
                this.nextValidToken();
                if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE)
                    return o;
                else if (this.token.type == comm.adobe.serialization.json.JSONTokenType.COMMA) {
                    this.nextToken();
                    if (!this.strict) {
                        this.checkValidToken();
                        if (this.token.type == comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE)
                            return o
                    }
                } else
                    this.tokenizer.parseError('Expecting } or , but found ' + this.token.value)
            } else
                this.tokenizer.parseError('Expecting : but found ' + this.token.value)
        } else
            this.tokenizer.parseError('Expecting string but found ' + this.token.value);
    return null
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.parseValue = function() {
    this.checkValidToken();
    switch (this.token.type) {
    case comm.adobe.serialization.json.JSONTokenType.LEFT_BRACE:
        return this.parseObject();
    case comm.adobe.serialization.json.JSONTokenType.LEFT_BRACKET:
        return this.parseArray();
    case comm.adobe.serialization.json.JSONTokenType.STRING:
    case comm.adobe.serialization.json.JSONTokenType.NUMBER:
    case comm.adobe.serialization.json.JSONTokenType.TRUE:
    case comm.adobe.serialization.json.JSONTokenType.FALSE:
    case comm.adobe.serialization.json.JSONTokenType.NULL:
        return this.token.value;
    case comm.adobe.serialization.json.JSONTokenType.NAN:
        if (!this.strict)
            return this.token.value;
        else
            this.tokenizer.parseError('Unexpected ' + this.token.value);
    default:
        this.tokenizer.parseError('Unexpected ' + this.token.value)
    }
    return null
}
;
comm.adobe.serialization.json.JSONDecoder.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSONDecoder',
        qName: 'comm.adobe.serialization.json.JSONDecoder',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSONDecoder.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'JSONDecoder': {
                    type: '',
                    declaredBy: 'comm.adobe.serialization.json.JSONDecoder',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'getValue': {
                    type: '*',
                    declaredBy: 'comm.adobe.serialization.json.JSONDecoder'
                }
            }
        }
    }
}
;
pigg.puzzle.view = {};
pigg.puzzle.view.CommonView = function() {
    openfl.display.Sprite.call(this)
}
;
goog.inherits(pigg.puzzle.view.CommonView, openfl.display.Sprite);
goog.exportSymbol('pigg.puzzle.view.CommonView', pigg.puzzle.view.CommonView);
pigg.puzzle.view.CommonView.THEME_PIECE = 0;
pigg.puzzle.view.CommonView.THEME_JELLY = 1;
pigg.puzzle.view.CommonView.THEME_ORDER = 2;
pigg.puzzle.view.CommonView.THEME_SCORE = 3;
pigg.puzzle.view.CommonView.THEME_BEAR = 4;
pigg.puzzle.view.CommonView.THEME_FLOWER = 5;
pigg.puzzle.view.CommonView.MATERIAL_VIEW_X = 32;
pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y = 220;
pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_X = 0;
pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y = 780;
pigg.puzzle.view.CommonView.BASE_WIDTH = 812;
pigg.puzzle.view.CommonView.BASE_HEIGHT = 526;
pigg.puzzle.view.CommonView.BASE_OUTLINE_WIDTH = 6;
pigg.puzzle.view.CommonView.GAME_PANEL_ITEM_X = 737;
pigg.puzzle.view.CommonView.GAME_PANEL_ITEM_Y = 0;
pigg.puzzle.view.CommonView.GAME_PANEL_THEME_X = 24;
pigg.puzzle.view.CommonView.GAME_PANEL_THEME_Y = 104;
pigg.puzzle.view.CommonView.GAME_PANEL_MENUBTN_X = 20;
pigg.puzzle.view.CommonView.GAME_PANEL_MENUBTN_Y = 448;
pigg.puzzle.view.CommonView.GAME_PANEL_SETTING_X = 50;
pigg.puzzle.view.CommonView.GAME_PANEL_SETTING_Y = 460;
pigg.puzzle.view.CommonView.GAME_CHEAT_ITEM_HUKUROU_X = 765;
pigg.puzzle.view.CommonView.GAME_CHEAT_ITEM_HUKUROU_Y = 96;
pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE = 10;
pigg.puzzle.view.CommonView.POINT_MATCH_3 = 10;
pigg.puzzle.view.CommonView.POINT_MATCH_4 = 20;
pigg.puzzle.view.CommonView.POINT_MATCH_5 = 30;
pigg.puzzle.view.CommonView.POINT_STUMP = 10;
pigg.puzzle.view.CommonView.POINT_HONEY = 150;
pigg.puzzle.view.CommonView.POINT_HONEYCOMB = 1E3;
pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_S = 2E3;
pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_M = 5E3;
pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_L = 1E4;
pigg.puzzle.view.CommonView.POINT_SILVER = 1E3;
pigg.puzzle.view.CommonView.POINT_GOLD = 3E3;
pigg.puzzle.view.CommonView.POINT_FLOWER = 20;
pigg.puzzle.view.CommonView.THROUGH_MISSION = 99;
pigg.puzzle.view.CommonView.THROUGH_MOVETIMES = 100;
pigg.puzzle.view.CommonView.THROUGH_SELECT_POTION = 101;
pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE = 102;
pigg.puzzle.view.CommonView.CHEAT_ITEM_SWITCH = 'puzzle_cheat_switch';
pigg.puzzle.view.CommonView.CHEAT_ITEM_DELETE = 'puzzle_cheat_delete';
pigg.puzzle.view.CommonView.CHEAT_ITEM_ARROW = 'puzzle_cheat_arrow';
pigg.puzzle.view.CommonView.CHEATITEM_TYPE_SWITCH = 0;
pigg.puzzle.view.CommonView.CHEATITEM_TYPE_EREASE = 1;
pigg.puzzle.view.CommonView.CHEATITEM_TYPE_ARROW = 2;
pigg.puzzle.view.CommonView.EVENT_STEP_MAX = 8;
pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT = 13;
pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT = 12;
pigg.puzzle.view.CommonView.TUTORIAL_CLEAR = 6;
pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND = 4;
pigg.puzzle.view.CommonView.ENABLE_CHEATITEM_TUTORIAL_STEP = 6;
pigg.puzzle.view.CommonView.TUTORIAL_PPOINT_CLEAR_ACT_ID = 'puzzle_tutorial_clear';
pigg.puzzle.view.CommonView.SCENE_MAP = 1;
pigg.puzzle.view.CommonView.SCENE_GAME = 2;
pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X = 11;
pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y = 9;
pigg.puzzle.view.CommonView.BALL_SIZE = 64;
pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
pigg.puzzle.view.CommonView.SCORE_ITEM_3 = 'puzzle_score_3';
pigg.puzzle.view.CommonView.SCORE_ITEM_5 = 'puzzle_score_5';
pigg.puzzle.view.CommonView.SCORE_ITEM_10 = 'puzzle_score_10';
pigg.puzzle.view.CommonView.SCORE_ITEM_20 = 'puzzle_score_20';
pigg.puzzle.view.CommonView.POTION_MAGNIFICATION = [3, 5, 10, 20];
pigg.puzzle.view.CommonView.STAGE_WIDTH = 640;
pigg.puzzle.view.CommonView.STAGE_HEIGHT = 906;
pigg.puzzle.view.CommonView.TILEMAP_WIDTH = 780;
pigg.puzzle.view.CommonView.TILEMAP_HEIGHT = 700;
pigg.puzzle.view.CommonView.MYPAGE_WIDTH = 640;
pigg.puzzle.view.CommonView.MYPAGE_HEIGHT = 838;
pigg.puzzle.view.CommonView.ANIMAL_CODE = ['risu', 'harinezumi', 'shika', 'kitsune', 'tanuki', 'saru', 'wolf', 'kuma', 'hukurouQuarter'];
pigg.puzzle.view.CommonView.FAILED_REASON_TXT = ['\u30b0\u30df\u3092\u3059\u3079\u3066\u96c6\u3081\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f', '\u30cf\u30c1\u30df\u30c4\u3092\u3059\u3079\u3066\u96c6\u3081\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f', '\u306f\u3061\u306e\u5de3\u3092\u3059\u3079\u3066\u843d\u3068\u305b\u307e\u305b\u3093\u3067\u3057\u305f', '\u30b0\u30df\u30dd\u30a4\u30f3\u30c8\u3092\u96c6\u3081\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f', '\u30de\u30b7\u30e5\u30de\u30ed\u3046\u3055\u304e\u3092\u3059\u3079\u3066\u63a2\u305b\u307e\u305b\u3093\u3067\u3057\u305f', '\u82b1\u3092\u3059\u3079\u3066\u96c6\u3081\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f'];
pigg.puzzle.view.CommonView.CONF_PUZZLE_VER = 'puzzleVer';
pigg.puzzle.view.CommonView.CONF_RANKING_INVISIBLE = 'puzzleRankingInvisible';
pigg.puzzle.view.CommonView.RECT_THEME_PIECE = [0, 1, 2, 3, 4, 5];
pigg.puzzle.view.CommonView.RECT_THEME_ACORN = [6, 7];
pigg.puzzle.view.CommonView.RECT_THEME_JELLY = 8;
pigg.puzzle.view.CommonView.RECT_THEME_BEAR = 9;
pigg.puzzle.view.CommonView.RECT_THEME_POINT = 10;
pigg.puzzle.view.CommonView.RECT_THEME_FLOWER = 11;
pigg.puzzle.view.CommonView.RECT_THROUGH_PIECE = [0, 1, 2, 3, 4, 5];
pigg.puzzle.view.CommonView.RECT_THROUGH_POINT = 7;
pigg.puzzle.view.CommonView.RECT_THROUGH_FLOWER = 6;
pigg.puzzle.view.CommonView.RECT_THROUGH_ORDER = [8, 9];
pigg.puzzle.view.CommonView.RECT_THROUGH_JELLY = 10;
pigg.puzzle.view.CommonView.RECT_THROUGH_MISSION = 11;
pigg.puzzle.view.CommonView.RECT_THROUGH_BEAR = [12, 13, 14];
pigg.puzzle.view.CommonView.RECT_THROUGH_MOVETIMES = 18;
pigg.puzzle.view.CommonView.RECT_THROUGH_SELECT_POTION = [19, 20, 21, 22];
pigg.puzzle.view.CommonView.RECT_POINT_10 = [];
pigg.puzzle.view.CommonView.RECT_POINT_20 = [];
pigg.puzzle.view.CommonView.RECT_POINT_30 = [];
pigg.puzzle.view.CommonView.RECT_POINT_40 = [];
pigg.puzzle.view.CommonView.RECT_POINT_50 = [];
pigg.puzzle.view.CommonView.RECT_POINT_60 = [];
pigg.puzzle.view.CommonView.RECT_POINT_70 = [];
pigg.puzzle.view.CommonView.RECT_POINT_80 = [];
pigg.puzzle.view.CommonView.RECT_POINT_90 = [];
pigg.puzzle.view.CommonView.RECT_POINT_100 = [];
pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS = 'Rounded Mplus 1c';
pigg.puzzle.view.CommonView.prototype._pattern = /(\d)(?=(\d{3})+(?!\d))/g;
pigg.puzzle.view.CommonView.prototype._versionManager;
pigg.puzzle.view.CommonView.prototype._main;
pigg.puzzle.view.CommonView.prototype.makeBaseMask = function(spr) {
    spr.graphics.beginFill(65535, 1);
    spr.graphics.drawRoundRect(pigg.puzzle.view.CommonView.BASE_OUTLINE_WIDTH, pigg.puzzle.view.CommonView.BASE_OUTLINE_WIDTH, pigg.puzzle.view.CommonView.BASE_WIDTH - pigg.puzzle.view.CommonView.BASE_OUTLINE_WIDTH * 2, pigg.puzzle.view.CommonView.BASE_HEIGHT - pigg.puzzle.view.CommonView.BASE_OUTLINE_WIDTH * 2, 26, 26);
    spr.graphics.endFill()
}
;
pigg.puzzle.view.CommonView.prototype.makeBackBlack = function() {
    var spr = new openfl.display.Sprite;
    spr.graphics.beginFill(0, .5);
    spr.graphics.drawRect(0, 0, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
    spr.graphics.endFill();
    return spr
}
;
pigg.puzzle.view.CommonView.prototype.insertComma = function(s) {
    var commaStr = String(s).replace(this._pattern, '$1,');
    return commaStr
}
;
pigg.puzzle.view.CommonView.prototype.onLoadThumbnail = function(code, bmd, icon) {
    icon = typeof icon !== 'undefined' ? icon : null;
    var bitmap = new openfl.display.Bitmap(bmd);
    if (icon)
        icon.addChild(bitmap)
}
;
pigg.puzzle.view.CommonView.prototype.drawPIMask = function(setPer, spirite) {
    spirite = typeof spirite !== 'undefined' ? spirite : null;
    var size = 60;
    var spr;
    if (spirite == null)
        spr = new openfl.display.Sprite;
    else
        while (spirite.numChildren > 0)
            spirite.removeChildAt(0);
    var baseShape = new openfl.display.Shape;
    var addShape = new openfl.display.Shape;
    var rot = setPer * 3.6;
    var baseTriangleNum = org.apache.royale.utils.Language._int(rot / 90);
    var addTriangleNum = rot % 90;
    baseShape.graphics.clear();
    addShape.graphics.clear();
    if (baseTriangleNum > 0) {
        baseShape.graphics.beginFill(0, 1);
        baseShape.graphics.moveTo(0, 0);
        baseShape.graphics.lineTo(size, 0);
        baseShape.graphics.lineTo(0, size);
        if (baseTriangleNum > 1)
            baseShape.graphics.lineTo(-size, 0);
        if (baseTriangleNum > 2)
            baseShape.graphics.lineTo(0, -size);
        if (baseTriangleNum > 3)
            baseShape.graphics.lineTo(size, 0);
        else
            baseShape.graphics.lineTo(0, 0);
        baseShape.graphics.endFill()
    }
    baseShape.rotation = -90;
    var dx = Math.cos(addTriangleNum * Math.PI / 180) * size;
    var dy = Math.sin(addTriangleNum * Math.PI / 180) * size;
    addShape.graphics.beginFill(0, 1);
    addShape.graphics.moveTo(0, 0);
    addShape.graphics.lineTo(size, 0);
    addShape.graphics.lineTo(dx, dy);
    addShape.graphics.endFill();
    addShape.rotation = -90 + baseTriangleNum * 90;
    if (spirite == null) {
        spr.addChild(baseShape);
        spr.addChild(addShape)
    } else {
        spirite.addChild(baseShape);
        spirite.addChild(addShape)
    }
    return spr
}
;
pigg.puzzle.view.CommonView.prototype.getDigit = function(num) {
    if (num < 0)
        num *= -1;
    return org.apache.royale.utils.Language._int(Math.log(num) * Math.LOG10E) + 1
}
;
pigg.puzzle.view.CommonView.prototype.removeFromParent = function(mc) {
    if (mc == null)
        return;
    if (mc.parent == null)
        return;
    mc.parent.removeChild(mc)
}
;
pigg.puzzle.view.CommonView.prototype.removeTile = function(tile, clean) {
    clean = typeof clean !== 'undefined' ? clean : false;
    if (tile == null)
        return;
    if (tile.parent == null)
        return;
    tile.parent.removeTile(tile);
    tile = null
}
;
pigg.puzzle.view.CommonView.prototype.makeContainer = function() {
    return new openfl.display.Sprite
}
;
pigg.puzzle.view.CommonView.prototype.makeTextField = function(size, color, align) {
    size = typeof size !== 'undefined' ? size : 20;
    color = typeof color !== 'undefined' ? color : 65535;
    align = typeof align !== 'undefined' ? align : 'LEFT';
    var format = new openfl.text.TextFormat('Rounded Mplus 1c',size,color);
    format.align = align;
    var tf = new openfl.text.TextField;
    tf.defaultTextFormat = format;
    tf.autoSize = align;
    tf.embedFonts = true;
    tf.selectable = false;
    return tf
}
;
pigg.puzzle.view.CommonView.prototype.getVersionUrl = function(baseUrl) {
    if (this._versionManager == null)
        this._versionManager = new pigg.puzzle.manager.VersionManager;
    return this._versionManager.getVersionUrl(baseUrl)
}
;
pigg.puzzle.view.CommonView.prototype.getSpineUrl = function(animal, type) {
    if (this._versionManager == null)
        this._versionManager = new pigg.puzzle.manager.VersionManager;
    return this._versionManager.getSpineUrl(animal, type)
}
;
pigg.puzzle.view.CommonView.prototype.getBgUrl = function(type, appType) {
    if (this._versionManager == null)
        this._versionManager = new pigg.puzzle.manager.VersionManager;
    return this._versionManager.getBgUrl(type, appType)
}
;
pigg.puzzle.view.CommonView.prototype.makeCloseBtn = function(main, click) {
    var self = this;
    click = typeof click !== 'undefined' ? click : null;
    var __localFn0__ = function(e) {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_CANCEL);
        com.greensock.TweenMax.to(closeTile, .1, {
            ease: com.greensock.easing.Cubic.easeOut,
            scaleX: 2,
            scaleY: 2
        })
    };
    var __localFn1__ = function(e) {
        com.greensock.TweenMax.to(closeTile, .1, {
            ease: com.greensock.easing.Cubic.easeOut,
            scaleX: 1,
            scaleY: 1
        })
    };
    var __localFn2__ = function(e) {
        closeTile.scaleX = closeTile.scaleY = 2;
        com.greensock.TweenMax.to(closeTile, .3, {
            ease: com.greensock.easing.Back.easeOut,
            scaleX: 1,
            scaleY: 1
        });
        if (click)
            click()
    };
    if (this._main == null)
        this._main = main;
    var spr = new openfl.display.Sprite;
    var closeTile;
    var closeTileset;
    closeTileset = main.commonPartsTileset.clone();
    closeTileset.addRect(new openfl.geom.Rectangle(827,105,44,44));
    var closeTilemap = new openfl.display.Tilemap(44 * 2,44 * 2,closeTileset);
    closeTile = new TileBase;
    closeTile.originX = 22;
    closeTile.originY = 22;
    closeTile.x = 22 * 2;
    closeTile.y = 22 * 2;
    closeTilemap.y = -22;
    closeTilemap.x = -22;
    closeTilemap.addTile(closeTile);
    spr.addChild(closeTilemap);
    var btn = new openfl.display.Sprite;
    btn.graphics.beginFill(16711680, 0);
    btn.graphics.drawRect(0, 0, 66, 66);
    btn.graphics.endFill();
    btn.x = -11;
    btn.y = -11;
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn1__);
    btn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn2__);
    spr.addChild(btn);
    return spr
}
;
pigg.puzzle.view.CommonView.prototype.makePanelBg = function(main) {
    if (this._main == null)
        this._main = main;
    var spr = new openfl.display.Sprite;
    var bgTileset;
    bgTileset = main.commonPartsTileset.clone();
    var bgTilemap = new openfl.display.Tilemap(584,610,bgTileset);
    var leftTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(1002,105,20,610)));
    var centerTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(1022,105,1,610)));
    var rightTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(1025,105,20,610)));
    bgTilemap.addTile(leftTile);
    bgTilemap.addTile(centerTile);
    bgTilemap.addTile(rightTile);
    centerTile.x = 20;
    centerTile.scaleX = 544;
    rightTile.x = 564;
    return bgTilemap
}
;
pigg.puzzle.view.CommonView.prototype.makeAlertBg = function(main, h) {
    h = typeof h !== 'undefined' ? h : 200;
    if (this._main == null)
        this._main = main;
    var bgTileset;
    bgTileset = main.commonPartsTileset.clone();
    var bgTilemap = new openfl.display.Tilemap(610,h,bgTileset);
    var topTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(54,910,610,20)));
    var centerTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(54,930,610,1)));
    var bottomTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(54,930,610,20)));
    bgTilemap.addTile(topTile);
    bgTilemap.addTile(centerTile);
    bgTilemap.addTile(bottomTile);
    centerTile.y = 20;
    centerTile.scaleY = h - 40;
    bottomTile.y = h - 20;
    return bgTilemap
}
;
pigg.puzzle.view.CommonView.prototype.makeBtnBg = function(main, btnType, w) {
    btnType = typeof btnType !== 'undefined' ? btnType : 0;
    w = typeof w !== 'undefined' ? w : 300;
    if (this._main == null)
        this._main = main;
    var bgTileset;
    bgTileset = main.commonPartsTileset.clone();
    var h = 0;
    if (btnType < 3)
        h = 100;
    else
        h = 72;
    var cutX = 155 + btnType * 31;
    var bgTilemap = new openfl.display.Tilemap(w,h,bgTileset);
    var leftTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(cutX,808,15,h)));
    var centerTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(cutX + 14,808,1,h)));
    var rightTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(cutX + 15,808,15,h)));
    bgTilemap.addTile(leftTile);
    bgTilemap.addTile(centerTile);
    bgTilemap.addTile(rightTile);
    centerTile.x = 15;
    centerTile.scaleX = w - 30;
    rightTile.x = w - 15;
    return bgTilemap
}
;
pigg.puzzle.view.CommonView.prototype.btnDownAction = function(spr) {
    if (spr == null)
        return;
    com.greensock.TweenMax.killTweensOf(spr);
    spr.scaleX = spr.scaleY = 1.2;
    com.greensock.TweenMax.to(spr, .6, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1, .4)
    });
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN)
}
;
pigg.puzzle.view.CommonView.prototype.moveToAboutItem = function() {
    openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_ABOUT_ITEM), '_blank')
}
;
pigg.puzzle.view.CommonView.prototype.addLocation = function(main) {
    var str = '';
    if (main.debugType != 'local' && window.location.href.indexOf('http://localhost:') == 0)
        str = 'http://s.dev.pigg.ameba.jp';
    return str
}
;
pigg.puzzle.view.CommonView.prototype.dropText = function(field) {
    var len = field.text.length;
    var str = field.text;
    var dropString = '...';
    if (field.textWidth > field.width) {
        for (var i = 0; i < len; i++) {
            str = str.substr(0, len - i);
            field.text = str + dropString;
            if (field.textWidth < field.width)
                break
        }
        field.text = str + dropString
    }
    field.text += '\n '
}
;
pigg.puzzle.view.CommonView.prototype.traceLog = function(Arguments) {
    Arguments = Array.prototype.slice.call(arguments, 0);
    if (!AsData.log)
        return;
    var str = '';
    str = Arguments.join(', ');
    org.apache.royale.utils.Language.trace(str)
}
;
pigg.puzzle.view.CommonView.prototype.makeItemPath = function(itemType, itemCode, size) {
    size = typeof size !== 'undefined' ? size : 135;
    var path;
    var type = itemType;
    if (type == 'cosmeticitem')
        type = 'cosmetic';
    path = '/stat/dat/' + type + '/' + size + '/' + itemCode.substr(0, 2) + '/' + itemCode + '.png';
    this.traceLog('makeItemPath::path\u751f\u6210::', path);
    return path
}
;
pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS = pigg.puzzle.view.CommonView.BALL_SIZE / 2;
pigg.puzzle.view.CommonView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'CommonView',
        qName: 'pigg.puzzle.view.CommonView',
        kind: 'class'
    }]
};
pigg.puzzle.view.CommonView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'CommonView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.CommonView'
                },
                'makeBaseMask': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'makeBackBlack': {
                    type: 'openfl.display.Sprite',
                    declaredBy: 'pigg.puzzle.view.CommonView'
                },
                'insertComma': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'onLoadThumbnail': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'drawPIMask': {
                    type: 'openfl.display.Sprite',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'getDigit': {
                    type: 'uint',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'removeFromParent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.DisplayObject',
                            optional: false
                        }]
                    }
                },
                'removeTile': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.Tile',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'makeContainer': {
                    type: 'openfl.display.Sprite',
                    declaredBy: 'pigg.puzzle.view.CommonView'
                },
                'makeTextField': {
                    type: 'openfl.text.TextField',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'uint',
                            optional: true
                        }, {
                            index: 3,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'getVersionUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getSpineUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getBgUrl': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'makeCloseBtn': {
                    type: 'openfl.display.Sprite',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Function',
                            optional: true
                        }]
                    }
                },
                'makePanelBg': {
                    type: 'openfl.display.Tilemap',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'makeAlertBg': {
                    type: 'openfl.display.Tilemap',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'makeBtnBg': {
                    type: 'openfl.display.Tilemap',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'btnDownAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }]
                    }
                },
                'moveToAboutItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView'
                },
                'addLocation': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'dropText': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.text.TextField',
                            optional: false
                        }]
                    }
                },
                'traceLog': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                },
                'makeItemPath': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.CommonView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.SpineView = function(name) {
    name = typeof name !== 'undefined' ? name : '';
    this._stackAction = [];
    this._stackMix = [];
    pigg.puzzle.view.CommonView.call(this);
    this._completeEvents = new Map;
    if (name != '')
        this.loadData(name)
}
;
goog.inherits(pigg.puzzle.view.SpineView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.SpineView', pigg.puzzle.view.SpineView);
pigg.puzzle.view.SpineView.prototype._skeleton;
pigg.puzzle.view.SpineView.prototype._ftl;
pigg.puzzle.view.SpineView.prototype._json = '';
pigg.puzzle.view.SpineView.prototype._atlas = '';
pigg.puzzle.view.SpineView.prototype._stackAction;
pigg.puzzle.view.SpineView.prototype._stackMix;
pigg.puzzle.view.SpineView.prototype._completeEvents;
pigg.puzzle.view.SpineView.prototype._completeFunc;
pigg.puzzle.view.SpineView.prototype._onLoadCompleteFunc;
pigg.puzzle.view.SpineView.prototype.loadData = function(name) {
    var urlRequest = new openfl.net.URLRequest(this.getSpineUrl(name, 'png'));
    var loader = new openfl.display.Loader;
    loader.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetPng, this, 'onGetPng'));
    loader.load(urlRequest);
    var urlLoader = new openfl.net.URLLoader;
    urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
    urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetAtlas, this, 'onGetAtlas'));
    urlLoader.load(new openfl.net.URLRequest(this.getSpineUrl(name, 'atlas')));
    var urlLoader2 = new openfl.net.URLLoader;
    urlLoader2.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
    urlLoader2.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetJson, this, 'onGetJson'));
    urlLoader2.load(new openfl.net.URLRequest(this.getSpineUrl(name, 'json')))
}
;
pigg.puzzle.view.SpineView.prototype.onGetPng = function(e) {
    var loaderInfo = org.apache.royale.utils.Language.as(e.target, openfl.display.LoaderInfo);
    var bitmapdata = org.apache.royale.utils.Language.as(loaderInfo.content, openfl.display.Bitmap, true).bitmapData;
    this._ftl = new spine.flash.FlashTextureLoader(bitmapdata);
    if (this._json != '' && this._atlas != '')
        this.startSpine(this._atlas, this._ftl)
}
;
pigg.puzzle.view.SpineView.prototype.onGetAtlas = function(e) {
    this._atlas = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    if (this._json != '' && this._ftl)
        this.startSpine(this._atlas, this._ftl)
}
;
pigg.puzzle.view.SpineView.prototype.onGetJson = function(e) {
    this._json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    if (this._atlas != '' && this._ftl)
        this.startSpine(this._atlas, this._ftl)
}
;
pigg.puzzle.view.SpineView.prototype.startSpine = function(atl, ftl) {
    var atlas = new spine.atlas.Atlas(atl,ftl);
    var json = new spine.SkeletonJson(new spine.attachments.AtlasAttachmentLoader(atlas));
    var skeletonData = json.readSkeletonData(this._json);
    var stateData = new spine.animation.AnimationStateData(skeletonData);
    this._skeleton = new spine.flash.SkeletonAnimation(skeletonData,stateData);
    this._skeleton.x = 0;
    this._skeleton.y = 0;
    this._skeleton.state.onComplete.add(org.apache.royale.utils.Language.closure(this.onCompleteEvent, this, 'onCompleteEvent'));
    this.addChild(this._skeleton);
    if (this._stackAction.length > 0)
        this.playAction(this._stackAction[0], this._stackAction[1], this._stackAction[2], this._stackAction[3]);
    this.applySetMixByName();
    if (this._onLoadCompleteFunc)
        this._onLoadCompleteFunc()
}
;
pigg.puzzle.view.SpineView.prototype._currentActionLoop = false;
pigg.puzzle.view.SpineView.prototype.playCount = 0;
pigg.puzzle.view.SpineView.prototype.playAction = function(key, loops, isLoop, delay) {
    loops = typeof loops !== 'undefined' ? loops : 1;
    isLoop = typeof isLoop !== 'undefined' ? isLoop : false;
    delay = typeof delay !== 'undefined' ? delay : 0;
    AsData.animation = true;
    this.traceLog('playAction::\u524d', AsData.isSpineAnimation, this.playCount);
    if (this.playCount > 0)
        AsData.isSpineAnimation -= this.playCount;
    if (isLoop) {
        AsData.isSpineAnimation++;
        this.playCount = 1
    } else {
        AsData.isSpineAnimation += loops;
        this.playCount = loops
    }
    this._currentActionLoop = isLoop;
    var cnt = 0;
    if (this._skeleton == null || this._skeleton.state == null) {
        this._stackAction = [key, loops, isLoop, delay];
        return
    }
    this._skeleton.state.onComplete.add(org.apache.royale.utils.Language.closure(this.onCompleteEvent, this, 'onCompleteEvent'));
    this.traceLog('playAction::', key, isLoop);
    this._skeleton.state.setAnimationByName(0, key, isLoop);
    if (loops > 1)
        for (cnt = 0; cnt < loops - 1; cnt++)
            this._skeleton.state.addAnimationByName(0, key, isLoop, delay)
}
;
pigg.puzzle.view.SpineView.prototype.stopAction = function() {
    if (this._skeleton == null)
        return;
    if (this._skeleton.state == null)
        return;
    this._skeleton.state.clearTracks();
    this.traceLog('stopAction::');
    if (this.playCount > 0) {
        AsData.isSpineAnimation -= this.playCount;
        this.playCount = 0
    }
}
;
pigg.puzzle.view.SpineView.prototype.stateSetMixByName = function(fromName, toName, delay) {
    if (this._skeleton == null || this._skeleton.state == null || this._skeleton.state.data == null) {
        this._stackMix.push([fromName, toName, delay]);
        return
    }
    this._skeleton.state.data.setMixByName(fromName, toName, delay)
}
;
pigg.puzzle.view.SpineView.prototype.applySetMixByName = function() {
    var cnt = 0
      , len = 0;
    len = this._stackMix.length;
    for (cnt = 0; cnt < len; cnt++)
        this._skeleton.state.data.setMixByName(this._stackMix[cnt][0], this._stackMix[cnt][1], this._stackMix[cnt][2]);
    this._stackMix = []
}
;
pigg.puzzle.view.SpineView.prototype.addCompleteAction = function(key, func) {
    this._completeEvents[key] = func
}
;
pigg.puzzle.view.SpineView.prototype.onCompleteEvent = function(entry) {
    if (!this._currentActionLoop && this.playCount > 0) {
        this.playCount--;
        AsData.isSpineAnimation--
    }
    this.traceLog(entry.trackIndex + ' complete:: ' + entry.animation.name);
    if (this._completeFunc)
        this._completeFunc(entry.animation.name)
}
;
pigg.puzzle.view.SpineView.prototype.clean = function() {
    this._skeleton = null;
    this._ftl = null;
    this._json = '';
    this._atlas = '';
    this._stackAction = [];
    this._stackMix = []
}
;
pigg.puzzle.view.SpineView.prototype.clone = function() {
    var spv = new pigg.puzzle.view.SpineView;
    spv.skeleton = this._skeleton;
    spv.ftl = this._ftl;
    spv.atlas = this._atlas;
    spv.json = this._json;
    spv.startSpine(spv.atlas, spv.ftl);
    return spv
}
;
pigg.puzzle.view.SpineView.prototype.get__skeleton = function() {
    return this._skeleton
}
;
pigg.puzzle.view.SpineView.prototype.set__skeleton = function(v) {
    this._skeleton = v
}
;
pigg.puzzle.view.SpineView.prototype.get__ftl = function() {
    return this._ftl
}
;
pigg.puzzle.view.SpineView.prototype.set__ftl = function(v) {
    this._ftl = v
}
;
pigg.puzzle.view.SpineView.prototype.get__atlas = function() {
    return this._atlas
}
;
pigg.puzzle.view.SpineView.prototype.set__atlas = function(v) {
    this._atlas = v
}
;
pigg.puzzle.view.SpineView.prototype.get__json = function() {
    return this._json
}
;
pigg.puzzle.view.SpineView.prototype.set__json = function(v) {
    this._json = v
}
;
pigg.puzzle.view.SpineView.prototype.get__completeFunc = function() {
    return this._completeFunc
}
;
pigg.puzzle.view.SpineView.prototype.set__completeFunc = function(v) {
    this._completeFunc = v
}
;
pigg.puzzle.view.SpineView.prototype.get__onLoadCompleteFunc = function() {
    return this._onLoadCompleteFunc
}
;
pigg.puzzle.view.SpineView.prototype.set__onLoadCompleteFunc = function(v) {
    this._onLoadCompleteFunc = v
}
;
Object.defineProperties(pigg.puzzle.view.SpineView.prototype, {
    skeleton: {
        get: pigg.puzzle.view.SpineView.prototype.get__skeleton,
        set: pigg.puzzle.view.SpineView.prototype.set__skeleton
    },
    ftl: {
        get: pigg.puzzle.view.SpineView.prototype.get__ftl,
        set: pigg.puzzle.view.SpineView.prototype.set__ftl
    },
    atlas: {
        get: pigg.puzzle.view.SpineView.prototype.get__atlas,
        set: pigg.puzzle.view.SpineView.prototype.set__atlas
    },
    json: {
        get: pigg.puzzle.view.SpineView.prototype.get__json,
        set: pigg.puzzle.view.SpineView.prototype.set__json
    },
    completeFunc: {
        get: pigg.puzzle.view.SpineView.prototype.get__completeFunc,
        set: pigg.puzzle.view.SpineView.prototype.set__completeFunc
    },
    onLoadCompleteFunc: {
        get: pigg.puzzle.view.SpineView.prototype.get__onLoadCompleteFunc,
        set: pigg.puzzle.view.SpineView.prototype.set__onLoadCompleteFunc
    }
});
pigg.puzzle.view.SpineView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SpineView',
        qName: 'pigg.puzzle.view.SpineView',
        kind: 'class'
    }]
};
pigg.puzzle.view.SpineView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'skeleton': {
                    type: 'spine.flash.SkeletonAnimation',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'ftl': {
                    type: 'spine.flash.FlashTextureLoader',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'atlas': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'json': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'completeFunc': {
                    type: 'Function',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'onLoadCompleteFunc': {
                    type: 'Function',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                }
            }
        },
        methods: function() {
            return {
                'SpineView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'onGetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'onGetAtlas': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'onGetJson': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'playAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'stopAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'stateSetMixByName': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'addCompleteAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Function',
                            optional: false
                        }]
                    }
                },
                'onCompleteEvent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                },
                'clone': {
                    type: 'pigg.puzzle.view.SpineView',
                    declaredBy: 'pigg.puzzle.view.SpineView'
                }
            }
        }
    }
}
;
pigg.puzzle.manager.MenuResultManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.RECT_GAME_RESULT = [];
    this.RECT_FAILED_DESCRIPTION = []
}
;
goog.inherits(pigg.puzzle.manager.MenuResultManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.MenuResultManager', pigg.puzzle.manager.MenuResultManager);
pigg.puzzle.manager.MenuResultManager.prototype._main;
pigg.puzzle.manager.MenuResultManager.prototype._gameView;
pigg.puzzle.manager.MenuResultManager.prototype._gameInfoContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameContinueUseCoinConfirmPanel;
pigg.puzzle.manager.MenuResultManager.prototype._gameContinueUseCoinShortagePanel;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmGiveUpPanel;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultPanel;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultClearTxts;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultPanelTxts;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmPanel;
pigg.puzzle.manager.MenuResultManager.prototype._confirmUseCoinContainer;
pigg.puzzle.manager.MenuResultManager.prototype._confirmUseCoinTxts;
pigg.puzzle.manager.MenuResultManager.prototype._confirmUseCoinCancelBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmUseCoinYesBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmShortageCoinContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameMenuSettingConfirmGiveUpPanel;
pigg.puzzle.manager.MenuResultManager.prototype._shortageCoinCancelBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._shortageCoinBuyBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._tweenResultCount = 0;
pigg.puzzle.manager.MenuResultManager.prototype._tweenResultCountQuantity = 0;
pigg.puzzle.manager.MenuResultManager.prototype._tweenResultCountTerm = 0;
pigg.puzzle.manager.MenuResultManager.prototype._failedPotionMagnification = 0;
pigg.puzzle.manager.MenuResultManager.prototype._asCoin = 0;
pigg.puzzle.manager.MenuResultManager.prototype._continuePrice = 0;
pigg.puzzle.manager.MenuResultManager.prototype._continueAddTimes = 0;
pigg.puzzle.manager.MenuResultManager.prototype._totalMissionPieceDisplayCount = 0;
pigg.puzzle.manager.MenuResultManager.prototype._missionPanel;
pigg.puzzle.manager.MenuResultManager.prototype._isWaitNextScene = false;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultTilemap;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultTileset;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultAnimalContainer;
pigg.puzzle.manager.MenuResultManager.prototype._currentPanelType = 0;
pigg.puzzle.manager.MenuResultManager.prototype._currentConfirmType = 0;
pigg.puzzle.manager.MenuResultManager.prototype._numberFontManager;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultClearContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultFailedContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultConfirmContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmRetireContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmGiveupContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameResultConfirmFailedContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearTxtAtoTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearTxtTotalTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearToStepClearTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearToLimitedTermTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearToLimitedQuantityTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearPointIconTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearWinningPlusTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearTermAtoTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameClearQuantityAtoTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameFailedPointIconTile;
pigg.puzzle.manager.MenuResultManager.prototype._gameFailedDescriptionTile;
pigg.puzzle.manager.MenuResultManager.prototype._resultClearNextbtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._resultClearDisableNextbtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._resultFailedNextbtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmRetireCancelBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmRetireBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmRetireTxtTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmGiveUpTxtTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmGiveUpBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmGiveUpContinueBtnSpr;
pigg.puzzle.manager.MenuResultManager.prototype._confirmGiveUpContinueSaleTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmGiveUpContinuePriceTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmRetirePointTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmRetireWinningPointContainer;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmTilemap;
pigg.puzzle.manager.MenuResultManager.prototype._gameConfirmTile;
pigg.puzzle.manager.MenuResultManager.prototype._confirmBlack;
pigg.puzzle.manager.MenuResultManager.prototype.clean = function() {
    this.removeFromParent(this._gameInfoContainer);
    this.removeFromParent(this._gameMenuSettingConfirmGiveUpPanel);
    this.removeFromParent(this._missionGaugeMaskSpr);
    this._main = null;
    this._gameView = null;
    this._gameInfoContainer = null;
    this._gameMenuSettingConfirmGiveUpPanel = null;
    this._missionGaugeMaskSpr = null
}
;
pigg.puzzle.manager.MenuResultManager.prototype.init = function(main, gameView, gInfoCont) {
    this._main = main;
    this._gameView = gameView;
    this._gameInfoContainer = gInfoCont;
    this._numberFontManager = this._gameView.numberFontManager;
    this.initGameResultPanel()
}
;
pigg.puzzle.manager.MenuResultManager.prototype.RECT_GAME_RESULT;
pigg.puzzle.manager.MenuResultManager.prototype.RECT_MENU_CONFIRM_GIVEUP = 6;
pigg.puzzle.manager.MenuResultManager.prototype._resultParticleView;
pigg.puzzle.manager.MenuResultManager.prototype.initGameResultPanel = function() {
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    this._gameResultPanel = new openfl.display.Sprite;
    this._gameInfoContainer.addChild(this._gameResultPanel);
    this._gameConfirmPanel = new openfl.display.Sprite;
    this._gameResultTileset = this._main.gamePanelTileset.clone();
    var bgTilemap = this.makePanelBg(this._main);
    this._gameResultPanel.addChild(bgTilemap);
    this._gameResultPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.panelCL, this, 'panelCL'));
    this._gameResultPanel.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.panelMD, this, 'panelMD'));
    this._gameConfirmPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.confirmPanelCL, this, 'confirmPanelCL'));
    this._gameConfirmPanel.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.confirmPanelMD, this, 'confirmPanelMD'));
    this._gameResultPanelTxts = new openfl.display.Sprite;
    this._gameResultPanelTxts.x = 40;
    this._gameResultPanelTxts.y = 130;
    this._gameResultClearTxts = new openfl.display.Sprite;
    this._gameResultClearTxts.y = 130;
    this._gameResultPanel.addChild(this._gameResultPanelTxts);
    this._numberFontManager.makeFontInfo('resultClearTxt', 600, 400, this._gameResultClearTxts, 16478724, 16777215, 320, 82);
    this._numberFontManager.addFontType('resultClearTxt', 16777215, 7916320, 244, 3, 6.6, 'RIGHT');
    this._numberFontManager.addFontType('resultClearTxt', 16777215, 7916320, 975, 10, 5, 'RIGHT');
    this._numberFontManager.addFontType('resultClearTxt', 6568219, 6568219, 586, 230, 4.5);
    this._numberFontManager.makeFontInfo('resultClearRemainTxt', 600, 400, this._gameResultClearTxts, 16777215, 6829076, 490, 270, 6.5, 'CENTER', false, true);
    this._numberFontManager.makeFontInfo('confirmGiveupTxt', 600, 400, this._gameResultPanelTxts, 16478724, 16478724, 278, 66);
    this._gameResultAnimalContainer = new openfl.display.Sprite;
    this._gameResultPanel.addChild(this._gameResultAnimalContainer);
    this._gameResultAnimalContainer.scaleX = this._gameResultAnimalContainer.scaleY = .6;
    this._gameResultAnimalContainer.x = 40;
    this._gameResultAnimalContainer.y = 520;
    this._gameResultPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH;
    this._resultParticleView = new pigg.puzzle.view.ParticleView(this._main);
    this._resultParticleView.init(640, 600);
    this._resultParticleView.x = -28;
    this._resultParticleView.y = 0;
    this._gameResultPanel.addChild(this._resultParticleView)
}
;
pigg.puzzle.manager.MenuResultManager.prototype.initMissionPanel = function() {
    this.traceLog('initMissionPanel')
}
;
pigg.puzzle.manager.MenuResultManager.prototype.initDisp = function() {
    this._gameResultPanel.x = 0;
    this._gameResultPanel.cacheAsBitmap = false;
    this._numberFontManager.removeNumber('resultClearRemainTxt');
    this._numberFontManager.removeNumber('resultClearTxt');
    this._numberFontManager.removeNumber('confirmGiveupTxt');
    this._numberFontManager.removeNumber('resultFailedTxt');
    this._numberFontManager.removeNumber('resultClearLimitedTermRemainTxt');
    this._numberFontManager.removeNumber('resultClearLimitedQuantityRemainTxt');
    if (this._gameResultClearContainer)
        this._gameResultClearContainer.visible = false;
    if (this._gameResultFailedContainer)
        this._gameResultFailedContainer.visible = false;
    if (this._gameConfirmGiveupContainer)
        this._gameConfirmGiveupContainer.visible = false;
    if (this._gameConfirmRetireContainer)
        this._gameConfirmRetireContainer.visible = false;
    this._gameConfirmPanel.x = 15;
    this._gameResultPanel.x = 28
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hidePanel = function() {
    if (this._gameResultPanel.parent)
        this.traceLog('hidePanel::removeFromParent(_gameResultPanel);');
    this.removeFromParent(this._gameResultPanel)
}
;
pigg.puzzle.manager.MenuResultManager.prototype.showResultClearPanel = function() {
    this.initDisp();
    this._gameView.showBgBlack();
    if (this._gameResultClearContainer == null) {
        this._gameResultClearContainer = new openfl.display.Sprite;
        this._gameResultPanel.addChildAt(this._gameResultClearContainer, 1);
        var bgTileset = this._main.gamePanelTileset.clone();
        bgTileset.addRect(new openfl.geom.Rectangle(0,997,532,470));
        var bgTilemap = new openfl.display.Tilemap(532,610,bgTileset);
        bgTilemap.addTile(new openfl.display.Tile);
        bgTilemap.x = 26;
        bgTilemap.addTile(this._gameClearTxtAtoTile = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(905,552,61,35))));
        bgTilemap.addTile(this._gameClearToStepClearTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(534,540,198,21))));
        bgTilemap.addTile(this._gameClearTxtTotalTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(534,563,249,22))));
        bgTilemap.addTile(this._gameClearToLimitedTermTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(534,587,268,22))));
        bgTilemap.addTile(this._gameClearToLimitedQuantityTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(534,611,270,22))));
        bgTilemap.addTile(this._gameClearPointIconTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(973,1,58,57))));
        bgTilemap.addTile(this._gameClearWinningPlusTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(906,520,19,19))));
        this._gameClearToStepClearTile.y = 360;
        this._gameClearToStepClearTile.x = 160;
        this._gameClearWinningPlusTile.x = 386;
        this._gameClearWinningPlusTile.y = 141;
        this._gameClearTxtAtoTile.x = 180;
        this._gameClearTxtAtoTile.y = 400;
        this._gameClearToLimitedTermTile.x = 129;
        this._gameClearToLimitedTermTile.y = 360;
        this._gameClearToLimitedQuantityTile.x = 129;
        this._gameClearToLimitedQuantityTile.y = 360;
        this._gameClearTxtTotalTile.x = 139;
        this._gameClearTxtTotalTile.y = 360;
        this._resultClearNextbtnSpr = new openfl.display.Sprite;
        var btnTilemap = this.makeBtnBg(this._main, 0, 300);
        var tl;
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,754,213,30))));
        tl.x = 44;
        tl.y = 35;
        this._resultClearNextbtnSpr.addChild(btnTilemap);
        btnTilemap.x = -150;
        btnTilemap.y = -50;
        this._gameResultClearContainer.addChild(this._resultClearNextbtnSpr);
        this._resultClearNextbtnSpr.x = 142 + 150;
        this._resultClearNextbtnSpr.y = 480 + 50;
        this._resultClearDisableNextbtnSpr = new openfl.display.Sprite;
        btnTilemap = this.makeBtnBg(this._main, 2, 300);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,754,213,30))));
        tl.x = 44;
        tl.y = 35;
        this._resultClearDisableNextbtnSpr.addChild(btnTilemap);
        btnTilemap.x = -150;
        btnTilemap.y = -50;
        this._gameResultClearContainer.addChild(this._resultClearDisableNextbtnSpr);
        this._resultClearDisableNextbtnSpr.x = 142 + 150;
        this._resultClearDisableNextbtnSpr.y = 480 + 50;
        this._resultClearDisableNextbtnSpr.visible = false;
        this._gameClearPointIconTile.x = 125;
        this._gameClearPointIconTile.y = 205;
        this._gameResultClearContainer.addChild(bgTilemap);
        this._gameResultClearContainer.addChild(this._gameResultClearTxts)
    }
    this._gameResultClearContainer.visible = true;
    if (this._gameResultFailedContainer)
        this._gameResultFailedContainer.visible = false;
    if (this._main.existMission && this._missionPanel == null)
        this.initMissionPanel();
    this._currentPanelType = 0;
    this.traceLog('showResultClearPanel::_gameInfoContainer.addChild(_gameResultPanel);', this._totalMissionPieceDisplayCount);
    var targetRemainPoint = -1;
    this.traceLog('showResultClearPanel::\u7d2f\u8a08\u3001\u9023\u7d9a\u3001\u9023\u7d9aP::', this._gameView.currentGameScore, this._main.keepClearCount, this._gameView.winningPoint);
    this._numberFontManager.makeNumber('resultClearTxt', this._gameView.currentGameScore);
    if (this._main.keepClearCount > 0) {
        this._numberFontManager.makeNumber('resultClearTxt', this._main.keepClearCount, 1, false);
        this._numberFontManager.makeNumber('resultClearTxt', this._gameView.winningPoint, 2, false);
        if (this._gameView.winningPoint < 1E3)
            this._gameClearWinningPlusTile.x = 386;
        else if (this._gameView.winningPoint < 1E4)
            this._gameClearWinningPlusTile.x = 362;
        else
            this._gameClearWinningPlusTile.x = 350
    }
    if (this._gameView.currentGameScore < 1E3)
        this._gameClearPointIconTile.x = 193 - 26;
    else if (this._gameView.currentGameScore < 1E4)
        this._gameClearPointIconTile.x = 173 - 26;
    else if (this._gameView.currentGameScore < 1E5)
        this._gameClearPointIconTile.x = 153 - 26;
    else if (this._gameView.currentGameScore < 1E6)
        this._gameClearPointIconTile.x = 133 - 26;
    else
        this._gameClearPointIconTile.x = 113 - 26;
    this.traceLog('\u30b9\u30c6\u30fc\u30bf\u30b9::', this._main.currentEventStep, pigg.puzzle.view.CommonView.EVENT_STEP_MAX, this._main.isJoinSpecialChallenge, this._gameView.isGetLimitedTerm, this._gameView.isGetLimitedQuantity);
    this.traceLog('showMissionPanel::\u524d::', this._main.existMission, this._gameView.waitDisplayMissionPanel, this._totalMissionPieceDisplayCount, this._main.totalMissionPieceCount);
    if (this._main.existMission && !this._gameView.waitDisplayMissionPanel)
        this.showMissionPanel();
    else if (this._missionPanel)
        this._missionPanel.visible = false;
    this._gameView.waitDisplayMissionPanel = false;
    this._resultClearDisableNextbtnSpr.visible = false;
    if (this._main.currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX && this._main.isJoinSpecialChallenge == -1 && !this._gameView.isGetLimitedTerm && !this._gameView.isGetLimitedQuantity) {
        this.traceLog('STEP\u3082SP\u30c1\u30e3\u30ec\u30f3\u30b8\u3082\u7d42\u4e86');
        this._resultClearDisableNextbtnSpr.visible = false;
        this._gameClearToLimitedTermTile.visible = false;
        this._gameClearToLimitedQuantityTile.visible = false;
        this._gameClearToStepClearTile.visible = false;
        this._gameClearTxtAtoTile.visible = false;
        if (this._gameClearTermAtoTile)
            this._gameClearTermAtoTile.visible = false;
        if (this._gameClearQuantityAtoTile)
            this._gameClearQuantityAtoTile.visible = false;
        if (this._main.eventData.rankingExists) {
            this._gameClearTxtTotalTile.visible = true;
            this._main.userData.eventPoint += this._gameView.currentGameScore;
            this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u304c\u3042\u308b\u306e\u3067\u3001\u7d2f\u8a08\u30dd\u30a4\u30f3\u30c8\u3092\u8868\u793a\u3059\u308b', this._main.userData.eventPoint, this._gameView.currentGameScore, this._main.userData.eventPoint - this._gameView.currentGameScore, this._main.isJoinSpecialChallenge);
            this._numberFontManager.makeNumber('resultClearRemainTxt', this._main.userData.eventPoint - this._gameView.currentGameScore)
        } else
            this._gameClearTxtTotalTile.visible = false;
        if (this._main.userData.isDuringRoulette) {
            this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u304c\u3042\u308b\u306e\u3067\u3064\u304e\u3078\u30dc\u30bf\u30f3\u7121\u52b9\u306b\u3059\u308b');
            this._resultClearDisableNextbtnSpr.visible = true
        }
        this._gameInfoContainer.addChild(this._gameResultPanel);
        this._gameResultAnimalContainer.visible = true;
        this._gameResultPanel.y = -pigg.puzzle.view.CommonView.STAGE_HEIGHT;
        if (!this._gameResultPanel.cacheAsBitmap)
            this._gameResultPanel.cacheAsBitmap = true;
        com.greensock.TweenMax.to(this._gameResultPanel, .5, {
            y: 160,
            ease: com.greensock.easing.Back.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.startToNextScoreRoll, this, 'startToNextScoreRoll')
        });
        return
    } else if (this._main.isJoinSpecialChallenge == 2 || this._main.isJoinSpecialChallenge == 1 && this._gameView.isGetLimitedTerm || this._main.isJoinSpecialChallenge == 0 && this._gameView.isGetLimitedQuantity || this._gameView.isGetLimitedTerm && this._gameView.isGetLimitedQuantity) {
        if (this._numberFontManager.getFontInfo('resultClearLimitedTermRemainTxt') == null)
            this._numberFontManager.makeFontInfo('resultClearLimitedTermRemainTxt', 600, 400, this._gameResultClearTxts, 16777215, 6829076, 400, 230, 6.5, 'LEFT', false, true);
        if (this._numberFontManager.getFontInfo('resultClearLimitedQuantityRemainTxt') == null)
            this._numberFontManager.makeFontInfo('resultClearLimitedQuantityRemainTxt', 600, 400, this._gameResultClearTxts, 16777215, 6829076, 400, 305, 6.5, 'LEFT', false, true);
        this._numberFontManager.makeNumber('resultClearLimitedTermRemainTxt', this._main.currentRemainLimitedTermPoint + this._gameView.currentGameScore);
        this._numberFontManager.makeNumber('resultClearLimitedQuantityRemainTxt', this._main.currentRemainLimitedQuantityPoint + this._gameView.currentGameScore);
        this.traceLog('_gameClearTxtAtoTile.tilemap::', this._gameClearTxtAtoTile.parent);
        if (this._gameClearTermAtoTile == null) {
            this._gameClearTermAtoTile = this._gameClearTxtAtoTile.clone();
            this._gameClearTxtAtoTile.parent.addTile(this._gameClearTermAtoTile);
            this._gameClearQuantityAtoTile = this._gameClearTxtAtoTile.clone();
            this._gameClearTxtAtoTile.parent.addTile(this._gameClearQuantityAtoTile);
            this._gameClearTermAtoTile.x = 158;
            this._gameClearTermAtoTile.y = 358;
            this._gameClearQuantityAtoTile.x = 158;
            this._gameClearQuantityAtoTile.y = 435
        }
        this._gameClearToLimitedTermTile.visible = true;
        this._gameClearToLimitedQuantityTile.visible = true;
        this._gameClearTxtTotalTile.visible = false;
        this._gameClearToStepClearTile.visible = false;
        this._gameClearToLimitedTermTile.scaleX = this._gameClearToLimitedTermTile.scaleY = .9;
        this._gameClearToLimitedTermTile.y = 331;
        this._gameClearToLimitedQuantityTile.scaleX = this._gameClearToLimitedQuantityTile.scaleY = .9;
        this._gameClearToLimitedQuantityTile.y = 407
    } else if (this._main.isJoinSpecialChallenge == 1 || this._gameView.isGetLimitedQuantity) {
        this.traceLog('\u5148\u7740\u306e\u307f\u8868\u793a');
        this._gameClearToLimitedQuantityTile.x = 129;
        this._gameClearToLimitedQuantityTile.y = 360;
        this._gameClearToLimitedQuantityTile.scaleX = this._gameClearToLimitedQuantityTile.scaleY = 1;
        if (this._gameClearTermAtoTile)
            this._gameClearTermAtoTile.visible = false;
        if (this._gameClearQuantityAtoTile)
            this._gameClearQuantityAtoTile.visible = false;
        this._gameClearToLimitedTermTile.visible = false;
        this._gameClearToLimitedQuantityTile.visible = true;
        this._gameClearTxtTotalTile.visible = false;
        this._gameClearToStepClearTile.visible = false;
        targetRemainPoint = this._main.currentRemainLimitedQuantityPoint
    } else if (this._main.isJoinSpecialChallenge == 0 || this._gameView.isGetLimitedTerm) {
        this.traceLog('\u5148\u884c\u306e\u307f\u8868\u793a');
        this._gameClearToLimitedTermTile.x = 129;
        this._gameClearToLimitedTermTile.y = 360;
        this._gameClearToLimitedTermTile.scaleX = this._gameClearToLimitedTermTile.scaleY = 1;
        if (this._gameClearQuantityAtoTile)
            this._gameClearQuantityAtoTile.visible = false;
        if (this._gameClearTermAtoTile)
            this._gameClearTermAtoTile.visible = false;
        this._gameClearToLimitedTermTile.visible = true;
        this._gameClearToLimitedQuantityTile.visible = false;
        this._gameClearTxtTotalTile.visible = false;
        this._gameClearToStepClearTile.visible = false;
        targetRemainPoint = this._main.currentRemainLimitedTermPoint
    } else if (this._main.isJoinSpecialChallenge == -1) {
        targetRemainPoint = this._main.currentRemainEventStepPoint;
        this._gameClearToLimitedTermTile.visible = false;
        this._gameClearToLimitedQuantityTile.visible = false;
        this._gameClearTxtTotalTile.visible = false;
        this._gameClearToStepClearTile.visible = true
    }
    if (this._main.currentEventStep < pigg.puzzle.view.CommonView.EVENT_STEP_MAX)
        this._gameClearToStepClearTile.visible = true;
    this._resultClearDisableNextbtnSpr.visible = false;
    this.traceLog(this._main.currentRemainEventStepPoint, this._main.isEventComplete, this._gameView.isGetLimitedTerm, this._gameView.isGetLimitedQuantity);
    if (this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30af\u30ea\u30a2\u3067\u30de\u30c3\u30d7\u306b\u623b\u308b');
        this._resultClearDisableNextbtnSpr.visible = true
    } else if (this._main.currentRemainEventStepPoint < 0 && !this._main.isEventComplete || this._gameView.isGetLimitedTerm || this._gameView.isGetLimitedQuantity) {
        this.traceLog('\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u304b\u3001isGetLimitedTerm\u304b\u3001isGetLimitedQuantity');
        this._resultClearDisableNextbtnSpr.visible = true
    } else if (this._main.userData.isDuringRoulette) {
        this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u304c\u3042\u308b\u306e\u3067\u3064\u304e\u3078\u30dc\u30bf\u30f3\u7121\u52b9\u306b\u3059\u308b');
        this._resultClearDisableNextbtnSpr.visible = true
    }
    this._isWaitNextScene = false;
    if (this._main.currentEventStep < pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
        this._numberFontManager.makeNumber('resultClearTxt', this._main.currentEventStep + 1, 3, false);
        this._gameClearToLimitedTermTile.visible = false;
        this._gameClearToLimitedQuantityTile.visible = false;
        this._gameClearTxtTotalTile.visible = false;
        this._gameClearTxtAtoTile.visible = true
    } else {
        this._gameResultAnimalContainer.scaleX = this._gameResultAnimalContainer.scaleY = .9;
        this._gameResultAnimalContainer.x = 40;
        this._gameResultAnimalContainer.y = 520
    }
    this._main.addSpine(this._main.spineAnimal, this._gameResultAnimalContainer);
    if (targetRemainPoint > -1)
        this._numberFontManager.makeNumber('resultClearRemainTxt', targetRemainPoint + this._gameView.currentGameScore);
    if (!this._gameView.progressData.isStepClear && this._main.isJoinSpecialChallenge == 2 || this._main.isJoinSpecialChallenge == 1 && this._gameView.isGetLimitedTerm || this._main.isJoinSpecialChallenge == 0 && this._gameView.isGetLimitedQuantity || this._gameView.isGetLimitedTerm && this._gameView.isGetLimitedQuantity)
        this._gameClearTxtAtoTile.visible = false;
    else if (this._gameView.progressData.isStepClear || this._main.isJoinSpecialChallenge != 2 || this._gameView.isGetLimitedTerm || this._gameView.isGetLimitedQuantity) {
        if (targetRemainPoint + this._gameView.currentGameScore == 0)
            this._gameClearTxtAtoTile.x = 212;
        else if (targetRemainPoint + this._gameView.currentGameScore < 100)
            this._gameClearTxtAtoTile.x = 201;
        else if (targetRemainPoint + this._gameView.currentGameScore < 1E3)
            this._gameClearTxtAtoTile.x = 190;
        else if (targetRemainPoint + this._gameView.currentGameScore < 1E4)
            this._gameClearTxtAtoTile.x = 175;
        else if (targetRemainPoint + this._gameView.currentGameScore < 1E5)
            this._gameClearTxtAtoTile.x = 164;
        else if (targetRemainPoint + this._gameView.currentGameScore < 1E6)
            this._gameClearTxtAtoTile.x = 153;
        else
            this._gameClearTxtAtoTile.x = 138;
        this._gameClearTxtAtoTile.visible = true
    } else
        this._gameClearTxtAtoTile.visible = false;
    this._gameResultPanel.cacheAsBitmap = true;
    this._gameInfoContainer.addChild(this._gameResultPanel);
    this._gameResultAnimalContainer.visible = true;
    this._gameResultPanel.y = -pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    com.greensock.TweenMax.to(this._gameResultPanel, .5, {
        y: 160,
        ease: com.greensock.easing.Back.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.startToNextScoreRoll, this, 'startToNextScoreRoll')
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype._missionPanelAtoTile;
pigg.puzzle.manager.MenuResultManager.prototype._missionPanelKoTile;
pigg.puzzle.manager.MenuResultManager.prototype._missionMaskTarget;
pigg.puzzle.manager.MenuResultManager.prototype._missionGaugeMaskSpr;
pigg.puzzle.manager.MenuResultManager.prototype._missionCountSpr;
pigg.puzzle.manager.MenuResultManager.prototype._missionPanelMaxTile;
pigg.puzzle.manager.MenuResultManager.prototype.showMissionPanel = function() {
    if (this._missionPanel == null) {
        this._missionPanel = new openfl.display.Sprite;
        this._gameResultClearContainer.addChild(this._missionPanel);
        var tileset = this._main.gamePanelTileset.clone();
        tileset.addRect(new openfl.geom.Rectangle(932,400,108,150));
        var tilemap = new openfl.display.Tilemap(108,150,tileset);
        tilemap.addTile(new openfl.display.Tile);
        this._missionPanel.addChild(tilemap);
        this._missionMaskTarget = new openfl.display.Sprite;
        this._missionPanel.addChild(this._missionMaskTarget);
        tilemap = new openfl.display.Tilemap(82,100,tileset);
        tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(953,66,82,89))));
        this._missionMaskTarget.addChild(tilemap);
        this._missionMaskTarget.x = 13;
        this._missionMaskTarget.y = 49;
        this._missionGaugeMaskSpr = this.drawPIMask(this._main.totalMissionPieceCount / this._main.missionRequiredPoint * 100);
        this._missionGaugeMaskSpr.x = 55;
        this._missionGaugeMaskSpr.y = 99;
        this._missionPanel.addChild(this._missionGaugeMaskSpr);
        this._missionCountSpr = new openfl.display.Sprite;
        this._missionPanel.addChild(this._missionCountSpr);
        tilemap = new openfl.display.Tilemap(45,18,tileset);
        this._missionPanel.addChild(tilemap);
        tilemap.addTile(this._missionPanelMaxTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(873,240,45,18))));
        tilemap.x = 31;
        tilemap.y = 49;
        tilemap = new openfl.display.Tilemap(120,100,tileset);
        tilemap.addTile(this._missionPanelAtoTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(800,234,42,26))));
        tilemap.addTile(this._missionPanelKoTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(843,234,26,26))));
        this._missionPanelKoTile.x = 91;
        this._missionCountSpr.addChild(tilemap);
        tilemap.x = -5;
        tilemap.y = 129;
        this._numberFontManager.makeFontInfo('missionResultCount', 100, 60, this._missionCountSpr, 16774799, 6829076, 64, 10, 5, 'CENTER', false, true);
        this._numberFontManager.getFontInfo('missionResultCount').tilemap.x = 30;
        this._numberFontManager.getFontInfo('missionResultCount').tilemap.y = 120;
        this._missionPanel.x = 460;
        this._missionPanel.y = 425
    }
    this._missionPanel.visible = true;
    this._missionPanelKoTile.visible = true;
    this._missionPanelAtoTile.visible = true;
    this.drawPIMask(this._totalMissionPieceDisplayCount / this._main.missionRequiredPoint * 100, this._missionGaugeMaskSpr);
    this._missionMaskTarget.mask = this._missionGaugeMaskSpr;
    this.traceLog('showMissionPanel', this._main.missionRequiredPoint, this._totalMissionPieceDisplayCount);
    this._numberFontManager.makeNumber('missionResultCount', this._main.missionRequiredPoint - this._totalMissionPieceDisplayCount);
    if (this._main.missionRequiredPoint - this._main.totalMissionPieceCount < 10) {
        this._missionPanelAtoTile.x = 19;
        this._missionPanelKoTile.x = 73
    } else if (this._main.missionRequiredPoint - this._main.totalMissionPieceCount < 100) {
        this._missionPanelAtoTile.x = 10;
        this._missionPanelKoTile.x = 82
    } else {
        this._missionPanelAtoTile.x = 0;
        this._missionPanelKoTile.x = 91
    }
    this._missionPanelMaxTile.visible = false
}
;
pigg.puzzle.manager.MenuResultManager.prototype.startToNextScoreRoll = function() {
    this.traceLog('startToNextScoreRoll::', this._main.isEventComplete, this._main.isJoinSpecialChallenge);
    if (this._gameResultPanel == null)
        return;
    this._main.spineAnimal.playAction('joy', 3);
    this._gameResultPanel.cacheAsBitmap = false;
    this._tweenResultCount = 0;
    this._resultParticleView.makeResultClearParticle();
    if (this._main.existMission)
        this.tweenResultToNextMissionCount();
    if (this._main.isEventComplete) {
        if (this._main.isJoinSpecialChallenge == 2 || this._main.isJoinSpecialChallenge == 1 && this._gameView.isGetLimitedTerm || this._main.isJoinSpecialChallenge == 0 && this._gameView.isGetLimitedQuantity || this._gameView.isGetLimitedTerm && this._gameView.isGetLimitedQuantity) {
            this.traceLog('startToNextScoreRoll::', this._main.currentEventStep, this._gameView.currentGameScore);
            this._tweenResultCountQuantity = 0;
            this._tweenResultCountTerm = 0;
            com.greensock.TweenMax.to(this._gameResultPanel, .01, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScoreSpecial, this, 'tweenResultToNextScoreSpecial')
            })
        } else if (this._main.isJoinSpecialChallenge == 1 || this._gameView.isGetLimitedQuantity)
            com.greensock.TweenMax.to(this._gameResultPanel, .01, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScore, this, 'tweenResultToNextScore'),
                onCompleteParams: [1]
            });
        else if (this._main.isJoinSpecialChallenge == 0 || this._gameView.isGetLimitedTerm)
            com.greensock.TweenMax.to(this._gameResultPanel, .01, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScore, this, 'tweenResultToNextScore'),
                onCompleteParams: [0]
            });
        else if (this._main.eventData.rankingExists && this._main.isJoinSpecialChallenge == -1) {
            this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u3042\u308b\u306e\u3067\u7d2f\u8a08\u30dd\u30a4\u30f3\u30c8\u3092tween');
            com.greensock.TweenMax.to(this._gameResultPanel, .01, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultTotalScore, this, 'tweenResultTotalScore')
            })
        }
        return
    }
    this.traceLog('startToNextScoreRoll::', this._main.currentEventStep, this._main.eventStepMissionPoint[this._main.currentEventStep], this._main.currentRemainEventStepPoint, this._gameView.currentGameScore);
    com.greensock.TweenMax.to(this._gameResultPanel, .01, {
        onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScore, this, 'tweenResultToNextScore')
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.tweenResultToNextMissionCount = function() {
    var self = this;
    var __localFn0__ = function() {
        self._gameResultPanel.visible = false;
        self._main.showRoulette()
    };
    this.traceLog('tweenResultToNextMissionCount::', this._main.userData.isDuringRoulette, this._main.totalMissionPieceCount, this._totalMissionPieceDisplayCount, this._main.eventData.missionRequiredPoint);
    if (!this._main.userData.isDuringRoulette && this._main.totalMissionPieceCount <= this._totalMissionPieceDisplayCount)
        return;
    if (this._main.userData.isDuringRoulette)
        if (this._totalMissionPieceDisplayCount >= this._main.eventData.missionRequiredPoint) {
            this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u6f14\u51fa\u958b\u59cb');
            com.greensock.TweenMax.to(this._missionPanel, 2, {
                onComplete: __localFn0__
            })
        } else
            this.updateMissionPoint();
    else
        this.updateMissionPoint()
}
;
pigg.puzzle.manager.MenuResultManager.prototype._maxParticleView;
pigg.puzzle.manager.MenuResultManager.prototype.updateMissionPoint = function(tween) {
    var self = this;
    tween = typeof tween !== 'undefined' ? tween : true;
    var __localFn0__ = function() {
        self._numberFontManager.removeNumber('missionResultCount');
        self._missionPanelKoTile.visible = false;
        self._missionPanelAtoTile.visible = false;
        self._missionPanelMaxTile.visible = true;
        if (self._main.isParticle && !self._main.isLowSpecMode) {
            if (self._maxParticleView == null) {
                self._maxParticleView = new pigg.puzzle.view.ParticleView(self._main);
                self._maxParticleView.init(400, 400);
                self._maxParticleView.x = -200 + 34;
                self._maxParticleView.y = -200 + 80;
                self._missionPanel.addChild(self._maxParticleView)
            }
            self._maxParticleView.makeMissionMaxParticle(200, 200)
        }
    };
    this.traceLog('updateMissionPoint::');
    if (tween)
        this._totalMissionPieceDisplayCount++;
    this._numberFontManager.makeNumber('missionResultCount', this._main.missionRequiredPoint - this._totalMissionPieceDisplayCount);
    this.drawPIMask(this._totalMissionPieceDisplayCount / this._main.missionRequiredPoint * 100, this._missionGaugeMaskSpr);
    if (tween)
        com.greensock.TweenMax.to(this._missionPanel, .1, {
            onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextMissionCount, this, 'tweenResultToNextMissionCount')
        });
    if (this._main.missionRequiredPoint == this._totalMissionPieceDisplayCount)
        com.greensock.TweenMax.to(this._missionPanelKoTile, .1, {
            onComplete: __localFn0__
        })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.tweenResultToNextScore = function(type) {
    type = typeof type !== 'undefined' ? type : -1;
    var targetRemainPoint = 0;
    this.traceLog('tweenResultToNextScore::', type);
    if (type == -1)
        targetRemainPoint = this._main.currentRemainEventStepPoint;
    else if (type == 0)
        targetRemainPoint = this._main.currentRemainLimitedTermPoint;
    else if (type == 1)
        targetRemainPoint = this._main.currentRemainLimitedQuantityPoint;
    this.traceLog('tweenResultToNextScore::::targetRemainPoint\x3d\x3d\x3d', this._main.currentRemainEventStepPoint);
    this.traceLog('tweenResultToNextScore::targetRemainPoint::', targetRemainPoint);
    this.traceLog('_gameView.currentGameScore + _main.currentRemainEventStepPoint', this._gameView.currentGameScore + targetRemainPoint);
    var cntTxt = this._gameView.currentGameScore + targetRemainPoint - org.apache.royale.utils.Language._int(this._gameView.currentGameScore / 20) * this._tweenResultCount;
    if (cntTxt < 0)
        cntTxt = 0;
    this.traceLog('tweenResultToNextScore::', this._tweenResultCount, cntTxt, org.apache.royale.utils.Language._int(this._gameView.currentGameScore / (20 - this._tweenResultCount)));
    if (this._gameResultPanel == null)
        return;
    this._tweenResultCount++;
    this._numberFontManager.makeNumber('resultClearRemainTxt', cntTxt);
    this._main.playSE(pigg.puzzle.data.CommonData.SE_SCROLL);
    if (this._tweenResultCount == 20 || cntTxt == 0) {
        com.greensock.TweenMax.killTweensOf(this._gameResultPanel);
        if (cntTxt == 0 || targetRemainPoint <= 0 || this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
            if (cntTxt == 0 || targetRemainPoint <= 0)
                this._numberFontManager.makeNumber('resultClearRemainTxt', 0);
            if (!this._main.isDuringRoulette) {
                this.traceLog('cntTxt \x3d\x3d 0 :: \u30cf\u30b1\u3066\u30a4\u30f3\u30bb\u30f3\u8868\u793a');
                com.greensock.TweenMax.to(this._gameResultPanel, 1, {
                    onComplete: org.apache.royale.utils.Language.closure(this.hideResultClearPanel, this, 'hideResultClearPanel'),
                    onCompleteParams: [true]
                })
            } else
                this._isWaitNextScene = true
        } else
            this._numberFontManager.makeNumber('resultClearRemainTxt', targetRemainPoint);
        this.traceLog('tweenResultToNextScore::\u7d42\u4e86', this._tweenResultCount, cntTxt, targetRemainPoint)
    } else {
        this.traceLog('\u518d\u5ea6::tweenResultToNextScore');
        com.greensock.TweenMax.to(this._gameResultPanel, .02, {
            onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScore, this, 'tweenResultToNextScore'),
            onCompleteParams: [type]
        })
    }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.tweenResultToNextScoreSpecial = function(type) {
    type = typeof type !== 'undefined' ? type : -1;
    if (type != 0) {
        this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb::_gameView.currentGameScore + _main.currentRemainLimitedQuantityPoint', this._gameView.currentGameScore, this._main.currentRemainLimitedQuantityPoint, this._gameView.currentGameScore + this._main.currentRemainLimitedQuantityPoint);
        var cntQuantityTxt = this._gameView.currentGameScore + this._main.currentRemainLimitedQuantityPoint - org.apache.royale.utils.Language._int(this._gameView.currentGameScore / 20) * this._tweenResultCountQuantity;
        if (cntQuantityTxt < 0)
            cntQuantityTxt = 0;
        this.traceLog('tweenResultToNextScoreSpecial::\u5148\u7740:', this._tweenResultCountQuantity, cntQuantityTxt, org.apache.royale.utils.Language._int(this._gameView.currentGameScore / (20 - this._tweenResultCountQuantity)));
        if (this._gameResultPanel == null)
            return;
        this._tweenResultCountQuantity++;
        this._numberFontManager.makeNumber('resultClearLimitedQuantityRemainTxt', cntQuantityTxt);
        this._main.playSE(pigg.puzzle.data.CommonData.SE_SCROLL);
        if (this._tweenResultCountQuantity == 20 || cntQuantityTxt == 0) {
            if (cntQuantityTxt == 0 || this._main.currentRemainLimitedQuantityPoint <= 0 || this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                if (cntQuantityTxt == 0 || this._main.currentRemainLimitedQuantityPoint <= 0)
                    this._numberFontManager.makeNumber('resultClearLimitedQuantityRemainTxt', 0);
                if (!this._main.isDuringRoulette)
                    com.greensock.TweenMax.to(this._gameResultPanel, 1, {
                        onComplete: org.apache.royale.utils.Language.closure(this.hideResultClearPanel, this, 'hideResultClearPanel'),
                        onCompleteParams: [true]
                    });
                this._isWaitNextScene = true
            } else
                this._numberFontManager.makeNumber('resultClearLimitedQuantityRemainTxt', this._main.currentRemainLimitedQuantityPoint);
            this.traceLog('\u5148\u7740\u306etweenResultToNextScoreSpecial::\u7d42\u4e86::', this._tweenResultCountQuantity, cntQuantityTxt, this._main.currentRemainLimitedQuantityPoint)
        } else
            com.greensock.TweenMax.to(this._gameResultPanel, .02, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScoreSpecial, this, 'tweenResultToNextScoreSpecial'),
                onCompleteParams: [1]
            })
    }
    if (type != 1) {
        this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb::_gameView.currentGameScore + _main.currentRemainLimitedTermPoint', this._gameView.currentGameScore, this._main.currentRemainLimitedTermPoint, this._gameView.currentGameScore + this._main.currentRemainLimitedTermPoint);
        var cntTermTxt = this._gameView.currentGameScore + this._main.currentRemainLimitedTermPoint - org.apache.royale.utils.Language._int(this._gameView.currentGameScore / 20) * this._tweenResultCountTerm;
        if (cntTermTxt < 0)
            cntTermTxt = 0;
        this.traceLog('tweenResultToNextScoreSpecial::\u5148\u884c::', this._tweenResultCountTerm, cntTermTxt, org.apache.royale.utils.Language._int(this._gameView.currentGameScore / (20 - this._tweenResultCountTerm)));
        if (this._gameResultPanel == null)
            return;
        this._tweenResultCountTerm++;
        this._numberFontManager.makeNumber('resultClearLimitedTermRemainTxt', cntTermTxt);
        this._main.playSE(pigg.puzzle.data.CommonData.SE_SCROLL);
        if (this._tweenResultCountTerm == 20 || cntTermTxt == 0) {
            if (cntTermTxt == 0 || this._main.currentRemainLimitedTermPoint <= 0 || this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                if (cntTermTxt == 0 || this._main.currentRemainLimitedTermPoint <= 0)
                    this._numberFontManager.makeNumber('resultClearLimitedTermRemainTxt', 0);
                if (!this._gameView.isGetLimitedQuantity)
                    if (!this._main.isDuringRoulette)
                        com.greensock.TweenMax.to(this._gameResultPanel, 1, {
                            onComplete: org.apache.royale.utils.Language.closure(this.hideResultClearPanel, this, 'hideResultClearPanel'),
                            onCompleteParams: [true]
                        });
                    else
                        this._isWaitNextScene = true
            } else
                this._numberFontManager.makeNumber('resultClearLimitedTermRemainTxt', this._main.currentRemainLimitedTermPoint);
            this.traceLog('\u5148\u884c\u306etweenResultToNextScoreSpecial::\u7d42\u4e86::', this._tweenResultCountTerm, cntTermTxt, this._main.currentRemainLimitedTermPoint)
        } else
            com.greensock.TweenMax.to(this._gameResultPanel, .02, {
                onComplete: org.apache.royale.utils.Language.closure(this.tweenResultToNextScoreSpecial, this, 'tweenResultToNextScoreSpecial'),
                onCompleteParams: [0]
            })
    }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.tweenResultTotalScore = function() {
    var cntTxt = this._main.userData.eventPoint - this._gameView.currentGameScore + org.apache.royale.utils.Language._int(this._gameView.currentGameScore / 20) * this._tweenResultCount;
    if (cntTxt > this._main.userData.eventPoint)
        cntTxt = this._main.userData.eventPoint;
    this.traceLog('tweenResultTotalScore::', this._tweenResultCount, cntTxt, org.apache.royale.utils.Language._int(this._gameView.currentGameScore / (20 - this._tweenResultCount)));
    if (this._gameResultPanel == null)
        return;
    this._tweenResultCount++;
    this._numberFontManager.makeNumber('resultClearRemainTxt', cntTxt);
    this._main.playSE(pigg.puzzle.data.CommonData.SE_SCROLL);
    if (this._tweenResultCount == 20 || cntTxt == this._main.userData.eventPoint)
        this._numberFontManager.makeNumber('resultClearRemainTxt', this._main.userData.eventPoint);
    else
        com.greensock.TweenMax.to(this._gameResultPanel, .02, {
            onComplete: org.apache.royale.utils.Language.closure(this.tweenResultTotalScore, this, 'tweenResultTotalScore')
        })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideResultClearPanel = function(auto, clickClose, nextPlay) {
    var self = this;
    auto = typeof auto !== 'undefined' ? auto : false;
    clickClose = typeof clickClose !== 'undefined' ? clickClose : false;
    nextPlay = typeof nextPlay !== 'undefined' ? nextPlay : false;
    var __localFn0__ = function() {
        self.traceLog('hideResultClearPanel::removeFromParent(_gameResultPanel)');
        self._main.removeSpine(self._main.spineAnimal, self._gameResultAnimalContainer);
        self._gameResultAnimalContainer.visible = false;
        self.removeFromParent(self._gameResultPanel);
        if (self._main.isLocal)
            self._main.showThemePanel();
        else
            self._main.loadDataManager.getBoardData()
    };
    var __localFn1__ = function() {
        self._main.removeSpine(self._main.spineAnimal, self._gameResultAnimalContainer);
        self._gameResultAnimalContainer.visible = false;
        self.traceLog('_gameView.progressData.isStepClear::', self._gameView.progressData.isStepClear, self._gameView.progressData.isProvidedLimitedTermIncentive, self._gameView.progressData.isProvidedLimitedQuantityIncentive);
        if (!self._gameView.progressData.isStepClear)
            if (self._gameView.progressData.isProvidedLimitedTermIncentive)
                special = 0;
            else if (self._gameView.progressData.isProvidedLimitedQuantityIncentive)
                special = 1;
        self._main.showStepClearIncentivePanel(special);
        self.traceLog('\u3053\u3053\u3067\u30a4\u30f3\u30bb\u30f3\u8868\u793a')
    };
    this._main.spineAnimal.stopAction();
    this._resultParticleView.deleteResultClearParticle();
    if (nextPlay) {
        com.greensock.TweenMax.killTweensOf(this._gameResultPanel);
        com.greensock.TweenMax.to(this._gameResultPanel, .4, {
            y: -pigg.puzzle.view.CommonView.STAGE_HEIGHT,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: __localFn0__
        });
        this._gameView.isAuto = 0;
        return
    }
    if (!auto)
        this._gameView.isAuto = 0;
    else
        this._main.isStepClear = true;
    var special = -1;
    com.greensock.TweenMax.to(this._gameResultPanel, .4, {
        delay: .2,
        y: -pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Back.easeIn,
        onComplete: __localFn1__
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.removeResultClearPanel = function() {}
;
pigg.puzzle.manager.MenuResultManager.prototype.RECT_FAILED_DESCRIPTION;
pigg.puzzle.manager.MenuResultManager.prototype.showResultFailedPanel = function() {
    var self = this;
    var __localFn0__ = function() {
        self._gameResultPanel.cacheAsBitmap = false;
        self._main.spineAnimal.playAction('sad', 1)
    };
    this.initDisp();
    this._gameView.showBgBlack();
    if (this._gameResultFailedContainer == null) {
        var cnt = 0
          , len = 0;
        this._gameResultFailedContainer = new openfl.display.Sprite;
        this._gameResultPanel.addChild(this._gameResultFailedContainer);
        var tl;
        var bgTileset = this._main.gamePanelTileset.clone();
        var bgTilemap = new openfl.display.Tilemap(560,610,bgTileset);
        this._gameResultFailedContainer.addChild(bgTilemap);
        bgTilemap.addTile(tl = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(537,307,191,48))));
        tl.x = 197;
        tl.y = 53;
        bgTilemap.addTile(tl = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(538,272,394,28))));
        tl.x = 95;
        tl.y = 249;
        bgTilemap.addTile(tl = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(873,520,15,99))));
        tl.x = 71;
        tl.y = 290;
        bgTilemap.addTile(tl = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(888,520,1,99))));
        tl.x = 86;
        tl.y = 290;
        tl.scaleX = 412;
        bgTilemap.addTile(tl = new openfl.display.Tile(bgTileset.addRect(new openfl.geom.Rectangle(888,520,15,99))));
        tl.x = 498;
        tl.y = 290;
        bgTilemap.addTile(this._gameFailedPointIconTile = new TileBase(bgTileset.addRect(new openfl.geom.Rectangle(968,553,44,44))));
        this._gameFailedPointIconTile.x = 194;
        this._gameFailedPointIconTile.y = 319;
        len = 6;
        for (cnt = 0; cnt < len; cnt++) {
            if (cnt == 5)
                this.RECT_FAILED_DESCRIPTION.push(bgTileset.addRect(new openfl.geom.Rectangle(537,1136,487,26)));
            if (cnt == 4)
                this.RECT_FAILED_DESCRIPTION.push(bgTileset.addRect(new openfl.geom.Rectangle(537,1075,487,59)));
            else
                this.RECT_FAILED_DESCRIPTION.push(bgTileset.addRect(new openfl.geom.Rectangle(537,963 + cnt * 28,487,26)))
        }
        bgTilemap.addTile(this._gameFailedDescriptionTile = new TileBase(this.RECT_FAILED_DESCRIPTION[0]));
        this._gameFailedDescriptionTile.x = 48;
        this._gameFailedDescriptionTile.y = 148;
        this._resultFailedNextbtnSpr = new openfl.display.Sprite;
        var btnTilemap = this.makeBtnBg(this._main, 0, 300);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,754,213,30))));
        tl.x = 44;
        tl.y = 35;
        this._resultFailedNextbtnSpr.addChild(btnTilemap);
        btnTilemap.x = -150;
        btnTilemap.y = -50;
        this._gameResultFailedContainer.addChild(this._resultFailedNextbtnSpr);
        this._resultFailedNextbtnSpr.x = 142 + 150;
        this._resultFailedNextbtnSpr.y = 480 + 50;
        this._numberFontManager.makeFontInfo('resultFailedTxt', 600, 400, this._gameResultFailedContainer, 16478724, 16478724, 310, 180);
        this._numberFontManager.getFontInfo('resultFailedTxt').tilemap.y = 137;
        this._gameResultPanel.swapChildren(this._gameResultFailedContainer, this._gameResultAnimalContainer)
    }
    this._gameResultFailedContainer.visible = true;
    if (this._gameResultClearContainer)
        this._gameResultClearContainer.visible = false;
    this.traceLog('showResultFailedPanel');
    this._currentPanelType = 2;
    this._gameInfoContainer.addChild(this._gameResultPanel);
    if (this._main.currentThemeType == 4)
        this._gameFailedDescriptionTile.y = 148;
    else
        this._gameFailedDescriptionTile.y = 158;
    this._gameFailedDescriptionTile.updateId(this.RECT_FAILED_DESCRIPTION[this._main.currentThemeType]);
    var scorePoint = 0;
    if (this._failedPotionMagnification != 0)
        scorePoint = (this._gameView.currentGameScore - this._gameView.keepClearBonusScore) * this._failedPotionMagnification;
    else
        scorePoint = this._gameView.currentGameScore - this._gameView.keepClearBonusScore;
    this._numberFontManager.makeNumber('resultFailedTxt', scorePoint);
    if (scorePoint < 1E3)
        this._gameFailedPointIconTile.x = 193;
    else if (scorePoint < 1E4)
        this._gameFailedPointIconTile.x = 173;
    else if (scorePoint < 1E5)
        this._gameFailedPointIconTile.x = 153;
    else if (scorePoint < 1E6)
        this._gameFailedPointIconTile.x = 133;
    else
        this._gameFailedPointIconTile.x = 113;
    this._gameResultAnimalContainer.visible = true;
    if (this._main.currentEventStep < pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
        this._main.addSpine(this._main.spineAnimal, this._gameResultAnimalContainer);
        this._main.spineAnimal.playAction('sad_fix', 1)
    } else
        ;this._gameResultPanel.cacheAsBitmap = true;
    this._gameResultPanel.y = -pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    com.greensock.TweenMax.to(this._gameResultPanel, .5, {
        delay: .1,
        y: 160,
        ease: com.greensock.easing.Back.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.removeResultFailedPanel = function() {}
;
pigg.puzzle.manager.MenuResultManager.prototype.gameResultFailedNextPlayMD = function(e) {
    var self = this;
    var __localFn0__ = function() {
        self.traceLog('gameResultFailedNextPlayMD::removeFromParent(_gameResultPanel);');
        self._main.removeSpine(self._main.spineAnimal, self._gameResultAnimalContainer);
        self._gameResultAnimalContainer.visible = false;
        self.removeFromParent(self._gameResultPanel);
        self.removeResultFailedPanel();
        self._main.isOpenTheme = true;
        self._main.loadDataManager.getBoardData()
    };
    var getBoardCode = '';
    this._main.spineAnimal.stopAction();
    com.greensock.TweenMax.to(this._gameResultPanel, .4, {
        y: -pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype._isShowConfirmRetire = false;
pigg.puzzle.manager.MenuResultManager.prototype.showConfirmGiveUpPanel = function(asCoin, price, addTimes) {
    this.traceLog('showConfirmGiveUpPanel');
    this._currentPanelType = 1;
    this._asCoin = asCoin;
    this._continuePrice = price;
    this._continueAddTimes = addTimes;
    this.traceLog('\u3042\u304d\u3089\u3081\u307e\u3059\u304b\u30d1\u30cd\u30eb');
    if (!this._isShowConfirmRetire) {
        this._isShowConfirmRetire = true;
        this.showConfirmRetire(1)
    } else
        this.traceLog('\u3059\u3067\u306b\u3072\u3089\u3044\u3066\u308b\u306e\u3067\u66f4\u65b0\u306e\u307f')
}
;
pigg.puzzle.manager.MenuResultManager.prototype.panelMD = function(e) {
    this.traceLog('panelMD::', this.mouseX, this.mouseY);
    if (this._currentPanelType == 0) {
        if (this.mouseX > 160 && this.mouseX < 470 && this.mouseY > 640 && this.mouseY < 740) {
            if (this._main.userData.isDuringRoulette || this._gameView.progressData && this._gameView.progressData.isStepClear) {
                this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u304c\u5f85\u3063\u3066\u308b or \u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u306e\u70ba \u7121\u52b9');
                return
            }
            this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
            this._resultClearNextbtnSpr.scaleX = this._resultClearNextbtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._resultClearNextbtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        }
    } else if (this._currentPanelType == 1)
        if (this.mouseX > 60 && this.mouseX < 310 && this.mouseY > 640 && this.mouseY < 740) {
            this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
            this._confirmGiveUpBtnSpr.scaleX = this._confirmGiveUpBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._confirmGiveUpBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        } else {
            if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 640 && this.mouseY < 740) {
                this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
                this._confirmGiveUpContinueBtnSpr.scaleX = this._confirmGiveUpContinueBtnSpr.scaleY = 1.2;
                com.greensock.TweenMax.to(this._confirmGiveUpContinueBtnSpr, .6, {
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
                })
            }
        }
    else if (this._currentPanelType == 2) {
        if (this.mouseX > 160 && this.mouseX < 470 && this.mouseY > 640 && this.mouseY < 740) {
            this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
            this._resultFailedNextbtnSpr.scaleX = this._resultFailedNextbtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._resultFailedNextbtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        }
    } else if (this._currentPanelType == 3)
        if (this.mouseX > 60 && this.mouseX < 310 && this.mouseY > 640 && this.mouseY < 740) {
            this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
            this._confirmRetireCancelBtnSpr.scaleX = this._confirmRetireCancelBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._confirmRetireCancelBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        } else if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 640 && this.mouseY < 740) {
            this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
            this._confirmRetireBtnSpr.scaleX = this._confirmRetireBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._confirmRetireBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.panelCL = function(e) {
    this.traceLog('panelMD::', this.mouseX, this.mouseY);
    if (this._currentPanelType == 0) {
        this.traceLog('panelMD::_currentPanelType \x3d\x3d 0', this.mouseX, this.mouseY);
        if (this.mouseX > 160 && this.mouseX < 470 && this.mouseY > 640 && this.mouseY < 740) {
            this.traceLog('panelMD::_currentPanelType \x3d\x3d 0]]]hideResultClearPanel', this.mouseX, this.mouseY);
            if (this._main.userData.isDuringRoulette || this._gameView.progressData && this._gameView.progressData.isStepClear) {
                this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u304c\u5f85\u3063\u3066\u308b or \u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u306e\u70ba \u7121\u52b9');
                return
            }
            this.hideResultClearPanel(false, false, true)
        }
    } else if (this._currentPanelType == 1)
        if (this.mouseX > 60 && this.mouseX < 310 && this.mouseY > 640 && this.mouseY < 740)
            if (this._main.isLocal)
                this._gameView.onGiveUp();
            else
                this._main.loadDataManager.giveupPuzzle();
        else {
            if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 640 && this.mouseY < 740) {
                this.traceLog('\u3064\u3065\u3051\u308b');
                this.showUseCoinConfirm()
            }
        }
    else if (this._currentPanelType == 2) {
        if (this.mouseX > 160 && this.mouseX < 470 && this.mouseY > 640 && this.mouseY < 740)
            this.gameResultFailedNextPlayMD(e)
    } else if (this._currentPanelType == 3)
        if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 640 && this.mouseY < 740)
            if (this._main.isLocal)
                this._gameView.onGiveUp();
            else
                this._main.loadDataManager.giveupPuzzle();
        else if (this.mouseX > 60 && this.mouseX < 310 && this.mouseY > 640 && this.mouseY < 740) {
            this.traceLog('\u3064\u3065\u3051\u308b');
            this.hideMenuConfirmGiveUp()
        }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.confirmPanelMD = function(e) {
    if (this._currentConfirmType == 0)
        if (this.mouseX > 50 && this.mouseX < 310 && this.mouseY > 570 && this.mouseY < 650) {
            this._confirmUseCoinCancelBtnSpr.scaleX = this._confirmUseCoinCancelBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._confirmUseCoinCancelBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        } else {
            if (this.mouseX > 330 && this.mouseX < 590 && this.mouseY > 570 && this.mouseY < 650) {
                this._confirmUseCoinYesBtnSpr.scaleX = this._confirmUseCoinYesBtnSpr.scaleY = 1.2;
                com.greensock.TweenMax.to(this._confirmUseCoinYesBtnSpr, .6, {
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
                })
            }
        }
    else if (this._currentConfirmType == 1)
        if (this.mouseX > 50 && this.mouseX < 310 && this.mouseY > 530 && this.mouseY < 610) {
            this._shortageCoinCancelBtnSpr.scaleX = this._shortageCoinCancelBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._shortageCoinCancelBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        } else if (this.mouseX > 330 && this.mouseX < 590 && this.mouseY > 530 && this.mouseY < 610) {
            this._shortageCoinBuyBtnSpr.scaleX = this._shortageCoinBuyBtnSpr.scaleY = 1.2;
            com.greensock.TweenMax.to(this._shortageCoinBuyBtnSpr, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        }
}
;
pigg.puzzle.manager.MenuResultManager.prototype._isOpenBuyCoin = false;
pigg.puzzle.manager.MenuResultManager.prototype.confirmPanelCL = function(e) {
    this.traceLog('confirmPanelMD::', this.mouseX, this.mouseY);
    if (this._currentConfirmType == 0)
        if (this.mouseX > 50 && this.mouseX < 310 && this.mouseY > 570 && this.mouseY < 650) {
            this.traceLog('confirmPanelCL::\u3084\u3081\u308b');
            this.hideUseCoinConfirm(0)
        } else if (this.mouseX > 330 && this.mouseX < 590 && this.mouseY > 570 && this.mouseY < 650) {
            this.traceLog('confirmPanelCL::\u3064\u304b\u3046');
            this._main.loadDataManager.continuePuzzle()
        } else {
            if (this.mouseX > 190 && this.mouseX < 450 && this.mouseY > 650 && this.mouseY < 690) {
                this.traceLog('confirmPanelCL::\u7279\u5b9a\u5546\u6cd5\u53d6\u5f15');
                openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_TRADELAW))
            }
        }
    else if (this._currentConfirmType == 1)
        if (this.mouseX > 50 && this.mouseX < 310 && this.mouseY > 530 && this.mouseY < 610)
            this.hideGameContinueUseCoinShortage();
        else if (this.mouseX > 330 && this.mouseX < 590 && this.mouseY > 530 && this.mouseY < 610) {
            this._isOpenBuyCoin = true;
            openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_BUY_COIN))
        } else if (this.mouseX > 190 && this.mouseX < 450 && this.mouseY > 610 && this.mouseY < 640) {
            this.traceLog('confirmPanelCL::\u7279\u5b9a\u5546\u6cd5\u53d6\u5f15');
            openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_TRADELAW))
        }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.panelMD2 = function(e) {
    this.traceLog('panelMD2::')
}
;
pigg.puzzle.manager.MenuResultManager.prototype.continueEF = function(e) {}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideConfirmGiveUpPanel = function() {
    this._isShowConfirmRetire = false;
    this.traceLog('hideConfirmGiveUpPanel::removeFromParent(_gameResultPanel);');
    this.removeFromParent(this._gameResultPanel);
    this.removeFromParent(this._confirmBlack)
}
;
pigg.puzzle.manager.MenuResultManager.prototype.showUseCoinConfirm = function() {
    this.traceLog('showUseCoinConfirm');
    this._currentConfirmType = 0;
    if (this._confirmUseCoinContainer == null)
        this.initUseCoinConfirm();
    if (this._confirmShortageCoinContainer)
        this._confirmShortageCoinContainer.visible = false;
    this._confirmUseCoinContainer.visible = true;
    this._numberFontManager.makeNumber('useCoinAsCoin', this._asCoin);
    this._numberFontManager.makeNumber('useCoinPrice', this._continuePrice);
    this._gameInfoContainer.swapChildren(this._gameResultPanel, this._confirmBlack);
    this._gameInfoContainer.addChild(this._gameConfirmPanel);
    this._gameConfirmPanel.scaleX = this._gameConfirmPanel.scaleY = .7;
    this._gameConfirmPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._gameConfirmPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    com.greensock.TweenMax.to(this._gameConfirmPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.initUseCoinConfirm = function() {
    this._confirmUseCoinContainer = new openfl.display.Sprite;
    this._gameConfirmPanel.addChild(this._confirmUseCoinContainer);
    this._confirmUseCoinContainer.x = -305;
    this._confirmUseCoinContainer.y = -245;
    var bgTilemap = this.makeAlertBg(this._main, 490);
    this._confirmUseCoinContainer.addChild(bgTilemap);
    var tileset = this._main.gamePanelTileset.clone();
    var tilemap = new openfl.display.Tilemap(610,490,tileset);
    var tl;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(536,845,332,52))));
    tl.x = 17;
    tl.y = 17;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(536,634,429,58))));
    tl.x = 103;
    tl.y = 141;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(536,694,437,89))));
    tl.x = 87;
    tl.y = 243;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(685,494,239,19))));
    tl.x = 185;
    tl.y = 452;
    this._confirmUseCoinContainer.addChild(tilemap);
    this._numberFontManager.makeFontInfo('useCoinAsCoin', 300, 100, this._confirmUseCoinContainer, 6499590, 6499590, 250, 10, 5, 'RIGHT');
    this._numberFontManager.getFontInfo('useCoinAsCoin').tilemap.x = 138;
    this._numberFontManager.getFontInfo('useCoinAsCoin').tilemap.y = 23;
    this._numberFontManager.makeFontInfo('useCoinPrice', 200, 100, this._confirmUseCoinContainer, 16603489, 16603489, 150, 10, 6, 'RIGHT');
    this._numberFontManager.getFontInfo('useCoinPrice').tilemap.x = 8;
    this._numberFontManager.getFontInfo('useCoinPrice').tilemap.y = 129;
    this._confirmUseCoinCancelBtnSpr = new openfl.display.Sprite;
    this._confirmUseCoinContainer.addChild(this._confirmUseCoinCancelBtnSpr);
    var btnTilemap = this.makeBtnBg(this._main, 4, 256);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,818,83,27))));
    tl.x = 87;
    tl.y = 23;
    btnTilemap.x = -(256 / 2);
    btnTilemap.y = -(72 / 2);
    this._confirmUseCoinCancelBtnSpr.addChild(btnTilemap);
    this._confirmUseCoinCancelBtnSpr.x = 39 + 256 / 2;
    this._confirmUseCoinCancelBtnSpr.y = 368 + 72 / 2;
    this._confirmUseCoinYesBtnSpr = new openfl.display.Sprite;
    this._confirmUseCoinContainer.addChild(this._confirmUseCoinYesBtnSpr);
    btnTilemap = this.makeBtnBg(this._main, 3, 256);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(573,818,54,26))));
    tl.x = 101;
    tl.y = 23;
    btnTilemap.x = -(256 / 2);
    btnTilemap.y = -(72 / 2);
    this._confirmUseCoinYesBtnSpr.addChild(btnTilemap);
    this._confirmUseCoinYesBtnSpr.x = 315 + 256 / 2;
    this._confirmUseCoinYesBtnSpr.y = 368 + 72 / 2
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideUseCoinConfirm = function(hideType) {
    var self = this;
    hideType = typeof hideType !== 'undefined' ? hideType : 0;
    var __localFn0__ = function() {
        self._gameInfoContainer.swapChildren(self._gameResultPanel, self._confirmBlack)
    };
    var __localFn1__ = function() {
        self.removeFromParent(self._confirmBlack);
        self.removeFromParent(self._gameConfirmPanel)
    };
    if (hideType == 0)
        com.greensock.TweenMax.to(this._gameConfirmPanel, .2, {
            scaleX: 1E-4,
            scaleY: 1E-4,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: __localFn0__
        });
    else if (hideType == 1) {
        com.greensock.TweenMax.to(this._confirmBlack, .2, {
            alpha: 0,
            onComplete: __localFn1__
        });
        com.greensock.TweenMax.to(this._gameConfirmPanel, .2, {
            scaleX: 1E-4,
            scaleY: 1E-4,
            ease: com.greensock.easing.Cubic.easeOut
        })
    } else if (hideType == 2)
        ;
}
;
pigg.puzzle.manager.MenuResultManager.prototype.showGameContinueUseCoinShortage = function() {
    this.traceLog('showGameContinueUseCoinShortage');
    this.hideUseCoinConfirm(2);
    this._currentConfirmType = 1;
    if (this._confirmShortageCoinContainer == null) {
        this._confirmShortageCoinContainer = new openfl.display.Sprite;
        this._gameConfirmPanel.addChild(this._confirmShortageCoinContainer);
        this._confirmShortageCoinContainer.x = -305;
        this._confirmShortageCoinContainer.y = -141;
        var bgTilemap = this.makeAlertBg(this._main, 342);
        this._confirmShortageCoinContainer.addChild(bgTilemap);
        var tileset = this._main.gamePanelTileset.clone();
        var tilemap = new openfl.display.Tilemap(610,342,tileset);
        var tl;
        tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(536,845,332,52))));
        tl.x = 17;
        tl.y = 17;
        tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(536,785,278,59))));
        tl.x = 165;
        tl.y = 118;
        tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(685,494,239,19))));
        tl.x = 185;
        tl.y = 305;
        this._confirmShortageCoinContainer.addChild(tilemap);
        this._numberFontManager.makeFontInfo('shortageAsCoin', 300, 100, this._confirmShortageCoinContainer, 6499590, 6499590, 250, 10, 5, 'RIGHT');
        this._numberFontManager.getFontInfo('shortageAsCoin').tilemap.x = 138;
        this._numberFontManager.getFontInfo('shortageAsCoin').tilemap.y = 23;
        this._shortageCoinCancelBtnSpr = new openfl.display.Sprite;
        this._confirmShortageCoinContainer.addChild(this._shortageCoinCancelBtnSpr);
        var btnTilemap = this.makeBtnBg(this._main, 4, 256);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,818,83,27))));
        tl.x = 87;
        tl.y = 23;
        btnTilemap.x = -(256 / 2);
        btnTilemap.y = -(72 / 2);
        this._shortageCoinCancelBtnSpr.addChild(btnTilemap);
        this._shortageCoinCancelBtnSpr.x = 39 + 256 / 2;
        this._shortageCoinCancelBtnSpr.y = 220 + 72 / 2;
        this._shortageCoinBuyBtnSpr = new openfl.display.Sprite;
        this._confirmShortageCoinContainer.addChild(this._shortageCoinBuyBtnSpr);
        btnTilemap = this.makeBtnBg(this._main, 5, 256);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,847,140,27))));
        tl.x = 58;
        tl.y = 23;
        btnTilemap.x = -(256 / 2);
        btnTilemap.y = -(72 / 2);
        this._shortageCoinBuyBtnSpr.addChild(btnTilemap);
        this._shortageCoinBuyBtnSpr.x = 315 + 256 / 2;
        this._shortageCoinBuyBtnSpr.y = 220 + 72 / 2
    }
    this._numberFontManager.makeNumber('shortageAsCoin', this._asCoin);
    if (this._confirmUseCoinContainer)
        this._confirmUseCoinContainer.visible = false;
    this._confirmShortageCoinContainer.visible = true;
    this._gameConfirmPanel.scaleX = this._gameConfirmPanel.scaleY = .7;
    this._gameConfirmPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._gameConfirmPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    com.greensock.TweenMax.to(this._gameConfirmPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideGameContinueUseCoinShortage = function() {
    var self = this;
    var __localFn0__ = function() {
        self._gameInfoContainer.swapChildren(self._gameResultPanel, self._confirmBlack);
        self.removeFromParent(self._gameConfirmPanel)
    };
    if (this._isOpenBuyCoin) {
        this.traceLog('\u3053\u3053\u3067\u30b3\u30a4\u30f3 \u66f4\u65b0 get_continue_info\u3067asCoin \u898b\u308b');
        this._main.loadDataManager.getContinueInfo()
    }
    this._isOpenBuyCoin = false;
    com.greensock.TweenMax.to(this._gameConfirmPanel, .2, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.showConfirmRetire = function(dispType) {
    var self = this;
    dispType = typeof dispType !== 'undefined' ? dispType : 0;
    var __localFn0__ = function() {
        self._confirmRetireWinningPointContainer.visible = true;
        self._confirmRetireWinningPointContainer.scaleX = self._confirmRetireWinningPointContainer.scaleY = 1E-4;
        com.greensock.TweenMax.to(self._confirmRetireWinningPointContainer, .6, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1, .5)
        })
    };
    var __localFn1__ = function() {
        self._gameResultPanel.cacheAsBitmap = false
    };
    var __localFn2__ = function() {
        self._gameResultPanel.cacheAsBitmap = false
    };
    this.initDisp();
    if (this._gameConfirmRetireContainer == null)
        this.initConfirmRetire();
    if (dispType == 0) {
        this._confirmRetireTxtTile.visible = true;
        this._confirmRetireCancelBtnSpr.visible = true;
        this._confirmRetireBtnSpr.visible = true;
        this._confirmGiveUpTxtTile.visible = false;
        this._confirmGiveUpBtnSpr.visible = false;
        this._confirmGiveUpContinueBtnSpr.visible = false;
        this._confirmGiveUpBtnSpr.visible = false;
        this._confirmRetireWinningPointContainer.x = 426;
        this._currentPanelType = 3
    } else if (dispType == 1) {
        this._confirmRetireTxtTile.visible = false;
        this._confirmRetireCancelBtnSpr.visible = false;
        this._confirmRetireBtnSpr.visible = false;
        this._confirmGiveUpTxtTile.visible = true;
        this._confirmGiveUpBtnSpr.visible = true;
        this._confirmGiveUpContinueBtnSpr.visible = true;
        this._confirmRetireWinningPointContainer.x = 158;
        this._numberFontManager.makeNumber('confirmGiveUpContinuePrice', this._continuePrice);
        this._currentPanelType = 1;
        if (this._main.continueSale) {
            this._confirmGiveUpContinueSaleTile.visible = true;
            this._confirmGiveUpContinuePriceTile.visible = false
        } else {
            this._confirmGiveUpContinueSaleTile.visible = false;
            this._confirmGiveUpContinuePriceTile.visible = true
        }
    }
    this._gameConfirmRetireContainer.visible = true;
    this.traceLog('showConfirmRetire::', this._main.userData.boardUsingPuzzleScoreItemMagnification);
    if (this._confirmBlack == null)
        this._confirmBlack = this.makeBackBlack();
    this.removeFromParent(this._confirmBlack);
    this._gameInfoContainer.addChild(this._confirmBlack);
    if (dispType == 0)
        this._confirmBlack.alpha = 1;
    else {
        this._confirmBlack.alpha = 0;
        com.greensock.TweenMax.to(this._confirmBlack, .2, {
            alpha: 1
        })
    }
    this._failedPotionMagnification = this._main.userData.boardUsingPuzzleScoreItemMagnification;
    this.traceLog('showConfirmRetire::');
    this._gameInfoContainer.addChild(this._gameResultPanel);
    this.traceLog('showConfirmRetire__', this._gameView.currentGameScore);
    this.traceLog('showConfirmRetire__', this._main.userData.equippedScoreItemCategory);
    this.traceLog('showConfirmRetire__', this._main.userData.isScoreItemUsing);
    var dispPoint = 0;
    if (this._gameView.currentGameScore == 0)
        dispPoint = this._gameView.currentGameScore;
    else if (this._main.userData.equippedScoreItemCategory != null && this._main.userData.equippedScoreItemCategory != '')
        dispPoint = this._gameView.currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification;
    else if (this._main.userData.isScoreItemUsing)
        dispPoint = this._gameView.currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification;
    else
        dispPoint = this._gameView.currentGameScore;
    this._numberFontManager.makeNumber('confirmGiveupTxt', dispPoint);
    if (dispPoint < 1E3)
        this._confirmRetirePointTile.x = 193;
    else if (dispPoint < 1E4)
        this._confirmRetirePointTile.x = 173;
    else if (dispPoint < 1E5)
        this._confirmRetirePointTile.x = 153;
    else if (dispPoint < 1E6)
        this._confirmRetirePointTile.x = 133;
    else
        this._confirmRetirePointTile.x = 113;
    this.traceLog('showConfirmRetire::_main.userData.eventWinningStreakCount::', this._main.userData.eventWinningStreakCount);
    if (this._main.userData.eventWinningStreakCount > 0) {
        this._confirmRetireWinningPointContainer.visible = false;
        if (this._gameView.winningPointLimit > this._main.userData.eventWinningStreakCount * 100)
            this._numberFontManager.makeNumber('confirmRetireWinningPoint', this._main.userData.eventWinningStreakCount * 100);
        else
            this._numberFontManager.makeNumber('confirmRetireWinningPoint', this._gameView.winningPointLimit);
        com.greensock.TweenMax.to(this._confirmRetireWinningPointContainer, .4, {
            onComplete: __localFn0__
        })
    } else
        this._confirmRetireWinningPointContainer.visible = false;
    if (!this._gameResultPanel.cacheAsBitmap)
        this._gameResultPanel.cacheAsBitmap = true;
    this._gameResultPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    if (dispType == 0)
        com.greensock.TweenMax.to(this._gameResultPanel, .6, {
            delay: .1,
            y: 160,
            ease: com.greensock.easing.Elastic.easeOut.config(1, .5),
            onComplete: __localFn1__
        });
    else if (dispType == 1)
        com.greensock.TweenMax.to(this._gameResultPanel, .5, {
            delay: .1,
            y: 160,
            ease: com.greensock.easing.Expo.easeOut,
            onComplete: __localFn2__
        })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.initConfirmRetire = function() {
    this._gameConfirmRetireContainer = new openfl.display.Sprite;
    var tileset = this._main.gamePanelTileset.clone();
    var tilemap = new openfl.display.Tilemap(584,610,tileset);
    this._gameConfirmRetireContainer.addChild(tilemap);
    var tl;
    tilemap.addTile(this._confirmRetireTxtTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(537,155,453,39))));
    this._confirmRetireTxtTile.x = 66;
    this._confirmRetireTxtTile.y = 39;
    tilemap.addTile(this._confirmGiveUpTxtTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(537,194,394,38))));
    this._confirmGiveUpTxtTile.x = 99;
    this._confirmGiveUpTxtTile.y = 40;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(537,237,253,28))));
    tl.x = 165;
    tl.y = 129;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(841,521,15,99))));
    tl.x = 71;
    tl.y = 170;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(856,521,15,99))));
    tl.x = 498;
    tl.y = 170;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(856,521,1,99))));
    tl.x = 86;
    tl.y = 170;
    tl.scaleX = 412;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(534,900,378,59))));
    tl.x = 107;
    tl.y = 308;
    tilemap.addTile(this._confirmRetirePointTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(973,1,58,57))));
    this._confirmRetirePointTile.x = 193;
    this._confirmRetirePointTile.y = 189;
    this._confirmRetireCancelBtnSpr = new openfl.display.Sprite;
    var btnTilemap = this.makeBtnBg(this._main, 1, 245);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(478,787,109,28))));
    tl.x = 69;
    tl.y = 36;
    this._confirmRetireCancelBtnSpr.addChild(btnTilemap);
    btnTilemap.x = -122;
    btnTilemap.y = -50;
    this._gameConfirmRetireContainer.addChild(this._confirmRetireCancelBtnSpr);
    this._confirmRetireCancelBtnSpr.x = 36 + 122;
    this._confirmRetireCancelBtnSpr.y = 480 + 50;
    this._confirmRetireBtnSpr = new openfl.display.Sprite;
    btnTilemap = this.makeBtnBg(this._main, 0, 245);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(593,788,138,27))));
    tl.x = 54;
    tl.y = 37;
    this._confirmRetireBtnSpr.addChild(btnTilemap);
    btnTilemap.x = -122;
    btnTilemap.y = -50;
    this._gameConfirmRetireContainer.addChild(this._confirmRetireBtnSpr);
    this._confirmRetireBtnSpr.x = 303 + 122;
    this._confirmRetireBtnSpr.y = 480 + 50;
    this._confirmGiveUpBtnSpr = new openfl.display.Sprite;
    btnTilemap = this.makeBtnBg(this._main, 1, 245);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(593,788,138,27))));
    tl.x = 54;
    tl.y = 37;
    this._confirmGiveUpBtnSpr.addChild(btnTilemap);
    btnTilemap.x = -122;
    btnTilemap.y = -50;
    this._gameConfirmRetireContainer.addChild(this._confirmGiveUpBtnSpr);
    this._confirmGiveUpBtnSpr.x = 36 + 122;
    this._confirmGiveUpBtnSpr.y = 480 + 50;
    this._confirmGiveUpContinueBtnSpr = new openfl.display.Sprite;
    btnTilemap = this.makeBtnBg(this._main, 0, 245);
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(629,818,185,58))));
    tl.x = 30;
    tl.y = 21;
    this._confirmGiveUpContinueBtnSpr.addChild(btnTilemap);
    btnTilemap.x = -122;
    btnTilemap.y = -50;
    tilemap = new openfl.display.Tilemap(300,100,tileset);
    this._confirmGiveUpContinueBtnSpr.addChild(tilemap);
    tilemap.addTile(this._confirmGiveUpContinueSaleTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(538,1285,272,74))));
    tilemap.addTile(this._confirmGiveUpContinuePriceTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(702,360,223,39))));
    this._confirmGiveUpContinuePriceTile.y = 24;
    this._confirmGiveUpContinuePriceTile.x = 7;
    tilemap.x = -118;
    tilemap.y = -99;
    this._confirmGiveUpContinueSaleTile.visible = false;
    this._gameConfirmRetireContainer.addChild(this._confirmGiveUpContinueBtnSpr);
    this._confirmGiveUpContinueBtnSpr.x = 303 + 122;
    this._confirmGiveUpContinueBtnSpr.y = 480 + 50;
    this._numberFontManager.makeFontInfo('confirmGiveUpContinuePrice', 300, 100, this._confirmGiveUpContinueBtnSpr, 16774807, 16774807, 150, 10, 6, 'CENTER', false, true);
    this._numberFontManager.getFontInfo('confirmGiveUpContinuePrice').tilemap.x = -126;
    this._numberFontManager.getFontInfo('confirmGiveUpContinuePrice').tilemap.y = -38;
    this._confirmRetireWinningPointContainer = new openfl.display.Sprite;
    tilemap = new openfl.display.Tilemap(320,130,tileset);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(533,1163,317,120))));
    this._confirmRetireWinningPointContainer.addChild(tilemap);
    tilemap.x = -158;
    tilemap.y = -105;
    this._confirmRetireWinningPointContainer.y = 480;
    this._numberFontManager.makeFontInfo('confirmRetireWinningPoint', 300, 100, this._confirmRetireWinningPointContainer, 16777215, 8046899, 200, 10, 5, 'RIGHT', false, true);
    this._numberFontManager.getFontInfo('confirmRetireWinningPoint').tilemap.x = -164;
    this._numberFontManager.getFontInfo('confirmRetireWinningPoint').tilemap.y = -62;
    this._gameConfirmRetireContainer.addChild(this._confirmRetireWinningPointContainer);
    this._gameResultPanel.addChildAt(this._gameConfirmRetireContainer, 1)
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideMenuConfirmGiveUp = function() {
    var self = this;
    var __localFn0__ = function() {
        self.removeFromParent(self._confirmBlack);
        self.removeFromParent(self._gameResultPanel);
        self._gameResultPanel.cacheAsBitmap = false
    };
    this._isShowConfirmRetire = false;
    com.greensock.TweenMax.to(this._confirmBlack, .2, {
        alpha: 0
    });
    if (!this._gameResultPanel.cacheAsBitmap)
        this._gameResultPanel.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._gameResultPanel, .3, {
        delay: .01,
        y: pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.manager.MenuResultManager.prototype.hideRoulette = function() {
    this.traceLog('MenuResult::hideRoulette');
    this._totalMissionPieceDisplayCount = this._main.totalMissionPieceCount;
    this.updateMissionPoint(false);
    this._missionPanelMaxTile.visible = false;
    this._missionPanelKoTile.visible = true;
    this._missionPanelAtoTile.visible = true;
    this._gameResultPanel.visible = true;
    if (!this._isWaitNextScene)
        this._resultClearDisableNextbtnSpr.visible = false;
    else {
        this._isWaitNextScene = false;
        com.greensock.TweenMax.to(this._gameResultPanel, 1, {
            onComplete: org.apache.royale.utils.Language.closure(this.hideResultClearPanel, this, 'hideResultClearPanel'),
            onCompleteParams: [true]
        })
    }
}
;
pigg.puzzle.manager.MenuResultManager.prototype.get__gameConfirmGiveUpPanel = function() {
    return this._gameConfirmGiveUpPanel
}
;
pigg.puzzle.manager.MenuResultManager.prototype.get__gameMenuSettingConfirmGiveUpPanel = function() {
    return this._gameMenuSettingConfirmGiveUpPanel
}
;
pigg.puzzle.manager.MenuResultManager.prototype.get__totalMissionPieceDisplayCount = function() {
    return this._totalMissionPieceDisplayCount
}
;
pigg.puzzle.manager.MenuResultManager.prototype.set__totalMissionPieceDisplayCount = function(v) {
    this._totalMissionPieceDisplayCount = v
}
;
pigg.puzzle.manager.MenuResultManager.prototype.get__gameResultPanel = function() {
    return this._gameResultPanel
}
;
pigg.puzzle.manager.MenuResultManager.prototype.get__confirmBlack = function() {
    return this._confirmBlack
}
;
Object.defineProperties(pigg.puzzle.manager.MenuResultManager.prototype, {
    gameConfirmGiveUpPanel: {
        get: pigg.puzzle.manager.MenuResultManager.prototype.get__gameConfirmGiveUpPanel
    },
    gameMenuSettingConfirmGiveUpPanel: {
        get: pigg.puzzle.manager.MenuResultManager.prototype.get__gameMenuSettingConfirmGiveUpPanel
    },
    totalMissionPieceDisplayCount: {
        get: pigg.puzzle.manager.MenuResultManager.prototype.get__totalMissionPieceDisplayCount,
        set: pigg.puzzle.manager.MenuResultManager.prototype.set__totalMissionPieceDisplayCount
    },
    gameResultPanel: {
        get: pigg.puzzle.manager.MenuResultManager.prototype.get__gameResultPanel
    },
    confirmBlack: {
        get: pigg.puzzle.manager.MenuResultManager.prototype.get__confirmBlack
    }
});
pigg.puzzle.manager.MenuResultManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MenuResultManager',
        qName: 'pigg.puzzle.manager.MenuResultManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.MenuResultManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'gameConfirmGiveUpPanel': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'gameMenuSettingConfirmGiveUpPanel': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'totalMissionPieceDisplayCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'gameResultPanel': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'confirmBlack': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                }
            }
        },
        methods: function() {
            return {
                'MenuResultManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.view.GameView',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'hidePanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'showResultClearPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'showResultFailedPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'showConfirmGiveUpPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'hideConfirmGiveUpPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'hideUseCoinConfirm': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showGameContinueUseCoinShortage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'showConfirmRetire': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'hideMenuConfirmGiveUp': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                },
                'hideRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MenuResultManager'
                }
            }
        }
    }
}
;
spine.attachments = {};
spine.attachments.Attachment = function(name) {
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.attachments.Attachment', spine.attachments.Attachment);
spine.attachments.Attachment.prototype._name;
spine.attachments.Attachment.prototype.toString = function() {
    return this.name
}
;
spine.attachments.Attachment.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.attachments.Attachment.prototype, {
    name: {
        get: spine.attachments.Attachment.prototype.get__name
    }
});
spine.attachments.Attachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Attachment',
        qName: 'spine.attachments.Attachment',
        kind: 'class'
    }]
};
spine.attachments.Attachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.attachments.Attachment'
                }
            }
        },
        methods: function() {
            return {
                'Attachment': {
                    type: '',
                    declaredBy: 'spine.attachments.Attachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.attachments.Attachment'
                }
            }
        }
    }
}
;
spine.attachments.VertexAttachment = function(name) {
    this.id = (spine.attachments.VertexAttachment.nextID++ & 65535) << 11;
    spine.attachments.Attachment.call(this, name)
}
;
goog.inherits(spine.attachments.VertexAttachment, spine.attachments.Attachment);
goog.exportSymbol('spine.attachments.VertexAttachment', spine.attachments.VertexAttachment);
spine.attachments.VertexAttachment.nextID = 0;
spine.attachments.VertexAttachment.prototype.bones;
spine.attachments.VertexAttachment.prototype.vertices;
spine.attachments.VertexAttachment.prototype.worldVerticesLength = 0;
spine.attachments.VertexAttachment.prototype.id;
spine.attachments.VertexAttachment.prototype.computeWorldVertices = function(slot, start, count, worldVertices, offset, stride) {
    count = offset + (count >> 1) * stride;
    var skeleton = slot.skeleton;
    var deformArray = slot.attachmentVertices;
    var vertices = this.vertices;
    var bones = this.bones;
    var deform;
    var v = 0
      , w = 0
      , n = 0
      , i = 0
      , skip = 0
      , b = 0
      , f = 0;
    var vx, vy;
    var wx, wy;
    var bone;
    if (bones == null) {
        if (deformArray.length > 0)
            vertices = deformArray;
        bone = slot.bone;
        var x = bone.worldX;
        var y = bone.worldY;
        var a = bone.a
          , bb = bone.b
          , c = bone.c
          , d = bone.d;
        for (v = start,
        w = offset; w < count; v += 2,
        w += stride) {
            vx = Number(vertices[v]),
            vy = Number(vertices[v + 1]);
            worldVertices[w] = vx * a + vy * bb + x;
            worldVertices[w + 1] = vx * c + vy * d + y
        }
        return
    }
    v = 0,
    skip = 0;
    for (i = 0; i < start; i += 2) {
        n = Number(bones[v]);
        v += n + 1;
        skip += n
    }
    var skeletonBones = skeleton.bones;
    if (deformArray.length == 0)
        for (w = offset,
        b = skip * 3; w < count; w += stride) {
            wx = 0,
            wy = 0;
            n = Number(bones[v++]);
            n += v;
            for (; v < n; v++,
            b += 3) {
                bone = skeletonBones[bones[v]];
                vx = Number(vertices[b]);
                vy = Number(vertices[b + 1]);
                var weight = Number(vertices[b + 2]);
                wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
                wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight
            }
            worldVertices[w] = wx;
            worldVertices[w + 1] = wy
        }
    else {
        deform = deformArray;
        for (w = offset,
        b = skip * 3,
        f = skip << 1; w < count; w += stride) {
            wx = 0;
            wy = 0;
            n = Number(bones[v++]);
            n += v;
            for (; v < n; v++,
            b += 3,
            f += 2) {
                bone = skeletonBones[bones[v]];
                vx = Number(vertices[b] + deform[f]);
                vy = Number(vertices[b + 1] + deform[f + 1]);
                weight = Number(vertices[b + 2]);
                wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
                wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight
            }
            worldVertices[w] = wx;
            worldVertices[w + 1] = wy
        }
    }
}
;
spine.attachments.VertexAttachment.prototype.applyDeform = function(sourceAttachment) {
    return this == sourceAttachment
}
;
spine.attachments.VertexAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'VertexAttachment',
        qName: 'spine.attachments.VertexAttachment',
        kind: 'class'
    }]
};
spine.attachments.VertexAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cint\x3e'
                },
                'vertices': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'worldVerticesLength': {
                    type: 'int'
                },
                'id': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'VertexAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.VertexAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'computeWorldVertices': {
                    type: 'void',
                    declaredBy: 'spine.attachments.VertexAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Slot',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'int',
                            optional: false
                        }, {
                            index: 6,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'applyDeform': {
                    type: 'Boolean',
                    declaredBy: 'spine.attachments.VertexAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.attachments.VertexAttachment',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.PathAttachment = function(name) {
    spine.attachments.VertexAttachment.call(this, name)
}
;
goog.inherits(spine.attachments.PathAttachment, spine.attachments.VertexAttachment);
goog.exportSymbol('spine.attachments.PathAttachment', spine.attachments.PathAttachment);
spine.attachments.PathAttachment.prototype.lengths;
spine.attachments.PathAttachment.prototype.closed;
spine.attachments.PathAttachment.prototype.constantSpeed;
spine.attachments.PathAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathAttachment',
        qName: 'spine.attachments.PathAttachment',
        kind: 'class'
    }]
};
spine.attachments.PathAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'lengths': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'closed': {
                    type: 'Boolean'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'PathAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.PathAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.MenuView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('MenuView')
}
;
goog.inherits(pigg.puzzle.view.MenuView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.MenuView', pigg.puzzle.view.MenuView);
pigg.puzzle.view.MenuView.prototype._backBlack;
pigg.puzzle.view.MenuView.prototype._isShow = false;
pigg.puzzle.view.MenuView.prototype._closeBtn;
pigg.puzzle.view.MenuView.prototype._container;
pigg.puzzle.view.MenuView.prototype._loadDataManager;
pigg.puzzle.view.MenuView.prototype._eventData;
pigg.puzzle.view.MenuView.prototype._main;
pigg.puzzle.view.MenuView.prototype._type = 0;
pigg.puzzle.view.MenuView.prototype._menuPanel;
pigg.puzzle.view.MenuView.prototype._menuTileset;
pigg.puzzle.view.MenuView.prototype._viewIdBtnSpr;
pigg.puzzle.view.MenuView.prototype._showItemBtnSpr;
pigg.puzzle.view.MenuView.prototype._openShopBtnSpr;
pigg.puzzle.view.MenuView.prototype._gameGiveUpBtnSpr;
pigg.puzzle.view.MenuView.prototype._showHowToPlayBtnSpr;
pigg.puzzle.view.MenuView.prototype._switchSoundBtnSpr;
pigg.puzzle.view.MenuView.prototype._soundOnTile;
pigg.puzzle.view.MenuView.prototype._soundOffTile;
pigg.puzzle.view.MenuView.prototype._switchSpecBtnSpr;
pigg.puzzle.view.MenuView.prototype._toMyageBtnSpr;
pigg.puzzle.view.MenuView.prototype._lowSpecOnTile;
pigg.puzzle.view.MenuView.prototype._lowSpecOffTile;
pigg.puzzle.view.MenuView.prototype._viewIdPanel;
pigg.puzzle.view.MenuView.prototype._viewIdContainer;
pigg.puzzle.view.MenuView.prototype._viewIdTxt;
pigg.puzzle.view.MenuView.prototype._viewIdCopyBalloon;
pigg.puzzle.view.MenuView.prototype.RECT_VIEWID_BTN = 0;
pigg.puzzle.view.MenuView.prototype.RECT_VIEWID_BTN_DISABLE = 0;
pigg.puzzle.view.MenuView.prototype.RECT_GIVEUO_BTN = 0;
pigg.puzzle.view.MenuView.prototype.RECT_GIVEUO_BTN_DISABLE = 0;
pigg.puzzle.view.MenuView.prototype._viewIdBtnTile;
pigg.puzzle.view.MenuView.prototype._gameGiveUpBtnTile;
pigg.puzzle.view.MenuView.prototype.init = function(main, loadDataManager) {
    this.traceLog('MenuView::init');
    this._main = main;
    this._loadDataManager = loadDataManager;
    this._container = this.makeContainer();
    this.addChild(this._container);
    this.initMenuPanel()
}
;
pigg.puzzle.view.MenuView.prototype.initMenuPanel = function() {
    this._menuPanel = new openfl.display.Sprite;
    this._container.addChild(this._menuPanel);
    this._menuTileset = this._main.menuPartsTileset.clone();
    var tl;
    var tilemap;
    this._showHowToPlayBtnSpr = new openfl.display.Sprite;
    this._menuPanel.addChild(this._showHowToPlayBtnSpr);
    if (this._main.appType == 'mypage' || !this._main.soundRelease) {
        tilemap = new openfl.display.Tilemap(158,48,this._menuTileset);
        this._showHowToPlayBtnSpr.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(1,317,158,48))));
        tilemap.x = -(158 / 2);
        tilemap.y = -24;
        this._showHowToPlayBtnSpr.x = 30 + 158 / 2;
        this._showHowToPlayBtnSpr.y = 30 + 24
    } else if (this._main.appType == 'game') {
        tilemap = new openfl.display.Tilemap(48,48,this._menuTileset);
        this._showHowToPlayBtnSpr.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(347,631,48,48))));
        tilemap.x = -24;
        tilemap.y = -24;
        this._showHowToPlayBtnSpr.x = 30 + 24;
        this._showHowToPlayBtnSpr.y = 30 + 24;
        this._switchSoundBtnSpr = new openfl.display.Sprite;
        this._menuPanel.addChild(this._switchSoundBtnSpr);
        tilemap = new openfl.display.Tilemap(48,48,this._menuTileset);
        this._switchSoundBtnSpr.addChild(tilemap);
        tilemap.addTile(this._soundOnTile = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(447,631,48,48))));
        tilemap.addTile(this._soundOffTile = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(397,631,48,48))));
        tilemap.x = -24;
        tilemap.y = -24;
        this._switchSoundBtnSpr.x = 98 + 24;
        this._switchSoundBtnSpr.y = 30 + 24;
        if (this._main.isSoundOn)
            this._soundOffTile.visible = false;
        else
            this._soundOnTile.visible = false
    }
    this._showItemBtnSpr = new openfl.display.Sprite;
    this._menuPanel.addChild(this._showItemBtnSpr);
    tilemap = new openfl.display.Tilemap(234,94,this._menuTileset);
    this._showItemBtnSpr.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(1,96,233,93))));
    tilemap.x = -(234 / 2);
    tilemap.y = -(94 / 2);
    this._openShopBtnSpr = new openfl.display.Sprite;
    this._menuPanel.addChild(this._openShopBtnSpr);
    tilemap = new openfl.display.Tilemap(234,94,this._menuTileset);
    this._openShopBtnSpr.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(239,96,233,93))));
    tilemap.x = -(234 / 2);
    tilemap.y = -(94 / 2);
    this._switchSpecBtnSpr = new openfl.display.Sprite;
    this._menuPanel.addChild(this._switchSpecBtnSpr);
    tilemap = new openfl.display.Tilemap(197,63,this._menuTileset);
    this._switchSpecBtnSpr.addChild(tilemap);
    tilemap.addTile(this._lowSpecOnTile = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(347,191,197,63))));
    tilemap.addTile(this._lowSpecOffTile = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(347,256,197,63))));
    tilemap.x = -(197 / 2);
    tilemap.y = -(63 / 2);
    if (this._main.isLowSpecMode)
        this._lowSpecOffTile.visible = false;
    else
        this._lowSpecOnTile.visible = false;
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 534;
    closeBtn.y = 7;
    this._menuPanel.addChild(closeBtn);
    if (this._main.appType == 'mypage') {
        this._showItemBtnSpr.x = 47 + 234 / 2;
        this._showItemBtnSpr.y = 118 + 94 / 2;
        this._openShopBtnSpr.x = 307 + 234 / 2;
        this._openShopBtnSpr.y = 118 + 94 / 2;
        this._switchSpecBtnSpr.x = 339 + 197 / 2;
        this._switchSpecBtnSpr.y = 240 + 63 / 2;
        tilemap = new openfl.display.Tilemap(584,350,this._menuTileset);
        this._menuPanel.addChildAt(tilemap, 0);
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(546,1,20,350))));
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(566,1,1,350))));
        tl.x = 20;
        tl.scaleX = 544;
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(566,1,20,350))));
        tl.x = 564;
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(162,321,131,38))));
        tl.x = 226;
        tl.y = 38;
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(1,286,246,29))));
        tl.x = 62;
        tl.y = 256
    } else if (this._main.appType == 'game') {
        this._showItemBtnSpr.x = 47 + 234 / 2;
        this._showItemBtnSpr.y = 118 + 94 / 2;
        this._openShopBtnSpr.x = 307 + 234 / 2;
        this._openShopBtnSpr.y = 118 + 94 / 2;
        this._switchSpecBtnSpr.x = 339 + 197 / 2;
        this._switchSpecBtnSpr.y = 362 + 63 / 2;
        this._viewIdBtnSpr = new openfl.display.Sprite;
        this._menuPanel.addChild(this._viewIdBtnSpr);
        tilemap = new openfl.display.Tilemap(494,94,this._menuTileset);
        this._viewIdBtnSpr.addChild(tilemap);
        this.RECT_VIEWID_BTN = this._menuTileset.addRect(new openfl.geom.Rectangle(1,1,493,93));
        this.RECT_VIEWID_BTN_DISABLE = this._menuTileset.addRect(new openfl.geom.Rectangle(2,848,493,93));
        tilemap.addTile(this._viewIdBtnTile = new TileBase(this.RECT_VIEWID_BTN));
        tilemap.x = -(493 / 2);
        tilemap.y = -(94 / 2);
        this._viewIdBtnSpr.x = 47 + 493 / 2;
        this._viewIdBtnSpr.y = 240 + 94 / 2;
        this._toMyageBtnSpr = new openfl.display.Sprite;
        this._menuPanel.addChild(this._toMyageBtnSpr);
        tilemap = new openfl.display.Tilemap(125,98,this._menuTileset);
        this._toMyageBtnSpr.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(436,353,125,98))));
        tilemap.x = -(125 / 2);
        tilemap.y = -(98 / 2);
        this._toMyageBtnSpr.x = 38 + 125 / 2;
        this._toMyageBtnSpr.y = 465 + 98 / 2;
        this._gameGiveUpBtnSpr = new openfl.display.Sprite;
        this._menuPanel.addChild(this._gameGiveUpBtnSpr);
        tilemap = new openfl.display.Tilemap(344,93,this._menuTileset);
        this._gameGiveUpBtnSpr.addChild(tilemap);
        this.RECT_GIVEUO_BTN = this._menuTileset.addRect(new openfl.geom.Rectangle(1,191,344,93));
        this.RECT_GIVEUO_BTN_DISABLE = this._menuTileset.addRect(new openfl.geom.Rectangle(1,628,344,93));
        tilemap.addTile(this._gameGiveUpBtnTile = new TileBase(this.RECT_GIVEUO_BTN));
        tilemap.x = -(344 / 2);
        tilemap.y = -(93 / 2);
        this._gameGiveUpBtnSpr.x = 196 + 344 / 2;
        this._gameGiveUpBtnSpr.y = 470 + 93 / 2;
        tilemap = new openfl.display.Tilemap(400,440,this._menuTileset);
        this._menuPanel.addChildAt(tilemap, 0);
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(162,321,131,38))));
        tl.x = 226;
        tl.y = 38;
        tilemap.addTile(tl = new openfl.display.Tile(this._menuTileset.addRect(new openfl.geom.Rectangle(1,286,246,29))));
        tl.x = 62;
        tl.y = 378;
        tilemap = this.makePanelBg(this._main);
        this._menuPanel.addChildAt(tilemap, 0);
        this._menuPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT
    }
    this._menuPanel.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.menuMD, this, 'menuMD'));
    this._menuPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.menuCL, this, 'menuCL'));
    this._menuPanel.x = 27;
    this.show(true)
}
;
pigg.puzzle.view.MenuView.prototype.onLoadMenuPng = function(code, bmd) {
    this._menuTileset.bitmapData = bmd;
    this.show()
}
;
pigg.puzzle.view.MenuView.prototype.show = function(init) {
    init = typeof init !== 'undefined' ? init : false;
    if (this._isShow)
        return;
    if (this._backBlack == null)
        this._backBlack = this.makeBackBlack();
    this._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
    this.addChild(this._backBlack);
    this.addChild(this._container);
    if (this._main.appType == 'game')
        if (this._main.isShowGame) {
            this._viewIdBtnTile.updateId(this.RECT_VIEWID_BTN);
            this._gameGiveUpBtnTile.updateId(this.RECT_GIVEUO_BTN)
        } else {
            this._viewIdBtnTile.updateId(this.RECT_VIEWID_BTN_DISABLE);
            this._gameGiveUpBtnTile.updateId(this.RECT_GIVEUO_BTN_DISABLE)
        }
    this._backBlack.alpha = 0;
    this._menuPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    var d = 0;
    if (init)
        d = .2;
    com.greensock.TweenMax.to(this._backBlack, .2, {
        delay: d,
        alpha: 1
    });
    var tarY = 0;
    if (this._main.appType == 'game')
        tarY = 150;
    else if (this._main.appType == 'mypage')
        tarY = 213;
    com.greensock.TweenMax.to(this._menuPanel, .4, {
        delay: d,
        y: tarY,
        ease: com.greensock.easing.Back.easeOut
    });
    this._isShow = true
}
;
pigg.puzzle.view.MenuView.prototype.hide = function(tween) {
    var self = this;
    tween = typeof tween !== 'undefined' ? tween : true;
    var __localFn0__ = function() {
        self.removeFromParent(self._backBlack);
        self._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.closeMD, self, 'closeMD'));
        self._backBlack = null;
        self.removeFromParent(self._container);
        self._isShow = false
    };
    this.traceLog('menuViewhide');
    if (!tween) {
        this.removeFromParent(this._backBlack);
        this._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
        this.removeFromParent(this._container);
        this._isShow = false;
        return
    }
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 0
    });
    com.greensock.TweenMax.to(this._menuPanel, .3, {
        y: pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.MenuView.prototype.menuMD = function(e) {
    this.traceLog('_menuMD:', this.mouseX, this.mouseY);
    if (this._main.appType == 'game')
        if (this.mouseX > 220 && this.mouseX < 570 && this.mouseY > 620 && this.mouseY < 720) {
            this.traceLog('\u3042\u304d\u3089\u3081\u308b');
            this.btnDownAction(this._gameGiveUpBtnSpr)
        } else if (this.mouseX > 70 && this.mouseX < 580 && this.mouseY > 385 && this.mouseY < 490) {
            this.traceLog('\u304a\u984cID\u8868\u793a');
            this.btnDownAction(this._viewIdBtnSpr)
        } else if (this.mouseX > 70 && this.mouseX < 310 && this.mouseY > 265 && this.mouseY < 365) {
            this.traceLog('\u3082\u3061\u3082\u306e');
            this.btnDownAction(this._showItemBtnSpr)
        } else if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 265 && this.mouseY < 365) {
            this.traceLog('shop');
            this.btnDownAction(this._openShopBtnSpr)
        } else if (this._main.soundRelease && this.mouseX > 55 && this.mouseX < 110 && this.mouseY > 175 && this.mouseY < 230) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this.btnDownAction(this._showHowToPlayBtnSpr)
        } else if (this._main.soundRelease && this.mouseX > 115 && this.mouseX < 220 && this.mouseY > 175 && this.mouseY < 270) {
            this.traceLog('\u30b5\u30a6\u30f3\u30c9\u5207\u308a\u66ff\u3048');
            this.btnDownAction(this._switchSoundBtnSpr)
        } else if (!this._main.soundRelease && this.mouseX > 55 && this.mouseX < 220 && this.mouseY > 175 && this.mouseY < 230) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this.btnDownAction(this._showHowToPlayBtnSpr)
        } else if (this.mouseX > 360 && this.mouseX < 570 && this.mouseY > 510 && this.mouseY < 580) {
            this.traceLog('\u4f4e\u30b9\u30da\u30c3\u30af\u30e2\u30fc\u30c9');
            this.btnDownAction(this._switchSpecBtnSpr)
        } else {
            if (this.mouseX > 60 && this.mouseX < 200 && this.mouseY > 610 && this.mouseY < 720) {
                this.traceLog('\u30de\u30a4\u30da\u30fc\u30b8\u3078');
                this.btnDownAction(this._toMyageBtnSpr)
            }
        }
    else if (this._main.appType == 'mypage')
        if (this.mouseX > 55 && this.mouseX < 220 && this.mouseY > 240 && this.mouseY < 295) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this.btnDownAction(this._showHowToPlayBtnSpr)
        } else if (this.mouseX > 70 && this.mouseX < 310 && this.mouseY > 325 && this.mouseY < 425) {
            this.traceLog('\u3082\u3061\u3082\u306e');
            this.btnDownAction(this._showItemBtnSpr)
        } else if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 325 && this.mouseY < 425) {
            this.traceLog('shop');
            this.btnDownAction(this._openShopBtnSpr)
        } else if (this.mouseX > 360 && this.mouseX < 570 && this.mouseY > 450 && this.mouseY < 520) {
            this.traceLog('\u4f4e\u30b9\u30da\u30c3\u30af\u30e2\u30fc\u30c9');
            if (!this._main.isSendUserStatus)
                this.btnDownAction(this._switchSpecBtnSpr)
        }
}
;
pigg.puzzle.view.MenuView.prototype.menuCL = function(e) {
    this.traceLog('menuCL::', this.mouseX, this.mouseY);
    if (this._main.appType == 'game')
        if (this.mouseX > 220 && this.mouseX < 570 && this.mouseY > 620 && this.mouseY < 720) {
            this.traceLog('\u3042\u304d\u3089\u3081\u308b');
            if (this._main.isShowGame) {
                this._main.showConfirmRetire();
                this.hide(false)
            }
        } else if (this.mouseX > 70 && this.mouseX < 580 && this.mouseY > 385 && this.mouseY < 490) {
            this.traceLog('\u304a\u984cID\u8868\u793a');
            if (this._main.isShowGame)
                this.showViewId()
        } else if (this.mouseX > 70 && this.mouseX < 310 && this.mouseY > 265 && this.mouseY < 365) {
            this.traceLog('\u3082\u3061\u3082\u306e');
            this._main.showUserItem();
            this.hide(false)
        } else if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 265 && this.mouseY < 365) {
            this.traceLog('shop::game');
            this._main.showOpenShopAlert()
        } else if (this._main.soundRelease && this.mouseX > 55 && this.mouseX < 110 && this.mouseY > 175 && this.mouseY < 230) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this._main.showHowToPlay();
            this.hide(false)
        } else if (this._main.soundRelease && this.mouseX > 115 && this.mouseX < 220 && this.mouseY > 175 && this.mouseY < 270) {
            this.switchSound(!this._main.isSoundOn);
            this.traceLog('_main.isSoundOn::', this._main.isSoundOn);
            this._main.switchSoundOn(!this._main.isSoundOn)
        } else if (!this._main.soundRelease && this.mouseX > 55 && this.mouseX < 220 && this.mouseY > 175 && this.mouseY < 270) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this._main.showHowToPlay();
            this.hide(false)
        } else if (this.mouseX > 360 && this.mouseX < 570 && this.mouseY > 510 && this.mouseY < 580) {
            this.traceLog('\u4f4e\u30b9\u30da\u30c3\u30af\u30e2\u30fc\u30c9');
            if (!this._main.isSendUserStatus)
                this.switchSpecMode()
        } else {
            if (this.mouseX > 60 && this.mouseX < 200 && this.mouseY > 610 && this.mouseY < 720) {
                this.traceLog('\u30de\u30a4\u30da\u30fc\u30b8\u3078');
                if (AsData.mypageWindow && !AsData.mypageWindow.closed)
                    AsData.mypageWindow.close();
                AsData.mypageWindow = window.open(pigg.puzzle.data.CommonData.URL_PUZZLE_MYPAGE, '_piggPuzzleMypage');
                window.blur();
                AsData.mypageWindow.focus()
            }
        }
    else if (this._main.appType == 'mypage')
        if (this.mouseX > 70 && this.mouseX < 310 && this.mouseY > 325 && this.mouseY < 425) {
            this.traceLog('\u3082\u3061\u3082\u306e');
            this._main.showUserItem();
            this.hide(false)
        } else if (this.mouseX > 330 && this.mouseX < 580 && this.mouseY > 325 && this.mouseY < 425) {
            this.traceLog('shop::mypage');
            openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_SHOP), '_blank')
        } else if (this.mouseX > 55 && this.mouseX < 220 && this.mouseY > 240 && this.mouseY < 295) {
            this.traceLog('\u3042\u305d\u3073\u304b\u305f\u8868\u793a');
            this._main.showHowToPlay();
            this.hide(false)
        } else if (this.mouseX > 360 && this.mouseX < 570 && this.mouseY > 450 && this.mouseY < 520) {
            this.traceLog('\u4f4e\u30b9\u30da\u30c3\u30af\u30e2\u30fc\u30c9');
            this.switchSpecMode()
        }
}
;
pigg.puzzle.view.MenuView.prototype.switchSpecMode = function() {
    if (this._main.isLowSpecMode) {
        this.traceLog('off\u306b\u3059\u308b');
        this._main.switchLowSpecMode(false);
        this._lowSpecOffTile.visible = true;
        this._lowSpecOnTile.visible = false
    } else {
        this.traceLog('on\u306b\u3059\u308b');
        this._main.switchLowSpecMode(true);
        this._lowSpecOffTile.visible = false;
        this._lowSpecOnTile.visible = true
    }
}
;
pigg.puzzle.view.MenuView.prototype.switchSound = function(on) {
    if (on) {
        this._soundOnTile.visible = true;
        this._soundOffTile.visible = false
    } else {
        this._soundOnTile.visible = false;
        this._soundOffTile.visible = true
    }
}
;
pigg.puzzle.view.MenuView.prototype.closeMD = function(e) {
    this.hide()
}
;
pigg.puzzle.view.MenuView.prototype.showViewId = function() {
    if (this._viewIdContainer == null)
        this.initViewId();
    this._viewIdContainer.visible = true;
    if (this._main.debugType == 'local')
        this._main.userData.boardUUID = 'bed71922-20bc-45c0-bd40-fbc3d35c7d14';
    this._viewIdTxt.text = this._main.userData.boardUUID;
    this.removeFromParent(this._backBlack);
    this._viewIdContainer.addChildAt(this._backBlack, 0);
    this._viewIdPanel.scaleX = this._viewIdPanel.scaleY = .7;
    com.greensock.TweenMax.to(this._viewIdPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
    this._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideViewId, this, 'hideViewId'));
    this.copyFrom.innerHTML = '\x3cp\x3e\x3cspan id\x3d"yourCode"\x3e' + this._main.userData.boardUUID + '\x3c/span\x3e\x3c/p\x3e';
    this.updateCopyDivPosition()
}
;
pigg.puzzle.view.MenuView.prototype.hideViewId = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self._viewIdContainer.visible = false;
        self.removeFromParent(self._backBlack);
        self.addChildAt(self._backBlack, 0);
        self._viewIdCopyBalloon.visible = false;
        self._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.closeMD, self, 'closeMD'))
    };
    this._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideViewId, this, 'hideViewId'));
    com.greensock.TweenMax.to(this._viewIdPanel, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    });
    this.copyDivBtn.style.left = '0px';
    this.copyDivBtn.style.top = '0px';
    this.copyDivBtn.style.width = '0px';
    this.copyDivBtn.style.height = '0px'
}
;
pigg.puzzle.view.MenuView.prototype.initViewId = function() {
    var self = this;
    var __localFn0__ = function() {
        var yourCode = document.getElementById('yourCode');
        var range = document.createRange();
        range.selectNode(yourCode);
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);
        document.execCommand('copy');
        self.copyId(copyBtn)
    };
    this._viewIdContainer = new openfl.display.Sprite;
    this._viewIdPanel = new openfl.display.Sprite;
    this._viewIdContainer.addChild(this._viewIdPanel);
    this._container.addChild(this._viewIdContainer);
    var inner = new openfl.display.Sprite;
    this._viewIdPanel.addChild(inner);
    var tileset = this._main.menuPartsTileset.clone();
    var tilemap = new openfl.display.Tilemap(584,368,tileset);
    var tl;
    inner.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(546,1,20,350))));
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(566,1,20,350))));
    tl.x = 564;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(566,1,1,350))));
    tl.x = 20;
    tl.scaleX = 544;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(500,1,20,90))));
    tl.x = 42;
    tl.y = 149;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(520,1,20,90))));
    tl.x = 522;
    tl.y = 149;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(520,1,1,90))));
    tl.x = 62;
    tl.y = 149;
    tl.scaleX = 460;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,806,335,40))));
    tl.x = 123;
    tl.y = 37;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,778,472,26))));
    tl.x = 56;
    tl.y = 108;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,723,433,53))));
    tl.x = 75;
    tl.y = 270;
    var copyBtn = new openfl.display.Sprite;
    inner.addChild(copyBtn);
    tilemap = new openfl.display.Tilemap(121,61,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(589,316,121,61))));
    tilemap.x = -(120 / 2);
    tilemap.y = -(60 / 2);
    copyBtn.addChild(tilemap);
    copyBtn.x = 413 + 120 / 2;
    copyBtn.y = 165 + 60 / 2;
    this._viewIdTxt = this.makeTextField(22, 3355443);
    inner.addChild(this._viewIdTxt);
    this._viewIdTxt.width = 320;
    this._viewIdTxt.wordWrap = true;
    this._viewIdTxt.multiline = true;
    this._viewIdTxt.x = 68;
    this._viewIdTxt.y = 158;
    this._viewIdTxt.selectable = true;
    this._viewIdCopyBalloon = new openfl.display.Sprite;
    inner.addChild(this._viewIdCopyBalloon);
    tilemap = new openfl.display.Tilemap(198,75,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(561,377,198,75))));
    this._viewIdCopyBalloon.addChild(tilemap);
    this._viewIdCopyBalloon.x = 375;
    this._viewIdCopyBalloon.y = 104;
    this._viewIdCopyBalloon.visible = false;
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideViewId, this, 'hideViewId'));
    closeBtn.x = 534;
    closeBtn.y = 7;
    inner.addChild(closeBtn);
    inner.x = -(584 / 2);
    inner.y = -(368 / 2);
    this._viewIdPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._viewIdPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    this._viewIdPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.viewIdCL, this, 'viewIdCL'));
    this.copyFrom = document.createElement('div');
    document.body.appendChild(this.copyFrom);
    this.copyDivBtn = document.createElement('div');
    document.body.appendChild(this.copyDivBtn);
    this.copyDivBtn.style.position = 'absolute';
    this.copyDivBtn.addEventListener('click', __localFn0__);
    this.updateCopyDivPosition()
}
;
pigg.puzzle.view.MenuView.prototype.updateCopyDivPosition = function() {
    var swStr = org.apache.royale.utils.Language.string(document.getElementsByTagName('canvas')[0].style.width);
    var shStr = org.apache.royale.utils.Language.string(document.getElementsByTagName('canvas')[0].style.height);
    var stStr = org.apache.royale.utils.Language.string(document.getElementsByTagName('canvas')[0].style.marginTop);
    var slStr = org.apache.royale.utils.Language.string(document.getElementsByTagName('canvas')[0].style.marginLeft);
    var sw = org.apache.royale.utils.Language._int(swStr.slice(0, swStr.indexOf('px')));
    var sh = org.apache.royale.utils.Language._int(shStr.slice(0, shStr.indexOf('px')));
    var st = org.apache.royale.utils.Language._int(stStr.slice(0, stStr.indexOf('px')));
    var sl = org.apache.royale.utils.Language._int(slStr.slice(0, slStr.indexOf('px')));
    this.traceLog('width', document.getElementsByTagName('canvas')[0].style.width);
    this.traceLog('height', document.getElementsByTagName('canvas')[0].style.height);
    this.traceLog('marginTop', document.getElementsByTagName('canvas')[0].style.marginTop);
    this.traceLog('marginLeft', document.getElementsByTagName('canvas')[0].style.marginLeft);
    this.traceLog('\u62e1\u5927\u7e2e\u5c0f::%::', sw / 640);
    var per = sw / 640;
    this.copyDivBtn.style.marginTop = st + 'px';
    this.copyDivBtn.style.marginLeft = sl + 'px';
    this.copyDivBtn.style.left = org.apache.royale.utils.Language._int(441 * per) + 'px';
    this.copyDivBtn.style.top = org.apache.royale.utils.Language._int(434 * per) + 'px';
    this.copyDivBtn.style.width = org.apache.royale.utils.Language._int(120 * per) + 'px';
    this.copyDivBtn.style.height = org.apache.royale.utils.Language._int(60 * per) + 'px'
}
;
pigg.puzzle.view.MenuView.prototype.viewIdCL = function(e) {
    if (this.mouseX > 90 && this.mouseX < 270 && this.mouseY > 565 && this.mouseY < 615) {
        this.traceLog('\u554f\u3044\u5408\u308f\u305b\u30af\u30ea\u30c3\u30af');
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_CONTACT), '_blank')
    }
}
;
pigg.puzzle.view.MenuView.prototype.copyId = function(spr) {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._viewIdCopyBalloon.visible = false
        };
        com.greensock.TweenMax.to(self._viewIdCopyBalloon, .2, {
            delay: 2,
            y: 104 + 10,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn0__
        })
    };
    this.traceLog('copyId');
    this.btnDownAction(spr);
    com.greensock.TweenMax.killTweensOf(this._viewIdCopyBalloon);
    this._viewIdCopyBalloon.visible = true;
    this._viewIdCopyBalloon.y = 104 + 10;
    com.greensock.TweenMax.to(this._viewIdCopyBalloon, .4, {
        y: 104,
        ease: com.greensock.easing.Elastic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.MenuView.prototype.copyFrom;
pigg.puzzle.view.MenuView.prototype.copyDivBtn;
pigg.puzzle.view.MenuView.prototype.get__isShow = function() {
    return this._isShow
}
;
Object.defineProperties(pigg.puzzle.view.MenuView.prototype, {
    isShow: {
        get: pigg.puzzle.view.MenuView.prototype.get__isShow
    }
});
pigg.puzzle.view.MenuView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MenuView',
        qName: 'pigg.puzzle.view.MenuView',
        kind: 'class'
    }]
};
pigg.puzzle.view.MenuView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MenuView'
                }
            }
        },
        methods: function() {
            return {
                'MenuView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.MenuView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }]
                    }
                },
                'initMenuPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView'
                },
                'onLoadMenuPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'menuMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'menuCL': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MenuView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.MatchGroupingManager = function() {}
;
goog.exportSymbol('pigg.puzzle.manager.MatchGroupingManager', pigg.puzzle.manager.MatchGroupingManager);
pigg.puzzle.manager.MatchGroupingManager.prototype._mapSizeX = 11;
pigg.puzzle.manager.MatchGroupingManager.prototype._mapSizeY = 9;
pigg.puzzle.manager.MatchGroupingManager.prototype._matchGroupeVec;
pigg.puzzle.manager.MatchGroupingManager.prototype._map;
pigg.puzzle.manager.MatchGroupingManager.prototype._main;
pigg.puzzle.manager.MatchGroupingManager.prototype._specialPriorityVec;
pigg.puzzle.manager.MatchGroupingManager.prototype.init = function(main) {
    this._main = main
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.clean = function() {
    this._matchGroupeVec = null;
    this._map = null;
    this._main = null
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.makeGroupe = function() {
    this._map = this._main.map;
    this._matchGroupeVec = org.apache.royale.utils.Language.Vector();
    this._specialPriorityVec = org.apache.royale.utils.Language.Vector();
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    lenX = this._mapSizeX;
    lenY = this._mapSizeY;
    var mInfo;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][cntY];
            mInfo.matchGroupeIndex = -1
        }
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.num == -1 || mInfo.isVoid || mInfo.isThroughVoid)
                continue;
            this.searchMatchGroupeConnect(mInfo, cntX, cntY)
        }
    this.onEndCheckGroupe()
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.onEndCheckGroupe = function() {
    if (this._matchGroupeVec == null)
        return;
    if (this._matchGroupeVec.length == 0)
        return;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    lenX = this._mapSizeX;
    lenY = this._mapSizeY;
    var mInfo;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++)
            mInfo = this._map[cntX][cntY]
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.searchMatchGroupeConnect = function(baseMapInfo, mx, my) {
    var targetMapInfo;
    if (mx > 0) {
        targetMapInfo = this._map[mx - 1][my];
        if (targetMapInfo.matchGroupeIndex == -1)
            this.checkMatchGroupe(baseMapInfo, targetMapInfo)
    }
    if (mx < this._mapSizeX - 1) {
        targetMapInfo = this._map[mx + 1][my];
        if (targetMapInfo.matchGroupeIndex == -1)
            this.checkMatchGroupe(baseMapInfo, targetMapInfo)
    }
    if (my > 0) {
        targetMapInfo = this._map[mx][my - 1];
        if (targetMapInfo.matchGroupeIndex == -1)
            this.checkMatchGroupe(baseMapInfo, targetMapInfo)
    }
    if (my < this._mapSizeY - 1) {
        targetMapInfo = this._map[mx][my + 1];
        if (targetMapInfo.matchGroupeIndex == -1)
            this.checkMatchGroupe(baseMapInfo, targetMapInfo)
    }
    if (baseMapInfo.checkHorizontal >= 4 || baseMapInfo.checkVertical >= 4)
        this._specialPriorityVec[baseMapInfo.matchGroupeIndex] = 2;
    else if (baseMapInfo.checkHorizontal < 4 && baseMapInfo.checkHorizontal > 0 && baseMapInfo.checkVertical > 0 && baseMapInfo.checkVertical < 4)
        if (this._specialPriorityVec[baseMapInfo.matchGroupeIndex] < 1)
            this._specialPriorityVec[baseMapInfo.matchGroupeIndex] = 1
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.checkMatchGroupe = function(baseMapInfo, targetMapInfo) {
    if (baseMapInfo.num == targetMapInfo.num) {
        if (baseMapInfo.matchGroupeIndex == -1) {
            baseMapInfo.matchGroupeIndex = this._matchGroupeVec.length;
            this._matchGroupeVec.push(org.apache.royale.utils.Language.Vector());
            this._matchGroupeVec[baseMapInfo.matchGroupeIndex].push(baseMapInfo);
            this._specialPriorityVec.push(0)
        }
        this._matchGroupeVec[baseMapInfo.matchGroupeIndex].push(targetMapInfo);
        targetMapInfo.matchGroupeIndex = baseMapInfo.matchGroupeIndex;
        this.searchMatchGroupeConnect(targetMapInfo, targetMapInfo.mx, targetMapInfo.my)
    }
}
;
pigg.puzzle.manager.MatchGroupingManager.prototype.get__specialPriorityVec = function() {
    return this._specialPriorityVec
}
;
Object.defineProperties(pigg.puzzle.manager.MatchGroupingManager.prototype, {
    specialPriorityVec: {
        get: pigg.puzzle.manager.MatchGroupingManager.prototype.get__specialPriorityVec
    }
});
pigg.puzzle.manager.MatchGroupingManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MatchGroupingManager',
        qName: 'pigg.puzzle.manager.MatchGroupingManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.MatchGroupingManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'specialPriorityVec': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.MatchGroupingManager'
                }
            }
        },
        methods: function() {
            return {
                'MatchGroupingManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.MatchGroupingManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MatchGroupingManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MatchGroupingManager'
                },
                'makeGroupe': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MatchGroupingManager'
                }
            }
        }
    }
}
;
spine.animation.PathConstraintMixTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.PathConstraintMixTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.PathConstraintMixTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.PathConstraintMixTimeline', spine.animation.PathConstraintMixTimeline);
spine.animation.PathConstraintMixTimeline.ENTRIES = 3;
spine.animation.PathConstraintMixTimeline.PREV_TIME = -3;
spine.animation.PathConstraintMixTimeline.PREV_ROTATE = -2;
spine.animation.PathConstraintMixTimeline.PREV_TRANSLATE = -1;
spine.animation.PathConstraintMixTimeline.ROTATE = 1;
spine.animation.PathConstraintMixTimeline.TRANSLATE = 2;
spine.animation.PathConstraintMixTimeline.prototype.pathConstraintIndex = 0;
spine.animation.PathConstraintMixTimeline.prototype.frames;
spine.animation.PathConstraintMixTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.pathConstraintMix.ordinal << 24) + this.pathConstraintIndex
}
;
spine.animation.PathConstraintMixTimeline.prototype.setFrame = function(frameIndex, time, rotateMix, translateMix) {
    frameIndex *= spine.animation.PathConstraintMixTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[frameIndex + spine.animation.PathConstraintMixTimeline.ROTATE] = rotateMix;
    this.frames[frameIndex + spine.animation.PathConstraintMixTimeline.TRANSLATE] = translateMix
}
;
spine.animation.PathConstraintMixTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
    if (time < this.frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            constraint.rotateMix = constraint.data.rotateMix;
            constraint.translateMix = constraint.data.translateMix;
            return;
        case spine.animation.MixPose.current:
            constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;
            constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha
        }
        return
    }
    var rotate, translate;
    if (time >= this.frames[this.frames.length - spine.animation.PathConstraintMixTimeline.ENTRIES]) {
        rotate = Number(this.frames[this.frames.length + spine.animation.PathConstraintMixTimeline.PREV_ROTATE]);
        translate = Number(this.frames[this.frames.length + spine.animation.PathConstraintMixTimeline.PREV_TRANSLATE])
    } else {
        var frame = spine.animation.Animation.binarySearch(this.frames, time, spine.animation.PathConstraintMixTimeline.ENTRIES);
        rotate = Number(this.frames[frame + spine.animation.PathConstraintMixTimeline.PREV_ROTATE]);
        translate = Number(this.frames[frame + spine.animation.PathConstraintMixTimeline.PREV_TRANSLATE]);
        var frameTime = Number(this.frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.PathConstraintMixTimeline.ENTRIES - 1, 1 - (time - frameTime) / (this.frames[frame + spine.animation.PathConstraintMixTimeline.PREV_TIME] - frameTime));
        rotate += (this.frames[frame + spine.animation.PathConstraintMixTimeline.ROTATE] - rotate) * percent;
        translate += (this.frames[frame + spine.animation.PathConstraintMixTimeline.TRANSLATE] - translate) * percent
    }
    if (pose == spine.animation.MixPose.setup) {
        constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;
        constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha
    } else {
        constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
        constraint.translateMix += (translate - constraint.translateMix) * alpha
    }
}
;
spine.animation.PathConstraintMixTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathConstraintMixTimeline',
        qName: 'spine.animation.PathConstraintMixTimeline',
        kind: 'class'
    }]
};
spine.animation.PathConstraintMixTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'pathConstraintIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'PathConstraintMixTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.PathConstraintMixTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.PathConstraintMixTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.PathConstraintMixTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.PathConstraintMixTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.NumberFontManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._cutSizeArray = [38, 24, 34, 34, 40, 34, 36, 34, 36, 37, 16, 34];
    this._cutPosArray = [0, 38, 62, 96, 130, 170, 204, 240, 274, 310, 347, 363];
    this._cutBackSizeArray = [44, 29, 39, 40, 46, 40, 40, 38, 40, 40, 24, 42];
    this._cutBackPosArray = [0, 44, 73, 112, 152, 198, 238, 278, 316, 356, 396, 420];
    this._cutBigBackSizeArray = [53, 36, 47, 48, 54, 48, 49, 48, 50, 50, 34, 52];
    this._cutBigBackPosArray = [0, 53, 89, 136, 184, 238, 286, 335, 383, 433, 483, 517];
    this.RECT_POINT_ACORN = [];
    this.RECT_POINT_MARSHMALLOW = []
}
;
goog.inherits(pigg.puzzle.manager.NumberFontManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.NumberFontManager', pigg.puzzle.manager.NumberFontManager);
pigg.puzzle.manager.NumberFontManager.prototype._main;
pigg.puzzle.manager.NumberFontManager.prototype._pointRectarray;
pigg.puzzle.manager.NumberFontManager.prototype._pointBackRectarray;
pigg.puzzle.manager.NumberFontManager.prototype._pointBigBackRectarray;
pigg.puzzle.manager.NumberFontManager.prototype._cutSizeArray;
pigg.puzzle.manager.NumberFontManager.prototype._cutPosArray;
pigg.puzzle.manager.NumberFontManager.prototype._cutBackSizeArray;
pigg.puzzle.manager.NumberFontManager.prototype._cutBackPosArray;
pigg.puzzle.manager.NumberFontManager.prototype._cutBigBackSizeArray;
pigg.puzzle.manager.NumberFontManager.prototype._cutBigBackPosArray;
pigg.puzzle.manager.NumberFontManager.prototype._pointTilemap;
pigg.puzzle.manager.NumberFontManager.prototype._pointTileset;
pigg.puzzle.manager.NumberFontManager.prototype.RECT_POINT_ACORN;
pigg.puzzle.manager.NumberFontManager.prototype.RECT_POINT_MARSHMALLOW;
pigg.puzzle.manager.NumberFontManager.prototype.RECT_POINT_HEIGHT = 40;
pigg.puzzle.manager.NumberFontManager.prototype.RECT_POINT_ORDER = 0;
pigg.puzzle.manager.NumberFontManager.prototype._fontMap;
pigg.puzzle.manager.NumberFontManager.prototype.ADJUST_POS_Y = 104;
pigg.puzzle.manager.NumberFontManager.prototype.clean = function() {}
;
pigg.puzzle.manager.NumberFontManager.prototype.init = function(main) {
    this._main = main;
    this._fontMap = new Map;
    var cnt = 0, len = 0, cnt2 = 0, len2 = 0, arr, pos = 0;
    this._pointTileset = this._main.commonPartsTileset.clone();
    this._pointRectarray = [];
    this._pointBackRectarray = [];
    this._pointBigBackRectarray = [];
    len = 12;
    for (cnt = 0; cnt < len; cnt++) {
        this._pointRectarray.push(this._pointTileset.addRect(new openfl.geom.Rectangle(this._cutPosArray[cnt],0 + this.ADJUST_POS_Y,this._cutSizeArray[cnt],43)));
        this._pointBackRectarray.push(this._pointTileset.addRect(new openfl.geom.Rectangle(this._cutBackPosArray[cnt],50 + this.ADJUST_POS_Y,this._cutBackSizeArray[cnt],51)));
        this._pointBigBackRectarray.push(this._pointTileset.addRect(new openfl.geom.Rectangle(this._cutBigBackPosArray[cnt],102 + this.ADJUST_POS_Y,this._cutBigBackSizeArray[cnt],59)))
    }
}
;
pigg.puzzle.manager.NumberFontManager.prototype.makeFontInfo = function(name, width, height, targetParent, color, backcColor, basex, basey, size, align, isQuantity, bigBack) {
    targetParent = typeof targetParent !== 'undefined' ? targetParent : null;
    color = typeof color !== 'undefined' ? color : 16711935;
    backcColor = typeof backcColor !== 'undefined' ? backcColor : 16777215;
    basex = typeof basex !== 'undefined' ? basex : 0;
    basey = typeof basey !== 'undefined' ? basey : 0;
    size = typeof size !== 'undefined' ? size : 10;
    align = typeof align !== 'undefined' ? align : 'CENTER';
    isQuantity = typeof isQuantity !== 'undefined' ? isQuantity : false;
    bigBack = typeof bigBack !== 'undefined' ? bigBack : false;
    if (this._fontMap == null)
        return;
    if (this._fontMap[name] != null)
        return;
    this.traceLog('makeFontInfo::');
    var fontInfo = new pigg.puzzle.data.NumberFontInfo;
    fontInfo.tileset = this._pointTileset.clone();
    fontInfo.tilemap = new openfl.display.Tilemap(width,height,fontInfo.tileset);
    fontInfo.color = org.apache.royale.utils.Language.Vector();
    fontInfo.backColor = org.apache.royale.utils.Language.Vector();
    fontInfo.baseX = org.apache.royale.utils.Language.Vector();
    fontInfo.baseY = org.apache.royale.utils.Language.Vector();
    fontInfo.align = org.apache.royale.utils.Language.Vector();
    fontInfo.size = org.apache.royale.utils.Language.Vector();
    fontInfo.isQuantity = org.apache.royale.utils.Language.Vector();
    fontInfo.bigBack = org.apache.royale.utils.Language.Vector();
    fontInfo.color.push(color);
    fontInfo.backColor.push(backcColor);
    fontInfo.baseX.push(basex);
    fontInfo.baseY.push(basey);
    fontInfo.size.push(size);
    fontInfo.align.push(align);
    fontInfo.isQuantity.push(isQuantity);
    fontInfo.bigBack.push(bigBack);
    if (targetParent)
        targetParent.addChild(fontInfo.tilemap);
    this._fontMap[name] = fontInfo
}
;
pigg.puzzle.manager.NumberFontManager.prototype.addContainer = function(name, targetParent) {
    if (this._fontMap[name] == null)
        return;
    if (targetParent == null)
        return;
    var fontInfo = this._fontMap[name];
    targetParent.addChild(fontInfo.tilemap)
}
;
pigg.puzzle.manager.NumberFontManager.prototype.addFontType = function(name, color, backcColor, basex, basey, size, align, bigBack) {
    color = typeof color !== 'undefined' ? color : 16711935;
    backcColor = typeof backcColor !== 'undefined' ? backcColor : 16777215;
    basex = typeof basex !== 'undefined' ? basex : 0;
    basey = typeof basey !== 'undefined' ? basey : 0;
    size = typeof size !== 'undefined' ? size : 10;
    align = typeof align !== 'undefined' ? align : 'CENTER';
    bigBack = typeof bigBack !== 'undefined' ? bigBack : false;
    if (this._fontMap[name] == null)
        return;
    var fontInfo = this._fontMap[name];
    fontInfo.num++;
    fontInfo.color.push(color);
    fontInfo.backColor.push(backcColor);
    fontInfo.baseX.push(basex);
    fontInfo.baseY.push(basey);
    fontInfo.size.push(size);
    fontInfo.align.push(align);
    fontInfo.bigBack.push(bigBack)
}
;
pigg.puzzle.manager.NumberFontManager.prototype.makeNumber = function(name, number, type, init) {
    type = typeof type !== 'undefined' ? type : 0;
    init = typeof init !== 'undefined' ? init : true;
    if (this._fontMap[name] == null)
        return;
    var fontInfo = this._fontMap[name];
    var str = this.insertComma(number);
    var cnt = 0
      , len = 0;
    var align = org.apache.royale.utils.Language.string(fontInfo.align[type]);
    var tl;
    var index = 0;
    var isMarshmallow = false;
    var isQuantity = fontInfo.isQuantity[type];
    var bigBack = fontInfo.bigBack[type];
    if (isQuantity)
        str = 'x' + str;
    len = str.length;
    this.traceLog('makeNumber::', name, str, align, bigBack);
    var pos = Number(fontInfo.baseX[type]);
    var ct = new openfl.geom.ColorTransform;
    var bct = new openfl.geom.ColorTransform;
    var numTiles = 0;
    var scale = fontInfo.size[type] / 10;
    ct.color = Number(fontInfo.color[type]);
    bct.color = Number(fontInfo.backColor[type]);
    if (init)
        fontInfo.tilemap.removeTiles(0, fontInfo.tilemap.numTiles - 1);
    numTiles = fontInfo.tilemap.numTiles;
    var part;
    if (ct.color != bct.color)
        for (cnt = 0; cnt < len; cnt++) {
            part = str.charAt(cnt);
            if (part == ',')
                index = 10;
            else if (part == 'x')
                index = 11;
            else
                index = org.apache.royale.utils.Language._int(part);
            if (bigBack) {
                tl = new TileBase(this._pointBigBackRectarray[index]);
                tl.x = pos * scale - 8 * scale;
                tl.y = fontInfo.baseY[type] - 8 * scale;
                if (index == 10)
                    tl.y += 30 * scale;
                else if (index == 11)
                    tl.y += 10 * scale
            } else {
                tl = new TileBase(this._pointBackRectarray[index]);
                tl.y = fontInfo.baseY[type] - 4 * scale;
                if (index == 10)
                    tl.y += 30 * scale;
                else if (index == 11)
                    tl.y += 10 * scale;
                tl.x = pos * scale - 4 * scale
            }
            tl.colorTransform = bct;
            tl.scaleX = tl.scaleY = scale;
            pos += this._cutSizeArray[index] - 2;
            fontInfo.tilemap.addTile(tl)
        }
    pos = Number(fontInfo.baseX[type]);
    for (cnt = 0; cnt < len; cnt++) {
        part = str.charAt(cnt);
        if (part == ',')
            index = 10;
        else if (part == 'x')
            index = 11;
        else
            index = org.apache.royale.utils.Language._int(part);
        tl = new TileBase(this._pointRectarray[index]);
        tl.y = Number(fontInfo.baseY[type]);
        if (index == 10)
            tl.y += 30 * scale;
        else if (index == 11)
            tl.y += 10 * scale;
        tl.x = pos * scale;
        tl.colorTransform = ct;
        tl.scaleX = tl.scaleY = scale;
        pos += this._cutSizeArray[index] - 2;
        fontInfo.tilemap.addTile(tl)
    }
    if (align == 'CENTER') {
        len = fontInfo.tilemap.numTiles;
        for (cnt = numTiles; cnt < len; cnt++) {
            tl = org.apache.royale.utils.Language.as(fontInfo.tilemap.getTileAt(cnt), TileBase);
            tl.originX += (pos - fontInfo.baseX[type]) / 2
        }
    } else if (align == 'RIGHT') {
        len = fontInfo.tilemap.numTiles;
        for (cnt = numTiles; cnt < len; cnt++) {
            tl = org.apache.royale.utils.Language.as(fontInfo.tilemap.getTileAt(cnt), TileBase);
            tl.originX += pos - fontInfo.baseX[type]
        }
    }
}
;
pigg.puzzle.manager.NumberFontManager.prototype.removeNumber = function(name, isDestroy) {
    isDestroy = typeof isDestroy !== 'undefined' ? isDestroy : false;
    if (this._fontMap[name] == null)
        return;
    var fontInfo = this._fontMap[name];
    if (isDestroy)
        this.destroyInfo(name);
    else
        fontInfo.tilemap.removeTiles(0, fontInfo.tilemap.numTiles - 1)
}
;
pigg.puzzle.manager.NumberFontManager.prototype.removeFontInfo = function(name) {
    if (this._fontMap[name] == null)
        return;
    this.removeNumber(name);
    this._fontMap[name] = null
}
;
pigg.puzzle.manager.NumberFontManager.prototype.updateSize = function(name, fontSize, type) {
    type = typeof type !== 'undefined' ? type : 0;
    if (this._fontMap[name] == null)
        return;
    var fontInfo = this._fontMap[name];
    fontInfo.size[type] = fontSize
}
;
pigg.puzzle.manager.NumberFontManager.prototype.getFontInfo = function(name) {
    if (this._fontMap[name] == null)
        return null;
    return this._fontMap[name]
}
;
pigg.puzzle.manager.NumberFontManager.prototype.destroyInfo = function(name) {
    if (this._fontMap[name] == null)
        return;
    var fontInfo = this._fontMap[name];
    fontInfo.tilemap.removeTiles();
    this.removeFromParent(fontInfo.tilemap);
    fontInfo.tilemap = null;
    fontInfo = null;
    this._fontMap[name] = null
}
;
pigg.puzzle.manager.NumberFontManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'NumberFontManager',
        qName: 'pigg.puzzle.manager.NumberFontManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.NumberFontManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'NumberFontManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'makeFontInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }, {
                            index: 5,
                            type: 'uint',
                            optional: true
                        }, {
                            index: 6,
                            type: 'uint',
                            optional: true
                        }, {
                            index: 7,
                            type: 'int',
                            optional: true
                        }, {
                            index: 8,
                            type: 'int',
                            optional: true
                        }, {
                            index: 9,
                            type: 'Number',
                            optional: true
                        }, {
                            index: 10,
                            type: 'String',
                            optional: true
                        }, {
                            index: 11,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 12,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'addContainer': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'addFontType': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'uint',
                            optional: true
                        }, {
                            index: 3,
                            type: 'uint',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }, {
                            index: 5,
                            type: 'int',
                            optional: true
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: true
                        }, {
                            index: 7,
                            type: 'String',
                            optional: true
                        }, {
                            index: 8,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'makeNumber': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }, {
                            index: 4,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'removeNumber': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'removeFontInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'updateSize': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'getFontInfo': {
                    type: 'pigg.puzzle.data.NumberFontInfo',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'destroyInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.NumberFontManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data = {};
pigg.data.puzzle = {};
pigg.data.puzzle.PuzzleEventData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleEventData', pigg.data.puzzle.PuzzleEventData);
pigg.data.puzzle.PuzzleEventData.prototype._status;
pigg.data.puzzle.PuzzleEventData.prototype._eventCode;
pigg.data.puzzle.PuzzleEventData.prototype._title;
pigg.data.puzzle.PuzzleEventData.prototype._startTime;
pigg.data.puzzle.PuzzleEventData.prototype._endTime;
pigg.data.puzzle.PuzzleEventData.prototype._detailURL;
pigg.data.puzzle.PuzzleEventData.prototype._stepSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._stepDataVec;
pigg.data.puzzle.PuzzleEventData.prototype._eventLimitedTermIncentiveItemData;
pigg.data.puzzle.PuzzleEventData.prototype._eventLimitedQuantityIncentiveItemData;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermPoint = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermStartTime;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermEndTime;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermIncentiveItemSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedQuantityPoint = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedQuantityStock = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedQuantityIncentiveItemSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermIncentiveExists;
pigg.data.puzzle.PuzzleEventData.prototype._limitedQuantityIncentiveExists;
pigg.data.puzzle.PuzzleEventData.prototype._incentiveSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedTermIncentiveSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._limitedQuantityIncentiveSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._winningStreakPointLimit = 0;
pigg.data.puzzle.PuzzleEventData.prototype._mapBannerAvatarCode;
pigg.data.puzzle.PuzzleEventData.prototype._missionExists;
pigg.data.puzzle.PuzzleEventData.prototype._missionStartTime;
pigg.data.puzzle.PuzzleEventData.prototype._missionEndTime;
pigg.data.puzzle.PuzzleEventData.prototype._missionRequiredPoint = 0;
pigg.data.puzzle.PuzzleEventData.prototype._missionPieceTotalLimit = 0;
pigg.data.puzzle.PuzzleEventData.prototype._missionPieceDispLimit = 0;
pigg.data.puzzle.PuzzleEventData.prototype._missionPieceMinInterval = 0;
pigg.data.puzzle.PuzzleEventData.prototype._missionPieceRatio;
pigg.data.puzzle.PuzzleEventData.prototype._missionIncentiveSize = 0;
pigg.data.puzzle.PuzzleEventData.prototype._missionIncentiveItemRate;
pigg.data.puzzle.PuzzleEventData.prototype._missionItemVec;
pigg.data.puzzle.PuzzleEventData.prototype._rankingExists;
pigg.data.puzzle.PuzzleEventData.prototype._pointRankingLastUpdateTime;
pigg.data.puzzle.PuzzleEventData.prototype._winningRankingLastUpdateTime;
pigg.data.puzzle.PuzzleEventData.prototype._pointRankingData;
pigg.data.puzzle.PuzzleEventData.prototype._winningRankingData;
pigg.data.puzzle.PuzzleEventData.prototype._continueBasePrice = 0;
pigg.data.puzzle.PuzzleEventData.prototype._continueSaleExists;
pigg.data.puzzle.PuzzleEventData.prototype._continueSalePrice = 0;
pigg.data.puzzle.PuzzleEventData.prototype._continueSaleStartTime;
pigg.data.puzzle.PuzzleEventData.prototype._continueSaleEndTime;
pigg.data.puzzle.PuzzleEventData.prototype._userData;
pigg.data.puzzle.PuzzleEventData.prototype._openData;
pigg.data.puzzle.PuzzleEventData.prototype._serverTime;
pigg.data.puzzle.PuzzleEventData.prototype._baseServerTime;
pigg.data.puzzle.PuzzleEventData.prototype._baseClientTime;
pigg.data.puzzle.PuzzleEventData.prototype.readData = function(data) {
    var cnt = 0
      , cnt2 = 0
      , cnt3 = 0
      , len = 0;
    var item;
    var stepData;
    this._status = org.apache.royale.utils.Language.string(data['status']);
    if (this._status != 'SUCCESS')
        return;
    this._baseServerTime = Number(data['serverTime']);
    this._serverTime = this._baseServerTime;
    this._baseClientTime = openfl.utils.getTimer();
    this._continueBasePrice = Number(data['event']['continueBasePrice']);
    if (data['event']['continueSale']) {
        this._continueSaleExists = true;
        this._continueSalePrice = Number(data['event']['continueSale']['salePrice']);
        this._continueSaleStartTime = Number(data['event']['continueSale']['startTime']);
        this._continueSaleEndTime = Number(data['event']['continueSale']['endTime'])
    } else
        this._continueSaleExists = false;
    this._title = org.apache.royale.utils.Language.string(data['event']['eventTitle']);
    this._eventCode = org.apache.royale.utils.Language.string(data['event']['eventCode']);
    this._startTime = Number(data['event']['startTime']);
    this._endTime = Number(data['event']['endTime']);
    this._detailURL = org.apache.royale.utils.Language.string(data['event']['detailURL']);
    this._stepSize = Number(data['event']['steps'].length);
    this._stepDataVec = org.apache.royale.utils.Language.Vector(this._stepSize, 'PuzzleStepData');
    var stepInfo;
    var itemInfo;
    for (cnt = 0; cnt < this._stepSize; cnt++) {
        stepData = new pigg.data.puzzle.PuzzleStepData;
        stepInfo = data['event']['steps'][cnt];
        stepData.step = Number(stepInfo['step']);
        stepData.point = Number(stepInfo['stepPoint']);
        stepData.incentiveItemSize = Number(stepInfo['stepIncentives'].length);
        stepData.eventIncentiveItemData = org.apache.royale.utils.Language.Vector(stepData.incentiveItemSize, 'PuzzleIncentiveItemData');
        for (cnt2 = 0; cnt2 < stepData.incentiveItemSize; cnt2++) {
            item = new pigg.data.puzzle.PuzzleIncentiveItemData;
            itemInfo = stepInfo['stepIncentives'][cnt2];
            item.itemCode = org.apache.royale.utils.Language.string(itemInfo['stepIncentiveItemCode']);
            item.itemType = org.apache.royale.utils.Language.string(itemInfo['stepIncentiveItemType']);
            item.itemType = this.checkItemType(item.itemType);
            item.itemName = org.apache.royale.utils.Language.string(itemInfo['stepIncentiveItemName']);
            item.itemQuantity = Number(itemInfo['stepIncentiveItemQuantity']);
            stepData.eventIncentiveItemData[cnt2] = item
        }
        this._stepDataVec[cnt] = stepData
    }
    var limitedTermInfo = data['event']['limitedTerm'];
    if (limitedTermInfo) {
        this._limitedTermIncentiveExists = true;
        this._limitedTermPoint = Number(limitedTermInfo['limitedTermPoint']);
        this._limitedTermStartTime = Number(limitedTermInfo['limitedTermStartTime']);
        this._limitedTermEndTime = Number(limitedTermInfo['limitedTermEndTime']);
        this._limitedTermIncentiveItemSize = Number(limitedTermInfo['limitedTermIncentives'].length);
        this._eventLimitedTermIncentiveItemData = org.apache.royale.utils.Language.Vector(this._limitedTermIncentiveItemSize, 'PuzzleIncentiveItemData');
        for (cnt = 0; cnt < this._limitedTermIncentiveItemSize; cnt++) {
            item = new pigg.data.puzzle.PuzzleIncentiveItemData;
            itemInfo = limitedTermInfo['limitedTermIncentives'][cnt];
            item.itemCode = org.apache.royale.utils.Language.string(itemInfo['limitedTermIncentiveItemCode']);
            item.itemType = org.apache.royale.utils.Language.string(itemInfo['limitedTermIncentiveItemType']);
            item.itemType = this.checkItemType(item.itemType);
            item.itemName = org.apache.royale.utils.Language.string(itemInfo['limitedTermIncentiveItemName']);
            item.itemQuantity = Number(itemInfo['limitedTermIncentiveItemQuantity']);
            this._eventLimitedTermIncentiveItemData[cnt] = item
        }
    } else
        this._limitedTermIncentiveExists = false;
    var limitedQuantityInfo = data['event']['limitedQuantity'];
    if (limitedQuantityInfo) {
        this._limitedQuantityIncentiveExists = true;
        this._limitedQuantityPoint = Number(limitedQuantityInfo['limitedQuantityPoint']);
        this._limitedQuantityStock = Number(limitedQuantityInfo['limitedQuantityStock']);
        this._limitedQuantityIncentiveItemSize = Number(limitedQuantityInfo['limitedQuantityIncentives'].length);
        this._eventLimitedQuantityIncentiveItemData = org.apache.royale.utils.Language.Vector(this._limitedQuantityIncentiveItemSize, 'PuzzleIncentiveItemData');
        for (cnt = 0; cnt < this._limitedQuantityIncentiveItemSize; cnt++) {
            item = new pigg.data.puzzle.PuzzleIncentiveItemData;
            itemInfo = limitedQuantityInfo['limitedQuantityIncentives'][cnt];
            item.itemCode = org.apache.royale.utils.Language.string(itemInfo['limitedQuantityIncentiveItemCode']);
            item.itemType = org.apache.royale.utils.Language.string(itemInfo['limitedQuantityIncentiveItemType']);
            item.itemType = this.checkItemType(item.itemType);
            item.itemName = org.apache.royale.utils.Language.string(itemInfo['limitedQuantityIncentiveItemName']);
            item.itemQuantity = Number(itemInfo['limitedQuantityIncentiveItemQuantity']);
            this._eventLimitedQuantityIncentiveItemData[cnt] = item
        }
    } else
        this._limitedQuantityIncentiveExists = false;
    this._winningStreakPointLimit = Number(data['event']['winningStreakPointLimit']);
    var missionInfo = data['event']['roulette'];
    var missionItemInfo;
    if (missionInfo) {
        this._missionExists = true;
        this._missionEndTime = Number(missionInfo['rouletteEndTime']);
        this._missionStartTime = Number(missionInfo['rouletteStartTime']);
        this._missionRequiredPoint = Number(missionInfo['rouletteRequiredPieceCount']);
        this._missionPieceTotalLimit = Number(missionInfo['maxPieceCountOnTheme']);
        this._missionPieceDispLimit = Number(missionInfo['maxDisplayPieceOnTheme']);
        this._missionPieceMinInterval = Number(missionInfo['popPieceMinMoveCountThreshold']);
        this._missionPieceRatio = Number(missionInfo['popPieceProbability']);
        this._missionIncentiveSize = Number(missionInfo['rouletteIncentives'].length);
        this._missionItemVec = org.apache.royale.utils.Language.Vector(this._missionIncentiveSize, 'PuzzleIncentiveItemData');
        var _missionItemData;
        for (cnt = 0; cnt < this._missionIncentiveSize; cnt++) {
            missionItemInfo = missionInfo['rouletteIncentives'][cnt];
            _missionItemData = new pigg.data.puzzle.PuzzleIncentiveItemData;
            _missionItemData.itemIndex = Number(missionItemInfo['rouletteIncentiveItemIndex']);
            _missionItemData.itemCode = org.apache.royale.utils.Language.string(missionItemInfo['rouletteIncentiveItemCode']);
            _missionItemData.itemType = org.apache.royale.utils.Language.string(missionItemInfo['rouletteIncentiveItemType']);
            _missionItemData.itemName = org.apache.royale.utils.Language.string(missionItemInfo['rouletteIncentiveItemName']);
            _missionItemData.itemQuantity = Number(missionItemInfo['rouletteIncentiveItemQuantity']);
            this._missionIncentiveItemRate = Number(missionItemInfo['rouletteIncentiveItemRate']);
            this._missionItemVec[cnt] = _missionItemData
        }
    } else
        this._missionExists = false;
    this._rankingExists = data['event']['rankingExists'];
    if (this._userData == null)
        this._userData = new pigg.data.puzzle.PuzzleUserData;
    var userInfo = data['event']['user'];
    var themeInfo = data['event']['user']['theme'];
    var scoreItemInfo = data['event']['user']['scoreItems'];
    var cheatItemInfo = data['event']['user']['cheatItems'];
    var rouletteInfo = data['event']['user']['roulette'];
    var prevEventResultInfo = data['event']['user']['prevEventResult'];
    var ba;
    this._userData.status = org.apache.royale.utils.Language.string(userInfo['status']);
    this._userData.eventPoint = Number(userInfo['eventPoint']);
    this._userData.eventWinningStreakCount = Number(userInfo['eventWinningStreakCount']);
    this._userData.hasLimitedTermIncentive = userInfo['hasLimitedTermIncentive'];
    this._userData.hasLimitedQuantityIncentive = userInfo['hasLimitedQuantityIncentive'];
    this._userData.equippedScoreItemCategory = org.apache.royale.utils.Language.string(userInfo['equippedScoreItemCategory']);
    if (themeInfo) {
        this._userData.hasTheme = true;
        this._userData.boardCode = org.apache.royale.utils.Language.string(themeInfo['boardCode']);
        this._userData.boardUUID = org.apache.royale.utils.Language.string(themeInfo['boardUUID']);
        this._userData.boardBaseData = org.apache.royale.utils.Language.string(themeInfo['boardBaseData']);
        this._userData.boardData = org.apache.royale.utils.Language.string(themeInfo['boardData']);
        this._userData.boardPoint = Number(themeInfo['themePoint']);
        this._userData.boardRemainingMoveCount = Number(themeInfo['remainingMoveCount']);
        if (themeInfo['usingScoreItem']) {
            this._userData.isScoreItemUsing = true;
            this._userData.boardUsingPuzzleScoreItemCategory = org.apache.royale.utils.Language.string(themeInfo['usingScoreItem']['category']);
            this._userData.boardUsingPuzzleScoreItemMagnification = Number(themeInfo['usingScoreItem']['magnification'])
        } else
            this._userData.isScoreItemUsing = false;
        this._userData.progressCount = Number(themeInfo['progressCount'])
    }
    var userItem;
    var userItemInfo;
    if (scoreItemInfo) {
        this._userData.scoreItemData = org.apache.royale.utils.Language.Vector(scoreItemInfo.length, 'PuzzleUserItemData');
        len = scoreItemInfo.length;
        for (cnt = 0; cnt < len; cnt++) {
            userItemInfo = scoreItemInfo[cnt];
            userItem = new pigg.data.puzzle.PuzzleUserItemData;
            userItem.itemCode = org.apache.royale.utils.Language.string(userItemInfo['scoreItemCode']);
            userItem.itemCategory = org.apache.royale.utils.Language.string(userItemInfo['scoreItemCategory']);
            userItem.itemName = org.apache.royale.utils.Language.string(userItemInfo['scoreItemName']);
            userItem.itemDiscription = org.apache.royale.utils.Language.string(userItemInfo['scoreItemDiscription']);
            userItem.itemExpireTime = Number(userItemInfo['scoreItemExpireTime']);
            userItem.itemQuantity = Number(userItemInfo['scoreItemQuantity']);
            userItem.itemMagnification = Number(userItemInfo['scoreItemMagnification']);
            this._userData.scoreItemData[cnt] = userItem
        }
    } else
        this._userData.scoreItemData = org.apache.royale.utils.Language.Vector();
    if (cheatItemInfo) {
        this._userData.cheatItemData = org.apache.royale.utils.Language.Vector(cheatItemInfo.length, 'PuzzleUserItemData');
        len = cheatItemInfo.length;
        for (cnt = 0; cnt < len; cnt++) {
            userItemInfo = cheatItemInfo[cnt];
            userItem = new pigg.data.puzzle.PuzzleUserItemData;
            userItem.itemCode = org.apache.royale.utils.Language.string(userItemInfo['cheatItemCode']);
            userItem.itemCategory = org.apache.royale.utils.Language.string(userItemInfo['cheatItemCategory']);
            userItem.itemName = org.apache.royale.utils.Language.string(userItemInfo['cheatItemName']);
            userItem.itemDiscription = org.apache.royale.utils.Language.string(userItemInfo['cheatItemDiscription']);
            userItem.itemQuantity = Number(userItemInfo['cheatItemQuantity']);
            userItem.itemMagnification = Number(userItemInfo['cheatItemMagnification']);
            this._userData.cheatItemData[cnt] = userItem
        }
    } else
        this._userData.cheatItemData = org.apache.royale.utils.Language.Vector();
    if (rouletteInfo) {
        this._userData.missionPoint = Number(rouletteInfo['pieceCount']);
        this._userData.isDuringRoulette = rouletteInfo['duringRoulette']
    }
    this._openData = new pigg.data.puzzle.PuzzleOpenData;
    this._openData.isEventFirstTime = userInfo['eventFirstTime'];
    if (prevEventResultInfo)
        this._openData.readData(prevEventResultInfo)
}
;
pigg.data.puzzle.PuzzleEventData.prototype.setRankingEventData = function(data) {
    var cnt = 0
      , cnt2 = 0;
    var awardSize = 0;
    var rankingSize = 0;
    var rankingType;
    var rankingEventData;
    var rankingIncentiveSize = 0;
    var targetData;
    var lastUpdateTime;
    var item;
    var awardData;
    rankingSize = Number(data['rankingSize']);
    rankingType = org.apache.royale.utils.Language.string(data['rankingTypeCode']);
    lastUpdateTime = Number(data['lastUpdateTime']);
    awardSize = Number(data['awards'].length);
    targetData = org.apache.royale.utils.Language.Vector(awardSize, 'PuzzleEventRankingData');
    for (cnt = 0; cnt < awardSize; cnt++) {
        rankingEventData = new pigg.data.puzzle.PuzzleEventRankingData;
        awardData = data['awards'][cnt];
        rankingEventData.awardName = org.apache.royale.utils.Language.string(awardData['awardTypeCode']);
        rankingEventData.rankRangeStart = Number(awardData['rankRangeStart']);
        rankingEventData.rankRangeEnd = Number(awardData['rankRangeEnd']);
        rankingEventData.lowestValue = Number(awardData['lowestValue']);
        rankingIncentiveSize = Number(awardData['rankingIncentives'].length);
        rankingEventData.rankingIncentive = org.apache.royale.utils.Language.Vector();
        for (cnt2 = 0; cnt2 < rankingIncentiveSize; cnt2++) {
            item = new pigg.data.puzzle.PuzzleIncentiveItemData;
            item.itemCode = org.apache.royale.utils.Language.string(awardData['rankingIncentives'][cnt2]['rankingIncentiveItemCode']);
            item.itemType = org.apache.royale.utils.Language.string(awardData['rankingIncentives'][cnt2]['rankingIncentiveItemType']);
            item.itemName = org.apache.royale.utils.Language.string(awardData['rankingIncentives'][cnt2]['rankingIncentiveItemName']);
            item.itemQuantity = Number(awardData['rankingIncentives'][cnt2]['rankingIncentiveItemQuantity']);
            item.isRankingSpecial = awardData['rankingIncentives'][cnt2]['rankingIncentiveItemSpecial'];
            if (item.isRankingSpecial) {
                rankingEventData.hasSpecialIncentive++;
                rankingEventData.rankingIncentive.unshift(item)
            } else
                rankingEventData.rankingIncentive.push(item)
        }
        targetData[7 - cnt] = rankingEventData
    }
    if (rankingType == 'score') {
        this._pointRankingLastUpdateTime = lastUpdateTime;
        this._pointRankingData = targetData
    } else if (rankingType == 'winning_streak') {
        this._winningRankingLastUpdateTime = lastUpdateTime;
        this._winningRankingData = targetData
    }
}
;
pigg.data.puzzle.PuzzleEventData.prototype.checkItemType = function(itemType) {
    var str;
    if (itemType == 'exterior')
        str = 'furniture';
    else if (itemType == 'cosmeticitem')
        str = 'cosmetic';
    else
        str = itemType;
    return str
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__eventCode = function() {
    return this._eventCode
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__eventCode = function(v) {
    this._eventCode = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__title = function() {
    return this._title
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__title = function(v) {
    this._title = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__startTime = function() {
    return this._startTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__startTime = function(v) {
    this._startTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__endTime = function() {
    return this._endTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__endTime = function(v) {
    this._endTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__detailURL = function() {
    return this._detailURL
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__detailURL = function(v) {
    this._detailURL = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__stepSize = function() {
    return this._stepSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__stepSize = function(v) {
    this._stepSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__stepDataVec = function() {
    return this._stepDataVec
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__stepDataVec = function(v) {
    this._stepDataVec = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__eventLimitedTermIncentiveItemData = function() {
    return this._eventLimitedTermIncentiveItemData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__eventLimitedTermIncentiveItemData = function(v) {
    this._eventLimitedTermIncentiveItemData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__eventLimitedQuantityIncentiveItemData = function() {
    return this._eventLimitedQuantityIncentiveItemData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__eventLimitedQuantityIncentiveItemData = function(v) {
    this._eventLimitedQuantityIncentiveItemData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermPoint = function() {
    return this._limitedTermPoint
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermPoint = function(v) {
    this._limitedTermPoint = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveItemSize = function() {
    return this._limitedTermIncentiveItemSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveItemSize = function(v) {
    this._limitedTermIncentiveItemSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityPoint = function() {
    return this._limitedQuantityPoint
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityPoint = function(v) {
    this._limitedQuantityPoint = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityStock = function() {
    return this._limitedQuantityStock
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityStock = function(v) {
    this._limitedQuantityStock = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveItemSize = function() {
    return this._limitedQuantityIncentiveItemSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveItemSize = function(v) {
    this._limitedQuantityIncentiveItemSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermStartTime = function() {
    return this._limitedTermStartTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermStartTime = function(v) {
    this._limitedTermStartTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermEndTime = function() {
    return this._limitedTermEndTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermEndTime = function(v) {
    this._limitedTermEndTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveExists = function() {
    return this._limitedTermIncentiveExists
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveExists = function(v) {
    this._limitedTermIncentiveExists = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveExists = function() {
    return this._limitedQuantityIncentiveExists
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveExists = function(v) {
    this._limitedQuantityIncentiveExists = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__incentiveSize = function() {
    return this._incentiveSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__incentiveSize = function(v) {
    this._incentiveSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveSize = function() {
    return this._limitedTermIncentiveSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveSize = function(v) {
    this._limitedTermIncentiveSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveSize = function() {
    return this._limitedQuantityIncentiveSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveSize = function(v) {
    this._limitedQuantityIncentiveSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__winningStreakPointLimit = function() {
    return this._winningStreakPointLimit
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__winningStreakPointLimit = function(v) {
    this._winningStreakPointLimit = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__mapBannerAvatarCode = function() {
    return this._mapBannerAvatarCode
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__mapBannerAvatarCode = function(v) {
    this._mapBannerAvatarCode = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionExists = function() {
    return this._missionExists
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionExists = function(v) {
    this._missionExists = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionStartTime = function() {
    return this._missionStartTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionStartTime = function(v) {
    this._missionStartTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionEndTime = function() {
    return this._missionEndTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionEndTime = function(v) {
    this._missionEndTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionRequiredPoint = function() {
    return this._missionRequiredPoint
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionRequiredPoint = function(v) {
    this._missionRequiredPoint = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceTotalLimit = function() {
    return this._missionPieceTotalLimit
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceTotalLimit = function(v) {
    this._missionPieceTotalLimit = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceDispLimit = function() {
    return this._missionPieceDispLimit
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceDispLimit = function(v) {
    this._missionPieceDispLimit = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceMinInterval = function() {
    return this._missionPieceMinInterval
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceMinInterval = function(v) {
    this._missionPieceMinInterval = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceRatio = function() {
    return this._missionPieceRatio
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceRatio = function(v) {
    this._missionPieceRatio = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionIncentiveSize = function() {
    return this._missionIncentiveSize
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionIncentiveSize = function(v) {
    this._missionIncentiveSize = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionIncentiveItemRate = function() {
    return this._missionIncentiveItemRate
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionIncentiveItemRate = function(v) {
    this._missionIncentiveItemRate = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__missionItemVec = function() {
    return this._missionItemVec
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__missionItemVec = function(v) {
    this._missionItemVec = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__rankingExists = function() {
    return this._rankingExists
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__rankingExists = function(v) {
    this._rankingExists = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__pointRankingLastUpdateTime = function() {
    return this._pointRankingLastUpdateTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__pointRankingLastUpdateTime = function(v) {
    this._pointRankingLastUpdateTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__winningRankingLastUpdateTime = function() {
    return this._winningRankingLastUpdateTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__winningRankingLastUpdateTime = function(v) {
    this._winningRankingLastUpdateTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__pointRankingData = function() {
    return this._pointRankingData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__pointRankingData = function(v) {
    this._pointRankingData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__winningRankingData = function() {
    return this._winningRankingData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__winningRankingData = function(v) {
    this._winningRankingData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__continueBasePrice = function() {
    return this._continueBasePrice
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__continueBasePrice = function(v) {
    this._continueBasePrice = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__continueSalePrice = function() {
    return this._continueSalePrice
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__continueSalePrice = function(v) {
    this._continueSalePrice = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleExists = function() {
    return this._continueSaleExists
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleExists = function(v) {
    this._continueSaleExists = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleStartTime = function() {
    return this._continueSaleStartTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleStartTime = function(v) {
    this._continueSaleStartTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleEndTime = function() {
    return this._continueSaleEndTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleEndTime = function(v) {
    this._continueSaleEndTime = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__userData = function() {
    return this._userData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__userData = function(v) {
    this._userData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__openData = function() {
    return this._openData
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__openData = function(v) {
    this._openData = v
}
;
pigg.data.puzzle.PuzzleEventData.prototype.get__serverTime = function() {
    var diffTime = openfl.utils.getTimer() - this._baseClientTime;
    this._serverTime = this._baseServerTime + diffTime;
    return this._serverTime
}
;
pigg.data.puzzle.PuzzleEventData.prototype.set__serverTime = function(v) {
    this._baseServerTime = v;
    this._serverTime = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleEventData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__status
    },
    eventCode: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__eventCode,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__eventCode
    },
    title: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__title,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__title
    },
    startTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__startTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__startTime
    },
    endTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__endTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__endTime
    },
    detailURL: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__detailURL,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__detailURL
    },
    stepSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__stepSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__stepSize
    },
    stepDataVec: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__stepDataVec,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__stepDataVec
    },
    eventLimitedTermIncentiveItemData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__eventLimitedTermIncentiveItemData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__eventLimitedTermIncentiveItemData
    },
    eventLimitedQuantityIncentiveItemData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__eventLimitedQuantityIncentiveItemData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__eventLimitedQuantityIncentiveItemData
    },
    limitedTermPoint: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermPoint,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermPoint
    },
    limitedTermIncentiveItemSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveItemSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveItemSize
    },
    limitedQuantityPoint: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityPoint,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityPoint
    },
    limitedQuantityStock: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityStock,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityStock
    },
    limitedQuantityIncentiveItemSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveItemSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveItemSize
    },
    limitedTermStartTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermStartTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermStartTime
    },
    limitedTermEndTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermEndTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermEndTime
    },
    limitedTermIncentiveExists: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveExists,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveExists
    },
    limitedQuantityIncentiveExists: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveExists,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveExists
    },
    incentiveSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__incentiveSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__incentiveSize
    },
    limitedTermIncentiveSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedTermIncentiveSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedTermIncentiveSize
    },
    limitedQuantityIncentiveSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__limitedQuantityIncentiveSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__limitedQuantityIncentiveSize
    },
    winningStreakPointLimit: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__winningStreakPointLimit,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__winningStreakPointLimit
    },
    mapBannerAvatarCode: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__mapBannerAvatarCode,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__mapBannerAvatarCode
    },
    missionExists: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionExists,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionExists
    },
    missionStartTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionStartTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionStartTime
    },
    missionEndTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionEndTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionEndTime
    },
    missionRequiredPoint: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionRequiredPoint,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionRequiredPoint
    },
    missionPieceTotalLimit: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceTotalLimit,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceTotalLimit
    },
    missionPieceDispLimit: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceDispLimit,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceDispLimit
    },
    missionPieceMinInterval: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceMinInterval,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceMinInterval
    },
    missionPieceRatio: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionPieceRatio,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionPieceRatio
    },
    missionIncentiveSize: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionIncentiveSize,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionIncentiveSize
    },
    missionIncentiveItemRate: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionIncentiveItemRate,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionIncentiveItemRate
    },
    missionItemVec: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__missionItemVec,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__missionItemVec
    },
    rankingExists: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__rankingExists,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__rankingExists
    },
    pointRankingLastUpdateTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__pointRankingLastUpdateTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__pointRankingLastUpdateTime
    },
    winningRankingLastUpdateTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__winningRankingLastUpdateTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__winningRankingLastUpdateTime
    },
    pointRankingData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__pointRankingData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__pointRankingData
    },
    winningRankingData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__winningRankingData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__winningRankingData
    },
    continueBasePrice: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__continueBasePrice,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__continueBasePrice
    },
    continueSalePrice: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__continueSalePrice,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__continueSalePrice
    },
    continueSaleExists: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleExists,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleExists
    },
    continueSaleStartTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleStartTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleStartTime
    },
    continueSaleEndTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__continueSaleEndTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__continueSaleEndTime
    },
    userData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__userData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__userData
    },
    openData: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__openData,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__openData
    },
    serverTime: {
        get: pigg.data.puzzle.PuzzleEventData.prototype.get__serverTime,
        set: pigg.data.puzzle.PuzzleEventData.prototype.set__serverTime
    }
});
pigg.data.puzzle.PuzzleEventData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleEventData',
        qName: 'pigg.data.puzzle.PuzzleEventData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleEventData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'eventCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'title': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'startTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'endTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'detailURL': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'stepSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'stepDataVec': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleStepData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'eventLimitedTermIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'eventLimitedQuantityIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermIncentiveItemSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedQuantityPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedQuantityStock': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedQuantityIncentiveItemSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermStartTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermEndTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermIncentiveExists': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedQuantityIncentiveExists': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'incentiveSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedTermIncentiveSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'limitedQuantityIncentiveSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'winningStreakPointLimit': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'mapBannerAvatarCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionExists': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionStartTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionEndTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionRequiredPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionPieceTotalLimit': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionPieceDispLimit': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionPieceMinInterval': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionPieceRatio': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionIncentiveSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionIncentiveItemRate': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'missionItemVec': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'rankingExists': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'pointRankingLastUpdateTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'winningRankingLastUpdateTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'pointRankingData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleEventRankingData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'winningRankingData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleEventRankingData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'continueBasePrice': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'continueSalePrice': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'continueSaleExists': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'continueSaleStartTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'continueSaleEndTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'userData': {
                    type: 'pigg.data.puzzle.PuzzleUserData',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'openData': {
                    type: 'pigg.data.puzzle.PuzzleOpenData',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'serverTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleEventData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                },
                'setRankingEventData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.ParticleView = function(main) {
    pigg.puzzle.view.CommonView.call(this);
    this.RECT_GET_THEME_GUMMY = [4, 5, 6, 7, 8, 9];
    this.RECT_INCENTIVE_CONFETTI_PARTS = [10, 11, 12];
    this.RESULT_CLEAR_PARTICLE_POSITION = [[74, 112], [31, 226], [148, 335], [556, 111], [614, 220], [505, 343]];
    this.traceLog('ParticleView');
    this._main = main;
    this._thisView = this
}
;
goog.inherits(pigg.puzzle.view.ParticleView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.ParticleView', pigg.puzzle.view.ParticleView);
pigg.puzzle.view.ParticleView.prototype._container;
pigg.puzzle.view.ParticleView.prototype._tileset;
pigg.puzzle.view.ParticleView.prototype._tilemap;
pigg.puzzle.view.ParticleView.prototype._main;
pigg.puzzle.view.ParticleView.prototype._thisView;
pigg.puzzle.view.ParticleView.prototype.RECT_KIRA1 = 0;
pigg.puzzle.view.ParticleView.prototype.RECT_KIRA2 = 1;
pigg.puzzle.view.ParticleView.prototype.RECT_GET_MISSION_STAR = 2;
pigg.puzzle.view.ParticleView.prototype.RECT_GET_THEME_FLOWER = 3;
pigg.puzzle.view.ParticleView.prototype.RECT_GET_THEME_GUMMY;
pigg.puzzle.view.ParticleView.prototype.RECT_INCENTIVE_CONFETTI_PARTS;
pigg.puzzle.view.ParticleView.prototype._w = 0;
pigg.puzzle.view.ParticleView.prototype._h = 0;
pigg.puzzle.view.ParticleView.prototype._center;
pigg.puzzle.view.ParticleView.prototype._particleType = 0;
pigg.puzzle.view.ParticleView.prototype._quantity = 0;
pigg.puzzle.view.ParticleView.prototype._totalCount = 0;
pigg.puzzle.view.ParticleView.prototype.init = function(w, h, particleType, quantity) {
    w = typeof w !== 'undefined' ? w : 300;
    h = typeof h !== 'undefined' ? h : 300;
    particleType = typeof particleType !== 'undefined' ? particleType : 0;
    quantity = typeof quantity !== 'undefined' ? quantity : 4;
    var cnt = 0;
    this._w = w;
    this._h = h;
    this._particleType = particleType;
    this._quantity = quantity;
    this.addChild(this._container = new openfl.display.Sprite);
    if (this._main.particleTileset == null) {
        this._main.particleTileset = this._main.commonPartsTileset.clone();
        this._main.particleTileset.addRect(new openfl.geom.Rectangle(244,987,43,38));
        this._main.particleTileset.addRect(new openfl.geom.Rectangle(182,1014,43,43));
        this._main.particleTileset.addRect(new openfl.geom.Rectangle(325,952,50,47));
        this._main.particleTileset.addRect(new openfl.geom.Rectangle(377,952,20,25));
        for (cnt = 0; cnt < 6; cnt++)
            this._main.particleTileset.addRect(new openfl.geom.Rectangle(399 + cnt * 32,952,32,33));
        for (cnt = 0; cnt < 3; cnt++)
            this._main.particleTileset.addRect(new openfl.geom.Rectangle(279 + cnt * 12,951,12,21))
    }
    this._tileset = this._main.particleTileset;
    this._center = new openfl.geom.Point(this._w / 2,this._h / 2);
    this._tilemap = new openfl.display.Tilemap(this._w,this._h,this._tileset);
    this.addChild(this._tilemap);
    this.setParticle(this._particleType, this._quantity);
    this.mouseChildren = false;
    this.mouseEnabled = false
}
;
pigg.puzzle.view.ParticleView.prototype.setParticle = function(particleType, quantity) {
    particleType = typeof particleType !== 'undefined' ? particleType : 0;
    quantity = typeof quantity !== 'undefined' ? quantity : 4
}
;
pigg.puzzle.view.ParticleView.prototype.makeTapParticle = function(px, py) {
    if (this._totalCount > 20)
        return;
    this._center.x = px;
    this._center.y = py;
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < this._quantity; cnt++) {
        this._totalCount++;
        this._tilemap.addTile(tl = new openfl.display.Tile(this._particleType));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = this._center.x;
        tl.y = this._center.y;
        com.greensock.TweenMax.to(tl, 1, {
            x: this._center.x + (Math.random() * 400 - 200),
            y: this._center.y + (Math.random() * 400 - 200),
            scaleX: .5,
            scaleY: .5,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeThemeParticle = function(px, py, type, ballType) {
    type = typeof type !== 'undefined' ? type : -1;
    ballType = typeof ballType !== 'undefined' ? ballType : 0;
    if (this._totalCount > 20)
        return;
    this._center.x = px;
    this._center.y = py;
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < 2; cnt++) {
        this._totalCount++;
        if (type == pigg.puzzle.view.CommonView.THEME_FLOWER) {
            this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_GET_THEME_FLOWER));
            tl.rotation = Math.random() * 180 - 90;
            tl.originX = 15;
            tl.originY = 20;
            tl.x = this._center.x;
            tl.y = this._center.y;
            tl.scaleX = tl.scaleY = 1.5;
            com.greensock.TweenMax.to(tl, .7, {
                x: this._center.x + (Math.random() * 180 - 90),
                y: this._center.y + (Math.random() * 180 - 90),
                rotation: Math.random() * 180 - 90,
                scaleX: -.5,
                scaleY: .5,
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [tl]
            })
        } else if (type == 0) {
            this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_GET_THEME_GUMMY[ballType - 1]));
            tl.originX = 16;
            tl.originY = 16;
            tl.x = this._center.x;
            tl.y = this._center.y;
            com.greensock.TweenMax.to(tl, .4, {
                x: this._center.x + (Math.random() * 150 - 75),
                y: this._center.y + (Math.random() * 150 - 75),
                scaleX: .2,
                scaleY: .2,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [tl]
            })
        } else {
            this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_KIRA2));
            tl.originX = 22;
            tl.originY = 19;
            tl.x = this._center.x;
            tl.y = this._center.y;
            tl.scaleX = tl.scaleY = .7;
            com.greensock.TweenMax.to(tl, .4, {
                x: this._center.x + (Math.random() * 150 - 75),
                y: this._center.y + (Math.random() * 150 - 75),
                scaleX: .5,
                scaleY: .5,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [tl]
            })
        }
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeBonusScoreParticle = function(potionType) {
    potionType = typeof potionType !== 'undefined' ? potionType : -1;
    this._center.x = 540;
    if (potionType == -1)
        this._center.y = 60;
    else
        this._center.y = 30;
    var tx, ty;
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < 3; cnt++) {
        this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_KIRA1));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = this._center.x;
        tl.y = this._center.y;
        tl.scaleX = tl.scaleY = .5;
        tx = Math.random() * 400 - 200;
        ty = Math.random() * 100 - 50 + 300;
        com.greensock.TweenMax.to(tl, .45 + Math.random() * .2, {
            bezier: [{
                x: this._center.x + tx / 3,
                y: tl.y - 8 * 3 * Math.random() * 2,
                scaleX: .7,
                scaleY: .7
            }, {
                x: this._center.x + tx,
                y: ty,
                scaleX: .8,
                scaleY: .8
            }],
            ease: com.greensock.easing.SlowMo.ease.config(.1, .3, false),
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeContinueMoveTimesParticle = function() {
    this._center.x = 50;
    this._center.y = 35;
    var cnt = 0;
    var tl;
    var tx, ty;
    for (cnt = 0; cnt < 4; cnt++) {
        this._totalCount++;
        this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_KIRA1));
        tl.originX = 22;
        tl.originY = 19;
        tl.scaleX = tl.scaleY = 1;
        tx = Math.random() * 500 - 200;
        ty = Math.random() * 600 - 200;
        if (ty < 50 && ty > -50)
            if (tx > 0 && tx < 100)
                tx = 100 + Math.random() * 400;
            else if (tx < 0 && tx > -100)
                tx = -100 - Math.random() * 200;
        if (tx > 0)
            tl.x = this._center.x + 20;
        else
            tl.x = this._center.x - 20;
        if (ty > 0)
            tl.y = this._center.y + 20;
        else
            tl.y = this._center.y - 20;
        com.greensock.TweenMax.to(tl, 1, {
            x: this._center.x + tx,
            y: this._center.y + ty,
            scaleX: .7,
            scaleY: .7,
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeMissionGetParticle = function(px, py) {
    if (this._totalCount > 20)
        return;
    this._center.x = px;
    this._center.y = py;
    var cnt = 0;
    var tl;
    this._tilemap.addTile(tl = new openfl.display.Tile(2));
    tl.originX = 25;
    tl.originY = 28;
    tl.x = this._center.x + 29;
    tl.y = this._center.y + 32;
    com.greensock.TweenMax.to(tl, .4, {
        scaleX: 2,
        scaleY: 2,
        alpha: 0,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
        onCompleteParams: [tl]
    });
    var tl2;
    for (cnt = 0; cnt < 4; cnt++) {
        this._totalCount++;
        this._tilemap.addTile(tl2 = new openfl.display.Tile(0));
        tl2.originX = 22;
        tl2.originY = 19;
        tl2.x = this._center.x + 22;
        tl2.y = this._center.y + 19;
        com.greensock.TweenMax.to(tl2, .5, {
            x: this._center.x + 22 + (Math.random() * 100 - 50),
            y: this._center.y + 19 + (Math.random() * 100 - 50),
            scaleX: .2,
            scaleY: .2,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl2]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeThemePotionParticle = function() {
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < this._quantity; cnt++) {
        this._totalCount++;
        this._tilemap.addTile(tl = new openfl.display.Tile(this._particleType));
        tl.originX = 22;
        tl.originY = 22;
        tl.x = this._center.x + 22;
        tl.y = this._center.y + 22;
        com.greensock.TweenMax.to(tl, 3, {
            x: Math.random() * this._w,
            y: Math.random() * this._h,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeMissionMaxParticle = function(px, py) {
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < 10; cnt++) {
        this._tilemap.addTile(tl = new openfl.display.Tile(0));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = px + 22;
        tl.y = py + 19;
        com.greensock.TweenMax.to(tl, 1, {
            x: px + 22 + Math.random() * 300 - 150,
            y: py + 19 + Math.random() * 300 - 150,
            scaleX: .2,
            scaleY: .2,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeParticle = function() {
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < this._quantity; cnt++) {
        this._tilemap.addTile(tl = new openfl.display.Tile(this._particleType));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = this._center.x + 22;
        tl.y = this._center.y + 19;
        com.greensock.TweenMax.to(tl, 3, {
            x: Math.random() * this._w,
            y: Math.random() * this._h,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeIncentiveConfetti = function(px, py) {
    if (this._totalCount > 20)
        return;
    this._center.x = px;
    this._center.y = py;
    var cnt = 0;
    var tl;
    var tx, ty;
    for (cnt = 0; cnt < 12; cnt++) {
        this._totalCount++;
        this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_INCENTIVE_CONFETTI_PARTS[org.apache.royale.utils.Language._int(Math.random() * 3)]));
        tl.originX = 6;
        tl.originY = 10;
        tl.x = this._center.x + Math.random() * 200 - 100;
        tl.y = this._center.y + Math.random() * 200 - 100;
        tl.scaleX = tl.scaleY = 2;
        tl.rotation = Math.random() * 180 - 90;
        if (tl.x < this._center.x)
            tx = Math.random() * -300 - 50;
        else if (tl.x > this._center.x)
            tx = Math.random() * 300 + 50;
        ty = Math.random() * 400 + 300;
        com.greensock.TweenMax.to(tl, .5 + Math.random(), {
            bezier: [{
                x: this._center.x + tx / 2,
                y: this._center.y - Math.random() * 200 - 50,
                scaleX: 2,
                scaleY: -2
            }, {
                x: this._center.x + tx,
                y: this._center.y + ty,
                scaleX: 1,
                scaleY: 1
            }],
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.RESULT_CLEAR_PARTICLE_POSITION;
pigg.puzzle.view.ParticleView.prototype.makeResultClearParticle = function() {
    var cnt = 0;
    var tl;
    for (cnt = 0; cnt < 6; cnt++) {
        this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_KIRA2));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = Number(this.RESULT_CLEAR_PARTICLE_POSITION[cnt][0]);
        tl.y = Number(this.RESULT_CLEAR_PARTICLE_POSITION[cnt][1]);
        tl.scaleX = tl.scaleY = 0;
        com.greensock.TweenMax.to(tl, Math.random() + .5, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.SlowMo.ease.config(.1, 1, true),
            onComplete: org.apache.royale.utils.Language.closure(this.loopClearParticle, this, 'loopClearParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.loopClearParticle = function(tile) {
    var scl = .8 + Math.random();
    com.greensock.TweenMax.to(tile, Math.random() + .5, {
        scaleX: scl,
        scaleY: scl,
        ease: com.greensock.easing.SlowMo.ease.config(.1, 1, true),
        onComplete: org.apache.royale.utils.Language.closure(this.loopClearParticle, this, 'loopClearParticle'),
        onCompleteParams: [tile]
    })
}
;
pigg.puzzle.view.ParticleView.prototype.deleteResultClearParticle = function() {
    var tl;
    while (this._tilemap.numTiles > 0) {
        tl = this._tilemap.getTileAt(0);
        com.greensock.TweenMax.killTweensOf(tl);
        this._tilemap.removeTile(tl)
    }
}
;
pigg.puzzle.view.ParticleView.prototype.makeRouletteStopParticle = function() {
    this._center.x = 320;
    this._center.y = 290;
    var cnt = 0;
    var tl;
    var tx, ty;
    for (cnt = 0; cnt < 12; cnt++) {
        tx = Math.random() * 600 - 300;
        ty = Math.random() * 600 - 300;
        if (tx < 0 && tx > -50)
            tx = -(50 + Math.random() * 100);
        else if (tx > 0 && tx < 50)
            tx = 50 + Math.random() * 100;
        if (ty < 0 && ty > -50)
            ty = -(50 + Math.random() * 100);
        else if (ty > 0 && ty < 50)
            ty = 50 + Math.random() * 100;
        if (tx < 0)
            this._center.x = 260;
        else
            this._center.x = 340;
        if (ty < 0)
            this._center.y = 250;
        else
            this._center.y = 310;
        this._tilemap.addTile(tl = new openfl.display.Tile(this.RECT_KIRA2));
        tl.originX = 22;
        tl.originY = 19;
        tl.x = this._center.x;
        tl.y = this._center.y;
        tl.scaleX = tl.scaleY = 1.5;
        com.greensock.TweenMax.to(tl, .9 + Math.random() * .5, {
            x: this._center.x + tx,
            y: this._center.y + ty,
            scaleX: .3,
            scaleY: .3,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
            onCompleteParams: [tl]
        })
    }
}
;
pigg.puzzle.view.ParticleView.prototype.removeParticle = function(tile) {
    this.traceLog('removeParticle::', tile);
    this._tilemap.removeTile(tile);
    tile = null;
    if (this._totalCount > 0)
        this._totalCount--
}
;
pigg.puzzle.view.ParticleView.prototype.deleteParticle = function(all) {
    all = typeof all !== 'undefined' ? all : false;
    if (all) {
        this.removeFromParent(this._tilemap);
        this._tilemap = null;
        this.removeFromParent(this._thisView);
        this._thisView = null
    }
}
;
pigg.puzzle.view.ParticleView.prototype.get__center = function() {
    return this._center
}
;
pigg.puzzle.view.ParticleView.prototype.set__center = function(v) {
    this._center = v
}
;
Object.defineProperties(pigg.puzzle.view.ParticleView.prototype, {
    center: {
        get: pigg.puzzle.view.ParticleView.prototype.get__center,
        set: pigg.puzzle.view.ParticleView.prototype.set__center
    }
});
pigg.puzzle.view.ParticleView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ParticleView',
        qName: 'pigg.puzzle.view.ParticleView',
        kind: 'class'
    }]
};
pigg.puzzle.view.ParticleView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'center': {
                    type: 'openfl.geom.Point',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                }
            }
        },
        methods: function() {
            return {
                'ParticleView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'setParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'makeTapParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'makeThemeParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'makeBonusScoreParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'makeContinueMoveTimesParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'makeMissionGetParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'makeThemePotionParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'makeMissionMaxParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'makeParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'makeIncentiveConfetti': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'makeResultClearParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'deleteResultClearParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'makeRouletteStopParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView'
                },
                'removeParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.Tile',
                            optional: false
                        }]
                    }
                },
                'deleteParticle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ParticleView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.BoardBackGroundManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.baseSize = pigg.puzzle.view.CommonView.BALL_SIZE;
    this.innerSize = org.apache.royale.utils.Language._int(pigg.puzzle.view.CommonView.BALL_SIZE - 4);
    this.spaceSize = org.apache.royale.utils.Language._int(pigg.puzzle.view.CommonView.BALL_SIZE / 10);
    this.curveSize = org.apache.royale.utils.Language._int(this.spaceSize / 2)
}
;
goog.inherits(pigg.puzzle.manager.BoardBackGroundManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.BoardBackGroundManager', pigg.puzzle.manager.BoardBackGroundManager);
pigg.puzzle.manager.BoardBackGroundManager.prototype._shape;
pigg.puzzle.manager.BoardBackGroundManager.prototype._lineShape;
pigg.puzzle.manager.BoardBackGroundManager.prototype._spr;
pigg.puzzle.manager.BoardBackGroundManager.prototype._bitmap;
pigg.puzzle.manager.BoardBackGroundManager.prototype._maskShape;
pigg.puzzle.manager.BoardBackGroundManager.prototype._bgBlurMaskSpr;
pigg.puzzle.manager.BoardBackGroundManager.prototype._bgBlurMaskShape;
pigg.puzzle.manager.BoardBackGroundManager.prototype._itemCoverShape;
pigg.puzzle.manager.BoardBackGroundManager.prototype.baseSize;
pigg.puzzle.manager.BoardBackGroundManager.prototype.innerSize;
pigg.puzzle.manager.BoardBackGroundManager.prototype.spaceSize;
pigg.puzzle.manager.BoardBackGroundManager.prototype.curveSize;
pigg.puzzle.manager.BoardBackGroundManager.prototype._mapSizeX = 0;
pigg.puzzle.manager.BoardBackGroundManager.prototype._mapSizeY = 0;
pigg.puzzle.manager.BoardBackGroundManager.prototype.lineCommandList;
pigg.puzzle.manager.BoardBackGroundManager.prototype.lineDataList;
pigg.puzzle.manager.BoardBackGroundManager.prototype._map;
pigg.puzzle.manager.BoardBackGroundManager.prototype._valueMap;
pigg.puzzle.manager.BoardBackGroundManager.prototype.commandList;
pigg.puzzle.manager.BoardBackGroundManager.prototype.dataList;
pigg.puzzle.manager.BoardBackGroundManager.prototype.clean = function() {
    this._shape = null;
    this._lineShape = null;
    this._spr = null;
    this._map = null;
    this._valueMap = null;
    this._maskShape = null;
    this._bitmap = null;
    this._bgBlurMaskSpr = null;
    this._bgBlurMaskShape = null;
    this._itemCoverShape = null;
    this.commandList = null;
    this.dataList = null
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.initData = function() {
    if (this._shape)
        this._shape = null;
    if (this._lineShape)
        this._lineShape = null;
    if (this._spr)
        this._spr = null;
    if (this._maskShape)
        this._maskShape = null;
    if (this._itemCoverShape)
        this._itemCoverShape = null;
    if (this._bgBlurMaskShape)
        this._bgBlurMaskShape = null;
    if (this._valueMap)
        this._valueMap = null;
    if (this._bgBlurMaskSpr)
        this._bgBlurMaskSpr = null;
    this.lineCommandList = null;
    this.lineDataList = null
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.makeGrid = function(map) {
    this.initData();
    this._shape = new openfl.display.Shape;
    this._lineShape = new openfl.display.Shape;
    this._spr = new openfl.display.Sprite;
    this._maskShape = new openfl.display.Shape;
    this._itemCoverShape = new openfl.display.Shape;
    this._bgBlurMaskShape = new openfl.display.Shape;
    this._valueMap = org.apache.royale.utils.Language.Vector();
    this._map = map;
    this._bgBlurMaskSpr = new openfl.display.Sprite;
    this._mapSizeX = map.length;
    this._mapSizeY = Number(map[0].length);
    var mInfo;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var voidValue = 0;
    var voidDir;
    var connectValue = 0;
    var cornerDir;
    var cornerValue = 0;
    var outLineDir;
    var outLineCornerDir;
    var isConnect;
    lenX = 11;
    lenY = 9;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[cntX][cntY];
            voidValue = 0;
            voidDir = [0, 0, 0, 0];
            cornerValue = 0;
            cornerDir = [0, 0, 0, 0];
            connectValue = 0;
            isConnect = false;
            outLineDir = [0, 0, 0, 0];
            outLineCornerDir = [0, 0, 0, 0];
            if (mInfo.isVoid) {
                if (cntY > 0)
                    if (!this._map[cntX][cntY - 1].isVoid) {
                        voidValue++;
                        connectValue = 1;
                        voidDir[0] = 1
                    }
                if (cntX < lenX - 1)
                    if (!this._map[cntX + 1][cntY].isVoid) {
                        voidValue++;
                        if (connectValue == 1)
                            isConnect = true;
                        connectValue = 2;
                        voidDir[1] = 1
                    }
                if (cntY < lenY - 1)
                    if (!this._map[cntX][cntY + 1].isVoid) {
                        voidValue++;
                        if (connectValue == 2)
                            isConnect = true;
                        connectValue = 3;
                        voidDir[2] = 1
                    }
                if (cntX > 0)
                    if (!this._map[cntX - 1][cntY].isVoid) {
                        voidValue++;
                        if (connectValue == 1 || connectValue == 3)
                            isConnect = true;
                        voidDir[3] = 1
                    }
                if (voidDir[0] == 0 && voidDir[1] == 0 && cntY > 0 && cntX < lenX - 1)
                    if (!this._map[cntX + 1][cntY - 1].isVoid) {
                        cornerDir[0] = 1;
                        cornerValue++
                    }
                if (voidDir[1] == 0 && voidDir[2] == 0 && cntY < lenY - 1 && cntX < lenX - 1)
                    if (!this._map[cntX + 1][cntY + 1].isVoid) {
                        cornerDir[1] = 1;
                        cornerValue++
                    }
                if (voidDir[2] == 0 && voidDir[3] == 0 && cntY < lenY - 1 && cntX > 0)
                    if (!this._map[cntX - 1][cntY + 1].isVoid) {
                        cornerDir[2] = 1;
                        cornerValue++
                    }
                if (voidDir[3] == 0 && voidDir[0] == 0 && cntY > 0 && cntX > 0)
                    if (!this._map[cntX - 1][cntY - 1].isVoid) {
                        cornerDir[3] = 1;
                        cornerValue++
                    }
                if (voidValue == 0 && cornerValue == 0)
                    voidValue = -1
            } else {
                if (cntX == 0) {
                    outLineDir[3] = 1;
                    if (cntY == 0)
                        outLineCornerDir[3] = 1;
                    else if (cntY == lenY - 1)
                        outLineCornerDir[2] = 1;
                    if (cntY > 0 && map[cntX][cntY - 1].isVoid)
                        outLineCornerDir[3] = 1;
                    if (cntY < lenY - 1 && map[cntX][cntY + 1].isVoid)
                        outLineCornerDir[2] = 1
                } else if (cntX == lenX - 1) {
                    outLineDir[1] = 1;
                    if (cntY == 0)
                        outLineCornerDir[0] = 1;
                    else if (cntY == lenY - 1)
                        outLineCornerDir[1] = 1;
                    if (cntY > 0 && map[cntX][cntY - 1].isVoid)
                        outLineCornerDir[0] = 1;
                    if (cntY < lenY - 1 && map[cntX][cntY + 1].isVoid)
                        outLineCornerDir[1] = 1
                }
                if (cntY == 0) {
                    outLineDir[0] = 1;
                    if (cntX == 0)
                        outLineCornerDir[3] = 1;
                    else if (cntX == lenX - 1)
                        outLineCornerDir[0] = 1;
                    if (cntX > 0 && map[cntX - 1][cntY].isVoid)
                        outLineCornerDir[3] = 1;
                    if (cntX < lenX - 1 && map[cntX + 1][cntY].isVoid)
                        outLineCornerDir[0] = 1
                } else if (cntY == lenY - 1) {
                    outLineDir[2] = 1;
                    if (cntX == 0)
                        outLineCornerDir[2] = 1;
                    else if (cntX == lenX - 1)
                        outLineCornerDir[1] = 1;
                    if (cntX > 0 && map[cntX - 1][cntY].isVoid)
                        outLineCornerDir[2] = 1;
                    if (cntX < lenX - 1 && map[cntX + 1][cntY].isVoid)
                        outLineCornerDir[1] = 1
                }
            }
            this._valueMap.push([mInfo, voidValue, voidDir, cornerDir, cornerValue, outLineDir, outLineCornerDir])
        }
    this.setBackGround()
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.setBackGround = function() {
    var cnt = 0
      , len = 0;
    var mInfo;
    len = this._valueMap.length;
    for (cnt = 0; cnt < len; cnt++) {
        mInfo = this._valueMap[cnt][0];
        this.drawGridBackGround(mInfo.mx, mInfo.my, this._valueMap[cnt][1], this._valueMap[cnt][2], this._valueMap[cnt][3], this._valueMap[cnt][4], this._valueMap[cnt][5], this._valueMap[cnt][6])
    }
    for (cnt = 0; cnt < len; cnt++) {
        mInfo = this._valueMap[cnt][0];
        if (this._valueMap[cnt][1] == 0 && this._valueMap[cnt][4] == 0)
            this.drawLine(mInfo.mx, mInfo.my)
    }
    this._spr.addChild(this._shape);
    this._spr.addChild(this._lineShape);
    this._shape.x += this.spaceSize;
    this._shape.y += this.spaceSize;
    this._lineShape.x += this.spaceSize;
    this._lineShape.y += this.spaceSize;
    this._bgBlurMaskShape.x += this.spaceSize;
    this._bgBlurMaskShape.y += this.spaceSize;
    this._bgBlurMaskSpr.addChild(this._bgBlurMaskShape)
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.drawBitmap = function() {}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.drawMaskRect = function(px, py, isFill) {
    isFill = typeof isFill !== 'undefined' ? isFill : false;
    var baseX = px * this.baseSize;
    var baseY = py * this.baseSize;
    var g;
    var gg;
    var fllAlpha;
    if (isFill) {
        g = this._bgBlurMaskShape.graphics;
        fllAlpha = 1
    } else {
        g = this._maskShape.graphics;
        fllAlpha = .5
    }
    g.beginFill(16776960, fllAlpha);
    g.drawRect(baseX, baseY, this.baseSize, this.baseSize);
    g.endFill()
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.drawLine = function(px, py, isFill) {
    isFill = typeof isFill !== 'undefined' ? isFill : false;
    var baseX = px * this.baseSize;
    var baseY = py * this.baseSize;
    this.lineCommandList = org.apache.royale.utils.Language.Vector();
    this.lineDataList = org.apache.royale.utils.Language.Vector();
    this.lineCommandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
    this.lineDataList.push(0 + baseX);
    this.lineDataList.push(0 + baseY);
    this.lineCommandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
    this.lineDataList.push(this.baseSize + baseX);
    this.lineDataList.push(0 + baseY);
    this.lineCommandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
    this.lineDataList.push(0 + baseX);
    this.lineDataList.push(0 + baseY);
    this.lineCommandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
    this.lineDataList.push(0 + baseX);
    this.lineDataList.push(this.baseSize + baseY);
    if (px == this._mapSizeX - 1 || px < this._mapSizeX - 1 && this._map[px + 1][py].isVoid) {
        this.lineCommandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
        this.lineDataList.push(this.baseSize + baseX);
        this.lineDataList.push(0 + baseY);
        this.lineCommandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.lineDataList.push(this.baseSize + baseX);
        this.lineDataList.push(this.baseSize + baseY)
    }
    if (py == this._mapSizeY - 1 || py < this._mapSizeY - 1 && this._map[px][py + 1].isVoid) {
        this.lineCommandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
        this.lineDataList.push(this.baseSize + baseX);
        this.lineDataList.push(this.baseSize + baseY);
        this.lineCommandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.lineDataList.push(0 + baseX);
        this.lineDataList.push(this.baseSize + baseY)
    }
    var g;
    var fiiAlpha;
    if (isFill) {
        g = this._bgBlurMaskShape.graphics;
        fiiAlpha = 1
    } else {
        g = this._lineShape.graphics;
        fiiAlpha = .6
    }
    g.lineStyle(1.4, 13421772, .2);
    g.drawPath(this.lineCommandList, this.lineDataList, openfl.display.GraphicsPathWinding.EVEN_ODD);
    g.endFill()
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.drawGridBackGround = function(px, py, type, dir, cornerDir, cornerValue, outlineDir, outlineCornerDir) {
    var baseX = px * this.baseSize;
    var baseY = py * this.baseSize;
    var topLeft = 0;
    var topRight = 0;
    var bottomLeft = 0;
    var bottomRight = 0;
    var posX = 0;
    var posY = 0;
    var w = 0;
    var h = 0;
    this.commandList = org.apache.royale.utils.Language.Vector();
    this.dataList = org.apache.royale.utils.Language.Vector();
    var g = this._shape.graphics;
    if (type == -1)
        return;
    if (type != 2 && type != 3 && type != 4 && (cornerValue == 0 && type != 1 || cornerValue > 0 && type == 2)) {
        this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize + baseX);
        this.dataList.push(this.baseSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(this.baseSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(0 + baseY)
    }
    if (type == 0) {
        if (px == 0 || px == this._mapSizeX - 1 || py == 0 || py == this._mapSizeY - 1) {
            if (outlineDir[0] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(0 - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 + baseY)
            } else if (outlineDir[2] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + baseY)
            }
            if (outlineDir[1] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(this.baseSize + this.spaceSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + +this.spaceSize + baseX);
                this.dataList.push(this.baseSize + baseY)
            } else if (outlineDir[3] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(this.baseSize + baseY)
            }
            if (outlineCornerDir[0] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + 0 + this.spaceSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(this.baseSize + 0 + this.spaceSize + baseX);
                this.dataList.push(0 - this.spaceSize + baseY);
                this.dataList.push(this.baseSize + 0 + baseX);
                this.dataList.push(0 - this.spaceSize + baseY)
            }
            if (outlineCornerDir[1] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + this.spaceSize + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(this.baseSize + this.spaceSize + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY)
            }
            if (outlineCornerDir[2] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + this.spaceSize + baseY)
            }
            if (outlineCornerDir[3] == 1) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(0 - this.spaceSize + baseX);
                this.dataList.push(0 - this.spaceSize + baseY);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 - this.spaceSize + baseY)
            }
        }
    } else if (type == 4) {
        this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
        this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
        this.dataList.push(this.spaceSize + 0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
        this.dataList.push(this.baseSize - this.spaceSize + baseX);
        this.dataList.push(this.spaceSize + 0 + baseY);
        this.dataList.push(this.baseSize - this.spaceSize + baseX);
        this.dataList.push(this.spaceSize + this.curveSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize - this.spaceSize + baseX);
        this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
        this.dataList.push(this.baseSize - this.spaceSize + baseX);
        this.dataList.push(this.baseSize - this.spaceSize + baseY);
        this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
        this.dataList.push(this.baseSize - this.spaceSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.spaceSize + this.curveSize + baseX);
        this.dataList.push(this.baseSize - this.spaceSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
        this.dataList.push(this.spaceSize + 0 + baseX);
        this.dataList.push(this.baseSize - this.spaceSize + baseY);
        this.dataList.push(this.spaceSize + 0 + baseX);
        this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.spaceSize + 0 + baseX);
        this.dataList.push(this.spaceSize + this.curveSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
        this.dataList.push(this.spaceSize + 0 + baseX);
        this.dataList.push(this.spaceSize + 0 + baseY);
        this.dataList.push(this.spaceSize + this.curveSize + baseX);
        this.dataList.push(this.spaceSize + 0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(this.baseSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize + baseX);
        this.dataList.push(this.baseSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
        this.dataList.push(0 + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize + baseX);
        this.dataList.push(0 + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
        this.dataList.push(this.spaceSize + baseY);
        this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
        this.dataList.push(this.spaceSize + this.curveSize + baseX);
        this.dataList.push(this.spaceSize + baseY)
    } else if (type == 3)
        if (dir[0] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[1] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[2] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY)
        } else {
            if (dir[3] == 0) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
                this.dataList.push(this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(this.baseSize - this.spaceSize + baseX);
                this.dataList.push(this.spaceSize + baseY);
                this.dataList.push(this.baseSize - this.spaceSize + baseX);
                this.dataList.push(this.spaceSize + this.curveSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize - this.spaceSize + baseX);
                this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
                this.dataList.push(this.baseSize - this.spaceSize + baseX);
                this.dataList.push(this.baseSize - this.spaceSize + baseY);
                this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
                this.dataList.push(this.baseSize - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 + baseY)
            }
        }
    else if (type == 2)
        if (dir[0] == 0 && dir[1] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + 0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY)
        } else if (dir[1] == 0 && dir[2] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + this.curveSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[2] == 0 && dir[3] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.spaceSize + this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[3] == 0 && dir[0] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.baseSize - this.spaceSize - this.curveSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[0] == 0 && dir[2] == 0) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY)
        } else {
            if (dir[1] == 0 && dir[3] == 0) {
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(0 + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.baseSize - this.spaceSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(this.baseSize + baseX);
                this.dataList.push(this.baseSize + baseY);
                this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
                this.dataList.push(0 + baseX);
                this.dataList.push(this.baseSize + baseY)
            }
        }
    else if (type == 1)
        if (dir[0] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.spaceSize + baseY)
        } else if (dir[1] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY)
        } else if (dir[2] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY)
        } else if (dir[3] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY)
        }
    if (cornerValue > 0) {
        if (cornerDir[0] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(0 + this.spaceSize + baseY);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(0 + this.spaceSize + baseY)
        }
        if (cornerDir[1] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(this.baseSize - this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(this.baseSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY)
        }
        if (cornerDir[2] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + this.spaceSize + baseX);
            this.dataList.push(this.baseSize + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(0 + this.spaceSize + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY);
            this.dataList.push(0 + baseX);
            this.dataList.push(this.baseSize - this.spaceSize + baseY)
        }
        if (cornerDir[3] == 1) {
            this.commandList.push(openfl.display.GraphicsPathCommand.MOVE_TO);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.LINE_TO);
            this.dataList.push(0 + this.spaceSize + baseX);
            this.dataList.push(0 + baseY);
            this.commandList.push(openfl.display.GraphicsPathCommand.CURVE_TO);
            this.dataList.push(0 + this.spaceSize + baseX);
            this.dataList.push(0 + this.spaceSize + baseY);
            this.dataList.push(0 + baseX);
            this.dataList.push(0 + this.spaceSize + baseY)
        }
    }
    if (this.commandList.length > 0) {
        g = this._shape.graphics;
        g.lineStyle();
        g.beginFill(5987181, .5);
        g.drawPath(this.commandList, this.dataList, openfl.display.GraphicsPathWinding.EVEN_ODD);
        g.endFill();
        g = this._bgBlurMaskShape.graphics;
        g.lineStyle();
        g.beginFill(65280, 1);
        g.drawPath(this.commandList, this.dataList, openfl.display.GraphicsPathWinding.EVEN_ODD);
        g.endFill();
        g = this._maskShape.graphics;
        g.lineStyle();
        g.beginFill(0, 1);
        g.drawPath(this.commandList, this.dataList, openfl.display.GraphicsPathWinding.EVEN_ODD);
        g.endFill()
    }
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.get__maskShape = function() {
    return this._maskShape
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.get__bgBlurMaskSpr = function() {
    return this._bgBlurMaskSpr
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.get__itemCoverShape = function() {
    return this._itemCoverShape
}
;
pigg.puzzle.manager.BoardBackGroundManager.prototype.get__mainSpr = function() {
    return this._spr
}
;
Object.defineProperties(pigg.puzzle.manager.BoardBackGroundManager.prototype, {
    maskShape: {
        get: pigg.puzzle.manager.BoardBackGroundManager.prototype.get__maskShape
    },
    bgBlurMaskSpr: {
        get: pigg.puzzle.manager.BoardBackGroundManager.prototype.get__bgBlurMaskSpr
    },
    itemCoverShape: {
        get: pigg.puzzle.manager.BoardBackGroundManager.prototype.get__itemCoverShape
    },
    mainSpr: {
        get: pigg.puzzle.manager.BoardBackGroundManager.prototype.get__mainSpr
    }
});
pigg.puzzle.manager.BoardBackGroundManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'BoardBackGroundManager',
        qName: 'pigg.puzzle.manager.BoardBackGroundManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.BoardBackGroundManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'maskShape': {
                    type: 'openfl.display.Shape',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'bgBlurMaskSpr': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'itemCoverShape': {
                    type: 'openfl.display.Shape',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'mainSpr': {
                    type: 'openfl.display.Sprite',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                }
            }
        },
        methods: function() {
            return {
                'BoardBackGroundManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'initData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'makeGrid': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cVector.\x3cpigg.puzzle.data.MapInfo\x3e\x3e',
                            optional: false
                        }]
                    }
                },
                'setBackGround': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'drawBitmap': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager'
                },
                'drawMaskRect': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'drawLine': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'drawGridBackGround': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.BoardBackGroundManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 6,
                            type: 'int',
                            optional: false
                        }, {
                            index: 7,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 8,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Updatable = function() {}
;
goog.exportSymbol('spine.Updatable', spine.Updatable);
spine.Updatable.prototype.update = function() {}
;
spine.Updatable.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Updatable',
        qName: 'spine.Updatable',
        kind: 'interface'
    }]
};
spine.Updatable.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'update': {
                    type: 'void',
                    declaredBy: 'spine.Updatable'
                }
            }
        }
    }
}
;
spine.Constraint = function() {}
;
goog.exportSymbol('spine.Constraint', spine.Constraint);
spine.Constraint.prototype.getOrder = function() {}
;
spine.Constraint.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Constraint',
        qName: 'spine.Constraint',
        kind: 'interface'
    }],
    interfaces: [spine.Updatable]
};
spine.Constraint.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'getOrder': {
                    type: 'Number',
                    declaredBy: 'spine.Constraint'
                }
            }
        }
    }
}
;
spine.IkConstraint = function(data, skeleton) {
    if (data == null)
        throw new openfl.errors.ArgumentError('IkConstraint::data cannot be null.');
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    this._data = data;
    this.mix = data.mix;
    this.bendDirection = data.bendDirection;
    this.bones = org.apache.royale.utils.Language.Vector();
    var foreachiter0_target = data.bones;
    for (var foreachiter0 in foreachiter0_target) {
        var boneData = foreachiter0_target[foreachiter0];
        this.bones[this.bones.length] = skeleton.findBone(boneData.name)
    }
    this.target = skeleton.findBone(data.target._name)
}
;
goog.exportSymbol('spine.IkConstraint', spine.IkConstraint);
spine.IkConstraint.prototype._data;
spine.IkConstraint.prototype.bones;
spine.IkConstraint.prototype.target;
spine.IkConstraint.prototype.mix;
spine.IkConstraint.prototype.bendDirection = 0;
spine.IkConstraint.prototype.apply = function() {
    this.update()
}
;
spine.IkConstraint.prototype.update = function() {
    switch (this.bones.length) {
    case 1:
        spine.IkConstraint.apply1(this.bones[0], this.target.worldX, this.target.worldY, this.mix);
        break;
    case 2:
        spine.IkConstraint.apply2(this.bones[0], this.bones[1], this.target.worldX, this.target.worldY, this.bendDirection, this.mix);
        break
    }
}
;
spine.IkConstraint.prototype.getOrder = function() {
    return this._data.order
}
;
spine.IkConstraint.prototype.toString = function() {
    return this._data._name
}
;
spine.IkConstraint.apply1 = function(bone, targetX, targetY, alpha) {
    if (!bone.appliedValid)
        bone.updateAppliedTransform();
    var p = bone.parent;
    var id = 1 / (p.a * p.d - p.b * p.c);
    var x = targetX - p.worldX
      , y = targetY - p.worldY;
    var tx = (x * p.d - y * p.b) * id - bone.ax
      , ty = (y * p.a - x * p.c) * id - bone.ay;
    var rotationIK = Math.atan2(ty, tx) * spine.MathUtils.radDeg - bone.ashearX - bone.arotation;
    if (bone.ascaleX < 0)
        rotationIK += 180;
    if (rotationIK > 180)
        rotationIK -= 360;
    else if (rotationIK < -180)
        rotationIK += 360;
    bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, bone.ascaleX, bone.ascaleY, bone.ashearX, bone.ashearY)
}
;
spine.IkConstraint.apply2 = function(parent, child, targetX, targetY, bendDir, alpha) {
    if (alpha == 0) {
        child.updateWorldTransform();
        return
    }
    if (!parent.appliedValid)
        parent.updateAppliedTransform();
    if (!child.appliedValid)
        child.updateAppliedTransform();
    var px = parent.ax
      , py = parent.ay
      , psx = parent.ascaleX
      , psy = parent.ascaleY
      , csx = child.ascaleX;
    var os1 = 0
      , os2 = 0
      , s2 = 0;
    if (psx < 0) {
        psx = -psx;
        os1 = 180;
        s2 = -1
    } else {
        os1 = 0;
        s2 = 1
    }
    if (psy < 0) {
        psy = -psy;
        s2 = -s2
    }
    if (csx < 0) {
        csx = -csx;
        os2 = 180
    } else
        os2 = 0;
    var cx = child.ax, cy, cwx, cwy, a = parent.a, b = parent.b, c = parent.c, d = parent.d;
    var u = Math.abs(psx - psy) <= 1E-4;
    if (!u) {
        cy = 0;
        cwx = a * cx + parent.worldX;
        cwy = c * cx + parent.worldY
    } else {
        cy = child.ay;
        cwx = a * cx + b * cy + parent.worldX;
        cwy = c * cx + d * cy + parent.worldY
    }
    var pp = parent.parent;
    a = pp.a;
    b = pp.b;
    c = pp.c;
    d = pp.d;
    var id = 1 / (a * d - b * c)
      , x = targetX - pp.worldX
      , y = targetY - pp.worldY;
    var tx = (x * d - y * b) * id - px
      , ty = (y * a - x * c) * id - py;
    x = cwx - pp.worldX;
    y = cwy - pp.worldY;
    var dx = (x * d - y * b) * id - px
      , dy = (y * a - x * c) * id - py;
    var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;
    outer: if (u) {
        l2 *= psx;
        var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);
        if (cos < -1)
            cos = -1;
        else if (cos > 1)
            cos = 1;
        a2 = Math.acos(cos) * bendDir;
        a = l1 + l2 * cos;
        b = l2 * Math.sin(a2);
        a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b)
    } else {
        a = psx * l2;
        b = psy * l2;
        var aa = a * a
          , bb = b * b
          , dd = tx * tx + ty * ty
          , ta = Math.atan2(ty, tx);
        c = bb * l1 * l1 + aa * dd - aa * bb;
        var c1 = -2 * bb * l1
          , c2 = bb - aa;
        d = c1 * c1 - 4 * c2 * c;
        if (d >= 0) {
            var q = Math.sqrt(d);
            if (c1 < 0)
                q = -q;
            q = -(c1 + q) / 2;
            var r0 = q / c2
              , r1 = c / q;
            var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
            if (r * r <= dd) {
                y = Math.sqrt(dd - r * r) * bendDir;
                a1 = ta - Math.atan2(y, r);
                a2 = Math.atan2(y / psy, (r - l1) / psx);
                break outer
            }
        }
        var minAngle = Math.PI
          , minX = l1 - a
          , minDist = minX * minX
          , minY = 0;
        var maxAngle = 0
          , maxX = l1 + a
          , maxDist = maxX * maxX
          , maxY = 0;
        c = -a * l1 / (aa - bb);
        if (c >= -1 && c <= 1) {
            c = Math.acos(c);
            x = a * Math.cos(c) + l1;
            y = b * Math.sin(c);
            d = x * x + y * y;
            if (d < minDist) {
                minAngle = c;
                minDist = d;
                minX = x;
                minY = y
            }
            if (d > maxDist) {
                maxAngle = c;
                maxDist = d;
                maxX = x;
                maxY = y
            }
        }
        if (dd <= (minDist + maxDist) / 2) {
            a1 = ta - Math.atan2(minY * bendDir, minX);
            a2 = minAngle * bendDir
        } else {
            a1 = ta - Math.atan2(maxY * bendDir, maxX);
            a2 = maxAngle * bendDir
        }
    }
    var os = Math.atan2(cy, cx) * s2;
    var rotation = parent.arotation;
    a1 = (a1 - os) * spine.MathUtils.radDeg + os1 - rotation;
    if (a1 > 180)
        a1 -= 360;
    else if (a1 < -180)
        a1 += 360;
    parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, parent.ascaleX, parent.ascaleY, 0, 0);
    rotation = child.arotation;
    a2 = ((a2 + os) * spine.MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
    if (a2 > 180)
        a2 -= 360;
    else if (a2 < -180)
        a2 += 360;
    child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY)
}
;
spine.IkConstraint.prototype.get__data = function() {
    return this._data
}
;
Object.defineProperties(spine.IkConstraint.prototype, {
    data: {
        get: spine.IkConstraint.prototype.get__data
    }
});
spine.IkConstraint.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'IkConstraint',
        qName: 'spine.IkConstraint',
        kind: 'class'
    }],
    interfaces: [spine.Constraint]
};
spine.IkConstraint.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cspine.Bone\x3e'
                },
                'target': {
                    type: 'spine.Bone'
                },
                'mix': {
                    type: 'Number'
                },
                'bendDirection': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.IkConstraintData',
                    access: 'readonly',
                    declaredBy: 'spine.IkConstraint'
                }
            }
        },
        methods: function() {
            return {
                'IkConstraint': {
                    type: '',
                    declaredBy: 'spine.IkConstraint',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.IkConstraintData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Skeleton',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.IkConstraint'
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.IkConstraint'
                },
                'getOrder': {
                    type: 'Number',
                    declaredBy: 'spine.IkConstraint'
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.IkConstraint'
                },
                '|apply1': {
                    type: 'void',
                    declaredBy: 'spine.IkConstraint',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Bone',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|apply2': {
                    type: 'void',
                    declaredBy: 'spine.IkConstraint',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Bone',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Bone',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'int',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleEventRankingData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleEventRankingData', pigg.data.puzzle.PuzzleEventRankingData);
pigg.data.puzzle.PuzzleEventRankingData.prototype._rankingIncentive;
pigg.data.puzzle.PuzzleEventRankingData.prototype._awardName;
pigg.data.puzzle.PuzzleEventRankingData.prototype._awardSize = 0;
pigg.data.puzzle.PuzzleEventRankingData.prototype._rankRangeStart = 0;
pigg.data.puzzle.PuzzleEventRankingData.prototype._rankRangeEnd = 0;
pigg.data.puzzle.PuzzleEventRankingData.prototype._lowestValue = 0;
pigg.data.puzzle.PuzzleEventRankingData.prototype._hasSpecialIncentive = 0;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankingIncentive = function() {
    return this._rankingIncentive
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankingIncentive = function(v) {
    this._rankingIncentive = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__awardName = function() {
    return this._awardName
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__awardName = function(v) {
    this._awardName = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__awardSize = function() {
    return this._awardSize
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__awardSize = function(v) {
    this._awardSize = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankRangeStart = function() {
    return this._rankRangeStart
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankRangeStart = function(v) {
    this._rankRangeStart = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankRangeEnd = function() {
    return this._rankRangeEnd
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankRangeEnd = function(v) {
    this._rankRangeEnd = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__lowestValue = function() {
    return this._lowestValue
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__lowestValue = function(v) {
    this._lowestValue = v
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.get__hasSpecialIncentive = function() {
    return this._hasSpecialIncentive
}
;
pigg.data.puzzle.PuzzleEventRankingData.prototype.set__hasSpecialIncentive = function(v) {
    this._hasSpecialIncentive = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleEventRankingData.prototype, {
    rankingIncentive: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankingIncentive,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankingIncentive
    },
    awardName: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__awardName,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__awardName
    },
    awardSize: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__awardSize,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__awardSize
    },
    rankRangeStart: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankRangeStart,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankRangeStart
    },
    rankRangeEnd: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__rankRangeEnd,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__rankRangeEnd
    },
    lowestValue: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__lowestValue,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__lowestValue
    },
    hasSpecialIncentive: {
        get: pigg.data.puzzle.PuzzleEventRankingData.prototype.get__hasSpecialIncentive,
        set: pigg.data.puzzle.PuzzleEventRankingData.prototype.set__hasSpecialIncentive
    }
});
pigg.data.puzzle.PuzzleEventRankingData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleEventRankingData',
        qName: 'pigg.data.puzzle.PuzzleEventRankingData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleEventRankingData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'rankingIncentive': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'awardName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'awardSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'rankRangeStart': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'rankRangeEnd': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'lowestValue': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                },
                'hasSpecialIncentive': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleEventRankingData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleEventRankingData'
                }
            }
        }
    }
}
;
spine.TransformConstraintData = function(name) {
    this._bones = org.apache.royale.utils.Language.Vector();
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.TransformConstraintData', spine.TransformConstraintData);
spine.TransformConstraintData.prototype._name;
spine.TransformConstraintData.prototype.order;
spine.TransformConstraintData.prototype._bones;
spine.TransformConstraintData.prototype.target;
spine.TransformConstraintData.prototype.rotateMix;
spine.TransformConstraintData.prototype.translateMix;
spine.TransformConstraintData.prototype.scaleMix;
spine.TransformConstraintData.prototype.shearMix;
spine.TransformConstraintData.prototype.offsetRotation;
spine.TransformConstraintData.prototype.offsetX;
spine.TransformConstraintData.prototype.offsetY;
spine.TransformConstraintData.prototype.offsetScaleX;
spine.TransformConstraintData.prototype.offsetScaleY;
spine.TransformConstraintData.prototype.offsetShearY;
spine.TransformConstraintData.prototype.relative = false;
spine.TransformConstraintData.prototype.local = false;
spine.TransformConstraintData.prototype.toString = function() {
    return this._name
}
;
spine.TransformConstraintData.prototype.get__bones = function() {
    return this._bones
}
;
spine.TransformConstraintData.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.TransformConstraintData.prototype, {
    bones: {
        get: spine.TransformConstraintData.prototype.get__bones
    },
    name: {
        get: spine.TransformConstraintData.prototype.get__name
    }
});
spine.TransformConstraintData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TransformConstraintData',
        qName: 'spine.TransformConstraintData',
        kind: 'class'
    }]
};
spine.TransformConstraintData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'order': {
                    type: 'Number'
                },
                'target': {
                    type: 'spine.BoneData'
                },
                'rotateMix': {
                    type: 'Number'
                },
                'translateMix': {
                    type: 'Number'
                },
                'scaleMix': {
                    type: 'Number'
                },
                'shearMix': {
                    type: 'Number'
                },
                'offsetRotation': {
                    type: 'Number'
                },
                'offsetX': {
                    type: 'Number'
                },
                'offsetY': {
                    type: 'Number'
                },
                'offsetScaleX': {
                    type: 'Number'
                },
                'offsetScaleY': {
                    type: 'Number'
                },
                'offsetShearY': {
                    type: 'Number'
                },
                'relative': {
                    type: 'Boolean'
                },
                'local': {
                    type: 'Boolean'
                }
            }
        },
        accessors: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cspine.BoneData\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.TransformConstraintData'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.TransformConstraintData'
                }
            }
        },
        methods: function() {
            return {
                'TransformConstraintData': {
                    type: '',
                    declaredBy: 'spine.TransformConstraintData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.TransformConstraintData'
                }
            }
        }
    }
}
;
spine.animation.TwoColorTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.TwoColorTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.TwoColorTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.TwoColorTimeline', spine.animation.TwoColorTimeline);
spine.animation.TwoColorTimeline.ENTRIES = 8;
spine.animation.TwoColorTimeline.PREV_TIME = -8;
spine.animation.TwoColorTimeline.PREV_R = -7;
spine.animation.TwoColorTimeline.PREV_G = -6;
spine.animation.TwoColorTimeline.PREV_B = -5;
spine.animation.TwoColorTimeline.PREV_A = -4;
spine.animation.TwoColorTimeline.PREV_R2 = -3;
spine.animation.TwoColorTimeline.PREV_G2 = -2;
spine.animation.TwoColorTimeline.PREV_B2 = -1;
spine.animation.TwoColorTimeline.R = 1;
spine.animation.TwoColorTimeline.G = 2;
spine.animation.TwoColorTimeline.B = 3;
spine.animation.TwoColorTimeline.A = 4;
spine.animation.TwoColorTimeline.R2 = 5;
spine.animation.TwoColorTimeline.G2 = 6;
spine.animation.TwoColorTimeline.B2 = 7;
spine.animation.TwoColorTimeline.prototype.slotIndex = 0;
spine.animation.TwoColorTimeline.prototype.frames;
spine.animation.TwoColorTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.twoColor.ordinal << 24) + this.slotIndex
}
;
spine.animation.TwoColorTimeline.prototype.setFrame = function(frameIndex, time, r, g, b, a, r2, g2, b2) {
    frameIndex *= spine.animation.TwoColorTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.R] = r;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.G] = g;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.B] = b;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.A] = a;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.R2] = r2;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.G2] = g2;
    this.frames[frameIndex + spine.animation.TwoColorTimeline.B2] = b2
}
;
spine.animation.TwoColorTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var slot = skeleton.slots[this.slotIndex];
    var light, dark;
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            slot.color.setFromColor(slot.data.color);
            slot.darkColor.setFromColor(slot.data.darkColor);
            return;
        case spine.animation.MixPose.current:
            light = slot.color;
            dark = slot.darkColor;
            var setupLight = slot.data.color
              , setupDark = slot.data.darkColor;
            light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);
            dark.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0)
        }
        return
    }
    var r, g, b, a, r2, g2, b2;
    if (time >= frames[frames.length - spine.animation.TwoColorTimeline.ENTRIES]) {
        var i = frames.length;
        r = Number(frames[i + spine.animation.TwoColorTimeline.PREV_R]);
        g = Number(frames[i + spine.animation.TwoColorTimeline.PREV_G]);
        b = Number(frames[i + spine.animation.TwoColorTimeline.PREV_B]);
        a = Number(frames[i + spine.animation.TwoColorTimeline.PREV_A]);
        r2 = Number(frames[i + spine.animation.TwoColorTimeline.PREV_R2]);
        g2 = Number(frames[i + spine.animation.TwoColorTimeline.PREV_G2]);
        b2 = Number(frames[i + spine.animation.TwoColorTimeline.PREV_B2])
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.TwoColorTimeline.ENTRIES);
        r = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_R]);
        g = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_G]);
        b = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_B]);
        a = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_A]);
        r2 = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_R2]);
        g2 = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_G2]);
        b2 = Number(frames[frame + spine.animation.TwoColorTimeline.PREV_B2]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.TwoColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.TwoColorTimeline.PREV_TIME] - frameTime));
        r += (frames[frame + spine.animation.TwoColorTimeline.R] - r) * percent;
        g += (frames[frame + spine.animation.TwoColorTimeline.G] - g) * percent;
        b += (frames[frame + spine.animation.TwoColorTimeline.B] - b) * percent;
        a += (frames[frame + spine.animation.TwoColorTimeline.A] - a) * percent;
        r2 += (frames[frame + spine.animation.TwoColorTimeline.R2] - r2) * percent;
        g2 += (frames[frame + spine.animation.TwoColorTimeline.G2] - g2) * percent;
        b2 += (frames[frame + spine.animation.TwoColorTimeline.B2] - b2) * percent
    }
    if (alpha == 1) {
        slot.color.setFrom(r, g, b, a);
        slot.darkColor.setFrom(r2, g2, b2, 1)
    } else {
        light = slot.color;
        dark = slot.darkColor;
        if (pose == spine.animation.MixPose.setup) {
            light.setFromColor(slot.data.color);
            dark.setFromColor(slot.data.darkColor)
        }
        light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);
        dark.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0)
    }
}
;
spine.animation.TwoColorTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TwoColorTimeline',
        qName: 'spine.animation.TwoColorTimeline',
        kind: 'class'
    }]
};
spine.animation.TwoColorTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'slotIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TwoColorTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.TwoColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.TwoColorTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.TwoColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 7,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 8,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 9,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.TwoColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.HowToPlayView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('HowToPlayView')
}
;
goog.inherits(pigg.puzzle.view.HowToPlayView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.HowToPlayView', pigg.puzzle.view.HowToPlayView);
pigg.puzzle.view.HowToPlayView.prototype._main;
pigg.puzzle.view.HowToPlayView.prototype._container;
pigg.puzzle.view.HowToPlayView.prototype._backBlackContainer;
pigg.puzzle.view.HowToPlayView.prototype._black;
pigg.puzzle.view.HowToPlayView.prototype._isShow;
pigg.puzzle.view.HowToPlayView.prototype._panelTilemap;
pigg.puzzle.view.HowToPlayView.prototype._panelTile;
pigg.puzzle.view.HowToPlayView.prototype._pageCnt = 0;
pigg.puzzle.view.HowToPlayView.prototype._playPanel;
pigg.puzzle.view.HowToPlayView.prototype._playTileset;
pigg.puzzle.view.HowToPlayView.prototype._pageTile2;
pigg.puzzle.view.HowToPlayView.prototype._pageTile3;
pigg.puzzle.view.HowToPlayView.prototype._thisView;
pigg.puzzle.view.HowToPlayView.prototype.clean = function() {}
;
pigg.puzzle.view.HowToPlayView.prototype.init = function(main) {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnDownAction(nextBtn)
    };
    var __localFn1__ = function(e) {
        self.nextPage()
    };
    this._main = main;
    this.visible = false;
    this._thisView = this;
    this._container = new openfl.display.Sprite;
    this.addChild(this._container);
    this._black = this.makeBackBlack();
    this._container.addChild(this._black);
    this._playPanel = new openfl.display.Sprite;
    this._container.addChild(this._playPanel);
    this._playPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._playPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    if (this._main.appType == 'mypage')
        this._playPanel.y -= 20;
    var tl;
    var inner = new openfl.display.Sprite;
    inner.x = -(584 / 2);
    inner.y = -(610 / 2);
    this._playPanel.addChild(inner);
    var tilemap = this.makePanelBg(this._main);
    inner.addChild(tilemap);
    var tileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_HOWTOPLAY_PARTS), 'howToPlay', org.apache.royale.utils.Language.closure(this.onLoadHowToPlayPng, this, 'onLoadHowToPlayPng'), [tileset]);
    tilemap = new openfl.display.Tilemap(528,397 + 69,tileset);
    inner.addChild(tilemap);
    tilemap.x = 31;
    tilemap.y = 103 - 69;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,1099,294,39))));
    tl.x = 137;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,0,528,397))));
    tl.y = 69;
    tilemap.addTile(this._pageTile2 = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,397,470,350))));
    this._pageTile2.x = 28;
    this._pageTile2.y = 25 + 69;
    tilemap.addTile(this._pageTile3 = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,748,470,350))));
    this._pageTile3.x = 28;
    this._pageTile3.y = 25 + 69;
    var nextBtn = new openfl.display.Sprite;
    tilemap = new openfl.display.Tilemap(184,64,tileset);
    nextBtn.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(471,398,64,184))));
    tl.rotation = -90;
    tl.y = 64;
    tilemap.x = -(184 / 2);
    tilemap.y = -(64 / 2);
    inner.addChild(nextBtn);
    nextBtn.x = 200 + 184 / 2;
    nextBtn.y = 519 + 64 / 2;
    nextBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    nextBtn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 534;
    closeBtn.y = 7;
    inner.addChild(closeBtn);
    this._container.addChild(this._playPanel)
}
;
pigg.puzzle.view.HowToPlayView.prototype.onLoadHowToPlayPng = function(code, bmd, option) {
    option[0].bitmapData = bmd;
    this._main.hideApiLoading();
    this.show()
}
;
pigg.puzzle.view.HowToPlayView.prototype.show = function() {
    this._thisView.visible = true;
    this._isShow = true;
    this._pageTile2.visible = false;
    this._pageTile3.visible = false;
    this._black.alpha = 1;
    this._playPanel.scaleX = this._playPanel.scaleY = .7;
    com.greensock.TweenMax.to(this._playPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this._pageCnt = 0
}
;
pigg.puzzle.view.HowToPlayView.prototype.nextPage = function() {
    this.traceLog('nextPage::', this._pageCnt);
    if (this._pageCnt < 2) {
        this._pageCnt++;
        if (this._pageCnt == 1) {
            this._pageTile2.visible = true;
            this._pageTile3.visible = false
        } else if (this._pageCnt == 2) {
            this._pageTile2.visible = false;
            this._pageTile3.visible = true
        }
        this._playPanel.scaleX = this._playPanel.scaleY = .9;
        com.greensock.TweenMax.to(this._playPanel, .4, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    } else
        this.hide()
}
;
pigg.puzzle.view.HowToPlayView.prototype.hide = function(e) {
    var self = this;
    e = typeof e !== 'undefined' ? e : null;
    var __localFn0__ = function() {
        self._thisView.visible = false;
        self._isShow = false
    };
    com.greensock.TweenMax.to(this._black, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._playPanel, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.HowToPlayView.prototype.panelMD = function(e) {
    this.traceLog('panelMD', this.mouseX, this.mouseY)
}
;
pigg.puzzle.view.HowToPlayView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.HowToPlayView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
Object.defineProperties(pigg.puzzle.view.HowToPlayView.prototype, {
    isShow: {
        get: pigg.puzzle.view.HowToPlayView.prototype.get__isShow,
        set: pigg.puzzle.view.HowToPlayView.prototype.set__isShow
    }
});
pigg.puzzle.view.HowToPlayView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'HowToPlayView',
        qName: 'pigg.puzzle.view.HowToPlayView',
        kind: 'class'
    }]
};
pigg.puzzle.view.HowToPlayView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView'
                }
            }
        },
        methods: function() {
            return {
                'HowToPlayView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'onLoadHowToPlayPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Array',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: true
                        }]
                    }
                },
                'panelMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.HowToPlayView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas = {};
spine.atlas.TextureLoader = function() {}
;
goog.exportSymbol('spine.atlas.TextureLoader', spine.atlas.TextureLoader);
spine.atlas.TextureLoader.prototype.loadPage = function(page, path) {}
;
spine.atlas.TextureLoader.prototype.loadRegion = function(region) {}
;
spine.atlas.TextureLoader.prototype.unloadPage = function(page) {}
;
spine.atlas.TextureLoader.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TextureLoader',
        qName: 'spine.atlas.TextureLoader',
        kind: 'interface'
    }]
};
spine.atlas.TextureLoader.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'loadPage': {
                    type: 'void',
                    declaredBy: 'spine.atlas.TextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasPage',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'loadRegion': {
                    type: 'void',
                    declaredBy: 'spine.atlas.TextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasRegion',
                            optional: false
                        }]
                    }
                },
                'unloadPage': {
                    type: 'void',
                    declaredBy: 'spine.atlas.TextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasPage',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.LoadDataManager = function() {
    pigg.puzzle.view.CommonView.call(this)
}
;
goog.inherits(pigg.puzzle.manager.LoadDataManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.LoadDataManager', pigg.puzzle.manager.LoadDataManager);
pigg.puzzle.manager.LoadDataManager.prototype.GET_EVENT_DATA = 0;
pigg.puzzle.manager.LoadDataManager.prototype.GET_USER_DATA = 1;
pigg.puzzle.manager.LoadDataManager.prototype._main;
pigg.puzzle.manager.LoadDataManager.prototype._loaders;
pigg.puzzle.manager.LoadDataManager.prototype._loderCount = 0;
pigg.puzzle.manager.LoadDataManager.prototype._isSendingContinue = false;
pigg.puzzle.manager.LoadDataManager.prototype._isSendingGiveUp = false;
pigg.puzzle.manager.LoadDataManager.prototype._isSendEquipScoreItemCategory;
pigg.puzzle.manager.LoadDataManager.prototype._tokenHash = '';
pigg.puzzle.manager.LoadDataManager.prototype._version = '';
pigg.puzzle.manager.LoadDataManager.prototype.clean = function() {}
;
pigg.puzzle.manager.LoadDataManager.prototype.init = function(main) {
    this._main = main;
    this._loaders = new Map
}
;
pigg.puzzle.manager.LoadDataManager.prototype.showAlertReload = function(newVersion) {
    if (this._main.isLocal)
        return;
    var str = 'v' + this._version + ' \u2192 v' + newVersion;
    this.traceLog('showAlertReload::newVersion', str);
    this._main.showAlertReload(str)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.getEventData = function() {
    this._main.isSendGetEventData = true;
    this.traceLog('getEventData', this._main.userCode);
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetEventData, this, 'onGetEventData'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyEventData.json'))
    } else {
        var path;
        if (this._tokenHash != '')
            path = '/api/puzzle/event/get_event?t\x3d' + this._tokenHash;
        else
            path = '/api/puzzle/event/get_event';
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onGetEventData, this, 'onGetEventData'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGetEventData = function(e) {
    this._main.isSendGetEventData = false;
    this.traceLog('onGetEventData');
    var cnt = 0
      , cnt2 = 0
      , cnt3 = 0;
    var eventData = new pigg.data.puzzle.PuzzleEventData;
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version == '')
        this._version = org.apache.royale.utils.Language.string(data['version']);
    else if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('_tokenHash::', this._tokenHash);
    eventData.readData(data);
    this._main.updateServerTime(data['serverTime']);
    this.traceLog('onGetEventData::::JSON::', json);
    this.traceLog('onGetEventData::::DATA::', data);
    if (!this.checkErrorStatus('onGetEventData', data['status']))
        return;
    if (this._main.isLocal)
        eventData = this.setLocalSetting(eventData);
    this.traceLog('eventData.title::', eventData.title);
    this.traceLog('eventData.eventCode::', eventData.eventCode);
    this.traceLog('eventData.startTime::', eventData.startTime);
    this.traceLog('eventData.endTime::', eventData.endTime);
    this.traceLog('eventData.detailURL::', eventData.detailURL);
    this.traceLog('eventData.stepSize::', eventData.stepSize);
    this._main.setEventData(eventData)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.setLocalSetting = function(eventData) {
    var data = eventData;
    var pointArray = [12990, 69010, 105010, 200010, 350010, 900010, 1569100, 3599910, 3899990, 4999990, 5000010, 0];
    data.userData.eventPoint = Number(pointArray[this._main.localType]);
    if (this._main.localType == 9)
        data.userData.hasLimitedTermIncentive = true;
    else if (this._main.localType == 10) {
        data.userData.hasLimitedTermIncentive = true;
        data.userData.hasLimitedQuantityIncentive = true
    } else if (this._main.localType == 11)
        if (this._main.localTutorial > 12)
            data.userData.status = '12,0,' + (this._main.localTutorial - 12) + ',0';
        else
            data.userData.status = String(this._main.localTutorial) + ',0,0,0';
    if (this._main.localLimitedType == 0) {
        data.limitedTermIncentiveExists = true;
        data.limitedQuantityIncentiveExists = true
    } else if (this._main.localLimitedType == 1)
        data.limitedQuantityStock = 0;
    else if (this._main.localLimitedType == 2)
        data.limitedTermEndTime = 0;
    else if (this._main.localLimitedType == 3) {
        data.limitedTermEndTime = 0;
        data.limitedQuantityStock = 0
    }
    data.rankingExists = this._main.localRankingType;
    data.openData.isEventFirstTime = this._main.localAnnounceType;
    this.traceLog('ANNO::', this._main.localAnnounceType);
    return data
}
;
pigg.puzzle.manager.LoadDataManager.prototype.loadPng = function(url, code, completeFunc, option) {
    option = typeof option !== 'undefined' ? option : null;
    this.traceLog('loadPng', url);
    var info = new pigg.puzzle.manager.LoadDataManager.Info(url,code,completeFunc,option);
    var urlRequest = new openfl.net.URLRequest(url);
    var loader = new openfl.display.Loader;
    var context = new openfl.system.LoaderContext;
    loader.name = String(org.apache.royale.utils.Language._int(Math.random() * 16777215));
    loader.name = String(this._loderCount);
    this._loaders[loader.name] = info;
    this._loderCount++;
    loader.contentLoaderInfo.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.handleChannelInfoCallback, this, 'handleChannelInfoCallback'));
    loader.contentLoaderInfo.addEventListener(openfl.events.IOErrorEvent.IO_ERROR, org.apache.royale.utils.Language.closure(this.handleError, this, 'handleError'));
    loader.contentLoaderInfo.addEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR, org.apache.royale.utils.Language.closure(this.handleError, this, 'handleError'));
    loader.load(urlRequest, context)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.handleError = function(e) {
    this.traceLog('\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u306e\u30a8\u30e9\u30fc', e.text)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.handleChannelInfoCallback = function(e) {
    var loaderInfo = org.apache.royale.utils.Language.as(e.target, openfl.display.LoaderInfo);
    var info = this._loaders[loaderInfo.loader.name];
    var bitmapdata = org.apache.royale.utils.Language.as(loaderInfo.content, openfl.display.Bitmap, true).bitmapData;
    if (info == null)
        return;
    delete this._loaders[loaderInfo.loader.name];
    this.callback(info, bitmapdata)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.callback = function(info, result) {
    if (info == null)
        return;
    var handlers = info.handlers;
    var options = info.options;
    var i = 0;
    var handler;
    var option;
    for (i = 0; i < handlers.length; i++) {
        handler = handlers[i];
        option = options[i];
        if (option != null)
            handler(info.code, result, option);
        else
            handler(info.code, result)
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.getBoardData = function(boardCode, boardType) {
    boardCode = typeof boardCode !== 'undefined' ? boardCode : '';
    boardType = typeof boardType !== 'undefined' ? boardType : 'normal';
    if (this._main.isLocal) {
        this._main.showThemePanel();
        return
    }
    this._main.showApiLoading();
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
        if (this._main.userTutorialStatus == 0)
            boardCode = 'puzzle_board_tutorial_1';
        else
            boardCode = 'puzzle_board_tutorial_' + this._main.userTutorialStatus;
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4e2d\u306a\u306e\u3067\u76e4\u9762\u6307\u5b9a\u3067getPuzzle\u3059\u308b::', boardCode)
    } else if (this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1) {
        boardCode = 'puzzle_board_tutorial_2nd_' + this._main.userTutorialStatus2nd;
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2nd\u4e2d\u306a\u306e\u3067\u76e4\u9762\u6307\u5b9a\u3067getPuzzle\u3059\u308b::', boardCode)
    }
    this.traceLog('getBoardData', boardCode, boardType);
    var path = '/api/puzzle/event/draw_theme?t\x3d' + this._tokenHash;
    var content;
    if (boardCode == '')
        content = this.deflate('{"t":"' + this._tokenHash + '"}');
    else
        content = this.deflate('{"boardCode":"' + boardCode + '","boardType":"' + boardType + '","t":"' + this._tokenHash + '"}');
    var data = '{"data":"' + content + '"}';
    this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onGetBoardData, this, 'onGetBoardData'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGetBoardData = function(e) {
    this.traceLog('onGetBoardData');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onGetBoardData', data['status']))
        return;
    this._main.userData.boardBaseData = org.apache.royale.utils.Language.string(data['boardBaseData']);
    this._main.onGetBoardData()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.playPuzzle = function(boardData, moveCount) {
    boardData = typeof boardData !== 'undefined' ? boardData : '';
    moveCount = typeof moveCount !== 'undefined' ? moveCount : 30;
    this.traceLog('getPlayPuzzleData');
    var path = '/api/puzzle/event/play_theme?t\x3d' + this._tokenHash;
    var content = this.deflate('{"boardData":"' + boardData + '","moveCount":' + moveCount + ',"t":"' + this._tokenHash + '"}');
    var data = '{"data":"' + content + '"}';
    this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onPlayPuzzleData, this, 'onPlayPuzzleData'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onPlayPuzzleData = function(e) {
    this.traceLog('onPlayPuzzleData');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onPlayPuzzleData', data['status']))
        return;
    this.updateUserItemData(data['user']);
    this._main.userData.boardUUID = org.apache.royale.utils.Language.string(data['user']['theme']['boardUUID']);
    this._main.onPlayPuzzle()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.sendProgress = function(isThemeClear, additionalThemePoint, boardData, needleGummyCreateCount, rainbowGummyCreateCount, arrowGummyCreateCount, isDecrementMoveCount, additionalRoulettePieceCount, localDummy) {
    localDummy = typeof localDummy !== 'undefined' ? localDummy : 0;
    this._main.showApiLoading('mini');
    this.traceLog('sendProgress::', isThemeClear, additionalThemePoint);
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onProgress, this, 'onProgress'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyStepClearData' + localDummy + '.json'))
    } else {
        var path = '/api/puzzle/event/progress_theme?t\x3d' + this._tokenHash;
        var content = this.deflate('{"themeClear":' + isThemeClear + ',"additionalThemePoint":' + additionalThemePoint + ',"boardData":"' + boardData + '","needleGummyCreateCount":' + needleGummyCreateCount + ',"rainbowGummyCreateCount":' + rainbowGummyCreateCount + ',"arrowGummyCreateCount":' + arrowGummyCreateCount + ',"decrementMoveCount":' + isDecrementMoveCount + ',"additionalRoulettePieceCount":' + additionalRoulettePieceCount + ',"t":"' + this._tokenHash + '"}');
        var data = '{"data":"' + content + '"}';
        this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onProgress, this, 'onProgress'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onProgress = function(e) {
    this._main.hideApiLoading('mini');
    this.traceLog('onProgres');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    var progressData = new pigg.data.puzzle.PuzzleProgressData;
    this.traceLog('onProgres::JSON::', json);
    progressData.readData(data);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('progressData::', progressData.status))
        return;
    this._main.onProgress(progressData)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.useCheatItem = function(category) {
    this.traceLog('useCheatItem');
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onUseCheatItem, this, 'onUseCheatItem'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyUseCheatItemData.json'))
    } else {
        var path = '/api/puzzle/event/use_cheat_item?t\x3d' + this._tokenHash;
        var content = this.deflate('{"cheatItemCategory":"' + category + '","t":"' + this._tokenHash + '"}');
        var data = '{"data":"' + content + '"}';
        this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onUseCheatItem, this, 'onUseCheatItem'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onUseCheatItem = function(e) {
    this.traceLog('onUseCheatItem');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('onUseCheatItem::JSON::', json);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onUseCheatItem::', data['status']))
        return;
    this.updateUserItemData(data['user']);
    this._main.onUseCheatItem()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.equipScoreItem = function(category) {
    this.traceLog('equipScoreItem::', category);
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onEquipScoreItem, this, 'onEquipScoreItem'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyEquipScoreItemData.json'));
        this._isSendEquipScoreItemCategory = category
    } else {
        var path = '/api/puzzle/event/equip_score_item?t\x3d' + this._tokenHash;
        var content = this.deflate('{"scoreItemCategory":"' + category + '","t":"' + this._tokenHash + '"}');
        var data = '{"data":"' + content + '"}';
        this._isSendEquipScoreItemCategory = category;
        this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onEquipScoreItem, this, 'onEquipScoreItem'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onEquipScoreItem = function(e) {
    this.traceLog('onEquipScoreItem');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    if (data['status'] == 'INSUFFICIENT_ITEM') {
        this._main.onFailedEquipPuzzleScoreItem();
        return
    } else if (!this.checkErrorStatus('onEquipScoreItem::', data['status']))
        return;
    this._main.userData.equippedScoreItemCategory = this._isSendEquipScoreItemCategory;
    this._main.onEquipPuzzleScoreItem()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.getContinueInfo = function() {
    this.traceLog('getContinueInfo::');
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetContinueInfo, this, 'onGetContinueInfo'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyGetContinueInfoData.json'))
    } else {
        var path = '/api/puzzle/event/get_continue_info?t\x3d' + this._tokenHash;
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onGetContinueInfo, this, 'onGetContinueInfo'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGetContinueInfo = function(e) {
    this.traceLog('onGetContinueInfo');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('onGetContinueInfo::JSON::', json);
    var continueInfoData = new pigg.data.puzzle.PuzzleContinueInfoData;
    continueInfoData.readData(data);
    this.traceLog('onGetContinueInfo::', data['status']);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onGetContinueInfo', data['status']))
        return;
    this._main.onGetContinueInfo(continueInfoData)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.continuePuzzle = function() {
    this.traceLog('continuePuzzle::', this._isSendingContinue);
    if (this._isSendingContinue)
        return;
    this._main.showApiLoading();
    this._isSendingContinue = true;
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onContinuePuzzle, this, 'onContinuePuzzle'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyContinueData.json'))
    } else {
        var path = '/api/puzzle/event/continue_theme?t\x3d' + this._tokenHash;
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onContinuePuzzle, this, 'onContinuePuzzle'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onContinuePuzzle = function(e) {
    this._main.hideApiLoading();
    this.traceLog('onContinuePuzzle');
    this._isSendingContinue = false;
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    var continueData = new pigg.data.puzzle.PuzzleContinueData;
    this.traceLog('onContinuePuzzle::JSON::', json);
    continueData.readData(data);
    if (!this.checkErrorStatus('onGetContinueInfo', data['status'], true))
        return;
    this.traceLog('onContinuePuzzle::', data['status']);
    this._main.updateServerTime(data['serverTime']);
    this._main.onContinue(continueData)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.giveupPuzzle = function() {
    this.traceLog('giveupPuzzle::', this._isSendingGiveUp);
    if (this._isSendingGiveUp)
        return;
    this._isSendingGiveUp = true;
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGiveupPuzzle, this, 'onGiveupPuzzle'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyGiveUpData.json'))
    } else {
        var path = '/api/puzzle/event/give_up_puzzle?t\x3d' + this._tokenHash;
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onGiveupPuzzle, this, 'onGiveupPuzzle'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGiveupPuzzle = function(e) {
    this.traceLog('onGiveupPuzzle');
    this._isSendingGiveUp = false;
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('onGiveupPuzzle::JSON::', json);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onGiveupPuzzle', data['status']))
        return;
    this._main.onGiveUp()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.setUserStatus = function(status) {
    this.traceLog('setUserStatus', status);
    if (this._main.isLocal && this._main.localTutorial != -1) {
        this._main.setStatus(true);
        return
    }
    var path = '/api/puzzle/set_status';
    var content = this.deflate('{"status":"' + status + '","t":"' + this._tokenHash + '"}');
    var data = '{"data":"' + content + '"}';
    this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onSetUserStatus, this, 'onSetUserStatus'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onSetUserStatus = function(e) {
    this.traceLog('onSetUserStatus');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this.traceLog('onSetUserStatus::JSON:::', data);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onSetUserStatus', data['status']))
        return;
    this._main.onSetUserStatus(data['status'])
}
;
pigg.puzzle.manager.LoadDataManager.prototype.useScoreItem = function(scoreItemCategory) {
    this.traceLog('useScoreItem::', scoreItemCategory);
    this._main.showApiLoading();
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onUseScoreItem, this, 'onUseScoreItem'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyUseScoreItemData.json'))
    } else {
        var path = '/api/puzzle/event/use_score_item?t\x3d' + this._tokenHash;
        var content = this.deflate('{"scoreItemCategory":"' + scoreItemCategory + '","t":"' + this._tokenHash + '"}');
        var data = '{"data":"' + content + '"}';
        this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onUseScoreItem, this, 'onUseScoreItem'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onUseScoreItem = function(e) {
    this.traceLog('onUseScoreItem');
    this._main.hideApiLoading();
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onUseScoreItem', data['status']))
        return;
    this.updateUserItemData(data['user']);
    this._main.onUseScoreItem(data['status'])
}
;
pigg.puzzle.manager.LoadDataManager.prototype.clearPpoint = function(actId) {
    this.traceLog('clearPpoint::', actId);
    var path = '/api/puzzle/do_act_ppoint';
    var content = this.deflate('{"actId":"' + actId + '","t":"' + this._tokenHash + '"}');
    var data = '{"data":"' + content + '"}';
    this.requestApi(path, data, org.apache.royale.utils.Language.closure(this.onClearPpoint, this, 'onClearPpoint'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onClearPpoint = function(e) {
    this.traceLog('onClearPpoint');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this.traceLog('onClearPpoint::', data['status']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime'])
}
;
pigg.puzzle.manager.LoadDataManager.prototype.stopRoulette = function() {
    this.traceLog('stopRoulette::');
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onStopRoulette, this, 'onStopRoulette'));
        urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyStopRouletteData.json'))
    } else {
        var path = '/api/puzzle/event/stop_roulette?t\x3d' + this._tokenHash;
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onStopRoulette, this, 'onStopRoulette'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onStopRoulette = function(e) {
    this.traceLog('onStopRoulette');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('onStopRoulette::JSON::', json);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onStopRoulette', data['status']))
        return;
    var itemData = new pigg.data.puzzle.PuzzleIncentiveItemData;
    itemData.itemIndex = Number(data['rouletteIncentive']['rouletteIncentiveItemIndex']);
    itemData.itemCode = org.apache.royale.utils.Language.string(data['rouletteIncentive']['rouletteIncentiveItemCode']);
    itemData.itemType = org.apache.royale.utils.Language.string(data['rouletteIncentive']['rouletteIncentiveItemType']);
    itemData.itemName = org.apache.royale.utils.Language.string(data['rouletteIncentive']['rouletteIncentiveItemName']);
    itemData.itemQuantity = Number(data['rouletteIncentive']['rouletteIncentiveItemQuantity']);
    this.traceLog('onStopRoulette::INFO::', itemData.itemCode, itemData.itemName, itemData.itemType, itemData.itemQuantity);
    this._main.onStopRoulette(itemData)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.getRankingData = function(type) {
    this.traceLog('getRankingData::', type, this._main.isLocal);
    if (this._main.isLocal) {
        var urlLoader = new openfl.net.URLLoader;
        urlLoader.dataFormat = openfl.net.URLLoaderDataFormat.TEXT;
        urlLoader.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.onGetRankingData, this, 'onGetRankingData'));
        var addVer = '';
        if (this._main.isEventComplete)
            addVer = '2';
        if (type == 'score')
            urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyScoreRankingData' + addVer + '.json'));
        else if (type == 'winning_streak')
            urlLoader.load(new openfl.net.URLRequest('/assets/puzzle/local/dummyWinningRankingData' + addVer + '.json'))
    } else {
        var path = '/api/puzzle/event/get_ranking?rankingTypeCode\x3d' + type + '\x26t\x3d' + this._tokenHash;
        this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onGetRankingData, this, 'onGetRankingData'))
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGetRankingData = function(e) {
    this.traceLog('onGetRankingData');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    this.traceLog('onGetRankingData::status::', data['status']);
    this._tokenHash = org.apache.royale.utils.Language.string(data['tokenHash']);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this._main.updateServerTime(data['serverTime']);
    this.traceLog('RANKING::GET::SON::', json);
    if (!this.checkErrorStatus('onGetRankingData', data['status']))
        return;
    this._main.eventData.setRankingEventData(data['ranking']);
    var rankingData = new pigg.data.puzzle.PuzzleRankingData;
    rankingData.readData(data);
    this._main.onGetTopRankingData(rankingData);
    if (this._userRankData == null)
        this._userRankData = new pigg.data.puzzle.PuzzleUserRankingData;
    this._userRankData.readData(data['ranking']);
    this._main.onGetUserRankingData(this._userRankData, data['ranking']['rankingTypeCode'])
}
;
pigg.puzzle.manager.LoadDataManager.prototype._userRankData;
pigg.puzzle.manager.LoadDataManager.prototype.getConfStatus = function(code) {
    var path = '/api/puzzle/get_event_conf';
    var content = this.deflate('{"code":"' + code + '","t":"' + this._tokenHash + '"}');
    var data = '{"data":"' + content + '"}';
    this.requestApi(path, null, org.apache.royale.utils.Language.closure(this.onGetConfStatus, this, 'onGetConfStatus'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.onGetConfStatus = function(e) {
    this.traceLog('onGetConfStatus');
    var json = String(org.apache.royale.utils.Language.as(e.currentTarget, openfl.net.URLLoader, true).data);
    var data = comm.adobe.serialization.json.JSON.decode(json);
    if (this._version != data['version'])
        this.showAlertReload(data['version']);
    this.traceLog('onGetConfStatus::json::', json);
    this._main.updateServerTime(data['serverTime']);
    if (!this.checkErrorStatus('onGetRankingData', data['status']))
        return
}
;
pigg.puzzle.manager.LoadDataManager.prototype.loadSound = function(code) {
    code = typeof code !== 'undefined' ? code : '';
    var thumbUrl = pigg.puzzle.data.CommonData.URL_SOUND_PATH + this.getVersionUrl(code);
    var url = new openfl.net.URLRequest(thumbUrl);
    var sound_obj = new openfl.media.Sound;
    sound_obj.load(url);
    sound_obj.addEventListener(openfl.events.Event.COMPLETE, org.apache.royale.utils.Language.closure(this.SoundCompleteFunc, this, 'SoundCompleteFunc'));
    sound_obj.addEventListener(openfl.events.IOErrorEvent.IO_ERROR, org.apache.royale.utils.Language.closure(this.SoundIOErrorFunc, this, 'SoundIOErrorFunc'))
}
;
pigg.puzzle.manager.LoadDataManager.prototype.SoundCompleteFunc = function(e) {
    var url = org.apache.royale.utils.Language.string(e.target.url);
    var start = url.indexOf('sound_');
    var end = url.indexOf('?');
    var code = url.slice(start, end);
    this._main.soundMap[code] = e.target;
    if (this._main.isSoundLoadBySwitch && this._main.waitBgm != '' && this._main.waitBgm == code) {
        this.traceLog('WAIT\u3067\u518d\u751f::SoundCompleteFunc::target::code::', code);
        this._main.playBGM(this._main.waitBgm, 1E4);
        this._main.waitBgm = '';
        this._main.isSoundLoadBySwitch = false
    }
}
;
pigg.puzzle.manager.LoadDataManager.prototype.SoundIOErrorFunc = function(e) {
    this.traceLog('SoundIOErrorFunc::\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u306e\u30a8\u30e9\u30fc');
    this.traceLog('SoundIOErrorFunc::', e.currentTarget.url)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.updateUserItemData = function(data) {
    this.traceLog('updateUserItemData');
    var cnt = 0
      , len = 0;
    var scoreItemInfo = data['scoreItems'];
    var cheatItemInfo = data['cheatItems'];
    var userItem;
    var userItemInfo;
    if (scoreItemInfo) {
        this._main.userData.scoreItemData = org.apache.royale.utils.Language.Vector(scoreItemInfo.length, 'PuzzleUserItemData');
        len = scoreItemInfo.length;
        for (cnt = 0; cnt < len; cnt++) {
            userItemInfo = scoreItemInfo[cnt];
            userItem = new pigg.data.puzzle.PuzzleUserItemData;
            userItem.itemCode = org.apache.royale.utils.Language.string(userItemInfo['scoreItemCode']);
            userItem.itemCategory = org.apache.royale.utils.Language.string(userItemInfo['scoreItemCategory']);
            userItem.itemName = org.apache.royale.utils.Language.string(userItemInfo['scoreItemName']);
            userItem.itemDiscription = org.apache.royale.utils.Language.string(userItemInfo['scoreItemDiscription']);
            userItem.itemExpireTime = Number(userItemInfo['scoreItemExpireTime']);
            userItem.itemQuantity = Number(userItemInfo['scoreItemQuantity']);
            userItem.itemMagnification = Number(userItemInfo['scoreItemMagnification']);
            this.traceLog('updateUserItemData::scoreItem.itemName::', userItem.itemName);
            this.traceLog('updateUserItemData::scoreItem.itemName::', userItem.itemQuantity);
            this._main.userData.scoreItemData[cnt] = userItem
        }
    } else
        this._main.userData.scoreItemData = org.apache.royale.utils.Language.Vector();
    if (cheatItemInfo) {
        this._main.userData.cheatItemData = org.apache.royale.utils.Language.Vector(cheatItemInfo.length, 'PuzzleUserItemData');
        len = cheatItemInfo.length;
        for (cnt = 0; cnt < len; cnt++) {
            userItemInfo = cheatItemInfo[cnt];
            userItem = new pigg.data.puzzle.PuzzleUserItemData;
            userItem.itemCode = org.apache.royale.utils.Language.string(userItemInfo['cheatItemCode']);
            userItem.itemCategory = org.apache.royale.utils.Language.string(userItemInfo['cheatItemCategory']);
            userItem.itemName = org.apache.royale.utils.Language.string(userItemInfo['cheatItemName']);
            userItem.itemDiscription = org.apache.royale.utils.Language.string(userItemInfo['cheatItemDiscription']);
            userItem.itemQuantity = Number(userItemInfo['cheatItemQuantity']);
            userItem.itemMagnification = Number(userItemInfo['cheatItemMagnification']);
            this._main.userData.cheatItemData[cnt] = userItem;
            this.traceLog('updateUserItemData::cheatItem.itemName::', userItem.itemName);
            this.traceLog('updateUserItemData::cheatItem.itemName::', userItem.itemQuantity)
        }
    } else
        this._main.userData.cheatItemData = org.apache.royale.utils.Language.Vector();
    this._main.refreshUserItem()
}
;
pigg.puzzle.manager.LoadDataManager.prototype.checkErrorStatus = function(commnad, status, onlyReload) {
    onlyReload = typeof onlyReload !== 'undefined' ? onlyReload : false;
    this.traceLog('checkErrorStatus::', commnad, status);
    if (status == 'SUCCESS')
        return true;
    if (status == 'CONCURRENT_CONNECTION' || status == 'INVALID_TOKEN') {
        this.traceLog('PC\u3068\u306e\u540c\u6642\u63a5\u7d9a::\u30ea\u30ed\u30fc\u30c9');
        this.reloadPage();
        return false
    } else if (status == 'SP_PUZZLE_MAINTENANCE') {
        this.traceLog('\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u4e2d::\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u51e6\u7406\u3059\u308b');
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_MAINTENANCE), '_self');
        return false
    }
    if (onlyReload)
        return true;
    if (status == 'OUT_OF_TERM') {
        this.showOutOfTerm();
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u671f\u9593\u5916')
    } else if (status == 'ERROR') {
        this.reloadPage();
        this.traceLog('\u30a8\u30e9\u30fc')
    } else if (status == 'FINISH_EVENT') {
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86');
        this.showOutOfTerm()
    } else if (status == 'NOT_DURING_ROULETTE')
        this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u4e2d\u3067\u306f\u306a\u3044');
    else if (status == 'FINISH_ROULETTE')
        this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u7d42\u4e86');
    else if (status == 'INSUFFICIENT_ITEM')
        this.traceLog('\u30a2\u30a4\u30c6\u30e0\u4e0d\u8db3');
    else {
        this.reloadPage();
        this.traceLog('\u4e0d\u660e\u306a\u30a8\u30e9\u30fc')
    }
    return false
}
;
pigg.puzzle.manager.LoadDataManager.prototype.deflate = function(data) {
    var ba = new openfl.utils.ByteArray;
    ba.writeUTFBytes(data);
    ba.deflate();
    return comm.hurlant.util.Base64.encodeByteArray(ba)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.requestApi = function(path, data, cb) {
    var self = this;
    var __localFn0__ = function(e) {
        var __localFn0__ = function() {
            org.apache.royale.utils.Language.trace('resend::', resendCount);
            var loader = new openfl.net.URLLoader;
            loader.addEventListener(openfl.events.Event.COMPLETE, cb);
            loader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR, onError);
            loader.addEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR, onError);
            loader.load(request)
        };
        if (e.text != null && e.text != '0') {
            self.reloadPage();
            return
        }
        resendCount++;
        if (resendCount > 3) {
            org.apache.royale.utils.Language.trace('reloadPage::', resendCount);
            self.reloadPage();
            return
        }
        com.greensock.TweenMax.to(this, resendCount, {
            onComplete: __localFn0__
        })
    };
    var request = new openfl.net.URLRequest(this.addLocation(this._main) + path);
    request.requestHeaders.push(new openfl.net.URLRequestHeader('Content-Type','application/json'));
    if (data)
        request.data = data;
    request.contentType = 'application/json';
    request.method = openfl.net.URLRequestMethod.POST;
    request.manageCookies = true;
    var resendCount = 0;
    var onError = __localFn0__;
    var loader = new openfl.net.URLLoader;
    loader.addEventListener(openfl.events.Event.COMPLETE, cb);
    loader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR, onError);
    loader.addEventListener(openfl.events.SecurityErrorEvent.SECURITY_ERROR, onError);
    loader.load(request)
}
;
pigg.puzzle.manager.LoadDataManager.prototype.reloadPage = function() {
    if (this._main.isLocal || window.location.href.indexOf('http://localhost') == 0)
        return;
    if (this._main.appType == 'mypage')
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_MYPAGE), '_self');
    else if (this._main.appType == 'game')
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_GAME), '_self')
}
;
pigg.puzzle.manager.LoadDataManager.prototype.showOutOfTerm = function() {
    if (this._main.isLocal || window.location.href.indexOf('http://localhost') == 0)
        return;
    if (this._main.appType == 'mypage')
        this._main.showOutOfTerm();
    else
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_MYPAGE), '_self')
}
;
pigg.puzzle.manager.LoadDataManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'LoadDataManager',
        qName: 'pigg.puzzle.manager.LoadDataManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.LoadDataManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'LoadDataManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                'getEventData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'onGetEventData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'loadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Function',
                            optional: false
                        }, {
                            index: 4,
                            type: '*',
                            optional: true
                        }]
                    }
                },
                'getBoardData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'onGetBoardData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'playPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onPlayPuzzleData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'sendProgress': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: false
                        }, {
                            index: 5,
                            type: 'int',
                            optional: false
                        }, {
                            index: 6,
                            type: 'int',
                            optional: false
                        }, {
                            index: 7,
                            type: 'Boolean',
                            optional: false
                        }, {
                            index: 8,
                            type: 'int',
                            optional: false
                        }, {
                            index: 9,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onProgress': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'useCheatItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onUseCheatItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'equipScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onEquipScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'getContinueInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'onGetContinueInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'continuePuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'onContinuePuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'giveupPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'onGiveupPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'setUserStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onSetUserStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'useScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onUseScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'clearPpoint': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onClearPpoint': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'stopRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                },
                'onStopRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'getRankingData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onGetRankingData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'getConfStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onGetConfStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'loadSound': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'SoundCompleteFunc': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.Event',
                            optional: false
                        }]
                    }
                },
                'SoundIOErrorFunc': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.IOErrorEvent',
                            optional: false
                        }]
                    }
                },
                'reloadPage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager'
                }
            }
        }
    }
}
;
pigg.puzzle.manager.LoadDataManager.Info = function(url, code, handler, option) {
    this._url = url;
    this._code = code;
    this._handlers = [handler];
    this._options = [option]
}
;
goog.exportSymbol('pigg.puzzle.manager.LoadDataManager.Info', pigg.puzzle.manager.LoadDataManager.Info);
pigg.puzzle.manager.LoadDataManager.Info.prototype._url;
pigg.puzzle.manager.LoadDataManager.Info.prototype._code;
pigg.puzzle.manager.LoadDataManager.Info.prototype._handlers;
pigg.puzzle.manager.LoadDataManager.Info.prototype._options;
pigg.puzzle.manager.LoadDataManager.Info.prototype.get__url = function() {
    return this._url
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.set__url = function(value) {
    this._url = value
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.get__code = function() {
    return this._code
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.set__code = function(value) {
    this._code = value
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.get__handlers = function() {
    return this._handlers
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.set__handlers = function(value) {
    this._handlers = value
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.get__options = function() {
    return this._options
}
;
pigg.puzzle.manager.LoadDataManager.Info.prototype.set__options = function(value) {
    this._options = value
}
;
Object.defineProperties(pigg.puzzle.manager.LoadDataManager.Info.prototype, {
    url: {
        get: pigg.puzzle.manager.LoadDataManager.Info.prototype.get__url,
        set: pigg.puzzle.manager.LoadDataManager.Info.prototype.set__url
    },
    code: {
        get: pigg.puzzle.manager.LoadDataManager.Info.prototype.get__code,
        set: pigg.puzzle.manager.LoadDataManager.Info.prototype.set__code
    },
    handlers: {
        get: pigg.puzzle.manager.LoadDataManager.Info.prototype.get__handlers,
        set: pigg.puzzle.manager.LoadDataManager.Info.prototype.set__handlers
    },
    options: {
        get: pigg.puzzle.manager.LoadDataManager.Info.prototype.get__options,
        set: pigg.puzzle.manager.LoadDataManager.Info.prototype.set__options
    }
});
pigg.puzzle.manager.LoadDataManager.Info.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Info',
        qName: 'pigg.puzzle.manager.LoadDataManager.Info',
        kind: 'class'
    }]
};
pigg.puzzle.manager.LoadDataManager.Info.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'url': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager.Info'
                },
                'code': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager.Info'
                },
                'handlers': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager.Info'
                },
                'options': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager.Info'
                }
            }
        },
        methods: function() {
            return {
                'Info': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.LoadDataManager.Info',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Function',
                            optional: false
                        }, {
                            index: 4,
                            type: '*',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.MakeScoreManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._cutSizeArray = [24, 14, 21, 21, 25, 21, 22, 21, 22, 22, 9];
    this._cutPosArray = [0, 24, 38, 59, 80, 105, 126, 148, 169, 191, 213, 222];
    this._cutBackSizeArray = [30, 20, 26, 26, 30, 27, 27, 25, 27, 26, 15];
    this._cutBackPosArray = [0, 30, 50, 76, 102, 132, 159, 186, 211, 238, 264, 289];
    this._fontColor = [16751020, 5945586, 9558879, 16431433, 7393248, 10722298, 15817252, 16751020, 11776947, 16494651];
    this.RECT_POINT_MARSHMALLOW = []
}
;
goog.inherits(pigg.puzzle.manager.MakeScoreManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.MakeScoreManager', pigg.puzzle.manager.MakeScoreManager);
pigg.puzzle.manager.MakeScoreManager.prototype._main;
pigg.puzzle.manager.MakeScoreManager.prototype._gameView;
pigg.puzzle.manager.MakeScoreManager.prototype._addScoreContainer;
pigg.puzzle.manager.MakeScoreManager.prototype._pointRectarray;
pigg.puzzle.manager.MakeScoreManager.prototype._pointBackRectarray;
pigg.puzzle.manager.MakeScoreManager.prototype._cutSizeArray;
pigg.puzzle.manager.MakeScoreManager.prototype._cutPosArray;
pigg.puzzle.manager.MakeScoreManager.prototype._cutBackSizeArray;
pigg.puzzle.manager.MakeScoreManager.prototype._cutBackPosArray;
pigg.puzzle.manager.MakeScoreManager.prototype._pointTilemap;
pigg.puzzle.manager.MakeScoreManager.prototype._pointTileset;
pigg.puzzle.manager.MakeScoreManager.prototype._throughTilemap;
pigg.puzzle.manager.MakeScoreManager.prototype._fontColor;
pigg.puzzle.manager.MakeScoreManager.prototype.ADJUST_POS_Y = 1491;
pigg.puzzle.manager.MakeScoreManager.prototype.RECT_POINT_MARSHMALLOW;
pigg.puzzle.manager.MakeScoreManager.prototype.clean = function() {}
;
pigg.puzzle.manager.MakeScoreManager.prototype.init = function(main, gameView, addScoreContainer, throughTilemap) {
    this._main = main;
    this._gameView = gameView;
    this._addScoreContainer = addScoreContainer;
    this._throughTilemap = throughTilemap;
    var cnt = 0, len = 0, cnt2 = 0, len2 = 0, arr, pos = 0;
    this._pointTileset = this._main.gamePartsTileset.clone();
    this._pointRectarray = [];
    this._pointBackRectarray = [];
    len = 10;
    for (cnt = 0; cnt < len; cnt++) {
        this._pointRectarray.push(this._pointTileset.addRect(new openfl.geom.Rectangle(this._cutPosArray[cnt],0 + this.ADJUST_POS_Y,this._cutSizeArray[cnt],34)));
        this._pointBackRectarray.push(this._pointTileset.addRect(new openfl.geom.Rectangle(this._cutBackPosArray[cnt],34 + this.ADJUST_POS_Y,this._cutBackSizeArray[cnt],40)))
    }
    this.RECT_POINT_MARSHMALLOW = [15, 16, 17];
    this._pointTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT,this._pointTileset);
    this._pointTilemap.x = this._pointTilemap.y = -pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS - 2;
    this._addScoreContainer.addChild(this._pointTilemap)
}
;
pigg.puzzle.manager.MakeScoreManager.prototype.makeScore = function(score, px, py, type, delay, addTime) {
    type = typeof type !== 'undefined' ? type : 0;
    delay = typeof delay !== 'undefined' ? delay : .1;
    addTime = typeof addTime !== 'undefined' ? addTime : 0;
    this.traceLog('makeScore::', score);
    var str = String(score);
    var cnt = 0
      , len = 0;
    len = str.length;
    var tl;
    var index = 0;
    var isMarshmallow = false;
    var ct = new openfl.geom.ColorTransform;
    var pos = px;
    if (type == 10 || type == 11)
        type = 6;
    else if (type == 20)
        type = 6;
    else if (type == 13)
        type = 8;
    else if (type == 14)
        type = 9;
    else if (type == 15)
        type = 7;
    else if (type == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_S) {
        tl = new TileBase(this.RECT_POINT_MARSHMALLOW[0]);
        tl.scaleX = tl.scaleY = this._gameView.gameMaterialScale;
        isMarshmallow = true
    } else if (type == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_M) {
        tl = new TileBase(this.RECT_POINT_MARSHMALLOW[1]);
        tl.scaleX = tl.scaleY = this._gameView.gameMaterialScale;
        isMarshmallow = true
    } else if (type == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_L) {
        tl = new TileBase(this.RECT_POINT_MARSHMALLOW[2]);
        tl.scaleX = tl.scaleY = this._gameView.gameMaterialScale;
        isMarshmallow = true
    }
    if (isMarshmallow) {
        tl.y = py;
        tl.x = pos;
        this.twn(tl, delay, addTime, isMarshmallow);
        return
    }
    ct.color = Number(this._fontColor[type]);
    var tiles = [];
    for (cnt = 0; cnt < len; cnt++) {
        index = org.apache.royale.utils.Language._int(str.charAt(cnt));
        tl = new TileBase(this._pointBackRectarray[index]);
        tl.y = py - 3;
        tl.x = pos - 3;
        pos += Number(this._cutSizeArray[index]);
        this.twn(tl, delay, addTime);
        tiles.push(tl)
    }
    pos = px;
    for (cnt = 0; cnt < len; cnt++) {
        index = org.apache.royale.utils.Language._int(str.charAt(cnt));
        tl = new TileBase(this._pointRectarray[index]);
        tl.colorTransform = ct;
        tl.y = py;
        tl.x = pos;
        pos += Number(this._cutSizeArray[index]);
        this.twn(tl, delay, addTime);
        tiles.push(tl)
    }
    len = tiles.length;
    for (cnt = 0; cnt < len; cnt++) {
        tl = tiles[cnt];
        tl.originX += (pos - px) / 2 - pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS
    }
}
;
pigg.puzzle.manager.MakeScoreManager.prototype.twn = function(mc, delay, addTime, isMarshmallow) {
    var self = this;
    delay = typeof delay !== 'undefined' ? delay : 0;
    addTime = typeof addTime !== 'undefined' ? addTime : 0;
    isMarshmallow = typeof isMarshmallow !== 'undefined' ? isMarshmallow : false;
    var __localFn0__ = function() {
        if (!isMarshmallow)
            self._pointTilemap.addTile(mc);
        else
            self._throughTilemap.addTile(mc);
        com.greensock.TweenMax.to(mc, .3 + addTime, {
            y: mc.y - 15,
            ease: com.greensock.easing.Expo.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(self._gameView.removeAddScoreTxt, self._gameView, 'removeAddScoreTxt'),
            onCompleteParams: [mc, .1]
        })
    };
    this._gameView.addScoreVec.push(mc);
    com.greensock.TweenMax.to(mc, delay, {
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.manager.MakeScoreManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MakeScoreManager',
        qName: 'pigg.puzzle.manager.MakeScoreManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.MakeScoreManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MakeScoreManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.MakeScoreManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MakeScoreManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MakeScoreManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.view.GameView',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }, {
                            index: 4,
                            type: 'openfl.display.Tilemap',
                            optional: false
                        }]
                    }
                },
                'makeScore': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.MakeScoreManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: true
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.PathConstraintPositionTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.PathConstraintPositionTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.PathConstraintPositionTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.PathConstraintPositionTimeline', spine.animation.PathConstraintPositionTimeline);
spine.animation.PathConstraintPositionTimeline.ENTRIES = 2;
spine.animation.PathConstraintPositionTimeline.PREV_TIME = -2;
spine.animation.PathConstraintPositionTimeline.PREV_VALUE = -1;
spine.animation.PathConstraintPositionTimeline.VALUE = 1;
spine.animation.PathConstraintPositionTimeline.prototype.pathConstraintIndex = 0;
spine.animation.PathConstraintPositionTimeline.prototype.frames;
spine.animation.PathConstraintPositionTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.pathConstraintPosition.ordinal << 24) + this.pathConstraintIndex
}
;
spine.animation.PathConstraintPositionTimeline.prototype.setFrame = function(frameIndex, time, value) {
    frameIndex *= spine.animation.PathConstraintPositionTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[frameIndex + spine.animation.PathConstraintPositionTimeline.VALUE] = value
}
;
spine.animation.PathConstraintPositionTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
    if (time < this.frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            constraint.position = constraint.data.position;
            return;
        case spine.animation.MixPose.current:
            constraint.position += (constraint.data.position - constraint.position) * alpha
        }
        return
    }
    var position;
    if (time >= this.frames[this.frames.length - spine.animation.PathConstraintPositionTimeline.ENTRIES])
        position = Number(this.frames[this.frames.length + spine.animation.PathConstraintPositionTimeline.PREV_VALUE]);
    else {
        var frame = spine.animation.Animation.binarySearch(this.frames, time, spine.animation.PathConstraintPositionTimeline.ENTRIES);
        position = Number(this.frames[frame + spine.animation.PathConstraintPositionTimeline.PREV_VALUE]);
        var frameTime = Number(this.frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.PathConstraintPositionTimeline.ENTRIES - 1, 1 - (time - frameTime) / (this.frames[frame + spine.animation.PathConstraintPositionTimeline.PREV_TIME] - frameTime));
        position += (this.frames[frame + spine.animation.PathConstraintPositionTimeline.VALUE] - position) * percent
    }
    if (pose == spine.animation.MixPose.setup)
        constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;
    else
        constraint.position += (position - constraint.position) * alpha
}
;
spine.animation.PathConstraintPositionTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathConstraintPositionTimeline',
        qName: 'spine.animation.PathConstraintPositionTimeline',
        kind: 'class'
    }]
};
spine.animation.PathConstraintPositionTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'pathConstraintIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'PathConstraintPositionTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.PathConstraintPositionTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.PathConstraintPositionTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.PathConstraintPositionTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.PathConstraintPositionTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
comm.adobe.serialization.json.JSONTokenizer = function(s, strict) {
    this.jsonString = s;
    this.strict = strict;
    this.loc = 0;
    this.nextChar()
}
;
goog.exportSymbol('comm.adobe.serialization.json.JSONTokenizer', comm.adobe.serialization.json.JSONTokenizer);
comm.adobe.serialization.json.JSONTokenizer.prototype.strict;
comm.adobe.serialization.json.JSONTokenizer.prototype.obj;
comm.adobe.serialization.json.JSONTokenizer.prototype.jsonString;
comm.adobe.serialization.json.JSONTokenizer.prototype.loc = 0;
comm.adobe.serialization.json.JSONTokenizer.prototype.ch;
comm.adobe.serialization.json.JSONTokenizer.prototype.controlCharsRegExp = /[\x00-\x1F]/;
comm.adobe.serialization.json.JSONTokenizer.prototype.getNextToken = function() {
    var token = null;
    this.skipIgnored();
    switch (this.ch) {
    case '{':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.LEFT_BRACE, this.ch);
        this.nextChar();
        break;
    case '}':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE, this.ch);
        this.nextChar();
        break;
    case '[':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.LEFT_BRACKET, this.ch);
        this.nextChar();
        break;
    case ']':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET, this.ch);
        this.nextChar();
        break;
    case ',':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.COMMA, this.ch);
        this.nextChar();
        break;
    case ':':
        token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.COLON, this.ch);
        this.nextChar();
        break;
    case 't':
        var possibleTrue = 't' + this.nextChar() + this.nextChar() + this.nextChar();
        if (possibleTrue == 'true') {
            token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.TRUE, true);
            this.nextChar()
        } else
            this.parseError("Expecting 'true' but found " + possibleTrue);
        break;
    case 'f':
        var possibleFalse = 'f' + this.nextChar() + this.nextChar() + this.nextChar() + this.nextChar();
        if (possibleFalse == 'false') {
            token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.FALSE, false);
            this.nextChar()
        } else
            this.parseError("Expecting 'false' but found " + possibleFalse);
        break;
    case 'n':
        var possibleNull = 'n' + this.nextChar() + this.nextChar() + this.nextChar();
        if (possibleNull == 'null') {
            token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.NULL, null);
            this.nextChar()
        } else
            this.parseError("Expecting 'null' but found " + possibleNull);
        break;
    case 'N':
        var possibleNaN = 'N' + this.nextChar() + this.nextChar();
        if (possibleNaN == 'NaN') {
            token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.NAN, NaN);
            this.nextChar()
        } else
            this.parseError("Expecting 'NaN' but found " + possibleNaN);
        break;
    case '"':
        token = this.readString();
        break;
    default:
        if (this.isDigit(this.ch) || this.ch == '-')
            token = this.readNumber();
        else if (this.ch == '')
            token = null;
        else
            this.parseError('Unexpected ' + this.ch + ' encountered')
    }
    return token
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.readString = function() {
    var quoteIndex = this.loc;
    do {
        quoteIndex = this.jsonString.indexOf('"', quoteIndex);
        if (quoteIndex >= 0) {
            var backspaceCount = 0;
            var backspaceIndex = quoteIndex - 1;
            while (this.jsonString.charAt(backspaceIndex) == '\\') {
                backspaceCount++;
                backspaceIndex--
            }
            if ((backspaceCount & 1) == 0)
                break;
            quoteIndex++
        } else
            this.parseError('Unterminated string literal')
    } while (true);
    var token = comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.STRING, this.unescapeString(this.jsonString.substr(this.loc, quoteIndex - this.loc)));
    this.loc = quoteIndex + 1;
    this.nextChar();
    return token
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.unescapeString = function(input) {
    if (this.strict && this.controlCharsRegExp.test(input))
        this.parseError('String contains unescaped control character (0x00-0x1F)');
    var result = '';
    var backslashIndex = 0;
    var nextSubstringStartPosition = 0;
    var len = input.length;
    do {
        backslashIndex = input.indexOf('\\', nextSubstringStartPosition);
        if (backslashIndex >= 0) {
            result += input.substr(nextSubstringStartPosition, backslashIndex - nextSubstringStartPosition);
            nextSubstringStartPosition = backslashIndex + 2;
            var escapedChar = input.charAt(backslashIndex + 1);
            switch (escapedChar) {
            case '"':
                result += escapedChar;
                break;
            case '\\':
                result += escapedChar;
                break;
            case 'n':
                result += '\n';
                break;
            case 'r':
                result += '\r';
                break;
            case 't':
                result += '\t';
                break;
            case 'u':
                var hexValue = '';
                var unicodeEndPosition = nextSubstringStartPosition + 4;
                if (unicodeEndPosition > len)
                    this.parseError('Unexpected end of input.  Expecting 4 hex digits after \\u.');
                for (var i = nextSubstringStartPosition; i < unicodeEndPosition; i++) {
                    var possibleHexChar = input.charAt(i);
                    if (!this.isHexDigit(possibleHexChar))
                        this.parseError('Excepted a hex digit, but found: ' + possibleHexChar);
                    hexValue += possibleHexChar
                }
                result += String.fromCharCode(parseInt(hexValue, 16));
                nextSubstringStartPosition = unicodeEndPosition;
                break;
            case 'f':
                result += '\f';
                break;
            case '/':
                result += '/';
                break;
            case 'b':
                result += '\b';
                break;
            default:
                result += '\\' + escapedChar
            }
        } else {
            result += input.substr(nextSubstringStartPosition);
            break
        }
    } while (nextSubstringStartPosition < len);
    return result
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.readNumber = function() {
    var input = '';
    if (this.ch == '-') {
        input += '-';
        this.nextChar()
    }
    if (!this.isDigit(this.ch))
        this.parseError('Expecting a digit');
    if (this.ch == '0') {
        input += this.ch;
        this.nextChar();
        if (this.isDigit(this.ch))
            this.parseError('A digit cannot immediately follow 0');
        else if (!this.strict && this.ch == 'x') {
            input += this.ch;
            this.nextChar();
            if (this.isHexDigit(this.ch)) {
                input += this.ch;
                this.nextChar()
            } else
                this.parseError('Number in hex format require at least one hex digit after "0x"');
            while (this.isHexDigit(this.ch)) {
                input += this.ch;
                this.nextChar()
            }
        }
    } else
        while (this.isDigit(this.ch)) {
            input += this.ch;
            this.nextChar()
        }
    if (this.ch == '.') {
        input += '.';
        this.nextChar();
        if (!this.isDigit(this.ch))
            this.parseError('Expecting a digit');
        while (this.isDigit(this.ch)) {
            input += this.ch;
            this.nextChar()
        }
    }
    if (this.ch == 'e' || this.ch == 'E') {
        input += 'e';
        this.nextChar();
        if (this.ch == '+' || this.ch == '-') {
            input += this.ch;
            this.nextChar()
        }
        if (!this.isDigit(this.ch))
            this.parseError('Scientific notation number needs exponent value');
        while (this.isDigit(this.ch)) {
            input += this.ch;
            this.nextChar()
        }
    }
    var num = Number(input);
    if (isFinite(num) && !isNaN(num))
        return comm.adobe.serialization.json.JSONToken.create(comm.adobe.serialization.json.JSONTokenType.NUMBER, num);
    else
        this.parseError('Number ' + num + ' is not valid!');
    return null
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.nextChar = function() {
    return this.ch = this.jsonString.charAt(this.loc++)
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.skipIgnored = function() {
    var originalLoc = 0;
    do {
        originalLoc = this.loc;
        this.skipWhite();
        this.skipComments()
    } while (originalLoc != this.loc)
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.skipComments = function() {
    if (this.ch == '/') {
        this.nextChar();
        switch (this.ch) {
        case '/':
            do
                this.nextChar();
            while (this.ch != '\n' && this.ch != '');
            this.nextChar();
            break;
        case '*':
            this.nextChar();
            while (true) {
                if (this.ch == '*') {
                    this.nextChar();
                    if (this.ch == '/') {
                        this.nextChar();
                        break
                    }
                } else
                    this.nextChar();
                if (this.ch == '')
                    this.parseError('Multi-line comment not closed')
            }
            break;
        default:
            this.parseError('Unexpected ' + this.ch + " encountered (expecting '/' or '*' )")
        }
    }
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.skipWhite = function() {
    while (this.isWhiteSpace(this.ch))
        this.nextChar()
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.isWhiteSpace = function(ch) {
    if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r')
        return true;
    else if (!this.strict && ch.charCodeAt(0) == 160)
        return true;
    return false
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.isDigit = function(ch) {
    return ch >= '0' && ch <= '9'
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.isHexDigit = function(ch) {
    return this.isDigit(ch) || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f'
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.parseError = function(message) {
    throw new comm.adobe.serialization.json.JSONParseError(message,this.loc,this.jsonString);
}
;
comm.adobe.serialization.json.JSONTokenizer.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSONTokenizer',
        qName: 'comm.adobe.serialization.json.JSONTokenizer',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSONTokenizer.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'JSONTokenizer': {
                    type: '',
                    declaredBy: 'comm.adobe.serialization.json.JSONTokenizer',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'getNextToken': {
                    type: 'comm.adobe.serialization.json.JSONToken',
                    declaredBy: 'comm.adobe.serialization.json.JSONTokenizer'
                },
                'unescapeString': {
                    type: 'String',
                    declaredBy: 'comm.adobe.serialization.json.JSONTokenizer',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'parseError': {
                    type: 'void',
                    declaredBy: 'comm.adobe.serialization.json.JSONTokenizer',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Poolable = function() {}
;
goog.exportSymbol('spine.Poolable', spine.Poolable);
spine.Poolable.prototype.reset = function() {}
;
spine.Poolable.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Poolable',
        qName: 'spine.Poolable',
        kind: 'interface'
    }]
};
spine.Poolable.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'reset': {
                    type: 'void',
                    declaredBy: 'spine.Poolable'
                }
            }
        }
    }
}
;
spine.attachments.BoundingBoxAttachment = function(name) {
    spine.attachments.VertexAttachment.call(this, name)
}
;
goog.inherits(spine.attachments.BoundingBoxAttachment, spine.attachments.VertexAttachment);
goog.exportSymbol('spine.attachments.BoundingBoxAttachment', spine.attachments.BoundingBoxAttachment);
spine.attachments.BoundingBoxAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'BoundingBoxAttachment',
        qName: 'spine.attachments.BoundingBoxAttachment',
        kind: 'class'
    }]
};
spine.attachments.BoundingBoxAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'BoundingBoxAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.BoundingBoxAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.IkConstraintData = function(name) {
    this.bones = org.apache.royale.utils.Language.Vector();
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.IkConstraintData', spine.IkConstraintData);
spine.IkConstraintData.prototype._name;
spine.IkConstraintData.prototype.order;
spine.IkConstraintData.prototype.bones;
spine.IkConstraintData.prototype.target;
spine.IkConstraintData.prototype.bendDirection = 1;
spine.IkConstraintData.prototype.mix = 1;
spine.IkConstraintData.prototype.toString = function() {
    return this._name
}
;
spine.IkConstraintData.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.IkConstraintData.prototype, {
    name: {
        get: spine.IkConstraintData.prototype.get__name
    }
});
spine.IkConstraintData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'IkConstraintData',
        qName: 'spine.IkConstraintData',
        kind: 'class'
    }]
};
spine.IkConstraintData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'order': {
                    type: 'Number'
                },
                'bones': {
                    type: 'Vector.\x3cspine.BoneData\x3e'
                },
                'target': {
                    type: 'spine.BoneData'
                },
                'bendDirection': {
                    type: 'int'
                },
                'mix': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.IkConstraintData'
                }
            }
        },
        methods: function() {
            return {
                'IkConstraintData': {
                    type: '',
                    declaredBy: 'spine.IkConstraintData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.IkConstraintData'
                }
            }
        }
    }
}
;
pigg.puzzle.view.InfoView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._themePotionlTiles = [];
    this.RECT_THEME_HEADER_TITLE = [];
    this.RECT_THEME_TYPE = [];
    this.RECT_THEME_POTION = [];
    this.THEME_POTION_RECT = [];
    this.THEME_POTION_GRAY_RECT = [];
    this.THEME_POTION_TILE = [];
    this.THEME_POTION_SELECT_TILE = [];
    this.THEME_POTION_GRAY_TILE = [];
    this.THEME_POTION_PLUS_TILE = [];
    this.THEME_POTION_ROCK_TILE = [];
    this._themePotionTxtStr = ['selectPotion3', 'selectPotion5', 'selectPotion10', 'selectPotion20'];
    this.adjstTileX = [72, 173, 72, 108, 108, 72, 142, 72, 72];
    this.RECT_RANKING_AWARD_PANEL = [];
    this.RECT_RANKING_RESULT_AWARD_PANEL = [];
    this.RECT_RANKING_RESULT_AWARD_ANIMAL = [];
    this.RECT_STEP_INCENTIVE_COUNT = [];
    this.CUT_STEP_INCENTIVE_COUNT_WIDTH = [28, 42, 42, 45, 40, 42, 41, 44];
    this.traceLog('InfoView')
}
;
goog.inherits(pigg.puzzle.view.InfoView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.InfoView', pigg.puzzle.view.InfoView);
pigg.puzzle.view.InfoView.prototype._main;
pigg.puzzle.view.InfoView.prototype._backBlack;
pigg.puzzle.view.InfoView.prototype._themeContainer;
pigg.puzzle.view.InfoView.prototype._themePanel;
pigg.puzzle.view.InfoView.prototype._isShow;
pigg.puzzle.view.InfoView.prototype._isShowTheme;
pigg.puzzle.view.InfoView.prototype._incentiveContainer;
pigg.puzzle.view.InfoView.prototype._incentivePanel;
pigg.puzzle.view.InfoView.prototype._stepIncentiveContainer;
pigg.puzzle.view.InfoView.prototype._limitedIncentiveContainer;
pigg.puzzle.view.InfoView.prototype._incentiveIcon;
pigg.puzzle.view.InfoView.prototype._incentiveNameTxt;
pigg.puzzle.view.InfoView.prototype._incentiveNextBtn;
pigg.puzzle.view.InfoView.prototype._themeAnimalContaier;
pigg.puzzle.view.InfoView.prototype._toCompIncentive = false;
pigg.puzzle.view.InfoView.prototype._toSpecialIncentive = false;
pigg.puzzle.view.InfoView.prototype._isTweenPause;
pigg.puzzle.view.InfoView.prototype._incentiveItemVec;
pigg.puzzle.view.InfoView.prototype._limitedTermIncentiveItemData;
pigg.puzzle.view.InfoView.prototype._limitedQuantityIncentiveItemData;
pigg.puzzle.view.InfoView.prototype._currentIncentiveVecIndex = 0;
pigg.puzzle.view.InfoView.prototype._existNextItem = false;
pigg.puzzle.view.InfoView.prototype._specialIncentiveType = -1;
pigg.puzzle.view.InfoView.prototype._progressData;
pigg.puzzle.view.InfoView.prototype._isProvidedLimitedQuantityIncentive;
pigg.puzzle.view.InfoView.prototype._isProvidedLimitedTermIncentive;
pigg.puzzle.view.InfoView.prototype._numberFontManager;
pigg.puzzle.view.InfoView.prototype._themeWinningCountContainer;
pigg.puzzle.view.InfoView.prototype._missionPanel;
pigg.puzzle.view.InfoView.prototype._isSendEquipScoreItem;
pigg.puzzle.view.InfoView.prototype._isSendPlayPuzzle;
pigg.puzzle.view.InfoView.prototype.clean = function() {}
;
pigg.puzzle.view.InfoView.prototype.init = function(main) {
    this._main = main;
    this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
    this._numberFontManager.init(this._main);
    this.visible = false;
    var lightness = .3;
    this._grayCT = new openfl.geom.ColorTransform;
    this._grayCT.redMultiplier = .95 - lightness;
    this._grayCT.greenMultiplier = .95 - lightness;
    this._grayCT.blueMultiplier = .95 - lightness;
    this._grayCT.redOffset = 255 * lightness;
    this._grayCT.greenOffset = 255 * lightness;
    this._grayCT.blueOffset = 255 * lightness;
    if (this._main.appType == 'game')
        this.initThemePanel()
}
;
pigg.puzzle.view.InfoView.prototype.tttst = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.show = function() {
    this.visible = true;
    this._isShow = true
}
;
pigg.puzzle.view.InfoView.prototype.hide = function() {
    this.visible = false;
    this._isShow = false
}
;
pigg.puzzle.view.InfoView.prototype.setTutorialItemBalloon = function() {}
;
pigg.puzzle.view.InfoView.prototype.showTutorialMapItemBalloon = function(show) {
    show = typeof show !== 'undefined' ? show : true
}
;
pigg.puzzle.view.InfoView.prototype.showStepTutorial = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.hideStepTutorial = function() {}
;
pigg.puzzle.view.InfoView.prototype.endTutorialMapMotion = function() {}
;
pigg.puzzle.view.InfoView.prototype.switchStepTutorialBtn = function(enable) {
    enable = typeof enable !== 'undefined' ? enable : true
}
;
pigg.puzzle.view.InfoView.prototype.stepTutorialMD = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.stepTutorialMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.stepTutorialMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.showGameTutorial = function(pageNum, balloonNum, showBlack) {}
;
pigg.puzzle.view.InfoView.prototype.showThemeTutorial = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.showEternalModeDescription = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.showSpecialChallengeDescription = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.showShortEternalModeDescription = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.showRankingResultDescription = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0
}
;
pigg.puzzle.view.InfoView.prototype.hideGameTutorial = function() {}
;
pigg.puzzle.view.InfoView.prototype.showPanelAnimal = function() {
    if (this._themeAnimalContaier == null) {
        this.traceLog('showPanelAnimal::');
        this._themeAnimalContaier = new openfl.display.Sprite;
        this.addChild(this._themeAnimalContaier)
    }
    this._main.addSpine(this._main.spineAnimal, this._themeAnimalContaier);
    this._main.spineAnimal.playAction('joy');
    if (this._main.currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
        this._themeAnimalContaier.scaleX = this._themeAnimalContaier.scaleY = .9;
        this._themeAnimalContaier.x = 70;
        this._themeAnimalContaier.y = 650
    } else {
        this._themeAnimalContaier.scaleX = this._themeAnimalContaier.scaleY = .6;
        if (this._main.currentEventStep <= 5)
            this._themeAnimalContaier.x = 70;
        else
            this._themeAnimalContaier.x = 60;
        if (this._main.currentEventStep == 7 || this._main.currentEventStep == 2 || this._main.currentEventStep == 6)
            this._themeAnimalContaier.y = 665;
        else
            this._themeAnimalContaier.y = 650
    }
    this._themeAnimalContaier.visible = true
}
;
pigg.puzzle.view.InfoView.prototype.hidePanelAnimal = function(type) {
    type = typeof type !== 'undefined' ? type : 1;
    this.traceLog('hidePanelAnimal');
    this._main.removeSpine(this._main.spineAnimal, this._themeAnimalContaier)
}
;
pigg.puzzle.view.InfoView.prototype.playPanelAnimal = function(type) {}
;
pigg.puzzle.view.InfoView.prototype.removePanelAnimal = function() {}
;
pigg.puzzle.view.InfoView.prototype._themeHeaderTilemap;
pigg.puzzle.view.InfoView.prototype._themeTypeContainer;
pigg.puzzle.view.InfoView.prototype._themeTypeTilemap;
pigg.puzzle.view.InfoView.prototype._themeTypeTile;
pigg.puzzle.view.InfoView.prototype._themeBaseTileset;
pigg.puzzle.view.InfoView.prototype._themeHeaderAnimalNameTile;
pigg.puzzle.view.InfoView.prototype._themeHeaderAnimalFromTile;
pigg.puzzle.view.InfoView.prototype._themeAnimalTile;
pigg.puzzle.view.InfoView.prototype._themePotionlTiles;
pigg.puzzle.view.InfoView.prototype._themeGoldSilverContainer;
pigg.puzzle.view.InfoView.prototype._themeGoldSilverTilemap;
pigg.puzzle.view.InfoView.prototype._themeGoldTile;
pigg.puzzle.view.InfoView.prototype._themeSilverTile;
pigg.puzzle.view.InfoView.prototype.RECT_THEME_HEADER_TITLE;
pigg.puzzle.view.InfoView.prototype.RECT_THEME_TYPE;
pigg.puzzle.view.InfoView.prototype.RECT_THEME_POTION;
pigg.puzzle.view.InfoView.prototype.RECT_THEME_KARANO = 0;
pigg.puzzle.view.InfoView.prototype._themeHeaderContainer;
pigg.puzzle.view.InfoView.prototype._themePlayBtnContainer;
pigg.puzzle.view.InfoView.prototype._themePlayBtnSaleTile;
pigg.puzzle.view.InfoView.prototype._themeBtnContainer;
pigg.puzzle.view.InfoView.prototype.initThemePanel = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnAction('down', 0)
    };
    var __localFn1__ = function(e) {
        self.btnAction('out', 0)
    };
    var __localFn2__ = function(e) {
        self.btnAction('click', 0)
    };
    var __localFn3__ = function(e) {
        self.btnAction('down', 1 + (e.currentTarget.x - 103) / 95)
    };
    var __localFn4__ = function(e) {
        self.btnAction('out', 1 + (e.currentTarget.x - 103) / 95)
    };
    var __localFn5__ = function(e) {
        self.btnAction('click', 1 + (e.currentTarget.x - 103) / 95)
    };
    var cnt = 0
      , len = 0;
    this._themeContainer = new openfl.display.Sprite;
    this._themePanel = new openfl.display.Sprite;
    this._themeContainer.addChild(this._themePanel);
    var bgTilemap = this.makePanelBg(this._main);
    this._themePanel.addChild(bgTilemap);
    this._themeHeaderContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themeHeaderContainer);
    this._themeTypeContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themeTypeContainer);
    this._themeGoldSilverContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themeGoldSilverContainer);
    this._themePlayBtnContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themePlayBtnContainer);
    this._themeBaseTileset = this._main.gamePanelTileset.clone();
    this.RECT_THEME_KARANO = this._themeBaseTileset.addRect(new openfl.geom.Rectangle(611,80,250,39));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(534,0,72,37)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(610,0,173,39)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(787,0,73,38)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(864,0,108,39)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(534,40,108,39)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(646,40,75,38)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(727,40,142,38)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(874,40,73,38)));
    this.RECT_THEME_HEADER_TITLE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(534,80,73,38)));
    len = 6;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_THEME_TYPE.push(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(0,0 + cnt * 166,532,165)));
    this._themeHeaderTilemap = new openfl.display.Tilemap(600,500,this._themeBaseTileset);
    this._themeHeaderTilemap.y = 38;
    this._themeHeaderContainer.addChild(this._themeHeaderTilemap);
    this._themePanel.x = -pigg.puzzle.view.CommonView.STAGE_WIDTH;
    this._themePanel.y = -pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    var tl;
    this._themeHeaderAnimalNameTile = new TileBase(-1);
    this._themeHeaderAnimalNameTile.x = 0;
    this._themeHeaderAnimalNameTile.y = 1;
    this._themeHeaderTilemap.addTile(this._themeHeaderAnimalNameTile);
    this._themeHeaderAnimalFromTile = new TileBase(this.RECT_THEME_KARANO);
    this._themeHeaderAnimalFromTile.x = 100;
    this._themeHeaderAnimalFromTile.y = 0;
    this._themeHeaderTilemap.addTile(this._themeHeaderAnimalFromTile);
    this._themeTypeTilemap = new openfl.display.Tilemap(532,266,this._themeBaseTileset);
    this._themeTypeTilemap.x = 26;
    this._themeTypeTilemap.y = 93;
    this._themeTypeTilemap.addTile(this._themeTypeTile = new TileBase);
    this._themeTypeContainer.addChild(this._themeTypeTilemap);
    this._themeGoldSilverTilemap = new openfl.display.Tilemap(104,104,this._themeBaseTileset);
    this._themeGoldSilverTilemap.x = this._themeGoldSilverTilemap.y = -52;
    this._themeGoldSilverTilemap.addTile(new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(935,198,104,104))));
    this._themeGoldSilverTilemap.addTile(this._themeGoldTile = new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(929,349,39,46))));
    this._themeGoldSilverTilemap.addTile(this._themeSilverTile = new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(970,349,39,46))));
    this._themeGoldTile.x = 13;
    this._themeGoldTile.y = 21;
    this._themeSilverTile.x = 53;
    this._themeSilverTile.y = 21;
    this._themeGoldSilverContainer.addChild(this._themeGoldSilverTilemap);
    this._themeGoldSilverContainer.x = 515;
    this._themeGoldSilverContainer.y = 250;
    this._themeTypeTilemap.addTile(tl = new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(535,124,310,23))));
    tl.x = 111;
    tl.y = 205;
    var playBtnInner = new openfl.display.Sprite;
    var playBtnBg = this.makeBtnBg(this._main);
    this._themePlayBtnContainer.addChild(playBtnInner);
    playBtnInner.addChild(playBtnBg);
    playBtnBg.y = 13;
    var playBtnTxtTilemap = new openfl.display.Tilemap(300,100,this._themeBaseTileset);
    playBtnInner.addChild(playBtnTxtTilemap);
    playBtnTxtTilemap.addTile(tl = new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(537,370,125,29))));
    tl.x = 88;
    tl.y = 36 + 13;
    playBtnTxtTilemap.addTile(this._themePlayBtnSaleTile = new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(733,306,269,35))));
    this._themePlayBtnSaleTile.x = 16;
    this._themePlayBtnSaleTile.y = 0;
    playBtnInner.x = -150;
    playBtnInner.y = -50;
    this._themePlayBtnContainer.x = 292;
    this._themePlayBtnContainer.y = 517;
    this._themeWinningCountContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themeWinningCountContainer);
    var winningInner = new openfl.display.Sprite;
    var winningTilemap = new openfl.display.Tilemap(131,79,this._themeBaseTileset);
    winningTilemap.addTile(new openfl.display.Tile(this._themeBaseTileset.addRect(new openfl.geom.Rectangle(800,401,131,79))));
    winningTilemap.y = 54;
    winningInner.addChild(winningTilemap);
    this._themeWinningCountContainer.addChild(winningInner);
    this._numberFontManager.makeFontInfo('winningCount', 200, 100, winningInner, 16777215, 7916320, 58, 50, 7.5, 'CENTER');
    winningInner.x = -49;
    winningInner.y = -129;
    this._themeWinningCountContainer.x = 30;
    this._themeWinningCountContainer.y = 375;
    this.addChild(this._themeContainer);
    this.makeThemePotion(true);
    this._themePotionContainer.x = 92;
    this._themePotionContainer.y = 291;
    this._themePanel.addChild(this._themePotionContainer);
    this._themeBtnContainer = new openfl.display.Sprite;
    this._themePanel.addChild(this._themeBtnContainer);
    var btn = new openfl.display.Sprite;
    btn.graphics.beginFill(16773120, 0);
    btn.graphics.drawRect(0, 0, 310, 110);
    btn.graphics.endFill();
    btn.x = 137;
    btn.y = 475;
    this._themeBtnContainer.addChild(btn);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn1__);
    btn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn2__);
    for (cnt = 0; cnt < 4; cnt++) {
        btn = new openfl.display.Sprite;
        btn.graphics.beginFill(16773120, 0);
        btn.graphics.drawRect(0, 0, 94, 110);
        btn.graphics.endFill();
        btn.x = 103 + cnt * 95;
        btn.y = 341;
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn3__);
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn4__);
        btn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn5__);
        this._themeBtnContainer.addChild(btn)
    }
    this.show();
    com.greensock.TweenMax.to(this, .1, {
        onComplete: org.apache.royale.utils.Language.closure(this.hide, this, 'hide')
    })
}
;
pigg.puzzle.view.InfoView.prototype.btnAction = function(action, btnType) {
    this.traceLog('btnAction:::', action, btnType);
    if (this._isSendEquipScoreItem)
        return;
    if (this._isSendPlayPuzzle)
        return;
    if (action == 'down') {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        if (btnType == 0) {
            this.traceLog('\u30d7\u30ec\u30a4\u30dc\u30bf\u30f3down');
            com.greensock.TweenMax.to(this._themePlayBtnContainer, .6, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1.1,
                scaleY: 1.1
            })
        } else if (btnType >= 1 && btnType <= 4) {
            if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
                com.greensock.TweenMax.to(this.THEME_POTION_GRAY_TILE[btnType - 1], .6, {
                    ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                    scaleX: 1.2,
                    scaleY: 1.2
                });
            else {
                com.greensock.TweenMax.to(this.THEME_POTION_TILE[btnType - 1], .6, {
                    ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                    scaleX: 1.2,
                    scaleY: 1.2
                });
                com.greensock.TweenMax.to(this.THEME_POTION_SELECT_TILE[btnType - 1], .6, {
                    ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                    scaleX: 1.2,
                    scaleY: 1.2
                })
            }
            this.traceLog('\u307d\u30b7\u30e7\u30f3\u30dc\u30bf\u30f3down', btnType)
        }
    } else if (action == 'out')
        if (btnType == 0)
            com.greensock.TweenMax.to(this._themePlayBtnContainer, .1, {
                ease: com.greensock.easing.Cubic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else {
            if (btnType >= 1 && btnType <= 4)
                if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
                    com.greensock.TweenMax.to(this.THEME_POTION_GRAY_TILE[btnType - 1], .4, {
                        ease: com.greensock.easing.Elastic.easeOut,
                        scaleX: 1,
                        scaleY: 1
                    });
                else {
                    com.greensock.TweenMax.to(this.THEME_POTION_TILE[btnType - 1], .4, {
                        ease: com.greensock.easing.Elastic.easeOut,
                        scaleX: 1,
                        scaleY: 1
                    });
                    com.greensock.TweenMax.to(this.THEME_POTION_SELECT_TILE[btnType - 1], .4, {
                        ease: com.greensock.easing.Elastic.easeOut,
                        scaleX: 1,
                        scaleY: 1
                    })
                }
        }
    else if (action == 'click')
        if (btnType == 0) {
            this._isSendPlayPuzzle = true;
            com.greensock.TweenMax.to(this._themePlayBtnContainer, .2, {
                ease: com.greensock.easing.Elastic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
            this.themeStartMD()
        } else if (btnType >= 1 && btnType <= 4)
            if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
                com.greensock.TweenMax.to(this.THEME_POTION_GRAY_TILE[btnType - 1], .4, {
                    ease: com.greensock.easing.Elastic.easeOut,
                    scaleX: 1,
                    scaleY: 1
                });
            else {
                if (this._main.potionItemCount[btnType - 1] == 0)
                    this._main.showAlertItemShortage();
                else
                    this.dummyEquip(btnType - 1);
                com.greensock.TweenMax.to(this.THEME_POTION_TILE[btnType - 1], .4, {
                    ease: com.greensock.easing.Elastic.easeOut,
                    scaleX: 1,
                    scaleY: 1
                });
                com.greensock.TweenMax.to(this.THEME_POTION_SELECT_TILE[btnType - 1], .4, {
                    ease: com.greensock.easing.Elastic.easeOut,
                    scaleX: 1,
                    scaleY: 1
                })
            }
}
;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_RECT;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_GRAY_RECT;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_TILE;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_SELECT_TILE;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_GRAY_TILE;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_PLUS_TILE;
pigg.puzzle.view.InfoView.prototype.THEME_POTION_ROCK_TILE;
pigg.puzzle.view.InfoView.prototype._grayCT;
pigg.puzzle.view.InfoView.prototype._themePotionTilemap;
pigg.puzzle.view.InfoView.prototype._themePotionTxtStr;
pigg.puzzle.view.InfoView.prototype._themePotionContainer;
pigg.puzzle.view.InfoView.prototype._isLockPotion = false;
pigg.puzzle.view.InfoView.prototype._potionTileset;
pigg.puzzle.view.InfoView.prototype.makeThemePotion = function(isInit) {
    isInit = typeof isInit !== 'undefined' ? isInit : false;
    var cnt = 0
      , len = 0;
    var tile;
    if (this._themePotionContainer == null) {
        this._themePotionContainer = new openfl.display.Sprite;
        this._potionTileset = this._main.gamePartsTileset.clone();
        var THEME_POTION_PLUS_RECT = this._potionTileset.addRect(new openfl.geom.Rectangle(901,74,40,40));
        var THEME_POTION_SELECT_RECT = this._potionTileset.addRect(new openfl.geom.Rectangle(980,585,90,115));
        this._themePotionTilemap = new openfl.display.Tilemap(400,255,this._potionTileset);
        var txtContainer = new openfl.display.Sprite;
        this._themePotionContainer.addChild(this._themePotionTilemap);
        this._themePotionContainer.addChild(txtContainer);
        len = 4;
        for (cnt = 0; cnt < len; cnt++) {
            this.THEME_POTION_RECT.push(this._potionTileset.addRect(new openfl.geom.Rectangle(641 + cnt * 82,178,82,100)));
            tile = new TileBase(this.THEME_POTION_RECT[cnt]);
            this._themePotionTilemap.addTile(tile);
            tile.x = cnt * 94 + 18 + 82 / 2;
            tile.y = 48 + 100 / 2;
            tile.originX = 82 / 2;
            tile.originY = 100 / 2;
            this.THEME_POTION_TILE.push(tile);
            tile = new TileBase(THEME_POTION_PLUS_RECT);
            tile.x = cnt * 94 + 18 + 82 / 2 + 6;
            tile.y = 48;
            this.THEME_POTION_PLUS_TILE.push(tile);
            tile = new TileBase(THEME_POTION_SELECT_RECT);
            tile.x = cnt * 94 + 14 + 90 / 2;
            tile.y = 38 + 115 / 2;
            tile.originX = 90 / 2;
            tile.originY = 115 / 2;
            this.THEME_POTION_SELECT_TILE.push(tile)
        }
        txtContainer.x = 24;
        txtContainer.y = 122;
        this._numberFontManager.makeFontInfo('selectPotion3', 100, 60, txtContainer, 6434068, 16777215, 36 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion5', 200, 60, txtContainer, 6434068, 16777215, 130 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion10', 300, 60, txtContainer, 6434068, 16777215, 224 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion20', 400, 60, txtContainer, 6434068, 16777215, 318 * 2, 10, 5, 'CENTER', true, true)
    }
    if (isInit)
        return;
    len = this._main.potionItemCount.length;
    var lock;
    var ROCK_RECT = 0;
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR && !this._isLockPotion) {
        lock = true;
        this._isLockPotion = true;
        ROCK_RECT = this._potionTileset.addRect(new openfl.geom.Rectangle(943,74,36,40))
    }
    for (cnt = 0; cnt < len; cnt++) {
        if (lock) {
            this.THEME_POTION_GRAY_RECT.push(this._potionTileset.addRect(new openfl.geom.Rectangle(980,178 + cnt * 102,82,100)));
            tile = new TileBase(this.THEME_POTION_GRAY_RECT[cnt]);
            this._themePotionTilemap.addTile(tile);
            tile.x = cnt * 94 + 18 + 82 / 2;
            tile.y = 48 + 100 / 2;
            tile.originX = 82 / 2;
            tile.originY = 100 / 2;
            this.THEME_POTION_GRAY_TILE.push(tile);
            tile = new TileBase(ROCK_RECT);
            this._themePotionTilemap.addTile(tile);
            tile.x = cnt * 94 + 18 + 82 / 2 + 6;
            tile.y = 48;
            this.THEME_POTION_ROCK_TILE.push(tile)
        } else if (this._isLockPotion && this._main.userTutorialStatus >= pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
            this._themePotionTilemap.removeTile(this.THEME_POTION_GRAY_TILE[cnt]);
            this._themePotionTilemap.removeTile(this.THEME_POTION_ROCK_TILE[cnt])
        }
        if (this._main.potionItemCount[cnt] == 0) {
            if (!this._isLockPotion) {
                this.THEME_POTION_TILE[cnt].colorTransform = this._grayCT;
                this._themePotionTilemap.addTile(this.THEME_POTION_PLUS_TILE[cnt]);
                this._themePotionTilemap.removeTile(this.THEME_POTION_SELECT_TILE[cnt])
            }
            this._numberFontManager.removeNumber(this._themePotionTxtStr[cnt])
        } else {
            this.THEME_POTION_TILE[cnt].colorTransform = null;
            this._themePotionTilemap.removeTile(this.THEME_POTION_PLUS_TILE[cnt]);
            this._numberFontManager.makeNumber(this._themePotionTxtStr[cnt], this._main.potionItemCount[cnt])
        }
    }
}
;
pigg.puzzle.view.InfoView.prototype.dummyEquip = function(id) {
    if (this._isSendEquipScoreItem)
        return;
    if (this._isSendPlayPuzzle)
        return;
    this._main.showApiLoading();
    var category = '';
    if (id == 0)
        category = pigg.puzzle.view.CommonView.SCORE_ITEM_3;
    else if (id == 1)
        category = pigg.puzzle.view.CommonView.SCORE_ITEM_5;
    else if (id == 2)
        category = pigg.puzzle.view.CommonView.SCORE_ITEM_10;
    else if (id == 3)
        category = pigg.puzzle.view.CommonView.SCORE_ITEM_20;
    this.traceLog('dummyEquip::', id, this._main.userData.equippedScoreItemCategory, category);
    if (this._main.userData.equippedScoreItemCategory == category)
        category = '';
    this._main.loadDataManager.equipScoreItem(category);
    this.traceLog('dummyEquip::', category);
    this._isSendEquipScoreItem = true
}
;
pigg.puzzle.view.InfoView.prototype.themeStartMD = function() {
    if (this._isSendEquipScoreItem)
        return;
    if (this._main.saveBoardData == '')
        return;
    if (this._main.clearMoveTimes == 0)
        return;
    if (!this._main.isLocal)
        this._main.loadDataManager.playPuzzle(this._main.saveBoardData, this._main.clearMoveTimes);
    else
        this._main.onPlayPuzzle()
}
;
pigg.puzzle.view.InfoView.prototype.adjstTileX;
pigg.puzzle.view.InfoView.prototype._showThemeTween = false;
pigg.puzzle.view.InfoView.prototype._isWaitShowMissionInfo = false;
pigg.puzzle.view.InfoView.prototype.showTheme = function() {
    var self = this;
    var __localFn0__ = function() {
        self._themePanel.cacheAsBitmap = false;
        self._showThemeTween = false;
        if (self._isWaitShowMissionInfo)
            self.showMissionDescriptionPanel()
    };
    this._main.isShowTheme = true;
    this._showThemeTween = true;
    this.traceLog('infoView::showTheme::', this._main.currentThemeType, this._main.currentEventStep);
    if (this._main.currentThemeType == -1)
        return;
    var fromResult = false;
    this._themePanel.visible = true;
    this._main.hideApiLoading();
    if (this._main.userData.equippedScoreItemCategory != '') {
        if (this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_3 && this._main.potionItemCount[0] == 0 || this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_5 && this._main.potionItemCount[1] == 0 || this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_10 && this._main.potionItemCount[2] == 0 || this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_20 && this._main.potionItemCount[3] == 0) {
            this._main.userData.equippedScoreItemCategory = '';
            this._main.currentUsePotion = -1;
            this._main.userData.boardUsingPuzzleScoreItemMagnification = 0;
            this.traceLog('\u88c5\u5099\u3057\u3066\u305f\u3082\u306e\u304c\u306a\u304f\u306a\u305f')
        }
        this.onEquipPuzzleScoreItem()
    }
    this.show();
    this._isShowTheme = true;
    this.showPanelAnimal();
    this.makeThemePotion();
    this._themeContainer.visible = true;
    if (this._themeHeaderAnimalNameTile.id != this.RECT_THEME_HEADER_TITLE[this._main.currentEventStep]) {
        this.traceLog('showTheme::STEP\u5909\u5316\u30a2\u30ea::');
        this._themeHeaderAnimalNameTile.updateId(this.RECT_THEME_HEADER_TITLE[this._main.currentEventStep]);
        this._themeHeaderAnimalFromTile.x = Number(this.adjstTileX[this._main.currentEventStep]);
        this._themeHeaderTilemap.x = 584 / 2 - (250 + this.adjstTileX[this._main.currentEventStep]) / 2
    }
    if (this._themeTypeTile.id != this.RECT_THEME_TYPE[this._main.currentThemeType])
        this._themeTypeTile.updateId(this.RECT_THEME_TYPE[this._main.currentThemeType]);
    this.traceLog('themeHeaderWWW::\u3042\u3068::', this._themeHeaderContainer.width);
    if (this._main.userData.eventWinningStreakCount > 0)
        this.showWinningCount();
    else
        this.hideWinningCount();
    if (this._main.existMission && this._main.userTutorialStatusTemp < 2)
        ;
    else
        ;if (this._main.existMission)
        this.showMissionPanel(fromResult);
    else
        ;if (!this._main.existThemeGold && !this._main.existThemeSilver)
        this._themeGoldSilverContainer.visible = false;
    else {
        this._themeGoldSilverContainer.visible = true;
        if (this._main.existThemeGold && this._main.existThemeSilver) {
            this._themeGoldTile.visible = true;
            this._themeSilverTile.visible = true;
            this._themeGoldTile.x = 13;
            this._themeSilverTile.x = 53
        } else if (this._main.existThemeGold) {
            this._themeGoldTile.visible = true;
            this._themeSilverTile.visible = false;
            this._themeGoldTile.x = 33
        } else if (this._main.existThemeSilver) {
            this._themeGoldTile.visible = false;
            this._themeSilverTile.visible = true;
            this._themeSilverTile.x = 33
        }
    }
    if (this._main.continueSale)
        this._themePlayBtnSaleTile.visible = true;
    else
        this._themePlayBtnSaleTile.visible = false;
    this._themePanel.x = 27;
    this._themePanel.y = -pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    this._themePanel.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._themePanel, .6, {
        delay: .1,
        y: 150,
        ease: com.greensock.easing.Elastic.easeOut.config(1, .5),
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.InfoView.prototype.hideTheme = function() {
    var self = this;
    var __localFn0__ = function() {
        self._themePanel.cacheAsBitmap = false;
        self._themePanel.visible = false;
        self._main.themeStart()
    };
    this._main.isShowTheme = false;
    this._isShowTheme = false;
    if (this._themeContainer == null)
        return;
    this._main.hideGameBgBlack();
    com.greensock.TweenMax.killTweensOf(this._themePanel);
    this._themePanel.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._themePanel, .3, {
        y: -pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeTheme, this, 'removeTheme'),
        onComplete: __localFn0__
    });
    this.hidePanelAnimal()
}
;
pigg.puzzle.view.InfoView.prototype.removeTheme = function() {
    this._themeContainer.visible = false;
    this._themePanel.cacheAsBitmap = false
}
;
pigg.puzzle.view.InfoView.prototype.themeEF = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.showWinningCount = function() {
    this._numberFontManager.makeNumber('winningCount', this._main.userData.eventWinningStreakCount);
    this._themeWinningCountContainer.visible = true
}
;
pigg.puzzle.view.InfoView.prototype.hideWinningCount = function() {
    this._themeWinningCountContainer.visible = false
}
;
pigg.puzzle.view.InfoView.prototype._missionPanelAtoTile;
pigg.puzzle.view.InfoView.prototype._missionPanelKoTile;
pigg.puzzle.view.InfoView.prototype._missionMaskTarget;
pigg.puzzle.view.InfoView.prototype._missionGaugeMaskSpr;
pigg.puzzle.view.InfoView.prototype._missionCountSpr;
pigg.puzzle.view.InfoView.prototype.showMissionPanel = function(fromResult) {
    fromResult = typeof fromResult !== 'undefined' ? fromResult : false;
    this.traceLog('mission\u30a2\u30ea');
    if (this._missionPanel == null) {
        this._missionPanel = new openfl.display.Sprite;
        this._themePanel.addChild(this._missionPanel);
        var tileset = this._main.gamePanelTileset.clone();
        tileset.addRect(new openfl.geom.Rectangle(932,400,108,150));
        var tilemap = new openfl.display.Tilemap(108,150,tileset);
        tilemap.addTile(new openfl.display.Tile);
        this._missionPanel.addChild(tilemap);
        this._missionMaskTarget = new openfl.display.Sprite;
        this._missionPanel.addChild(this._missionMaskTarget);
        tilemap = new openfl.display.Tilemap(82,100,tileset);
        tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(953,66,82,89))));
        this._missionMaskTarget.addChild(tilemap);
        this._missionMaskTarget.x = 13;
        this._missionMaskTarget.y = 49;
        this._missionGaugeMaskSpr = this.drawPIMask(this._main.totalMissionPieceCount / this._main.missionRequiredPoint * 100);
        this._missionGaugeMaskSpr.x = 55;
        this._missionGaugeMaskSpr.y = 99;
        this._missionPanel.addChild(this._missionGaugeMaskSpr);
        this._missionCountSpr = new openfl.display.Sprite;
        this._missionPanel.addChild(this._missionCountSpr);
        tilemap = new openfl.display.Tilemap(120,100,tileset);
        tilemap.addTile(this._missionPanelAtoTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(800,234,42,26))));
        tilemap.addTile(this._missionPanelKoTile = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(843,234,26,26))));
        this._missionPanelKoTile.x = 91;
        this._missionCountSpr.addChild(tilemap);
        tilemap.x = -5;
        tilemap.y = 129;
        this._numberFontManager.makeFontInfo('missionThemeCount', 100, 60, this._missionCountSpr, 16774799, 6829076, 64, 10, 5, 'CENTER', false, true);
        this._numberFontManager.getFontInfo('missionThemeCount').tilemap.x = 30;
        this._numberFontManager.getFontInfo('missionThemeCount').tilemap.y = 120;
        this._missionPanel.x = 460;
        this._missionPanel.y = 425
    }
    this._missionPanel.visible = true;
    this.drawPIMask(this._main.totalMissionPieceCount / this._main.missionRequiredPoint * 100, this._missionGaugeMaskSpr);
    this._missionMaskTarget.mask = this._missionGaugeMaskSpr;
    this.traceLog('showMissionPanel', this._main.missionRequiredPoint, this._main.totalMissionPieceCount);
    this._numberFontManager.makeNumber('missionThemeCount', this._main.missionRequiredPoint - this._main.totalMissionPieceCount);
    if (this._main.missionRequiredPoint - this._main.totalMissionPieceCount < 10) {
        this._missionPanelAtoTile.x = 19;
        this._missionPanelKoTile.x = 73
    } else if (this._main.missionRequiredPoint - this._main.totalMissionPieceCount < 100) {
        this._missionPanelAtoTile.x = 10;
        this._missionPanelKoTile.x = 82
    } else {
        this._missionPanelAtoTile.x = 0;
        this._missionPanelKoTile.x = 91
    }
    this.traceLog('showMissionPanel::', this._main.userTutorialStatusTemp);
    if (this._main.userTutorialStatusTemp < 2)
        this.showMissionDescriptionPanel(fromResult)
}
;
pigg.puzzle.view.InfoView.prototype._themeMissionInfoContainer;
pigg.puzzle.view.InfoView.prototype._themeMissionInfoPanel;
pigg.puzzle.view.InfoView.prototype._missionInfoTileset;
pigg.puzzle.view.InfoView.prototype._missionInfoBlack;
pigg.puzzle.view.InfoView.prototype.initMissionDescriptionPanel = function() {
    this._themeMissionInfoContainer = new openfl.display.Sprite;
    this.addChild(this._themeMissionInfoContainer);
    this._missionInfoBlack = new openfl.display.Sprite;
    this._themeMissionInfoContainer.addChild(this._missionInfoBlack);
    this._missionInfoBlack.graphics.beginFill(0, .5);
    this._missionInfoBlack.graphics.drawRect(0, 0, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
    this._missionInfoBlack.graphics.drawRoundRect(482, 560, 120, 177, 30);
    this._missionInfoBlack.graphics.endFill();
    this._missionInfoBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideMissionDescriptionPanel, this, 'hideMissionDescriptionPanel'));
    this._themeMissionInfoPanel = new openfl.display.Sprite;
    this._themeMissionInfoContainer.addChild(this._themeMissionInfoPanel);
    var missionInfoTilemap;
    this._missionInfoTileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_GAME_MISSION_INFO), 'gameMissionInfo', org.apache.royale.utils.Language.closure(this.onloadMissionInfoPng, this, 'onloadMissionInfoPng'));
    missionInfoTilemap = new openfl.display.Tilemap(440,394,this._missionInfoTileset);
    this._themeMissionInfoPanel.addChild(missionInfoTilemap);
    missionInfoTilemap.addTile(new openfl.display.Tile(this._missionInfoTileset.addRect(new openfl.geom.Rectangle(0,0,440,394))));
    missionInfoTilemap.y = -285;
    missionInfoTilemap.x = -440;
    this._themeMissionInfoPanel.x = 486;
    this._themeMissionInfoPanel.y = 628;
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideMissionDescriptionPanel, this, 'hideMissionDescriptionPanel'));
    this._themeMissionInfoPanel.addChild(closeBtn);
    closeBtn.x = -63;
    closeBtn.y = -278;
    this._themeMissionInfoPanel.scaleX = this._themeMissionInfoPanel.scaleY = 0;
    this._themeMissionInfoContainer.visible = false;
    this._themeMissionInfoPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.missionInfoPanelCL, this, 'missionInfoPanelCL'))
}
;
pigg.puzzle.view.InfoView.prototype.missionInfoPanelCL = function(e) {
    this.traceLog(this.mouseX, this.mouseY);
    if (this.mouseX > 270 && this.mouseX < 445 && this.mouseY > 680 && this.mouseY < 720)
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_MISSION_INFO), '_blank')
}
;
pigg.puzzle.view.InfoView.prototype.showMissionDescriptionPanel = function(fromResult) {
    fromResult = typeof fromResult !== 'undefined' ? fromResult : false;
    if (this._themeMissionInfoContainer == null) {
        this.initMissionDescriptionPanel();
        return
    }
    this._isWaitShowMissionInfo = false;
    this._missionInfoBlack.alpha = 0;
    this._themeMissionInfoPanel.scaleX = this._themeMissionInfoPanel.scaleY = 0;
    this._themeMissionInfoPanel.rotation = -45;
    com.greensock.TweenMax.to(this._missionInfoBlack, .2, {
        alpha: 1
    });
    com.greensock.TweenMax.to(this._themeMissionInfoPanel, .8, {
        rotation: 0,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this._themeMissionInfoContainer.visible = true
}
;
pigg.puzzle.view.InfoView.prototype.onloadMissionInfoPng = function(code, bmd) {
    this._missionInfoTileset.bitmapData = bmd;
    if (this._showThemeTween)
        this._isWaitShowMissionInfo = true;
    else
        this.showMissionDescriptionPanel()
}
;
pigg.puzzle.view.InfoView.prototype.openMissionDetail = function() {}
;
pigg.puzzle.view.InfoView.prototype.hideMissionDescriptionPanel = function() {
    var self = this;
    var __localFn0__ = function() {
        self.removeFromParent(self._themeMissionInfoContainer);
        self._missionInfoBlack = null;
        self._themeMissionInfoPanel = null;
        self._themeMissionInfoContainer = null
    };
    this._missionInfoBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideMissionDescriptionPanel, this, 'hideMissionDescriptionPanel'));
    com.greensock.TweenMax.to(this._missionInfoBlack, .2, {
        alpha: 0
    });
    com.greensock.TweenMax.to(this._themeMissionInfoPanel, .2, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    });
    if (this._main.userTutorialStatusTemp < 2) {
        this._main.userTutorialStatusTemp = 2;
        this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
    }
}
;
pigg.puzzle.view.InfoView.prototype.onLoadImage = function(code, bmd, icon) {
    icon = typeof icon !== 'undefined' ? icon : null;
    this.traceLog('onLoadThumbnail::', code, bmd, icon);
    var bitmap = new openfl.display.Bitmap(bmd);
    icon.addChild(bitmap)
}
;
pigg.puzzle.view.InfoView.prototype._rankIncentiveType = 0;
pigg.puzzle.view.InfoView.prototype._rankingIncentiveContainer;
pigg.puzzle.view.InfoView.prototype._isLoadedRankingParts = false;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_BG_SCORE = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_BG_WINNING = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_BG_RESULT = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_AWARD_PANEL;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_RESULT_AWARD_PANEL;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_RESULT_AWARD_ANIMAL;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_BG = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_BG_MIDDLE = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_BG_LARGE = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_BG_SPECIAL = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_EMPTY_SCORE = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_ICON_EMPTY_WINNING = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_RESULT_RENZOKU = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_RESULT_POINT_ICON = 0;
pigg.puzzle.view.InfoView.prototype.RECT_RANKING_KURAI = 0;
pigg.puzzle.view.InfoView.prototype._rankingResultBg;
pigg.puzzle.view.InfoView.prototype._rankingIncentiveAward;
pigg.puzzle.view.InfoView.prototype._rankingResultContainer;
pigg.puzzle.view.InfoView.prototype._rankingResultPanel;
pigg.puzzle.view.InfoView.prototype._rankingResultIconContainer;
pigg.puzzle.view.InfoView.prototype._rankingResultIconViewContainer;
pigg.puzzle.view.InfoView.prototype._rankingResultIconTilemap;
pigg.puzzle.view.InfoView.prototype._rankingResultNextBtn;
pigg.puzzle.view.InfoView.prototype._rankingEventNameTxt;
pigg.puzzle.view.InfoView.prototype._rankingResultTilemap;
pigg.puzzle.view.InfoView.prototype._rankingIncentiveKuraiTile;
pigg.puzzle.view.InfoView.prototype.showRankingIncentive = function() {
    var self = this;
    var __localFn0__ = function() {
        self._rankingResultNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.rankingResultNextCL, self, 'rankingResultNextCL'))
    };
    var rankingData = this._main.openData.prevRankingData;
    this.traceLog('InfoView:::showRankingIncentive::', this._isLoadedRankingParts);
    if (this._backBlack == null) {
        this._backBlack = this.makeBackBlack();
        this.addChild(this._backBlack)
    }
    var tl;
    var digit = 0;
    if (!this._isLoadedRankingParts) {
        this._rankingResultContainer = new openfl.display.Sprite;
        this._rankingResultPanel = new openfl.display.Sprite;
        this._rankingResultContainer.addChild(this._rankingResultPanel);
        this.addChild(this._rankingResultContainer);
        this._rankingResultContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
        this._rankingResultPanel.x = -(584 / 2);
        this._rankingResultPanel.y = -305;
        var cnt = 0;
        var tileset = new openfl.display.Tileset(null);
        this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_MYPAGE_RANKING_RESULT), 'rankingParts', org.apache.royale.utils.Language.closure(this.onloadRankingParts, this, 'onloadRankingParts'), tileset);
        this.RECT_RANKING_BG_SCORE = tileset.addRect(new openfl.geom.Rectangle(0,0,584,610));
        this.RECT_RANKING_BG_WINNING = tileset.addRect(new openfl.geom.Rectangle(0,611,584,610));
        this.RECT_RANKING_BG_RESULT = tileset.addRect(new openfl.geom.Rectangle(0,1223,584,610));
        this.RECT_RANKING_ICON_BG = tileset.addRect(new openfl.geom.Rectangle(767,1017,90,90));
        this.RECT_RANKING_ICON_BG_MIDDLE = tileset.addRect(new openfl.geom.Rectangle(761,1549,140,140));
        this.RECT_RANKING_ICON_BG_LARGE = tileset.addRect(new openfl.geom.Rectangle(585,1549,176,176));
        this.RECT_RANKING_ICON_BG_SPECIAL = tileset.addRect(new openfl.geom.Rectangle(585,1353,193,193));
        this.RECT_RANKING_ICON_EMPTY_SCORE = tileset.addRect(new openfl.geom.Rectangle(767,1109,90,90));
        this.RECT_RANKING_ICON_EMPTY_WINNING = tileset.addRect(new openfl.geom.Rectangle(767,1201,90,90));
        this.RECT_RANKING_RESULT_RENZOKU = tileset.addRect(new openfl.geom.Rectangle(766,1303,115,30));
        this.RECT_RANKING_RESULT_POINT_ICON = tileset.addRect(new openfl.geom.Rectangle(859,1017,24,24));
        this.RECT_RANKING_KURAI = tileset.addRect(new openfl.geom.Rectangle(859,1043,28,27));
        for (cnt = 0; cnt < 8; cnt++) {
            this.RECT_RANKING_AWARD_PANEL.push(tileset.addRect(new openfl.geom.Rectangle(586,cnt * 127,404,126)));
            this.RECT_RANKING_RESULT_AWARD_PANEL.push(tileset.addRect(new openfl.geom.Rectangle(586,1016 + cnt * 41,179,40)));
            this.RECT_RANKING_RESULT_AWARD_ANIMAL.push(tileset.addRect(new openfl.geom.Rectangle(900,1016 + cnt * 103,92,103)))
        }
        this._rankingResultTilemap = new openfl.display.Tilemap(584,610,tileset);
        this._rankingResultPanel.addChild(this._rankingResultTilemap);
        this._rankingResultTilemap.addTile(this._rankingResultBg = new TileBase(this.RECT_RANKING_BG_SCORE));
        this._rankingResultTilemap.addTile(this._rankingIncentiveAward = new TileBase(this.RECT_RANKING_AWARD_PANEL[rankingData.pointAwardIndex - 1]));
        this._rankingIncentiveAward.x = 90;
        this._rankingIncentiveAward.y = 134;
        this._rankingResultIconContainer = new openfl.display.Sprite;
        this._rankingResultPanel.addChild(this._rankingResultIconContainer);
        this._rankingEventNameTxt = this.makeTextField(20, 6960914, openfl.text.TextFormatAlign.CENTER);
        this._rankingEventNameTxt.x = 136;
        this._rankingEventNameTxt.y = 34;
        this._rankingEventNameTxt.width = 330;
        this._rankingEventNameTxt.wordWrap = true;
        this._rankingResultPanel.addChild(this._rankingEventNameTxt);
        this._rankingEventNameTxt.text = this._main.openData.prevEventTitle;
        this._numberFontManager.makeFontInfo('rankingResultValue', 300, 100, this._rankingResultPanel, 16777215, 8994560, 150, 50, 7, 'CENTER', false, false);
        this._numberFontManager.getFontInfo('rankingResultValue').tilemap.x = 185;
        this._numberFontManager.getFontInfo('rankingResultValue').tilemap.y = 160;
        this._numberFontManager.makeNumber('rankingResultValue', rankingData.pointRank);
        this._rankingResultTilemap.addTile(this._rankingIncentiveKuraiTile = new TileBase(this.RECT_RANKING_KURAI));
        digit = this.getDigit(rankingData.pointRank);
        this._rankingIncentiveKuraiTile.y = 219;
        this._rankingIncentiveKuraiTile.x = 300 + digit * 14;
        var btnTilemap = this.makeBtnBg(this._main, 0, 300);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(607,722,62,29))));
        tl.x = 119;
        tl.y = 35;
        this._rankingResultNextBtn = new openfl.display.Sprite;
        btnTilemap.x = -150;
        btnTilemap.y = -50;
        this._rankingResultNextBtn.addChild(btnTilemap);
        this._rankingResultNextBtn.x = 142 + 150;
        this._rankingResultNextBtn.y = 480 + 50;
        this._rankingResultPanel.addChild(this._rankingResultNextBtn);
        this._rankingResultIconContainer = new openfl.display.Sprite;
        this._rankingResultPanel.addChild(this._rankingResultIconContainer);
        this._rankingResultIconTilemap = new openfl.display.Tilemap(584,220,tileset);
        this._rankingResultIconContainer.addChild(this._rankingResultIconTilemap);
        this._rankingResultIconTilemap.y = 260;
        this._rankingResultIconViewContainer = new openfl.display.Sprite;
        this._rankingResultIconContainer.addChild(this._rankingResultIconViewContainer);
        this._rankingResultIconViewContainer.y = 260;
        this._rankingResultContainer.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
        this._rankingResultContainer.y = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT / 2 + 40
    }
    if (this._rankIncentiveType == 0)
        this.makeRankingIncentiveBg('score');
    else if (this._rankIncentiveType == 1) {
        this._numberFontManager.makeNumber('rankingResultValue', rankingData.winningRank);
        this._rankingResultBg.updateId(this.RECT_RANKING_BG_WINNING);
        this._rankingIncentiveAward.updateId(this.RECT_RANKING_AWARD_PANEL[rankingData.winningAwardIndex - 1]);
        digit = this.getDigit(rankingData.winningRank);
        this._rankingIncentiveKuraiTile.x = 300 + digit * 14;
        this._rankingResultTilemap.addTile(this._rankingIncentiveKuraiTile);
        this.makeRankingIncentiveBg('winning_streak')
    } else if (this._rankIncentiveType == 2) {
        this._numberFontManager.removeNumber('rankingResultValue', true);
        this._rankingIncentiveKuraiTile.visible = false;
        this._rankingIncentiveKuraiTile = null;
        this._rankingResultIconTilemap.removeTiles();
        this.removeFromParent(this._rankingResultIconTilemap);
        this.removeFromParent(this._rankingResultIconViewContainer);
        this._rankingResultIconTilemap = null;
        this._rankingResultIconViewContainer = null;
        this._rankingResultBg.updateId(this.RECT_RANKING_BG_RESULT);
        this._numberFontManager.makeFontInfo('rankingResultAll', 400, 320, this._rankingResultPanel, 16777215, 8994560, 420, 16, 7, 'RIGHT', false, false);
        this._numberFontManager.getFontInfo('rankingResultAll').tilemap.x = 143;
        this._numberFontManager.getFontInfo('rankingResultAll').tilemap.y = 154;
        this._numberFontManager.addFontType('rankingResultAll', 16777215, 8994560, 420, 208, 7, 'RIGHT', false);
        this._numberFontManager.addFontType('rankingResultAll', 16478724, 16777215, 320, 94, 5, 'CENTER', true);
        this._numberFontManager.addFontType('rankingResultAll', 7846656, 16777215, 230, 283, 5, 'RIGHT', true);
        this._numberFontManager.makeNumber('rankingResultAll', rankingData.pointRank);
        this._numberFontManager.makeNumber('rankingResultAll', rankingData.winningRank, 1, false);
        this._numberFontManager.makeNumber('rankingResultAll', rankingData.pointValue, 2, false);
        this._numberFontManager.makeNumber('rankingResultAll', rankingData.winningValue, 3, false);
        this._rankingResultTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_RESULT_AWARD_PANEL[rankingData.pointAwardIndex - 1]));
        tl.x = 127;
        tl.y = 162;
        this._rankingResultTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_RESULT_AWARD_ANIMAL[rankingData.pointAwardIndex - 1]));
        tl.x = 66;
        tl.y = 181;
        this._rankingResultTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_RESULT_AWARD_PANEL[rankingData.winningAwardIndex - 1]));
        tl.x = 127;
        tl.y = 357;
        this._rankingResultTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_RESULT_AWARD_ANIMAL[rankingData.winningAwardIndex - 1]));
        tl.x = 66;
        tl.y = 368
    } else if (this._rankIncentiveType == 3) {
        this.traceLog('\u6d88\u3048\u308b');
        this._rankingResultNextBtn.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.rankingResultNextCL, this, 'rankingResultNextCL'));
        this.hideRankingIncentive();
        return
    }
    if (this._isLoadedRankingParts && this._rankIncentiveType < 3) {
        if (this._incentiveParticleView)
            this._incentiveParticleView.makeIncentiveConfetti(320, 300);
        this._rankingResultContainer.scaleX = this._rankingResultContainer.scaleY = 1.2;
        com.greensock.TweenMax.killTweensOf(this._rankingResultContainer);
        com.greensock.TweenMax.to(this._rankingResultContainer, .75, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.2, .4),
            onComplete: __localFn0__
        })
    }
}
;
pigg.puzzle.view.InfoView.prototype.makeRankingIncentiveBg = function(rankType) {
    var datas;
    var num = 0;
    var emptyId = 0;
    var awardIndex = 0;
    if (rankType == 'score') {
        emptyId = this.RECT_RANKING_ICON_EMPTY_SCORE;
        datas = this._main.openData.prevRankingData.pointRankIncentive;
        num = datas.length;
        awardIndex = this._main.openData.prevRankingData.pointAwardIndex
    } else {
        num = 4;
        emptyId = this.RECT_RANKING_ICON_EMPTY_WINNING;
        datas = this._main.openData.prevRankingData.winningRankIncentive;
        num = datas.length;
        awardIndex = this._main.openData.prevRankingData.winningAwardIndex
    }
    var cnt = 0
      , len = 0;
    var tl;
    var id = 0;
    var iconView;
    var thumbUrl;
    if (this._rankingResultIconTilemap.numTiles > 0)
        this._rankingResultIconTilemap.removeTiles();
    while (this._rankingResultIconViewContainer.numChildren > 0)
        this._rankingResultIconViewContainer.removeChildAt(0);
    if (awardIndex >= 6) {
        this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_ICON_BG_SPECIAL));
        tl.x = 57;
        tl.y = 14;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.init();
        iconView.hasBg = false;
        iconView.mypageMain = true;
        iconView.scaleX = iconView.scaleY = .8;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + datas[0].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[0].itemType, datas[0].itemCode, 135);
        this._main.loadDataManager.loadPng(thumbUrl, datas[0].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        this._rankingResultIconViewContainer.addChild(iconView);
        iconView.x = 57 - 7 + 22;
        iconView.y = 14 - 12 + 22;
        for (cnt = 0; cnt < 6; cnt++) {
            if (cnt < num - 1)
                id = this.RECT_RANKING_ICON_BG;
            else
                id = emptyId;
            this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(id));
            tl.x = 247 + cnt % 3 * 94;
            tl.y = 18 + org.apache.royale.utils.Language._int(cnt / 3) * 94;
            if (cnt < num - 1) {
                iconView = new pigg.puzzle.view.IconView(this._main);
                iconView.init();
                iconView.hasBg = false;
                if (this._main.isLocal)
                    thumbUrl = '/assets/puzzle/local/' + datas[cnt + 1].itemCode + '.png';
                else
                    thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[cnt + 1].itemType, datas[cnt + 1].itemCode, 135);
                this._main.loadDataManager.loadPng(thumbUrl, datas[cnt + 1].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
                this._rankingResultIconViewContainer.addChild(iconView);
                iconView.x = 247 + cnt % 3 * 94 - 11;
                iconView.y = 18 + org.apache.royale.utils.Language._int(cnt / 3) * 94 - 11;
                iconView.scaleX = iconView.scaleY = .9
            }
        }
    } else if (num == 1) {
        this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_ICON_BG_LARGE));
        tl.x = 204;
        tl.y = 23;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.init();
        iconView.hasBg = false;
        iconView.mypageMain = true;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + datas[0].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[0].itemType, datas[0].itemCode, 135);
        this._main.loadDataManager.loadPng(thumbUrl, datas[0].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        this._rankingResultIconViewContainer.addChild(iconView);
        iconView.x = 209;
        iconView.y = 30;
        iconView.scaleX = iconView.scaleY = .8
    } else if (num == 2) {
        this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_ICON_BG_MIDDLE));
        tl.x = 148;
        tl.y = 41;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.init();
        iconView.hasBg = false;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + datas[0].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[0].itemType, datas[0].itemCode, 135);
        this._main.loadDataManager.loadPng(thumbUrl, datas[0].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        this._rankingResultIconViewContainer.addChild(iconView);
        iconView.x = 148;
        iconView.y = 41;
        iconView.scaleX = iconView.scaleY = 1.1;
        this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_ICON_BG_MIDDLE));
        tl.x = 298;
        tl.y = 43;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.init();
        iconView.hasBg = false;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + datas[1].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[1].itemType, datas[1].itemCode, 135);
        this._main.loadDataManager.loadPng(thumbUrl, datas[1].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        this._rankingResultIconViewContainer.addChild(iconView);
        iconView.x = 302;
        iconView.y = 43;
        iconView.scaleX = iconView.scaleY = 1.1
    } else if (num == 3)
        for (cnt = 0; cnt < 3; cnt++) {
            this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(this.RECT_RANKING_ICON_BG));
            tl.x = 153 + cnt * 94;
            tl.y = 65;
            iconView = new pigg.puzzle.view.IconView(this._main);
            iconView.init();
            iconView.hasBg = false;
            if (this._main.isLocal)
                thumbUrl = '/assets/puzzle/local/' + datas[cnt].itemCode + '.png';
            else
                thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[cnt].itemType, datas[cnt].itemCode, 135);
            this._main.loadDataManager.loadPng(thumbUrl, datas[cnt].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
            this._rankingResultIconViewContainer.addChild(iconView);
            iconView.x = 153 + cnt * 94 - 11;
            iconView.y = 65 - 11;
            iconView.scaleX = iconView.scaleY = .9
        }
    else
        for (cnt = 0; cnt < 6; cnt++) {
            if (cnt < num)
                id = this.RECT_RANKING_ICON_BG;
            else
                id = emptyId;
            this._rankingResultIconTilemap.addTile(tl = new openfl.display.Tile(id));
            tl.x = 153 + cnt % 3 * 94;
            tl.y = 18 + org.apache.royale.utils.Language._int(cnt / 3) * 94;
            if (cnt < num) {
                iconView = new pigg.puzzle.view.IconView(this._main);
                iconView.init();
                iconView.hasBg = false;
                if (this._main.isLocal)
                    thumbUrl = '/assets/puzzle/local/' + datas[cnt].itemCode + '.png';
                else
                    thumbUrl = this.addLocation(this._main) + this.makeItemPath(datas[cnt].itemType, datas[cnt].itemCode, 135);
                this._main.loadDataManager.loadPng(thumbUrl, datas[cnt].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
                this._rankingResultIconViewContainer.addChild(iconView);
                iconView.x = 153 + cnt % 3 * 94 - 11;
                iconView.y = 18 + org.apache.royale.utils.Language._int(cnt / 3) * 94 - 11;
                iconView.scaleX = iconView.scaleY = .9
            }
        }
}
;
pigg.puzzle.view.InfoView.prototype.rankingResultNextCL = function() {
    this.traceLog('rankingResultNextCL');
    this._rankIncentiveType++;
    this.showRankingIncentive()
}
;
pigg.puzzle.view.InfoView.prototype.onloadRankingParts = function(code, bmd, tileset) {
    var self = this;
    var __localFn0__ = function() {
        self._rankingResultNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.rankingResultNextCL, self, 'rankingResultNextCL'))
    };
    this.traceLog('onloadRankingParts');
    tileset.bitmapData = bmd;
    this.visible = true;
    this._isShow = true;
    this._isLoadedRankingParts = true;
    if (this._main.isParticle && !this._main.isLowSpecMode) {
        if (this._incentiveParticleView == null) {
            this._incentiveParticleView = new pigg.puzzle.view.ParticleView(this._main);
            this._incentiveParticleView.init(640, 840);
            this._incentiveParticleView.x = -(pigg.puzzle.view.CommonView.STAGE_WIDTH / 2);
            this._incentiveParticleView.y = -(pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2) + 100;
            this._rankingResultContainer.addChild(this._incentiveParticleView)
        }
        this._incentiveParticleView.makeIncentiveConfetti(320, 300)
    }
    this._rankingResultContainer.scaleX = this._rankingResultContainer.scaleY = 1.2;
    com.greensock.TweenMax.killTweensOf(this._rankingResultContainer);
    com.greensock.TweenMax.to(this._rankingResultContainer, .75, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.2, .4),
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.InfoView.prototype.rankItemIconMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.rankItemIconMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.hideRankingIncentive = function() {
    com.greensock.TweenMax.killTweensOf(this._rankingResultContainer);
    com.greensock.TweenMax.to(this._rankingResultContainer, .15, {
        alpha: 0,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeRankingIncentive, this, 'removeRankingIncentive')
    });
    com.greensock.TweenMax.to(this._backBlack, .15, {
        alpha: 0
    })
}
;
pigg.puzzle.view.InfoView.prototype.removeRankingIncentive = function() {
    this._backBlack.visible = false;
    this.removeFromParent(this._rankingResultPanel);
    this.removeFromParent(this._rankingResultContainer);
    this.removeFromParent(this._backBlack);
    this._rankingResultContainer = null;
    this._rankingResultContainer = null;
    this._rankingResultTilemap.removeTiles();
    this.removeFromParent(this._rankingResultTilemap);
    this._rankingResultTilemap = null;
    this._numberFontManager.removeNumber('rankingResultAll', true);
    this._main.nextRankingResultDescription()
}
;
pigg.puzzle.view.InfoView.prototype.rankIncentiveConfirmMD = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.showRankingDescription = function() {}
;
pigg.puzzle.view.InfoView.prototype.openRankingDetail = function() {}
;
pigg.puzzle.view.InfoView.prototype.hideRankingDescription = function() {}
;
pigg.puzzle.view.InfoView.prototype.rankingDescriptionMD = function(e) {
    this.hideRankingDescription()
}
;
pigg.puzzle.view.InfoView.prototype.startToCarryOverScoreRoll = function() {}
;
pigg.puzzle.view.InfoView.prototype.tweenCarryOverScore = function() {}
;
pigg.puzzle.view.InfoView.prototype.hideStepNextIncentive = function() {}
;
pigg.puzzle.view.InfoView.prototype.removeStepNextIncentive = function() {}
;
pigg.puzzle.view.InfoView.prototype._incentiveBaseTilemap;
pigg.puzzle.view.InfoView.prototype._incentiveBaseTileset;
pigg.puzzle.view.InfoView.prototype.initIncentivePanel = function() {
    this._incentiveContainer = new openfl.display.Sprite;
    this._incentivePanel = new openfl.display.Sprite;
    this._incentiveContainer.addChild(this._incentivePanel);
    this.addChild(this._incentiveContainer);
    this._incentiveContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    this._incentivePanel.x = -(584 / 2);
    this._incentivePanel.y = -305;
    this._incentiveNameTxt = this.makeTextField(20, 6960914, openfl.text.TextFormatAlign.CENTER);
    this._incentiveNameTxt.x = 136;
    this._incentiveNameTxt.y = 374;
    this._incentiveNameTxt.width = 330;
    this._incentiveNameTxt.wordWrap = true;
    this._incentivePanel.addChild(this._incentiveNameTxt);
    this._incentiveIcon = new pigg.puzzle.view.IconView(this._main);
    this._incentivePanel.addChild(this._incentiveIcon);
    this._incentiveIcon.x = 300 - 189 / 2;
    this._incentiveIcon.y = 270 - 189 / 2;
    this._incentiveIcon.scaleX = this._incentiveIcon.scaleY = 1.4;
    this._incentiveIcon.hasBg = false;
    this._incentiveIcon.isPlus = false;
    this._incentiveIcon.isIncentive = true;
    var btnTilemap = this.makeBtnBg(this._main, 0, 300);
    var tl;
    btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(607,722,62,29))));
    tl.x = 119;
    tl.y = 35;
    this._incentiveNextBtn = new openfl.display.Sprite;
    btnTilemap.x = -150;
    btnTilemap.y = -50;
    this._incentiveNextBtn.addChild(btnTilemap);
    this._incentiveNextBtn.x = 142 + 150;
    this._incentiveNextBtn.y = 480 + 50;
    this._incentivePanel.addChild(this._incentiveNextBtn);
    this.addChild(this._incentiveContainer);
    this._incentiveNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.stepClearIncentiveConfirmMD, this, 'stepClearIncentiveConfirmMD'));
    this._incentivePanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.incentivePanelCL, this, 'incentivePanelCL'))
}
;
pigg.puzzle.view.InfoView.prototype.incentivePanelCL = function(e) {
    this.traceLog('incentivePanelCL::', this.mouseX, this.mouseY);
    if (this.mouseX > 220 && this.mouseX < 420 && this.mouseY > 580 && this.mouseY < 610)
        this.moveToAboutItem()
}
;
pigg.puzzle.view.InfoView.prototype.onLoadIncentivePng = function(code, bmd) {
    this._incentiveBaseTileset.bitmapData = bmd
}
;
pigg.puzzle.view.InfoView.prototype._isWaitShowStepClearIncentive = false;
pigg.puzzle.view.InfoView.prototype._isWaitShowLimitedClearIncentive = false;
pigg.puzzle.view.InfoView.prototype._incentiveParticleView;
pigg.puzzle.view.InfoView.prototype.showStepClearIncentive = function(special) {
    var self = this;
    special = typeof special !== 'undefined' ? special : -1;
    var __localFn0__ = function() {
        self._incentiveNextBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(self.stepClearIncentiveConfirmMD, self, 'stepClearIncentiveConfirmMD'));
        self._incentiveNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.stepClearIncentiveConfirmCL, self, 'stepClearIncentiveConfirmCL'))
    };
    if (this._backBlack == null) {
        this._backBlack = this.makeBackBlack();
        this.addChildAt(this._backBlack, 0)
    }
    this.traceLog('showStepClearIncentive', this._toCompIncentive, this._toSpecialIncentive, special, this._limitedTermIncentiveItemData, this._limitedQuantityIncentiveItemData);
    this.show();
    this.removeStepClearIncentive();
    if (this._incentiveContainer == null) {
        this.initIncentivePanel();
        this._incentiveContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH * 2
    } else
        this._incentiveContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    if (this._main.isParticle && !this._main.isLowSpecMode) {
        if (this._incentiveParticleView == null) {
            this._incentiveParticleView = new pigg.puzzle.view.ParticleView(this._main);
            this._incentiveParticleView.init(640, 840);
            this._incentiveParticleView.x = -(pigg.puzzle.view.CommonView.STAGE_WIDTH / 2);
            this._incentiveParticleView.y = -(pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2) + 100;
            this._incentiveContainer.addChild(this._incentiveParticleView)
        }
        if (!this._isWaitShowStepClearIncentive && !this._isWaitShowLimitedClearIncentive)
            this._incentiveParticleView.makeIncentiveConfetti(320, 300)
    }
    var datas;
    var itemCode;
    var itemType;
    var itemName;
    var itemQuantity = 0;
    if (special == 0) {
        this._toSpecialIncentive = true;
        if (this._limitedTermIncentiveItemData) {
            this.traceLog('\u5148\u884c\u8868\u793a AA');
            this._specialIncentiveType = 1;
            datas = this._limitedTermIncentiveItemData;
            this.updateLimitedIncentive(0)
        }
    } else if (special == 1) {
        this._toSpecialIncentive = true;
        if (this._limitedQuantityIncentiveItemData) {
            this.traceLog('\u5148\u7740\u8868\u793a BB ');
            this._specialIncentiveType = 0;
            datas = this._limitedQuantityIncentiveItemData;
            this.updateLimitedIncentive(1)
        }
    } else if (!this._toCompIncentive && !this._toSpecialIncentive) {
        if (this._incentiveItemVec == null || this._incentiveItemVec.length == 0) {
            this.traceLog('\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u8a72\u5f53\u30a2\u30a4\u30c6\u30e0\u30ca\u30b7');
            if (this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30af\u30ea\u30a2\u306e\u6f14\u51fa');
                this._backBlack.visible = false;
                this._main.showGameTutorialEnd()
            }
            return
        }
        this.traceLog('\u3053\u3053\u3067STEP\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6');
        this.updateStepIncentive();
        datas = this._incentiveItemVec[0]
    } else if (this._main.specialChallengeExist && (this._limitedQuantityIncentiveItemData || this._limitedTermIncentiveItemData))
        if (this._specialIncentiveType == 1) {
            this.traceLog('\u5148\u884c\u8868\u793a E');
            this._specialIncentiveType = 1;
            datas = this._limitedTermIncentiveItemData;
            this.updateLimitedIncentive(0)
        } else {
            if (this._specialIncentiveType == 0) {
                this.traceLog('\u5148\u7740\u8868\u793a D');
                this._specialIncentiveType = 0;
                datas = this._limitedQuantityIncentiveItemData;
                this.updateLimitedIncentive(1)
            }
        }
    else if (!this._main.specialChallengeExist) {
        if (this._limitedQuantityIncentiveItemData == null && this._limitedTermIncentiveItemData == null)
            return;
        if (this._specialIncentiveType == 0) {
            this.traceLog('\u5148\u7740');
            datas = this._limitedQuantityIncentiveItemData;
            this.updateLimitedIncentive(1)
        } else if (this._specialIncentiveType == 1) {
            this.traceLog('\u5148\u884c');
            datas = this._limitedTermIncentiveItemData;
            this.updateLimitedIncentive(0)
        }
    }
    if (datas.length > 1) {
        this.traceLog('\u3072\u3068\u3064\u306eSTEP\u306b\u8907\u6570\u7a2e\u985e\u30a2\u30a4\u30c6\u30e0\u304c\u3042\u308b');
        this._existNextItem = true
    } else {
        this.traceLog('\u3072\u3068\u3064\u306eSTEP\u306b\u4e00\u7a2e\u985e\u30a2\u30a4\u30c6\u30e0\u304c\u3042\u308b');
        this._existNextItem = false;
        if (this._main.currentEventStep == 7) {
            this.traceLog('_toCompIncentive::', this._toCompIncentive);
            if (!this._main.specialChallengeExist)
                this._toCompIncentive = true;
            else
                this._toSpecialIncentive = true
        }
    }
    itemCode = org.apache.royale.utils.Language.string(datas[0].itemCode);
    itemType = org.apache.royale.utils.Language.string(datas[0].itemType);
    itemName = org.apache.royale.utils.Language.string(datas[0].itemName);
    itemQuantity = Number(datas[0].itemQuantity);
    this.traceLog('Incentive::\u8868\u793a::', itemCode);
    this.traceLog('Incentive::\u8868\u793a::', itemType);
    this.traceLog('Incentive::\u8868\u793a::', itemName);
    this.traceLog('Incentive::\u8868\u793a::', itemQuantity);
    this._incentiveIcon.quantity = itemQuantity;
    var nameStr = itemName;
    if (nameStr.length > 32)
        nameStr = nameStr.substr(0, 30) + '...';
    this._incentiveNameTxt.text = nameStr + '\n ';
    var thumbUrl = '/assets/puzzle/local/' + itemCode + '.png';
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/' + itemCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemType, itemCode, 135);
    this._main.loadDataManager.loadPng(thumbUrl, itemCode, org.apache.royale.utils.Language.closure(this._incentiveIcon.setIconData, this._incentiveIcon, 'setIconData'), [org.apache.royale.utils.Language.closure(this.loadedItemIcon, this, 'loadedItemIcon')]);
    this._incentiveIcon.visible = false;
    this.traceLog('\u767a\u52d5::', this._isWaitShowStepClearIncentive, this._isWaitShowLimitedClearIncentive);
    if (!this._isWaitShowStepClearIncentive && !this._isWaitShowLimitedClearIncentive) {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_USE_POTION);
        this._incentiveContainer.alpha = 1;
        this._incentivePanel.visible = true;
        this._incentiveContainer.scaleX = this._incentiveContainer.scaleY = 1.2;
        com.greensock.TweenMax.killTweensOf(this._incentiveContainer);
        com.greensock.TweenMax.to(this._incentiveContainer, .75, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.2, .4),
            onComplete: __localFn0__
        })
    }
    this._backBlack.visible = true;
    this._backBlack.alpha = 0;
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 1
    })
}
;
pigg.puzzle.view.InfoView.prototype.updateStepIncentive = function() {
    if (this._stepIncentiveContainer == null) {
        this._isWaitShowStepClearIncentive = true;
        this.initStepClearIncentive()
    } else if (this._stepIncentiveCountTile.id != this.RECT_STEP_INCENTIVE_COUNT[this._main.currentEventStep])
        this._stepIncentiveCountTile.updateId(this.RECT_STEP_INCENTIVE_COUNT[this._main.currentEventStep]);
    this._stepIncentiveContainer.visible = true
}
;
pigg.puzzle.view.InfoView.prototype.updateLimitedIncentive = function(limitedType) {
    if (this._limitedIncentiveContainer == null) {
        this._isWaitShowLimitedClearIncentive = true;
        this.initLimitedClearIncentive();
        this._incentiveContainer.visible = false
    }
    if (limitedType == 0) {
        if (this._limitedIncentiveCountTile.id != this.RECT_LIMITED_INCENTIVE_TITLE_TERM)
            this._limitedIncentiveCountTile.updateId(this.RECT_LIMITED_INCENTIVE_TITLE_TERM);
        if (this._limitedIncentiveItemTile.id != this.RECT_LIMITED_INCENTIVE_ITEM_TERM)
            this._limitedIncentiveItemTile.updateId(this.RECT_LIMITED_INCENTIVE_ITEM_TERM)
    } else if (limitedType == 1) {
        if (this._limitedIncentiveCountTile.id != this.RECT_LIMITED_INCENTIVE_TITLE_QUANTITY)
            this._limitedIncentiveCountTile.updateId(this.RECT_LIMITED_INCENTIVE_TITLE_QUANTITY);
        if (this._limitedIncentiveItemTile.id != this.RECT_LIMITED_INCENTIVE_ITEM_QUANTITY)
            this._limitedIncentiveItemTile.updateId(this.RECT_LIMITED_INCENTIVE_ITEM_QUANTITY)
    }
}
;
pigg.puzzle.view.InfoView.prototype.loadedItemIcon = function() {
    if (this._incentiveIcon)
        this._incentiveIcon.visible = true
}
;
pigg.puzzle.view.InfoView.prototype._stepIncentiveCountTile;
pigg.puzzle.view.InfoView.prototype.RECT_STEP_INCENTIVE_COUNT;
pigg.puzzle.view.InfoView.prototype.CUT_STEP_INCENTIVE_COUNT_WIDTH;
pigg.puzzle.view.InfoView.prototype.initStepClearIncentive = function() {
    this._main.showApiLoading();
    this._stepIncentiveContainer = new openfl.display.Sprite;
    this._incentivePanel.addChildAt(this._stepIncentiveContainer, 0);
    var tileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_GAME_STEP_INCENTIVE_PARTS), 'setpIncentiveParts', org.apache.royale.utils.Language.closure(this.onloadIncentivePng, this, 'onloadIncentivePng'), [tileset]);
    var tilemap = new openfl.display.Tilemap(584,630,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(2,2,584,610))));
    var cnt = 0
      , len = 0
      , w = 0;
    len = 8;
    for (cnt = 0; cnt < len; cnt++) {
        this.RECT_STEP_INCENTIVE_COUNT.push(tileset.addRect(new openfl.geom.Rectangle(2 + w,614,this.CUT_STEP_INCENTIVE_COUNT_WIDTH[cnt],54)));
        w += Number(this.CUT_STEP_INCENTIVE_COUNT_WIDTH[cnt] + 4)
    }
    tilemap.addTile(this._stepIncentiveCountTile = new TileBase(this.RECT_STEP_INCENTIVE_COUNT[this._main.currentEventStep]));
    this._stepIncentiveCountTile.x = 263;
    this._stepIncentiveCountTile.y = 44;
    this._stepIncentiveContainer.addChild(tilemap)
}
;
pigg.puzzle.view.InfoView.prototype._limitedIncentiveCountTile;
pigg.puzzle.view.InfoView.prototype._limitedIncentiveItemTile;
pigg.puzzle.view.InfoView.prototype.RECT_LIMITED_INCENTIVE_TITLE_TERM = 0;
pigg.puzzle.view.InfoView.prototype.RECT_LIMITED_INCENTIVE_TITLE_QUANTITY = 0;
pigg.puzzle.view.InfoView.prototype.RECT_LIMITED_INCENTIVE_ITEM_TERM = 0;
pigg.puzzle.view.InfoView.prototype.RECT_LIMITED_INCENTIVE_ITEM_QUANTITY = 0;
pigg.puzzle.view.InfoView.prototype.initLimitedClearIncentive = function() {
    this._main.showApiLoading();
    this._limitedIncentiveContainer = new openfl.display.Sprite;
    this._incentivePanel.addChildAt(this._limitedIncentiveContainer, 0);
    if (this._stepIncentiveContainer)
        this.removeFromParent(this._stepIncentiveContainer);
    var tileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_GAME_LIMITED_INCENTIVE_PARTS), 'limitedIncentiveParts', org.apache.royale.utils.Language.closure(this.onloadIncentivePng, this, 'onloadIncentivePng'), [tileset]);
    var tilemap = new openfl.display.Tilemap(584,630,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(2,2,584,610))));
    this.RECT_LIMITED_INCENTIVE_TITLE_TERM = tileset.addRect(new openfl.geom.Rectangle(2,614,93,74));
    this.RECT_LIMITED_INCENTIVE_TITLE_QUANTITY = tileset.addRect(new openfl.geom.Rectangle(99,614,94,74));
    this.RECT_LIMITED_INCENTIVE_ITEM_TERM = tileset.addRect(new openfl.geom.Rectangle(197,614,62,35));
    this.RECT_LIMITED_INCENTIVE_ITEM_QUANTITY = tileset.addRect(new openfl.geom.Rectangle(263,614,62,35));
    tilemap.addTile(this._limitedIncentiveCountTile = new TileBase(this.RECT_LIMITED_INCENTIVE_TITLE_TERM));
    this._limitedIncentiveCountTile.x = 58;
    this._limitedIncentiveCountTile.y = 63;
    tilemap.addTile(this._limitedIncentiveItemTile = new TileBase(this.RECT_LIMITED_INCENTIVE_ITEM_TERM));
    this._limitedIncentiveItemTile.x = 161;
    this._limitedIncentiveItemTile.y = 127;
    this._limitedIncentiveContainer.addChild(tilemap);
    this._incentiveContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this.updateLimitedIncentive(1)
}
;
pigg.puzzle.view.InfoView.prototype.onloadIncentivePng = function(code, bmd, option) {
    var self = this;
    option = typeof option !== 'undefined' ? option : null;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._isWaitShowLimitedClearIncentive = false;
            self._isWaitShowStepClearIncentive = false;
            self._incentiveNextBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(self.stepClearIncentiveConfirmMD, self, 'stepClearIncentiveConfirmMD'));
            self._incentiveNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.stepClearIncentiveConfirmCL, self, 'stepClearIncentiveConfirmCL'))
        };
        self._incentiveContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        self._incentiveContainer.scaleX = self._incentiveContainer.scaleY = 1.2;
        self._incentiveContainer.visible = true;
        self._incentiveContainer.alpha = 1;
        self._incentivePanel.visible = true;
        self._main.playSE(pigg.puzzle.data.CommonData.SE_USE_POTION);
        if (self._main.isParticle && !self._main.isLowSpecMode && self._incentiveParticleView)
            self._incentiveParticleView.makeIncentiveConfetti(320, 300);
        com.greensock.TweenMax.to(self._incentiveContainer, .75, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.2, .4),
            onComplete: __localFn0__
        })
    };
    if (option && option.length > 0) {
        option[0].bitmapData = bmd;
        this._main.hideApiLoading();
        com.greensock.TweenMax.killTweensOf(this._incentiveContainer);
        com.greensock.TweenMax.to(this._incentiveContainer, .1, {
            onComplete: __localFn0__
        })
    }
}
;
pigg.puzzle.view.InfoView.prototype.hideStepClearIncentive = function() {
    var self = this;
    var __localFn0__ = function() {
        self._backBlack.visible = false
    };
    com.greensock.TweenMax.killTweensOf(this._backBlack);
    com.greensock.TweenMax.to(this._backBlack, .15, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.killTweensOf(this._incentiveContainer);
    com.greensock.TweenMax.to(this._incentiveContainer, .15, {
        alpha: 0,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeStepClearIncentive, this, 'removeStepClearIncentive')
    })
}
;
pigg.puzzle.view.InfoView.prototype.removeStepClearIncentive = function() {
    if (this._incentivePanel)
        this._incentivePanel.visible = false
}
;
pigg.puzzle.view.InfoView.prototype.onPlayPuzzle = function() {
    this.traceLog('infoView::onPlayPuzzle');
    if (this._main.userTutorialStatus == 0) {
        this._main.userTutorialStatus = 1;
        this._main.loadDataManager.setUserStatus(this._main.userTutorialStatus + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
    }
    this.hideTheme();
    this.traceLog('infoView::onPlayPuzzle::', this._main.currentUsePotion);
    if (this._main.currentUsePotion != -1)
        this._main.potionItemCount[this._main.currentUsePotion]--;
    this.traceLog('infoView::onPlayPuzzle::::', this._main.potionItemCount);
    this.traceLog('playPuzzle :: ', this._main.userData.boardData);
    this.traceLog('playPuzzle :: ', this._main.saveBoardData);
    this._isSendPlayPuzzle = false
}
;
pigg.puzzle.view.InfoView.prototype.themePanelPlayMD = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.themePanelPlayMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.themePanelPlayMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.themePanelCloseMD = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.themePanelCloseMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.themePanelCloseMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.closeNextIncentivePanel = function(e) {
    this.hideStepNextIncentive()
}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveConfirmMD = function(e) {
    this._incentiveNextBtn.scaleX = this._incentiveNextBtn.scaleY = 1.2;
    com.greensock.TweenMax.to(this._incentiveNextBtn, .6, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
    })
}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveConfirmCL = function(e) {
    this._incentiveNextBtn.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.stepClearIncentiveConfirmMD, this, 'stepClearIncentiveConfirmMD'));
    this._incentiveNextBtn.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.stepClearIncentiveConfirmCL, this, 'stepClearIncentiveConfirmCL'));
    var toShotEternal = false;
    if (this._existNextItem) {
        if (!this._toCompIncentive && !this._toSpecialIncentive) {
            this._incentiveItemVec[0].fixed = false;
            this._incentiveItemVec[0].shift();
            this._incentiveItemVec[0].fixed = true
        } else if (this._specialIncentiveType == 0) {
            this._limitedQuantityIncentiveItemData.fixed = false;
            this._limitedQuantityIncentiveItemData.shift();
            this._limitedQuantityIncentiveItemData.fixed = true
        } else if (this._specialIncentiveType == 1) {
            this._limitedTermIncentiveItemData.fixed = false;
            this._limitedTermIncentiveItemData.shift();
            this._limitedTermIncentiveItemData.fixed = true
        }
        this.hideStepClearIncentive();
        com.greensock.TweenMax.to(this, .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.showStepClearIncentive, this, 'showStepClearIncentive')
        })
    } else {
        this.traceLog('stepClearIncentiveConfirmMD::', this._toCompIncentive, this._specialIncentiveType, this._main.currentEventStep, this._main.specialChallengeExist, this._limitedQuantityIncentiveItemData, this._limitedTermIncentiveItemData);
        if (this._toCompIncentive || this._main.specialChallengeExist && (this._limitedQuantityIncentiveItemData || this._limitedTermIncentiveItemData) && (this._progressData == null || this._progressData && !this._progressData.isStepClear))
            if (this._specialIncentiveType == -1) {
                this._specialIncentiveType = 0;
                if (this._limitedQuantityIncentiveItemData) {
                    this.traceLog('\u5148\u7740\u30a2\u30a4\u30c6\u30e0\u8868\u793a A');
                    com.greensock.TweenMax.to(this, .2, {
                        onComplete: org.apache.royale.utils.Language.closure(this.showStepClearIncentive, this, 'showStepClearIncentive')
                    })
                } else if (this._limitedTermIncentiveItemData) {
                    this.traceLog('\u5148\u884c\u30a2\u30a4\u30c6\u30e0\u8868\u793a B');
                    this._specialIncentiveType = 1;
                    com.greensock.TweenMax.to(this, .2, {
                        onComplete: org.apache.royale.utils.Language.closure(this.showStepClearIncentive, this, 'showStepClearIncentive')
                    })
                } else
                    this._main.gotoNextStepIncentiveMap()
            } else if (this._specialIncentiveType == 0)
                if (this._limitedTermIncentiveItemData) {
                    this.traceLog('\u5148\u884c\u30a2\u30a4\u30c6\u30e0\u8868\u793a C');
                    this._specialIncentiveType = 1;
                    com.greensock.TweenMax.to(this, .2, {
                        onComplete: org.apache.royale.utils.Language.closure(this.showStepClearIncentive, this, 'showStepClearIncentive')
                    })
                } else {
                    this.traceLog('\u5148\u884c\u30a2\u30a4\u30c6\u30e0\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3068\u3053\u3068\u3093\u30e2\u30fc\u30c9\u306e\u8aac\u660e');
                    this._main.gotoNextStepIncentiveMap();
                    if (this._main.specialChallengeExist && this._main.isJoinSpecialChallenge == -1) {
                        this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u306e\u30a8\u30f3\u30c7\u30a3\u30f3\u30b0');
                        toShotEternal = true
                    } else {
                        this.traceLog('\u5148\u884c\u304c\u3042\u308b\u306e\u3067\u30b9\u30eb\u30fc');
                        this._main.switchIncentiveMapPlayBtn(true)
                    }
                }
            else {
                if (this._specialIncentiveType == 1) {
                    this.traceLog('\u5148\u884c\u30a2\u30a4\u30c6\u30e0\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3068\u3053\u3068\u3093\u30e2\u30fc\u30c9\u306e\u8aac\u660e');
                    this._main.gotoNextStepIncentiveMap();
                    if (this._main.specialChallengeExist)
                        if (this._main.isJoinSpecialChallenge == -1) {
                            this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u306e\u30a8\u30f3\u30c7\u30a3\u30f3\u30b0');
                            toShotEternal = true
                        } else {
                            this.traceLog('\u5148\u7740\u304c\u3042\u308b\u306e\u3067\u30b9\u30eb\u30fc');
                            this._main.switchIncentiveMapPlayBtn(true)
                        }
                }
            }
        else if (!this._toCompIncentive) {
            this.traceLog('\u30b3\u30c1\u30e9::');
            if (this._progressData && this._progressData.isStepClear)
                this._progressData = null;
            this._incentiveItemVec.fixed = false;
            this._incentiveItemVec.shift();
            this._incentiveItemVec.fixed = true;
            var hasNext = false;
            var hasTutorailEnd = false;
            if (this._incentiveItemVec.length > 0) {
                this.traceLog('\u9023\u7d9a\u3067\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2');
                hasNext = true
            }
            if (this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
                hasTutorailEnd = true;
            this._main.gotoNextStepIncentiveMap(false, hasNext, hasTutorailEnd);
            if (this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                this.hideStepClearIncentive();
                this.traceLog('\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u304b\u3089\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30af\u30ea\u30a2\u306e\u6f14\u51fa');
                return
            }
        }
        this.hideStepClearIncentive();
        if (toShotEternal)
            this.showShortEternalModeDescription()
    }
}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveConfirmMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveConfirmMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveCloseMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.stepClearIncentiveCloseMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.changePanelAnimal = function(type) {
    type = typeof type !== 'undefined' ? type : -1
}
;
pigg.puzzle.view.InfoView.prototype.onProgress = function(data) {
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    var incentiveItemData;
    this.traceLog('infoView::onProgress', data.status);
    if (data.status != 'SUCCESS')
        return;
    if (!data.isThemeClear)
        return;
    this._progressData = data;
    if (data.isStepClear) {
        this._incentiveItemVec = data.incentiveItemVec;
        len = this._incentiveItemVec.length;
        this.traceLog('\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u6570::', len);
        for (cnt = 0; cnt < len; cnt++) {
            incentiveItemData = this._incentiveItemVec[cnt];
            len2 = incentiveItemData.length;
            this.traceLog('\u30b9\u30c6\u30c3\u30d7\u30a4\u30f3\u30bb\u30f3\u6570::', len2);
            for (cnt2 = 0; cnt2 < len2; cnt2++) {
                this.traceLog('step\u30a4\u30f3\u30bb\u30f3::', incentiveItemData[cnt2].itemName);
                this.traceLog('step\u30a4\u30f3\u30bb\u30f3::', incentiveItemData[cnt2].itemCode);
                this.traceLog('step\u30a4\u30f3\u30bb\u30f3::', incentiveItemData[cnt2].itemType);
                this.traceLog('step\u30a4\u30f3\u30bb\u30f3::', incentiveItemData[cnt2].itemQuantity)
            }
        }
    }
    if (this._main.specialChallengeExist) {
        this.traceLog('\u5148\u7740\u30fb\u5148\u884c::null');
        this._limitedQuantityIncentiveItemData = null;
        this._limitedTermIncentiveItemData = null
    }
    if (data.isProvidedLimitedQuantityIncentive) {
        this.traceLog('\u5148\u7740\u30a2\u30ea');
        this._limitedQuantityIncentiveItemData = data.limitedQuantityIncentiveItemData
    }
    if (data.isProvidedLimitedTermIncentive) {
        this.traceLog('\u5148\u884c\u30a2\u30ea');
        this._limitedTermIncentiveItemData = data.limitedTermIncentiveItemData
    }
}
;
pigg.puzzle.view.InfoView.prototype.shopMD = function() {}
;
pigg.puzzle.view.InfoView.prototype.showHowToPlayPanel = function() {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayNextMD = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayNextMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayNextMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayCloseMOV = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayCloseMOU = function(e) {}
;
pigg.puzzle.view.InfoView.prototype.howToPlayCloseMD = function(e) {
    this.hideHowToPlayPanel()
}
;
pigg.puzzle.view.InfoView.prototype.hideHowToPlayPanel = function() {}
;
pigg.puzzle.view.InfoView.prototype.stackTweenObj = function(targetArray, reset) {
    reset = typeof reset !== 'undefined' ? reset : false
}
;
pigg.puzzle.view.InfoView.prototype.pauseTweenObj = function(type) {}
;
pigg.puzzle.view.InfoView.prototype.killTweenObj = function() {}
;
pigg.puzzle.view.InfoView.prototype.onEquipPuzzleScoreItem = function() {
    this.traceLog('onEquipPuzzleScoreItem::', this._main.userData.equippedScoreItemCategory);
    this._isSendEquipScoreItem = false;
    var equipId = -1;
    if (this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_3)
        equipId = 0;
    else if (this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_5)
        equipId = 1;
    else if (this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_10)
        equipId = 2;
    else if (this._main.userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_20)
        equipId = 3;
    else
        equipId = -1;
    var cnt = 0
      , len = 0;
    len = 4;
    for (cnt = 0; cnt < len; cnt++)
        this._themePotionTilemap.removeTile(this.THEME_POTION_SELECT_TILE[cnt]);
    this._main.hideApiLoading();
    if (equipId == -1)
        return;
    this._themePotionTilemap.addTile(this.THEME_POTION_SELECT_TILE[equipId])
}
;
pigg.puzzle.view.InfoView.prototype.onFailedEquipPuzzleScoreItem = function() {
    this._isSendEquipScoreItem = false;
    this._main.showAlertItemShortage();
    this._main.hideApiLoading()
}
;
pigg.puzzle.view.InfoView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.InfoView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
pigg.puzzle.view.InfoView.prototype.get__isShowTheme = function() {
    return this._isShowTheme
}
;
pigg.puzzle.view.InfoView.prototype.set__isShowTheme = function(value) {
    this._isShowTheme = value
}
;
Object.defineProperties(pigg.puzzle.view.InfoView.prototype, {
    isShow: {
        get: pigg.puzzle.view.InfoView.prototype.get__isShow,
        set: pigg.puzzle.view.InfoView.prototype.set__isShow
    },
    isShowTheme: {
        get: pigg.puzzle.view.InfoView.prototype.get__isShowTheme,
        set: pigg.puzzle.view.InfoView.prototype.set__isShowTheme
    }
});
pigg.puzzle.view.InfoView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'InfoView',
        qName: 'pigg.puzzle.view.InfoView',
        kind: 'class'
    }]
};
pigg.puzzle.view.InfoView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'isShowTheme': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                }
            }
        },
        methods: function() {
            return {
                'InfoView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'setTutorialItemBalloon': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'showTutorialMapItemBalloon': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showStepTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'endTutorialMapMotion': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'showGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'showThemeTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showEternalModeDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showSpecialChallengeDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showShortEternalModeDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showRankingResultDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'hideGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'showPanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'hidePanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'playPanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'removePanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'makeThemePotion': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'hideTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'removeTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onloadMissionInfoPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'onLoadImage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'showRankingIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onloadRankingParts': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Tileset',
                            optional: false
                        }]
                    }
                },
                'hideRankingIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'removeRankingIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'showRankingDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'hideStepNextIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'removeStepNextIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onLoadIncentivePng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'showStepClearIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'updateStepIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'updateLimitedIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'loadedItemIcon': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onloadIncentivePng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Array',
                            optional: true
                        }]
                    }
                },
                'hideStepClearIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'removeStepClearIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onPlayPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'changePanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onProgress': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleProgressData',
                            optional: false
                        }]
                    }
                },
                'showHowToPlayPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'pauseTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'killTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onEquipPuzzleScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                },
                'onFailedEquipPuzzleScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.InfoView'
                }
            }
        }
    }
}
;
spine.attachments.RegionAttachment = function(name) {
    this.color = new spine.Color(1,1,1,1);
    this.offset = org.apache.royale.utils.Language.Vector();
    this.uvs = org.apache.royale.utils.Language.Vector();
    spine.attachments.Attachment.call(this, name);
    this.offset.length = 8;
    this.uvs.length = 8
}
;
goog.inherits(spine.attachments.RegionAttachment, spine.attachments.Attachment);
goog.exportSymbol('spine.attachments.RegionAttachment', spine.attachments.RegionAttachment);
spine.attachments.RegionAttachment.prototype.BLX = 0;
spine.attachments.RegionAttachment.prototype.BLY = 1;
spine.attachments.RegionAttachment.prototype.ULX = 2;
spine.attachments.RegionAttachment.prototype.ULY = 3;
spine.attachments.RegionAttachment.prototype.URX = 4;
spine.attachments.RegionAttachment.prototype.URY = 5;
spine.attachments.RegionAttachment.prototype.BRX = 6;
spine.attachments.RegionAttachment.prototype.BRY = 7;
spine.attachments.RegionAttachment.prototype.x;
spine.attachments.RegionAttachment.prototype.y;
spine.attachments.RegionAttachment.prototype.scaleX = 1;
spine.attachments.RegionAttachment.prototype.scaleY = 1;
spine.attachments.RegionAttachment.prototype.rotation;
spine.attachments.RegionAttachment.prototype.width;
spine.attachments.RegionAttachment.prototype.height;
spine.attachments.RegionAttachment.prototype.color;
spine.attachments.RegionAttachment.prototype.path;
spine.attachments.RegionAttachment.prototype.rendererObject;
spine.attachments.RegionAttachment.prototype.regionOffsetX;
spine.attachments.RegionAttachment.prototype.regionOffsetY;
spine.attachments.RegionAttachment.prototype.regionWidth;
spine.attachments.RegionAttachment.prototype.regionHeight;
spine.attachments.RegionAttachment.prototype.regionOriginalWidth;
spine.attachments.RegionAttachment.prototype.regionOriginalHeight;
spine.attachments.RegionAttachment.prototype.offset;
spine.attachments.RegionAttachment.prototype.uvs;
spine.attachments.RegionAttachment.prototype.updateOffset = function() {
    var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;
    var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;
    var localX = -this.width * .5 * this.scaleX + this.regionOffsetX * regionScaleX;
    var localY = -this.height * .5 * this.scaleY + this.regionOffsetY * regionScaleY;
    var localX2 = localX + this.regionWidth * regionScaleX;
    var localY2 = localY + this.regionHeight * regionScaleY;
    var radians = this.rotation * Math.PI / 180;
    var ulDist = Math.sqrt(localX * localX + localY * localY);
    var ulAngle = Math.atan2(localY, localX);
    var urDist = Math.sqrt(localX2 * localX2 + localY * localY);
    var urAngle = Math.atan2(localY, localX2);
    var blDist = Math.sqrt(localX * localX + localY2 * localY2);
    var blAngle = Math.atan2(localY2, localX);
    var brDist = Math.sqrt(localX2 * localX2 + localY2 * localY2);
    var brAngle = Math.atan2(localY2, localX2);
    this.offset[this.BLX] = Math.cos(radians - blAngle) * blDist + this.x;
    this.offset[this.BLY] = Math.sin(radians - blAngle) * blDist + this.y;
    this.offset[this.ULX] = Math.cos(radians - ulAngle) * ulDist + this.x;
    this.offset[this.ULY] = Math.sin(radians - ulAngle) * ulDist + this.y;
    this.offset[this.URX] = Math.cos(radians - urAngle) * urDist + this.x;
    this.offset[this.URY] = Math.sin(radians - urAngle) * urDist + this.y;
    this.offset[this.BRX] = Math.cos(radians - brAngle) * brDist + this.x;
    this.offset[this.BRY] = Math.sin(radians - brAngle) * brDist + this.y
}
;
spine.attachments.RegionAttachment.prototype.setUVs = function(u, v, u2, v2, rotate) {
    var uvs = this.uvs;
    if (rotate) {
        uvs[4] = u;
        uvs[5] = v2;
        uvs[6] = u;
        uvs[7] = v;
        uvs[0] = u2;
        uvs[1] = v;
        uvs[2] = u2;
        uvs[3] = v2
    } else {
        uvs[2] = u;
        uvs[3] = v2;
        uvs[4] = u;
        uvs[5] = v;
        uvs[6] = u2;
        uvs[7] = v;
        uvs[0] = u2;
        uvs[1] = v2
    }
}
;
spine.attachments.RegionAttachment.prototype.computeWorldVertices = function(bone, worldVertices, offset, stride) {
    var vertexOffset = this.offset;
    var x = bone.worldX
      , y = bone.worldY;
    var a = bone.a
      , b = bone.b
      , c = bone.c
      , d = bone.d;
    var offsetX = 0
      , offsetY = 0;
    offsetX = Number(vertexOffset[this.BRX]);
    offsetY = Number(vertexOffset[this.BRY]);
    worldVertices[offset] = offsetX * a + offsetY * b + x;
    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
    offset += stride;
    offsetX = Number(vertexOffset[this.BLX]);
    offsetY = Number(vertexOffset[this.BLY]);
    worldVertices[offset] = offsetX * a + offsetY * b + x;
    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
    offset += stride;
    offsetX = Number(vertexOffset[this.ULX]);
    offsetY = Number(vertexOffset[this.ULY]);
    worldVertices[offset] = offsetX * a + offsetY * b + x;
    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
    offset += stride;
    offsetX = Number(vertexOffset[this.URX]);
    offsetY = Number(vertexOffset[this.URY]);
    worldVertices[offset] = offsetX * a + offsetY * b + x;
    worldVertices[offset + 1] = offsetX * c + offsetY * d + y
}
;
spine.attachments.RegionAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'RegionAttachment',
        qName: 'spine.attachments.RegionAttachment',
        kind: 'class'
    }]
};
spine.attachments.RegionAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'x': {
                    type: 'Number'
                },
                'y': {
                    type: 'Number'
                },
                'scaleX': {
                    type: 'Number'
                },
                'scaleY': {
                    type: 'Number'
                },
                'rotation': {
                    type: 'Number'
                },
                'width': {
                    type: 'Number'
                },
                'height': {
                    type: 'Number'
                },
                'color': {
                    type: 'spine.Color'
                },
                'path': {
                    type: 'String'
                },
                'rendererObject': {
                    type: 'Object'
                },
                'regionOffsetX': {
                    type: 'Number'
                },
                'regionOffsetY': {
                    type: 'Number'
                },
                'regionWidth': {
                    type: 'Number'
                },
                'regionHeight': {
                    type: 'Number'
                },
                'regionOriginalWidth': {
                    type: 'Number'
                },
                'regionOriginalHeight': {
                    type: 'Number'
                },
                'uvs': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'RegionAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.RegionAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'updateOffset': {
                    type: 'void',
                    declaredBy: 'spine.attachments.RegionAttachment'
                },
                'setUVs': {
                    type: 'void',
                    declaredBy: 'spine.attachments.RegionAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'computeWorldVertices': {
                    type: 'void',
                    declaredBy: 'spine.attachments.RegionAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Bone',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.MeshAttachment = function(name) {
    this.color = new spine.Color(1,1,1,1);
    spine.attachments.VertexAttachment.call(this, name)
}
;
goog.inherits(spine.attachments.MeshAttachment, spine.attachments.VertexAttachment);
goog.exportSymbol('spine.attachments.MeshAttachment', spine.attachments.MeshAttachment);
spine.attachments.MeshAttachment.prototype.uvs;
spine.attachments.MeshAttachment.prototype.regionUVs;
spine.attachments.MeshAttachment.prototype.triangles;
spine.attachments.MeshAttachment.prototype.color;
spine.attachments.MeshAttachment.prototype.hullLength = 0;
spine.attachments.MeshAttachment.prototype._parentMesh;
spine.attachments.MeshAttachment.prototype.inheritDeform;
spine.attachments.MeshAttachment.prototype.path;
spine.attachments.MeshAttachment.prototype.rendererObject;
spine.attachments.MeshAttachment.prototype.regionU;
spine.attachments.MeshAttachment.prototype.regionV;
spine.attachments.MeshAttachment.prototype.regionU2;
spine.attachments.MeshAttachment.prototype.regionV2;
spine.attachments.MeshAttachment.prototype.regionRotate;
spine.attachments.MeshAttachment.prototype.regionOffsetX;
spine.attachments.MeshAttachment.prototype.regionOffsetY;
spine.attachments.MeshAttachment.prototype.regionWidth;
spine.attachments.MeshAttachment.prototype.regionHeight;
spine.attachments.MeshAttachment.prototype.regionOriginalWidth;
spine.attachments.MeshAttachment.prototype.regionOriginalHeight;
spine.attachments.MeshAttachment.prototype.edges;
spine.attachments.MeshAttachment.prototype.width;
spine.attachments.MeshAttachment.prototype.height;
spine.attachments.MeshAttachment.prototype.updateUVs = function() {
    var width = this.regionU2 - this.regionU
      , height = this.regionV2 - this.regionV;
    var i = 0
      , n = this.regionUVs.length;
    if (!this.uvs || this.uvs.length != n)
        this.uvs = org.apache.royale.utils.Language.Vector(n, 'Number');
    if (this.regionRotate)
        for (i = 0; i < n; i += 2) {
            this.uvs[i] = this.regionU + this.regionUVs[org.apache.royale.utils.Language._int(i + 1)] * width;
            this.uvs[org.apache.royale.utils.Language._int(i + 1)] = this.regionV + height - this.regionUVs[i] * height
        }
    else
        for (i = 0; i < n; i += 2) {
            this.uvs[i] = this.regionU + this.regionUVs[i] * width;
            this.uvs[org.apache.royale.utils.Language._int(i + 1)] = this.regionV + this.regionUVs[org.apache.royale.utils.Language._int(i + 1)] * height
        }
}
;
spine.attachments.MeshAttachment.prototype.applyDeform = function(sourceAttachment) {
    return this == sourceAttachment || this.inheritDeform && this._parentMesh == sourceAttachment
}
;
spine.attachments.MeshAttachment.prototype.get__parentMesh = function() {
    return this._parentMesh
}
;
spine.attachments.MeshAttachment.prototype.set__parentMesh = function(parentMesh) {
    this._parentMesh = parentMesh;
    if (parentMesh != null) {
        this.bones = parentMesh.bones;
        this.vertices = parentMesh.vertices;
        this.worldVerticesLength = parentMesh.worldVerticesLength;
        this.regionUVs = parentMesh.regionUVs;
        this.triangles = parentMesh.triangles;
        this.hullLength = parentMesh.hullLength;
        this.edges = parentMesh.edges;
        this.width = parentMesh.width;
        this.height = parentMesh.height
    }
}
;
Object.defineProperties(spine.attachments.MeshAttachment.prototype, {
    parentMesh: {
        get: spine.attachments.MeshAttachment.prototype.get__parentMesh,
        set: spine.attachments.MeshAttachment.prototype.set__parentMesh
    }
});
spine.attachments.MeshAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MeshAttachment',
        qName: 'spine.attachments.MeshAttachment',
        kind: 'class'
    }]
};
spine.attachments.MeshAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'uvs': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'regionUVs': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'triangles': {
                    type: 'Vector.\x3cuint\x3e'
                },
                'color': {
                    type: 'spine.Color'
                },
                'hullLength': {
                    type: 'int'
                },
                'inheritDeform': {
                    type: 'Boolean'
                },
                'path': {
                    type: 'String'
                },
                'rendererObject': {
                    type: 'Object'
                },
                'regionU': {
                    type: 'Number'
                },
                'regionV': {
                    type: 'Number'
                },
                'regionU2': {
                    type: 'Number'
                },
                'regionV2': {
                    type: 'Number'
                },
                'regionRotate': {
                    type: 'Boolean'
                },
                'regionOffsetX': {
                    type: 'Number'
                },
                'regionOffsetY': {
                    type: 'Number'
                },
                'regionWidth': {
                    type: 'Number'
                },
                'regionHeight': {
                    type: 'Number'
                },
                'regionOriginalWidth': {
                    type: 'Number'
                },
                'regionOriginalHeight': {
                    type: 'Number'
                },
                'edges': {
                    type: 'Vector.\x3cint\x3e'
                },
                'width': {
                    type: 'Number'
                },
                'height': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'parentMesh': {
                    type: 'spine.attachments.MeshAttachment',
                    access: 'readwrite',
                    declaredBy: 'spine.attachments.MeshAttachment'
                }
            }
        },
        methods: function() {
            return {
                'MeshAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.MeshAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'updateUVs': {
                    type: 'void',
                    declaredBy: 'spine.attachments.MeshAttachment'
                },
                'applyDeform': {
                    type: 'Boolean',
                    declaredBy: 'spine.attachments.MeshAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.attachments.VertexAttachment',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.RouletteView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._getItemData = new pigg.data.puzzle.PuzzleIncentiveItemData;
    this.traceLog('HowToPlayView')
}
;
goog.inherits(pigg.puzzle.view.RouletteView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.RouletteView', pigg.puzzle.view.RouletteView);
pigg.puzzle.view.RouletteView.prototype._main;
pigg.puzzle.view.RouletteView.prototype._container;
pigg.puzzle.view.RouletteView.prototype._backBlackContainer;
pigg.puzzle.view.RouletteView.prototype._black;
pigg.puzzle.view.RouletteView.prototype._isShow;
pigg.puzzle.view.RouletteView.prototype._rouletteFixTilemap;
pigg.puzzle.view.RouletteView.prototype._rouletteObjTilemap;
pigg.puzzle.view.RouletteView.prototype._rouletteTileset;
pigg.puzzle.view.RouletteView.prototype._rouletteFixTile;
pigg.puzzle.view.RouletteView.prototype._rouletteObjTile;
pigg.puzzle.view.RouletteView.prototype._rouletteObj;
pigg.puzzle.view.RouletteView.prototype._rouletteContainer;
pigg.puzzle.view.RouletteView.prototype._iconContainer;
pigg.puzzle.view.RouletteView.prototype._pageCnt = 0;
pigg.puzzle.view.RouletteView.prototype._isRouletteStart;
pigg.puzzle.view.RouletteView.prototype._isRouletteStop;
pigg.puzzle.view.RouletteView.prototype._isPlayRoulette;
pigg.puzzle.view.RouletteView.prototype._rouletteRotateSpeed = 0;
pigg.puzzle.view.RouletteView.prototype._rouletteRotateSpeedLimit = 6;
pigg.puzzle.view.RouletteView.prototype._efSprite;
pigg.puzzle.view.RouletteView.prototype._targetIndex = 5;
pigg.puzzle.view.RouletteView.prototype._targetMax = 8;
pigg.puzzle.view.RouletteView.prototype._getItemData;
pigg.puzzle.view.RouletteView.prototype._isLoadGetItemTnumb = false;
pigg.puzzle.view.RouletteView.prototype._numberFontManager;
pigg.puzzle.view.RouletteView.prototype._rouletteItemGetPanel;
pigg.puzzle.view.RouletteView.prototype._getItemContainer;
pigg.puzzle.view.RouletteView.prototype._getIconView;
pigg.puzzle.view.RouletteView.prototype._getItemNameTxt;
pigg.puzzle.view.RouletteView.prototype._isLoadedParts = false;
pigg.puzzle.view.RouletteView.prototype._loadedRouletteIconCnt = 0;
pigg.puzzle.view.RouletteView.prototype._isLoadedRouletteIcons = false;
pigg.puzzle.view.RouletteView.prototype._stopBtnSpr;
pigg.puzzle.view.RouletteView.prototype._stopBtnTm;
pigg.puzzle.view.RouletteView.prototype._stopBtnDisableTm;
pigg.puzzle.view.RouletteView.prototype._getItemNextBtn;
pigg.puzzle.view.RouletteView.prototype._rouletteParticleView;
pigg.puzzle.view.RouletteView.prototype.clean = function() {}
;
pigg.puzzle.view.RouletteView.prototype.init = function(main) {
    this._main = main;
    this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
    this._numberFontManager.init(this._main);
    this.visible = false;
    this._container = new openfl.display.Sprite;
    this.addChild(this._container);
    this._black = this.makeBackBlack();
    this._container.addChild(this._black);
    this._rouletteContainer = new openfl.display.Sprite;
    this._container.addChild(this._rouletteContainer);
    this._rouletteObj = new openfl.display.Sprite;
    this._rouletteContainer.addChild(this._rouletteObj);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_ROULETTE_PARTS), 'roulette', org.apache.royale.utils.Language.closure(this.onLoadRoulettePng, this, 'onLoadRoulettePng'));
    this._rouletteTileset = new openfl.display.Tileset(null);
    this._rouletteTileset.addRect(new openfl.geom.Rectangle(0,0,600,755));
    this._rouletteTileset.addRect(new openfl.geom.Rectangle(600,0,505,505));
    this._rouletteFixTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT,this._rouletteTileset);
    this._rouletteFixTilemap.addTile(this._rouletteFixTile = new TileBase(0));
    this._rouletteContainer.addChild(this._rouletteFixTilemap);
    this._rouletteObjTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT,this._rouletteTileset);
    this._rouletteObjTilemap.addTile(this._rouletteObjTile = new TileBase(1));
    this._rouletteObjTilemap.x = -252;
    this._rouletteObjTilemap.y = -252;
    this._rouletteObj.addChild(this._rouletteObjTilemap);
    this._rouletteObj.x = 252 + 47;
    this._rouletteObj.y = 252 + 203.5;
    this._rouletteContainer.x = 20;
    this._rouletteContainer.y = 20;
    this._stopBtnSpr = new openfl.display.Sprite;
    this._container.addChild(this._stopBtnSpr);
    this._stopBtnTm = this.makeBtnBg(this._main);
    this._stopBtnSpr.addChild(this._stopBtnTm);
    var tl;
    this._stopBtnTm.addTile(tl = new openfl.display.Tile(this._stopBtnTm.tileset.addRect(new openfl.geom.Rectangle(671,722,138,29))));
    tl.x = 81;
    tl.y = 32;
    this._stopBtnDisableTm = this.makeBtnBg(this._main, 2);
    this._stopBtnSpr.addChild(this._stopBtnDisableTm);
    this._stopBtnDisableTm.addTile(tl = new openfl.display.Tile(this._stopBtnDisableTm.tileset.addRect(new openfl.geom.Rectangle(671,722,138,29))));
    tl.x = 81;
    tl.y = 32;
    this._stopBtnTm.x = -150;
    this._stopBtnTm.y = -50;
    this._stopBtnDisableTm.x = -150;
    this._stopBtnDisableTm.y = -50;
    this._stopBtnSpr.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._stopBtnSpr.y = 840;
    this._stopBtnSpr.scaleX = this._stopBtnSpr.scaleY = 0;
    this.makeIcon();
    this._rouletteParticleView = new pigg.puzzle.view.ParticleView(this._main);
    this._rouletteParticleView.init(640, 600, 1, 4);
    this._rouletteParticleView.x = -20;
    this._rouletteContainer.addChild(this._rouletteParticleView)
}
;
pigg.puzzle.view.RouletteView.prototype.onLoadRoulettePng = function(code, bmd) {
    this._rouletteTileset.bitmapData = bmd;
    this._isLoadedParts = true;
    if (this._isLoadedParts && this._isLoadedRouletteIcons) {
        this._main.hideApiLoading();
        this.show(true)
    }
}
;
pigg.puzzle.view.RouletteView.prototype.makeIcon = function() {
    var cnt = 0
      , len = 0;
    len = this._main.eventData.missionIncentiveSize;
    var emptySpr;
    var quantityTxt;
    var txtSpr;
    var thumbUrl;
    var iconView;
    var coinThumbType = 1;
    this._iconContainer = new openfl.display.Sprite;
    this._rouletteObj.addChild(this._iconContainer);
    this.traceLog('makeItemIcon::', this._main.eventData.missionIncentiveSize);
    for (cnt = 0; cnt < len; cnt++) {
        emptySpr = new openfl.display.Sprite;
        emptySpr.x = 240 * Math.sin(.25 * Math.PI * (len - cnt));
        emptySpr.y = 240 * Math.cos(.25 * Math.PI * (len - cnt));
        emptySpr.rotation = -45 * (len - cnt) - 180;
        if (this._main.eventData.missionItemVec[cnt].itemType == 'asCoin') {
            if (this._main.eventData.missionItemVec[cnt].itemQuantity < 10)
                coinThumbType = 1;
            else if (this._main.eventData.missionItemVec[cnt].itemQuantity <= 100)
                coinThumbType = 2;
            else
                coinThumbType = 3;
            thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/135/pu/puzzle_coin_' + coinThumbType + '.png'
        } else if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + this._main.eventData.missionItemVec[cnt].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._main.eventData.missionItemVec[cnt].itemType, this._main.eventData.missionItemVec[cnt].itemCode, 135);
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.x = -62;
        iconView.hasBg = false;
        emptySpr.addChild(iconView);
        if (this._main.eventData.missionItemVec[cnt].itemQuantity > 1) {
            txtSpr = new openfl.display.Sprite;
            if (this._main.eventData.missionItemVec[cnt].itemType == 'asCoin') {
                this._numberFontManager.makeFontInfo('icon' + cnt, 140, 100, txtSpr, 3647398, 16777215, 80, 30, 7, 'CENTER', false, true);
                this._numberFontManager.makeNumber('icon' + cnt, this._main.eventData.missionItemVec[cnt].itemQuantity);
                txtSpr.x = -55;
                txtSpr.y = 70
            } else {
                this._numberFontManager.makeFontInfo('icon' + cnt, 100, 100, txtSpr, 3355443, 3355443, 50, 30, 5, 'CENTER', true);
                this._numberFontManager.makeNumber('icon' + cnt, this._main.eventData.missionItemVec[cnt].itemQuantity);
                txtSpr.x = -25;
                txtSpr.y = 90
            }
            emptySpr.addChild(txtSpr)
        }
        this._iconContainer.addChild(emptySpr);
        this._main.loadDataManager.loadPng(thumbUrl, this._main.eventData.missionItemVec[cnt].itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'), [org.apache.royale.utils.Language.closure(this.onLoadRouletteIcon, this, 'onLoadRouletteIcon')]);
        if (cnt == 0) {
            this._getItemData.itemIndex = cnt;
            this._getItemData.itemCode = org.apache.royale.utils.Language.string(this._main.eventData.missionItemVec[cnt].itemCode);
            this._getItemData.itemName = org.apache.royale.utils.Language.string(this._main.eventData.missionItemVec[cnt].itemName);
            this._getItemData.itemType = org.apache.royale.utils.Language.string(this._main.eventData.missionItemVec[cnt].itemType);
            this._getItemData.itemQuantity = Number(this._main.eventData.missionItemVec[cnt].itemQuantity)
        }
    }
    this._iconContainer.rotation = 180
}
;
pigg.puzzle.view.RouletteView.prototype.onLoadRouletteIcon = function() {
    this.traceLog('onLoadRouletteIcon::', this._loadedRouletteIconCnt);
    this._loadedRouletteIconCnt++;
    if (this._loadedRouletteIconCnt == 8)
        this._isLoadedRouletteIcons = true;
    if (this._isLoadedParts && this._isLoadedRouletteIcons) {
        this._main.hideApiLoading();
        this.show(true)
    }
}
;
pigg.puzzle.view.RouletteView.prototype.show = function(init) {
    init = typeof init !== 'undefined' ? init : false;
    this._stopBtnSpr.visible = true;
    this._stopBtnTm.visible = false;
    this._stopBtnDisableTm.visible = true;
    this._stopBtnSpr.scaleX = this._stopBtnSpr.scaleY = 0;
    this.visible = true;
    this._isShow = true;
    if (init)
        this._black.alpha = 1;
    else {
        this._black.alpha = 0;
        com.greensock.TweenMax.to(this._black, .2, {
            alpha: 1
        })
    }
    this._rouletteObj.rotation = 0;
    this._rouletteContainer.visible = true;
    if (!this._rouletteContainer.cacheAsBitmap)
        this._rouletteContainer.cacheAsBitmap = true;
    this._rouletteContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    com.greensock.TweenMax.to(this._rouletteContainer, 1, {
        delay: .2,
        y: 20,
        ease: com.greensock.easing.Expo.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.startRoulette, this, 'startRoulette')
    })
}
;
pigg.puzzle.view.RouletteView.prototype.hide = function(e) {
    e = typeof e !== 'undefined' ? e : null;
    this.visible = false;
    this._isShow = false
}
;
pigg.puzzle.view.RouletteView.prototype.itemGetPanelMD = function(e) {
    this.traceLog('RouletteView::panelMD', this.mouseX, this.mouseY);
    if (this.mouseX > 220 && this.mouseX < 420 && this.mouseY > 580 && this.mouseY < 610)
        this.moveToAboutItem()
}
;
pigg.puzzle.view.RouletteView.prototype.startRoulette = function() {
    com.greensock.TweenMax.to(this._stopBtnSpr, .5, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Back.easeOut
    });
    this._rouletteContainer.cacheAsBitmap = false;
    this._isPlayRoulette = true;
    this._isRouletteStart = true;
    this._isRouletteStop = false;
    this._rouletteRotateSpeed = 0;
    this._rotationZ = this._rouletteObj.rotation = 0;
    this.addEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.enterFrame, this, 'enterFrame'));
    this._main.isEnterFrameAnimation = true;
    this._main.playSE(pigg.puzzle.data.CommonData.SE_ROULETTE_ROTATION)
}
;
pigg.puzzle.view.RouletteView.prototype.stopRouletteMD = function(e) {
    this.btnDownAction(this._stopBtnSpr)
}
;
pigg.puzzle.view.RouletteView.prototype.stopRoulette = function(e) {
    this.traceLog('stopRoulette\u9001\u4fe1');
    this._main.loadDataManager.stopRoulette();
    this._stopBtnTm.visible = false;
    this._stopBtnDisableTm.visible = true;
    this._stopBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.stopRoulette, this, 'stopRoulette'));
    this._stopBtnSpr.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.stopRouletteMD, this, 'stopRouletteMD'))
}
;
pigg.puzzle.view.RouletteView.prototype.onStopRoulette = function(data) {
    this.traceLog('onStopRoulette');
    this._isRouletteStop = true;
    this._getItemData.itemIndex = data.itemIndex;
    this._getItemData.itemCode = data.itemCode;
    this._getItemData.itemName = data.itemName;
    this._getItemData.itemType = data.itemType;
    this._getItemData.itemQuantity = data.itemQuantity;
    this.traceLog('onStopRoulette::\u53d7\u4fe1', this._getItemData.itemIndex);
    this.traceLog('onStopRoulette::\u53d7\u4fe1', this._getItemData.itemCode);
    this.traceLog('onStopRoulette::\u53d7\u4fe1', this._getItemData.itemName);
    this.traceLog('onStopRoulette::\u53d7\u4fe1', this._getItemData.itemType);
    if (this._getItemData.itemIndex == 0)
        this._targetIndex = 8;
    else
        this._targetIndex = this._getItemData.itemIndex
}
;
pigg.puzzle.view.RouletteView.prototype.endRoulette = function() {
    var self = this;
    var __localFn0__ = function() {
        self._stopBtnSpr.visible = false;
        self._rouletteContainer.visible = false;
        self.showRouletteItemGetPanel()
    };
    this.traceLog('endRoulette');
    this._main.playSE(pigg.puzzle.data.CommonData.SE_ROULETTE_END);
    this._rouletteParticleView.makeRouletteStopParticle();
    com.greensock.TweenMax.to(this, 1.2, {
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.RouletteView.prototype._rotationZ = 0;
pigg.puzzle.view.RouletteView.prototype.enterFrame = function(e) {
    if (this._isRouletteStart)
        if (this._rouletteRotateSpeed < this._rouletteRotateSpeedLimit)
            this._rouletteRotateSpeed += .5;
        else {
            this._isRouletteStart = false;
            this._stopBtnTm.visible = true;
            this._stopBtnDisableTm.visible = false;
            this._stopBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.stopRoulette, this, 'stopRoulette'));
            this._stopBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.stopRouletteMD, this, 'stopRouletteMD'))
        }
    if (this._isRouletteStop)
        if (this._rotationZ > (this._targetMax - this._targetIndex) * 45 - 22.5 && this._rotationZ < (this._targetMax - this._targetIndex) * 45 + 22.5) {
            var diffRot = (this._targetMax - this._targetIndex) * 45 - this._rotationZ;
            this._isPlayRoulette = false;
            this._isRouletteStop = false;
            this.removeEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.enterFrame, this, 'enterFrame'));
            this._main.isEnterFrameAnimation = false;
            var cr = this._rotationZ;
            this._rotationZ += this._rouletteRotateSpeed;
            this._rouletteObj.rotation = this._rotationZ;
            com.greensock.TweenMax.to(this._rouletteObj, 3, {
                rotation: cr + 360 + diffRot,
                ease: com.greensock.easing.Power2.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.endRoulette, this, 'endRoulette')
            })
        }
    if (this._isPlayRoulette) {
        if (this._rotationZ <= 360 - this._rouletteRotateSpeedLimit * 2)
            this._rotationZ += this._rouletteRotateSpeed;
        else
            this._rotationZ = 0;
        this._rouletteObj.rotation = this._rotationZ
    }
}
;
pigg.puzzle.view.RouletteView.prototype._bgTileset;
pigg.puzzle.view.RouletteView.prototype._itemTitleNormalTile;
pigg.puzzle.view.RouletteView.prototype._itemTitleRareTile;
pigg.puzzle.view.RouletteView.prototype._itemRareTxt;
pigg.puzzle.view.RouletteView.prototype._itemGetTxt;
pigg.puzzle.view.RouletteView.prototype._incentiveParticleView;
pigg.puzzle.view.RouletteView.prototype._itemGetCoinQuantityTxt;
pigg.puzzle.view.RouletteView.prototype.showRouletteItemGetPanel = function() {
    var self = this;
    var __localFn0__ = function() {
        self._getItemNextBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(self.getItemNextMD, self, 'getItemNextMD'));
        self._getItemNextBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.getItemNextCL, self, 'getItemNextCL'))
    };
    var thumbUrl;
    var coinThumbType = 1;
    if (this._rouletteItemGetPanel == null) {
        this._rouletteItemGetPanel = new openfl.display.Sprite;
        this._container.addChild(this._rouletteItemGetPanel);
        this._getItemContainer = new openfl.display.Sprite;
        this._rouletteItemGetPanel.addChild(this._getItemContainer);
        var bgTilemap = new openfl.display.Tilemap(584,610,this._rouletteTileset);
        this._getItemContainer.addChild(bgTilemap);
        bgTilemap.addTile(new openfl.display.Tile(this._rouletteTileset.addRect(new openfl.geom.Rectangle(1108,0,584,610))));
        var tl;
        bgTilemap.addTile(this._itemTitleNormalTile = new openfl.display.Tile(this._rouletteTileset.addRect(new openfl.geom.Rectangle(604,510,411,75))));
        bgTilemap.addTile(this._itemTitleRareTile = new openfl.display.Tile(this._rouletteTileset.addRect(new openfl.geom.Rectangle(604,585,411,82))));
        bgTilemap.addTile(this._itemGetTxt = new openfl.display.Tile(this._rouletteTileset.addRect(new openfl.geom.Rectangle(604,667,202,35))));
        bgTilemap.addTile(this._itemRareTxt = new openfl.display.Tile(this._rouletteTileset.addRect(new openfl.geom.Rectangle(810,667,60,33))));
        this._itemTitleNormalTile.x = 84;
        this._itemTitleNormalTile.y = 46;
        this._itemTitleRareTile.x = 84;
        this._itemTitleRareTile.y = 46;
        this._itemGetTxt.x = 220;
        this._itemGetTxt.y = 127;
        this._itemRareTxt.x = 166;
        this._itemRareTxt.y = 129;
        this._getItemContainer.x = -(584 / 2);
        this._getItemContainer.y = -(610 / 2);
        this._getIconView = new pigg.puzzle.view.IconView(this._main);
        this._getIconView.init();
        this._getIconView.hasBg = false;
        this._getIconView.isPlus = false;
        this._getIconView.isIncentive = true;
        this._getItemContainer.addChild(this._getIconView);
        this._getIconView.x = 300 - 189 / 2;
        this._getIconView.y = 270 - 189 / 2;
        this._getIconView.scaleX = this._getIconView.scaleY = 1.4;
        this._getItemNameTxt = this.makeTextField(20, 6960914, openfl.text.TextFormatAlign.CENTER);
        this._getItemNameTxt.x = 132;
        this._getItemNameTxt.y = 374;
        this._getItemNameTxt.width = 330;
        this._getItemNameTxt.wordWrap = true;
        this._getItemContainer.addChild(this._getItemNameTxt);
        var btnTilemap = this.makeBtnBg(this._main, 0, 300);
        btnTilemap.addTile(tl = new openfl.display.Tile(btnTilemap.tileset.addRect(new openfl.geom.Rectangle(607,722,62,29))));
        tl.x = 119;
        tl.y = 35;
        this._getItemNextBtn = new openfl.display.Sprite;
        btnTilemap.x = -150;
        btnTilemap.y = -50;
        this._getItemNextBtn.addChild(btnTilemap);
        this._getItemNextBtn.x = 142 + 150;
        this._getItemNextBtn.y = 480 + 50;
        this._getItemContainer.addChild(this._getItemNextBtn);
        this._rouletteItemGetPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        this._rouletteItemGetPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
        this._rouletteItemGetPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.itemGetPanelMD, this, 'itemGetPanelMD'));
        if (this._getItemData.itemType == 'asCoin') {
            this._itemGetCoinQuantityTxt = new openfl.display.Sprite;
            this._getItemContainer.addChild(this._itemGetCoinQuantityTxt);
            this._itemGetCoinQuantityTxt.x = 237;
            this._itemGetCoinQuantityTxt.y = 250;
            this._numberFontManager.makeFontInfo('getCoinTxt', 140, 100, this._itemGetCoinQuantityTxt, 3647398, 16777215, 80, 30, 7, 'CENTER', false, true)
        }
    }
    if (this._targetIndex == 8) {
        this._itemGetTxt.x = 220;
        this._itemRareTxt.visible = true;
        this._itemTitleRareTile.visible = true;
        this._itemTitleNormalTile.visible = false
    } else {
        this._itemGetTxt.x = 192;
        this._itemRareTxt.visible = false;
        this._itemTitleRareTile.visible = false;
        this._itemTitleNormalTile.visible = true
    }
    if (this._main.isParticle && !this._main.isLowSpecMode) {
        if (this._incentiveParticleView == null) {
            this._incentiveParticleView = new pigg.puzzle.view.ParticleView(this._main);
            this._incentiveParticleView.init(640, 840);
            this._incentiveParticleView.x = -(pigg.puzzle.view.CommonView.STAGE_WIDTH / 2);
            this._incentiveParticleView.y = -(pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2) + 100;
            this._rouletteItemGetPanel.addChild(this._incentiveParticleView)
        }
        this._incentiveParticleView.makeIncentiveConfetti(320, 300)
    }
    if (this._getItemData.itemType == 'asCoin') {
        if (this._getItemData.itemQuantity < 10)
            coinThumbType = 1;
        else if (this._getItemData.itemQuantity <= 100)
            coinThumbType = 2;
        else
            coinThumbType = 3;
        thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/135/pu/puzzle_coin_' + coinThumbType + '.png';
        this._numberFontManager.makeNumber('getCoinTxt', this._getItemData.itemQuantity)
    } else {
        this._getIconView.quantity = this._getItemData.itemQuantity;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + this._getItemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._getItemData.itemType, this._getItemData.itemCode, 135)
    }
    this._main.loadDataManager.loadPng(thumbUrl, this._getItemData.itemCode, org.apache.royale.utils.Language.closure(this._getIconView.setIconData, this._getIconView, 'setIconData'));
    this._getItemNameTxt.text = this._getItemData.itemName;
    this._rouletteItemGetPanel.visible = true;
    this._rouletteItemGetPanel.scaleX = this._rouletteItemGetPanel.scaleY = 1.2;
    com.greensock.TweenMax.killTweensOf(this._rouletteItemGetPanel);
    com.greensock.TweenMax.to(this._rouletteItemGetPanel, .75, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.2, .4),
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.RouletteView.prototype.onLoadRouletteGetPng = function(code, bmd) {
    this._bgTileset.bitmapData = bmd
}
;
pigg.puzzle.view.RouletteView.prototype.getItemNextMD = function(e) {
    this.btnDownAction(this._getItemNextBtn)
}
;
pigg.puzzle.view.RouletteView.prototype.getItemNextCL = function(e) {
    var self = this;
    var __localFn0__ = function() {
        self._rouletteItemGetPanel.visible = false;
        self.hide();
        self._main.hideRoulette()
    };
    this._getItemNextBtn.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.getItemNextMD, this, 'getItemNextMD'));
    this._getItemNextBtn.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.getItemNextCL, this, 'getItemNextCL'));
    com.greensock.TweenMax.to(this._black, .2, {
        alpha: 0
    });
    com.greensock.TweenMax.to(this._rouletteItemGetPanel, .2, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.RouletteView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.RouletteView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
Object.defineProperties(pigg.puzzle.view.RouletteView.prototype, {
    isShow: {
        get: pigg.puzzle.view.RouletteView.prototype.get__isShow,
        set: pigg.puzzle.view.RouletteView.prototype.set__isShow
    }
});
pigg.puzzle.view.RouletteView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'RouletteView',
        qName: 'pigg.puzzle.view.RouletteView',
        kind: 'class'
    }]
};
pigg.puzzle.view.RouletteView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                }
            }
        },
        methods: function() {
            return {
                'RouletteView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'onLoadRoulettePng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'onLoadRouletteIcon': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: true
                        }]
                    }
                },
                'startRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'stopRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'onStopRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleIncentiveItemData',
                            optional: false
                        }]
                    }
                },
                'endRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'showRouletteItemGetPanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView'
                },
                'onLoadRouletteGetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RouletteView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.RankingIncentiveView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._incentiveTilePosArray = [];
    this.RECT_AWARD_TELOP = [];
    this.traceLog('RankingIncentiveView')
}
;
goog.inherits(pigg.puzzle.view.RankingIncentiveView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.RankingIncentiveView', pigg.puzzle.view.RankingIncentiveView);
pigg.puzzle.view.RankingIncentiveView.prototype._fontNumberManager;
pigg.puzzle.view.RankingIncentiveView.prototype._eventInfoScrollView;
pigg.puzzle.view.RankingIncentiveView.prototype._eventInfoScrollContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._eventInfoScrollTitleTilemap;
pigg.puzzle.view.RankingIncentiveView.prototype._eventInfoView;
pigg.puzzle.view.RankingIncentiveView.prototype._backBlack;
pigg.puzzle.view.RankingIncentiveView.prototype._isShow = false;
pigg.puzzle.view.RankingIncentiveView.prototype._container;
pigg.puzzle.view.RankingIncentiveView.prototype._loadDataManager;
pigg.puzzle.view.RankingIncentiveView.prototype._eventData;
pigg.puzzle.view.RankingIncentiveView.prototype._main;
pigg.puzzle.view.RankingIncentiveView.prototype._incentiveCount = 0;
pigg.puzzle.view.RankingIncentiveView.prototype._eventTilemap;
pigg.puzzle.view.RankingIncentiveView.prototype._rankTileset;
pigg.puzzle.view.RankingIncentiveView.prototype._base;
pigg.puzzle.view.RankingIncentiveView.prototype._bgScore;
pigg.puzzle.view.RankingIncentiveView.prototype._bgWinning;
pigg.puzzle.view.RankingIncentiveView.prototype._scoreIncentiveContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._scoreIncentiveTxtContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._scoreIncentiveIconContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._scoreIncentiveTilemap;
pigg.puzzle.view.RankingIncentiveView.prototype._winningIncentiveContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._winningIncentiveTxtContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._winningIncentiveIconContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._winningIncentiveTilemap;
pigg.puzzle.view.RankingIncentiveView.prototype._currentDispType = '';
pigg.puzzle.view.RankingIncentiveView.prototype._waitInitDispType = '';
pigg.puzzle.view.RankingIncentiveView.prototype._infoContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._infoTxts;
pigg.puzzle.view.RankingIncentiveView.prototype._limitedInfoView;
pigg.puzzle.view.RankingIncentiveView.prototype._limitedInfoScrollView;
pigg.puzzle.view.RankingIncentiveView.prototype._limitedIncentiveContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._switchButtonContainer;
pigg.puzzle.view.RankingIncentiveView.prototype._incentiveTilePosArray;
pigg.puzzle.view.RankingIncentiveView.prototype._showStepMode = -1;
pigg.puzzle.view.RankingIncentiveView.prototype._currentScrollPos = -1;
pigg.puzzle.view.RankingIncentiveView.prototype._this;
pigg.puzzle.view.RankingIncentiveView.prototype._isInit = false;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_AWARD_TELOP;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_SCORE_BG_LEFT = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_SCORE_BG_RIGHT = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_SCORE_BG_CENTER = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_WINNING_BG_LEFT = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_WINNING_BG_RIGHT = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.RECT_SPECIAL_WINNING_BG_CENTER = 0;
pigg.puzzle.view.RankingIncentiveView.prototype._targetAward = -1;
pigg.puzzle.view.RankingIncentiveView.prototype.init = function(main, loadDataManager, rankType, award) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    award = typeof award !== 'undefined' ? award : -1;
    this.traceLog('RankingIncentiveView::init');
    this._isInit = true;
    this._main = main;
    this._container = this.makeContainer();
    this._loadDataManager = loadDataManager;
    this._waitInitDispType = rankType;
    this._targetAward = award;
    this._backBlack = this.makeBackBlack();
    this._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
    this._backBlack.alpha = 0;
    this._container.addChild(this._backBlack);
    this._fontNumberManager = new pigg.puzzle.manager.NumberFontManager;
    this._fontNumberManager.init(this._main);
    this._eventInfoView = new openfl.display.Sprite;
    this._container.addChild(this._eventInfoView);
    this._eventInfoView.x = 71;
    this._eventInfoView.y = 101;
    this.initBase();
    this.addChild(this._container);
    this.traceLog('\u3053\u3063\u3061\u306e', this);
    this._this = this;
    this._this.visible = false
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.initBase = function() {
    this._rankTileset = this._main.rankingPartsTileset.clone();
    var cnt = 0
      , len = 0;
    len = 8;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_AWARD_TELOP.push(this._rankTileset.addRect(new openfl.geom.Rectangle(1333,1 + 45 * cnt,412,44)));
    this.RECT_SPECIAL_SCORE_BG_LEFT = this._rankTileset.addRect(new openfl.geom.Rectangle(1365,752,138,124));
    this.RECT_SPECIAL_SCORE_BG_RIGHT = this._rankTileset.addRect(new openfl.geom.Rectangle(1503,752,12,124));
    this.RECT_SPECIAL_SCORE_BG_CENTER = this._rankTileset.addRect(new openfl.geom.Rectangle(1502,752,1,124));
    this.RECT_SPECIAL_WINNING_BG_LEFT = this._rankTileset.addRect(new openfl.geom.Rectangle(1516,752,138,124));
    this.RECT_SPECIAL_WINNING_BG_RIGHT = this._rankTileset.addRect(new openfl.geom.Rectangle(1654,752,12,124));
    this.RECT_SPECIAL_WINNING_BG_CENTER = this._rankTileset.addRect(new openfl.geom.Rectangle(1653,752,1,124));
    this._base = new openfl.display.Sprite;
    var tilemap = new openfl.display.Tilemap(498,636,this._rankTileset);
    this._base.addChild(tilemap);
    var tl;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1684,361,20,636))));
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1704,361,20,636))));
    tl.x = 478;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1703,361,1,636))));
    tl.x = 20;
    tl.scaleX = 458;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1271,495,259,36))));
    tl.x = 120;
    tl.y = 22;
    this._bgScore = new openfl.display.Tilemap(454,521,this._rankTileset);
    this._base.addChild(this._bgScore);
    this._bgScore.addTile(new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,974,454,50))));
    this._bgScore.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,1024,454,1))));
    tl.y = 50;
    tl.scaleY = 461;
    this._bgScore.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,1064,454,10))));
    tl.y = 511;
    this._bgScore.x = 23;
    this._bgScore.y = 75;
    this._bgWinning = new openfl.display.Tilemap(454,521,this._rankTileset);
    this._base.addChild(this._bgWinning);
    this._bgWinning.addTile(new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,974,454,50))));
    this._bgWinning.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,1024,454,1))));
    tl.y = 50;
    tl.scaleY = 461;
    this._bgWinning.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,1064,454,10))));
    tl.y = 511;
    this._bgWinning.x = 23;
    this._bgWinning.y = 75;
    this._bgWinning.visible = false;
    this._eventInfoView.addChild(this._base);
    this._eventInfoScrollContainer = new openfl.display.Sprite;
    this._eventInfoView.addChild(this._eventInfoScrollContainer);
    this._eventInfoScrollView = new pigg.puzzle.view.ScrollView;
    this._eventInfoScrollView.init(454, 483, 454 - 26, 447, 12, 15);
    this._eventInfoScrollContainer.x = 22;
    this._eventInfoScrollContainer.y = 126;
    this._eventInfoScrollView.isCache = false;
    this._eventInfoScrollContainer.addChild(this._eventInfoScrollView);
    this.makeIncentiveData();
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 448;
    closeBtn.y = 7;
    this._base.addChild(closeBtn)
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.baseCL = function(e) {
    if (this.mouseX > 320 && this.mouseX < 505 && this.mouseY > 45 && this.mouseY < 85)
        openfl.net.navigateToURL(new openfl.net.URLRequest(this._main.eventData.detailURL), '_blank')
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.onLoadPng = function(code, bmd, container) {
    container = typeof container !== 'undefined' ? container : null
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.makeIncentiveData = function() {
    var spr = new openfl.display.Sprite;
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0
      , cnt3 = 0
      , len3 = 0;
    var eventRankData;
    var itemData;
    var stepPointTxt;
    var itemNameTxt;
    var stepFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,20);
    var itemFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,24);
    var thumbUrl;
    var iconView;
    var stepTile;
    var addX = 0;
    var interval = 54;
    this.traceLog('makeIncentiveData', this._main);
    this.traceLog('makeIncentiveData', this._main.eventData);
    if (this._main == null)
        return;
    if (this._main.eventData == null)
        return;
    var dg = 0;
    var point = 0;
    var tilemap;
    var tl;
    var txtContainer;
    var iconContainer;
    var incentiveContainer;
    var incentiveTilemap;
    var rangeTxt;
    var mainData;
    len = 8;
    for (cnt3 = 0; cnt3 < 2; cnt3++) {
        this._incentiveCount = 0;
        addX = 0;
        if (cnt3 == 0) {
            mainData = this._main.eventData.pointRankingData.concat();
            this._scoreIncentiveTilemap = new openfl.display.Tilemap(420,109,this._rankTileset);
            this._scoreIncentiveContainer = new openfl.display.Sprite;
            this._scoreIncentiveTxtContainer = new openfl.display.Sprite;
            this._scoreIncentiveIconContainer = new openfl.display.Sprite;
            this._scoreIncentiveContainer.addChild(this._scoreIncentiveIconContainer);
            this._scoreIncentiveContainer.addChild(this._scoreIncentiveTxtContainer);
            this._scoreIncentiveIconContainer.addChild(this._scoreIncentiveTilemap);
            this._scoreIncentiveTilemap.x = 2;
            txtContainer = this._scoreIncentiveTxtContainer;
            iconContainer = this._scoreIncentiveIconContainer;
            incentiveContainer = this._scoreIncentiveContainer;
            incentiveTilemap = this._scoreIncentiveTilemap
        } else {
            mainData = this._main.eventData.winningRankingData.concat();
            this._winningIncentiveTilemap = new openfl.display.Tilemap(420,109,this._rankTileset);
            this._winningIncentiveContainer = new openfl.display.Sprite;
            this._winningIncentiveTxtContainer = new openfl.display.Sprite;
            this._winningIncentiveIconContainer = new openfl.display.Sprite;
            this._winningIncentiveContainer.addChild(this._winningIncentiveIconContainer);
            this._winningIncentiveContainer.addChild(this._winningIncentiveTxtContainer);
            this._winningIncentiveIconContainer.addChild(this._winningIncentiveTilemap);
            this._winningIncentiveTilemap.x = 2;
            txtContainer = this._winningIncentiveTxtContainer;
            iconContainer = this._winningIncentiveIconContainer;
            incentiveContainer = this._winningIncentiveContainer;
            incentiveTilemap = this._winningIncentiveTilemap
        }
        mainData.reverse();
        for (cnt = 0; cnt < len; cnt++) {
            if (cnt >= 1)
                addX = cnt * 4;
            eventRankData = mainData[cnt];
            incentiveTilemap.addTile(stepTile = new openfl.display.Tile(this.RECT_AWARD_TELOP[7 - cnt]));
            stepTile.x = 4;
            stepTile.y = 4 + this._incentiveCount * 127 + cnt * interval + addX;
            this._incentiveTilePosArray.push(stepTile.y - 4);
            this.traceLog('_incentiveTilePosArray::', cnt, '::', this._incentiveTilePosArray[cnt]);
            rangeTxt = this.makeTextField(22, 8994560, openfl.text.TextFormatAlign.RIGHT);
            txtContainer.addChild(rangeTxt);
            if (eventRankData.rankRangeEnd != -1)
                rangeTxt.text = String(eventRankData.rankRangeStart) + '\u4f4d\u301c' + String(eventRankData.rankRangeEnd) + '\u4f4d\n ';
            else
                rangeTxt.text = String(eventRankData.rankRangeStart) + '\u4f4d\u301c\n ';
            rangeTxt.x = 306;
            rangeTxt.y = stepTile.y + 3;
            if (AsData.ua > 1)
                rangeTxt.y = stepTile.y + 7 + 3;
            len2 = eventRankData.rankingIncentive.length;
            for (cnt2 = 0; cnt2 < len2; cnt2++) {
                itemData = eventRankData.rankingIncentive[cnt2];
                iconView = new pigg.puzzle.view.IconView(this._main);
                iconView.quantity = itemData.itemQuantity;
                this.traceLog('_main.isLocal::', this._main.isLocal);
                if (this._main.isLocal)
                    thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
                else
                    thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
                this._loadIncentivePngCnt++;
                this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'), [org.apache.royale.utils.Language.closure(this.addIncentivePngCnt, this, 'addIncentivePngCnt')]);
                iconView.x = 2;
                iconView.y = this._incentiveCount * 127 + (cnt + 1) * interval + addX;
                iconContainer.addChild(iconView);
                if (itemData.isRankingSpecial) {
                    iconView.isSpecial = true;
                    tilemap = new openfl.display.Tilemap(424,124,this._rankTileset);
                    iconView.addChildAt(tilemap, 0);
                    if (cnt3 == 0) {
                        tilemap.addTile(new openfl.display.Tile(this.RECT_SPECIAL_SCORE_BG_LEFT));
                        tilemap.addTile(tl = new openfl.display.Tile(this.RECT_SPECIAL_SCORE_BG_RIGHT));
                        tl.x = 411;
                        tilemap.addTile(tl = new openfl.display.Tile(this.RECT_SPECIAL_SCORE_BG_CENTER));
                        tl.x = 138;
                        tl.scaleX = 273
                    } else if (cnt3 == 1) {
                        tilemap.addTile(new openfl.display.Tile(this.RECT_SPECIAL_WINNING_BG_LEFT));
                        tilemap.addTile(tl = new openfl.display.Tile(this.RECT_SPECIAL_WINNING_BG_RIGHT));
                        tl.x = 411;
                        tilemap.addTile(tl = new openfl.display.Tile(this.RECT_SPECIAL_WINNING_BG_CENTER));
                        tl.x = 138;
                        tl.scaleX = 273
                    }
                }
                itemNameTxt = new openfl.text.TextField;
                itemNameTxt.setTextFormat(itemFormat);
                itemNameTxt.textColor = 8994560;
                itemNameTxt.selectable = false;
                itemNameTxt.wordWrap = true;
                itemNameTxt.width = 280;
                itemNameTxt.height = 120;
                itemNameTxt.text = itemData.itemName + '\n\u3000';
                itemNameTxt.x = 135;
                itemNameTxt.y = this._incentiveCount * 127 + (cnt + 1) * interval + 13 + addX;
                itemNameTxt.y += (4 - itemNameTxt.numLines) * 12;
                if (AsData.ua > 1)
                    itemNameTxt.y += 3;
                txtContainer.addChild(itemNameTxt);
                this._incentiveCount++
            }
        }
        incentiveTilemap.height = incentiveContainer.height;
        this._eventInfoScrollView.setContent(incentiveContainer)
    }
}
;
pigg.puzzle.view.RankingIncentiveView.prototype._loadIncentivePngCnt = 0;
pigg.puzzle.view.RankingIncentiveView.prototype._loadedIncentivePngCnt = 0;
pigg.puzzle.view.RankingIncentiveView.prototype.addIncentivePngCnt = function() {
    this._loadedIncentivePngCnt++;
    this.traceLog('\u8aad\u307f\u8fbc\u307f\u4e2d', this._loadIncentivePngCnt, this._loadedIncentivePngCnt);
    if (this._loadIncentivePngCnt == this._loadedIncentivePngCnt) {
        this.traceLog('\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86');
        this.show(this._waitInitDispType, this._targetAward);
        this._main.hideApiLoading()
    }
    this.traceLog('addIncentivePngCnt::', this._loadIncentivePngCnt)
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.show = function(rankingType, award) {
    var self = this;
    rankingType = typeof rankingType !== 'undefined' ? rankingType : 'score';
    award = typeof award !== 'undefined' ? award : -1;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._eventInfoView.cacheAsBitmap = false
        };
        var __localFn1__ = function() {
            self._eventInfoView.cacheAsBitmap = false
        };
        self._eventInfoView.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.panelMD, self, 'panelMD'));
        if (self._main.appType == 'mypage')
            com.greensock.TweenMax.to(self._eventInfoView, .4, {
                delay: .1,
                y: 101,
                ease: com.greensock.easing.Back.easeOut,
                onComplete: __localFn0__
            });
        else if (self._main.appType == 'game')
            com.greensock.TweenMax.to(self._eventInfoView, .4, {
                delay: .1,
                y: 153,
                ease: com.greensock.easing.Back.easeOut,
                onComplete: __localFn1__
            })
    };
    this.traceLog('show::::', this._isShow, org.apache.royale.utils.Language.closure(this.show, this, 'show'));
    this._targetAward = award;
    this._this.visible = true;
    this._isShow = true;
    this._backBlack.visible = true;
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 1
    });
    if (rankingType == 'score')
        if (this._targetAward != -1)
            this._eventInfoScrollView.updatePosition(-this._incentiveTilePosArray[8 - this._targetAward], false);
        else {
            if (this._main.currentScoreAward != -1)
                this._eventInfoScrollView.updatePosition(-this._incentiveTilePosArray[8 - this._main.currentScoreAward], false)
        }
    else if (rankingType == 'winning_streak')
        if (this._targetAward != -1)
            this._eventInfoScrollView.updatePosition(-this._incentiveTilePosArray[8 - this._targetAward], false);
        else if (this._main.currentWinningAward != -1)
            this._eventInfoScrollView.updatePosition(-this._incentiveTilePosArray[8 - this._main.currentWinningAward], false);
    if (this._waitInitDispType != '')
        this.switchRankType(this._waitInitDispType);
    else
        this.switchRankType(rankingType);
    com.greensock.TweenMax.killTweensOf(this._eventInfoView);
    com.greensock.TweenMax.to(this._eventInfoView, .1, {
        onComplete: __localFn0__
    });
    this._waitInitDispType = ''
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.hide = function() {
    var self = this;
    var __localFn0__ = function() {
        self._eventInfoView.cacheAsBitmap = false;
        self._this.visible = false;
        self._isShow = false
    };
    com.greensock.TweenMax.killTweensOf(this._eventInfoView);
    com.greensock.TweenMax.killTweensOf(this._backBlack);
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 0
    });
    var tarY = 0;
    if (this._main.appType == 'game')
        tarY = pigg.puzzle.view.CommonView.STAGE_HEIGHT + 40;
    else
        tarY = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT + 40;
    com.greensock.TweenMax.to(this._eventInfoView, .3, {
        y: tarY,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    });
    this._eventInfoView.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.panelMD, this, 'panelMD'))
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.closeMD = function(e) {
    this.hide()
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.panelMD = function(e) {
    if (this._currentDispType == 'winning_streak' && e.currentTarget.mouseX > 20 && e.currentTarget.mouseX < 250 && e.currentTarget.mouseY > 70 && e.currentTarget.mouseY < 125)
        this.switchRankType('score');
    else if (this._currentDispType == 'score' && e.currentTarget.mouseX > 255 && e.currentTarget.mouseX < 475 && e.currentTarget.mouseY > 70 && e.currentTarget.mouseY < 125)
        this.switchRankType('winning_streak')
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.switchRankType = function(rankType) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    this.traceLog('RankingIncentive:::::switchRankType::', rankType, this._currentDispType);
    if (rankType == this._currentDispType)
        return;
    this._currentDispType = rankType;
    if (rankType == 'score') {
        this._eventInfoScrollView.stopTween();
        this._bgScore.visible = true;
        this._bgWinning.visible = false;
        this._scoreIncentiveContainer.visible = true;
        this._winningIncentiveContainer.visible = false
    } else if (rankType == 'winning_streak') {
        this._eventInfoScrollView.stopTween();
        this._bgScore.visible = false;
        this._bgWinning.visible = true;
        this._scoreIncentiveContainer.visible = false;
        this._winningIncentiveContainer.visible = true
    }
}
;
pigg.puzzle.view.RankingIncentiveView.prototype.get__isShow = function() {
    return this._isShow
}
;
Object.defineProperties(pigg.puzzle.view.RankingIncentiveView.prototype, {
    isShow: {
        get: pigg.puzzle.view.RankingIncentiveView.prototype.get__isShow
    }
});
pigg.puzzle.view.RankingIncentiveView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'RankingIncentiveView',
        qName: 'pigg.puzzle.view.RankingIncentiveView',
        kind: 'class'
    }]
};
pigg.puzzle.view.RankingIncentiveView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView'
                }
            }
        },
        methods: function() {
            return {
                'RankingIncentiveView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'addIncentivePngCnt': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView'
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView'
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.RankingIncentiveView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.TrackEntry = function() {
    this.onStart = new spine.animation.Listeners;
    this.onInterrupt = new spine.animation.Listeners;
    this.onEnd = new spine.animation.Listeners;
    this.onDispose = new spine.animation.Listeners;
    this.onComplete = new spine.animation.Listeners;
    this.onEvent = new spine.animation.Listeners;
    this.timelineData = org.apache.royale.utils.Language.Vector();
    this.timelineDipMix = org.apache.royale.utils.Language.Vector();
    this.timelinesRotation = org.apache.royale.utils.Language.Vector()
}
;
goog.exportSymbol('spine.animation.TrackEntry', spine.animation.TrackEntry);
spine.animation.TrackEntry.prototype.animation;
spine.animation.TrackEntry.prototype.next;
spine.animation.TrackEntry.prototype.mixingFrom;
spine.animation.TrackEntry.prototype.onStart;
spine.animation.TrackEntry.prototype.onInterrupt;
spine.animation.TrackEntry.prototype.onEnd;
spine.animation.TrackEntry.prototype.onDispose;
spine.animation.TrackEntry.prototype.onComplete;
spine.animation.TrackEntry.prototype.onEvent;
spine.animation.TrackEntry.prototype.trackIndex = 0;
spine.animation.TrackEntry.prototype.loop;
spine.animation.TrackEntry.prototype.eventThreshold;
spine.animation.TrackEntry.prototype.attachmentThreshold;
spine.animation.TrackEntry.prototype.drawOrderThreshold;
spine.animation.TrackEntry.prototype.animationStart;
spine.animation.TrackEntry.prototype.animationEnd;
spine.animation.TrackEntry.prototype.animationLast;
spine.animation.TrackEntry.prototype.nextAnimationLast;
spine.animation.TrackEntry.prototype.delay;
spine.animation.TrackEntry.prototype.trackTime;
spine.animation.TrackEntry.prototype.trackLast;
spine.animation.TrackEntry.prototype.nextTrackLast;
spine.animation.TrackEntry.prototype.trackEnd;
spine.animation.TrackEntry.prototype.timeScale;
spine.animation.TrackEntry.prototype.alpha;
spine.animation.TrackEntry.prototype.mixTime;
spine.animation.TrackEntry.prototype.mixDuration;
spine.animation.TrackEntry.prototype.interruptAlpha;
spine.animation.TrackEntry.prototype.totalAlpha = 0;
spine.animation.TrackEntry.prototype.timelineData;
spine.animation.TrackEntry.prototype.timelineDipMix;
spine.animation.TrackEntry.prototype.timelinesRotation;
spine.animation.TrackEntry.prototype.getAnimationTime = function() {
    if (this.loop) {
        var duration = this.animationEnd - this.animationStart;
        if (duration == 0)
            return this.animationStart;
        return this.trackTime % duration + this.animationStart
    }
    return Math.min(this.trackTime + this.animationStart, this.animationEnd)
}
;
spine.animation.TrackEntry.prototype.reset = function() {
    this.next = null;
    this.mixingFrom = null;
    this.animation = null;
    this.onStart.listeners.length = 0;
    this.onInterrupt.listeners.length = 0;
    this.onEnd.listeners.length = 0;
    this.onDispose.listeners.length = 0;
    this.onComplete.listeners.length = 0;
    this.onEvent.listeners.length = 0;
    this.timelineData.length = 0;
    this.timelineDipMix.length = 0;
    this.timelinesRotation.length = 0
}
;
spine.animation.TrackEntry.prototype.setTimelineData = function(to, mixingToArray, propertyIDs) {
    if (to != null)
        mixingToArray.push(to);
    var lastEntry = this.mixingFrom != null ? this.mixingFrom.setTimelineData(this, mixingToArray, propertyIDs) : this;
    if (to != null)
        mixingToArray.pop();
    var mixingTo = mixingToArray;
    var mixingToLast = mixingToArray.length - 1;
    var timelines = this.animation.timelines;
    var timelinesCount = this.animation.timelines.length;
    var timelineData = this.timelineData;
    timelineData.length = timelinesCount;
    this.timelineDipMix.length = 0;
    var timelineDipMix = this.timelineDipMix;
    timelineDipMix.length = timelinesCount;
    outer: for (var i = 0; i < timelinesCount; i++) {
        var intId = Number(timelines[i].getPropertyId());
        var id = intId.toString();
        var contained = propertyIDs[id];
        propertyIDs[id] = true;
        if (contained != null)
            timelineData[i] = spine.animation.AnimationState.SUBSEQUENT;
        else if (to == null || !to.hasTimeline(intId))
            timelineData[i] = spine.animation.AnimationState.FIRST;
        else {
            for (var ii = mixingToLast; ii >= 0; ii--) {
                var entry = mixingTo[ii];
                if (!entry.hasTimeline(intId)) {
                    if (entry.mixDuration > 0) {
                        timelineData[i] = spine.animation.AnimationState.DIP_MIX;
                        timelineDipMix[i] = entry;
                        continue outer
                    }
                    break
                }
            }
            timelineData[i] = spine.animation.AnimationState.DIP
        }
    }
    return lastEntry
}
;
spine.animation.TrackEntry.prototype.hasTimeline = function(id) {
    var timelines = this.animation.timelines;
    var n = this.animation.timelines.length;
    for (var i = 0; i < n; i++)
        if (timelines[i].getPropertyId() == id)
            return true;
    return false
}
;
spine.animation.TrackEntry.prototype.resetRotationDirection = function() {
    this.timelinesRotation.length = 0
}
;
spine.animation.TrackEntry.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TrackEntry',
        qName: 'spine.animation.TrackEntry',
        kind: 'class'
    }],
    interfaces: [spine.Poolable]
};
spine.animation.TrackEntry.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'animation': {
                    type: 'spine.animation.Animation'
                },
                'next': {
                    type: 'spine.animation.TrackEntry'
                },
                'onStart': {
                    type: 'spine.animation.Listeners'
                },
                'onInterrupt': {
                    type: 'spine.animation.Listeners'
                },
                'onEnd': {
                    type: 'spine.animation.Listeners'
                },
                'onDispose': {
                    type: 'spine.animation.Listeners'
                },
                'onComplete': {
                    type: 'spine.animation.Listeners'
                },
                'onEvent': {
                    type: 'spine.animation.Listeners'
                },
                'trackIndex': {
                    type: 'int'
                },
                'loop': {
                    type: 'Boolean'
                },
                'eventThreshold': {
                    type: 'Number'
                },
                'animationStart': {
                    type: 'Number'
                },
                'delay': {
                    type: 'Number'
                },
                'alpha': {
                    type: 'Number'
                },
                'timelineData': {
                    type: 'Vector.\x3cint\x3e'
                },
                'timelineDipMix': {
                    type: 'Vector.\x3cspine.animation.TrackEntry\x3e'
                },
                'timelinesRotation': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TrackEntry': {
                    type: '',
                    declaredBy: 'spine.animation.TrackEntry'
                },
                'getAnimationTime': {
                    type: 'Number',
                    declaredBy: 'spine.animation.TrackEntry'
                },
                'reset': {
                    type: 'void',
                    declaredBy: 'spine.animation.TrackEntry'
                },
                'setTimelineData': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.TrackEntry',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Vector.\x3cspine.animation.TrackEntry\x3e',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.utils.Dictionary',
                            optional: false
                        }]
                    }
                },
                'resetRotationDirection': {
                    type: 'void',
                    declaredBy: 'spine.animation.TrackEntry'
                }
            }
        }
    }
}
;
spine.animation.DeformTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount, 'Number');
    this.frameVertices = org.apache.royale.utils.Language.Vector(frameCount, 'Vector.\x3cNumber\x3e')
}
;
goog.inherits(spine.animation.DeformTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.DeformTimeline', spine.animation.DeformTimeline);
spine.animation.DeformTimeline.prototype.slotIndex = 0;
spine.animation.DeformTimeline.prototype.frames;
spine.animation.DeformTimeline.prototype.frameVertices;
spine.animation.DeformTimeline.prototype.attachment;
spine.animation.DeformTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.deform.ordinal << 27) + this.attachment.id + this.slotIndex
}
;
spine.animation.DeformTimeline.prototype.setFrame = function(frameIndex, time, vertices) {
    this.frames[frameIndex] = time;
    this.frameVertices[frameIndex] = vertices
}
;
spine.animation.DeformTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var vertexAttachment;
    var setupVertices;
    var slot = skeleton.slots[this.slotIndex];
    var slotAttachment = slot.attachment;
    if (!org.apache.royale.utils.Language.is(slotAttachment, spine.attachments.VertexAttachment) || !org.apache.royale.utils.Language.as(slotAttachment, spine.attachments.VertexAttachment, true).applyDeform(this.attachment))
        return;
    var verticesArray = slot.attachmentVertices;
    if (verticesArray.length == 0)
        alpha = 1;
    var frameVertices = this.frameVertices;
    var vertexCount = Number(frameVertices[0].length);
    var vertices;
    var frames = this.frames;
    var i = 0;
    if (time < frames[0]) {
        vertexAttachment = org.apache.royale.utils.Language.as(slotAttachment, spine.attachments.VertexAttachment, true);
        switch (pose) {
        case spine.animation.MixPose.setup:
            verticesArray.length = 0;
            return;
        case spine.animation.MixPose.current:
            if (alpha == 1) {
                verticesArray.length = 0;
                return
            }
            verticesArray.length = vertexCount;
            vertices = verticesArray;
            if (vertexAttachment.bones == null) {
                setupVertices = vertexAttachment.vertices;
                for (i = 0; i < vertexCount; i++)
                    vertices[i] += (setupVertices[i] - vertices[i]) * alpha
            } else {
                alpha = 1 - alpha;
                for (i = 0; i < vertexCount; i++)
                    vertices[i] *= alpha
            }
        }
        return
    }
    verticesArray.length = vertexCount;
    vertices = verticesArray;
    var n = 0;
    var setup, prev;
    if (time >= frames[frames.length - 1]) {
        var lastVertices = frameVertices[frames.length - 1];
        if (alpha == 1)
            for (i = 0,
            n = vertexCount; i < n; i++)
                vertices[i] = lastVertices[i];
        else if (pose == spine.animation.MixPose.setup) {
            vertexAttachment = org.apache.royale.utils.Language.as(slotAttachment, spine.attachments.VertexAttachment, true);
            if (vertexAttachment.bones == null) {
                setupVertices = vertexAttachment.vertices;
                for (i = 0; i < vertexCount; i++) {
                    setup = Number(setupVertices[i]);
                    vertices[i] = setup + (lastVertices[i] - setup) * alpha
                }
            } else
                for (i = 0; i < vertexCount; i++)
                    vertices[i] = lastVertices[i] * alpha
        } else
            for (i = 0; i < vertexCount; i++)
                vertices[i] += (lastVertices[i] - vertices[i]) * alpha;
        return
    }
    var frame = spine.animation.Animation.binarySearch1(frames, time);
    var prevVertices = frameVertices[frame - 1];
    var nextVertices = frameVertices[frame];
    var frameTime = Number(frames[frame]);
    var percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));
    if (alpha == 1)
        for (i = 0; i < vertexCount; i++) {
            prev = Number(prevVertices[i]);
            vertices[i] = prev + (nextVertices[i] - prev) * percent
        }
    else if (pose == spine.animation.MixPose.setup) {
        vertexAttachment = org.apache.royale.utils.Language.as(slotAttachment, spine.attachments.VertexAttachment, true);
        if (vertexAttachment.bones == null) {
            setupVertices = vertexAttachment.vertices;
            for (i = 0; i < vertexCount; i++) {
                prev = Number(prevVertices[i]);
                setup = Number(setupVertices[i]);
                vertices[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha
            }
        } else
            for (i = 0; i < vertexCount; i++) {
                prev = Number(prevVertices[i]);
                vertices[i] = (prev + (nextVertices[i] - prev) * percent) * alpha
            }
    } else
        for (i = 0; i < vertexCount; i++) {
            prev = Number(prevVertices[i]);
            vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha
        }
}
;
spine.animation.DeformTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'DeformTimeline',
        qName: 'spine.animation.DeformTimeline',
        kind: 'class'
    }]
};
spine.animation.DeformTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'slotIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'frameVertices': {
                    type: 'Vector.\x3cVector.\x3cNumber\x3e\x3e'
                },
                'attachment': {
                    type: 'spine.attachments.VertexAttachment'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'DeformTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.DeformTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.DeformTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.DeformTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.DeformTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Event = function(time, data) {
    if (data == null)
        throw new openfl.errors.ArgumentError('Event::data cannot be null.');
    this.time = time;
    this._data = data
}
;
goog.exportSymbol('spine.Event', spine.Event);
spine.Event.prototype._data;
spine.Event.prototype.time;
spine.Event.prototype.intValue = 0;
spine.Event.prototype.floatValue;
spine.Event.prototype.stringValue;
spine.Event.prototype.toString = function() {
    return this._data._name
}
;
spine.Event.prototype.get__data = function() {
    return this._data
}
;
Object.defineProperties(spine.Event.prototype, {
    data: {
        get: spine.Event.prototype.get__data
    }
});
spine.Event.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Event',
        qName: 'spine.Event',
        kind: 'class'
    }]
};
spine.Event.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'time': {
                    type: 'Number'
                },
                'intValue': {
                    type: 'int'
                },
                'floatValue': {
                    type: 'Number'
                },
                'stringValue': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.EventData',
                    access: 'readonly',
                    declaredBy: 'spine.Event'
                }
            }
        },
        methods: function() {
            return {
                'Event': {
                    type: '',
                    declaredBy: 'spine.Event',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.EventData',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.Event'
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleProgressData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleProgressData', pigg.data.puzzle.PuzzleProgressData);
pigg.data.puzzle.PuzzleProgressData.prototype._status;
pigg.data.puzzle.PuzzleProgressData.prototype._isThemeClear;
pigg.data.puzzle.PuzzleProgressData.prototype._themePoint = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._winningStreakPoint = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._winningStreakCount = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._nextStepPoint = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._remainignMoveTimes = -1;
pigg.data.puzzle.PuzzleProgressData.prototype._isStepClear;
pigg.data.puzzle.PuzzleProgressData.prototype._stepSize = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._step = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._incentiveItemVec;
pigg.data.puzzle.PuzzleProgressData.prototype._incentiveItemData;
pigg.data.puzzle.PuzzleProgressData.prototype._limitedTermIncentiveItemData;
pigg.data.puzzle.PuzzleProgressData.prototype._limitedQuantityIncentiveItemData;
pigg.data.puzzle.PuzzleProgressData.prototype._isProvidedLimitedTermIncentive;
pigg.data.puzzle.PuzzleProgressData.prototype._isProvidedLimitedQuantityIncentive;
pigg.data.puzzle.PuzzleProgressData.prototype._isStartRoulette;
pigg.data.puzzle.PuzzleProgressData.prototype._incentiveSize = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._limitedTermIncentiveSize = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._limitedQuantityIncentiveSize = 0;
pigg.data.puzzle.PuzzleProgressData.prototype._roulettePieceCount = 0;
pigg.data.puzzle.PuzzleProgressData.prototype.readData = function(data) {
    var cnt = 0
      , cnt2 = 0;
    var item;
    this._status = org.apache.royale.utils.Language.string(data['status']);
    if (this._status != 'SUCCESS')
        return;
    if (data['themeClear'])
        this._isThemeClear = true;
    else
        this._isThemeClear = false;
    if (data['remainingMoveCount'] != null)
        this._remainignMoveTimes = Number(data['remainingMoveCount']);
    if (this._isThemeClear) {
        this._themePoint = Number(data['themeClear']['earnedThemePoint']);
        this._winningStreakPoint = Number(data['themeClear']['earnedWinningStreakPoint']);
        this._winningStreakCount = Number(data['themeClear']['winningStreakCount']);
        if (data['themeClear']['clearSteps'])
            this._stepSize = Number(data['themeClear']['clearSteps'].length);
        if (this._stepSize > 0)
            this._isStepClear = true;
        if (this._isStepClear) {
            this._incentiveItemVec = org.apache.royale.utils.Language.Vector(this._stepSize, 'Vector.\x3cPuzzleIncentiveItemData\x3e');
            for (cnt = 0; cnt < this._stepSize; cnt++) {
                this._incentiveSize = Number(data['themeClear']['clearSteps'][cnt]['stepIncentives'].length);
                this._incentiveItemData = org.apache.royale.utils.Language.Vector(this._incentiveSize, 'PuzzleIncentiveItemData');
                for (cnt2 = 0; cnt2 < this._incentiveSize; cnt2++) {
                    item = new pigg.data.puzzle.PuzzleIncentiveItemData;
                    item.itemCode = org.apache.royale.utils.Language.string(data['themeClear']['clearSteps'][cnt]['stepIncentives'][cnt2]['stepIncentiveItemCode']);
                    item.itemType = org.apache.royale.utils.Language.string(data['themeClear']['clearSteps'][cnt]['stepIncentives'][cnt2]['stepIncentiveItemType']);
                    item.itemType = this.checkItemType(item.itemType);
                    item.itemName = org.apache.royale.utils.Language.string(data['themeClear']['clearSteps'][cnt]['stepIncentives'][cnt2]['stepIncentiveItemName']);
                    item.itemQuantity = Number(data['themeClear']['clearSteps'][cnt]['stepIncentives'][cnt2]['stepIncentiveItemQuantity']);
                    this._incentiveItemData[cnt2] = item
                }
                this._incentiveItemVec[cnt] = this._incentiveItemData
            }
        }
        if (data['themeClear']['clearLimitedTerm'])
            this._isProvidedLimitedTermIncentive = true;
        if (this._isProvidedLimitedTermIncentive) {
            this._limitedTermIncentiveSize = Number(data['themeClear']['clearLimitedTerm']['limitedTermIncentives'].length);
            this._limitedTermIncentiveItemData = org.apache.royale.utils.Language.Vector(this._limitedTermIncentiveSize, 'PuzzleIncentiveItemData');
            for (cnt = 0; cnt < this._limitedTermIncentiveSize; cnt++) {
                item = new pigg.data.puzzle.PuzzleIncentiveItemData;
                item.itemCode = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedTerm']['limitedTermIncentives'][cnt]['limitedTermIncentiveItemCode']);
                item.itemType = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedTerm']['limitedTermIncentives'][cnt]['limitedTermIncentiveItemType']);
                item.itemType = this.checkItemType(item.itemType);
                item.itemName = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedTerm']['limitedTermIncentives'][cnt]['limitedTermIncentiveItemName']);
                item.itemQuantity = Number(data['themeClear']['clearLimitedTerm']['limitedTermIncentives'][cnt]['limitedTermIncentiveItemQuantity']);
                this._limitedTermIncentiveItemData[cnt] = item
            }
        }
        if (data['themeClear']['clearLimitedQuantity'])
            this._isProvidedLimitedQuantityIncentive = true;
        if (this._isProvidedLimitedQuantityIncentive) {
            this._limitedQuantityIncentiveSize = Number(data['themeClear']['clearLimitedQuantity']['limitedQuantityIncentives'].length);
            this._limitedQuantityIncentiveItemData = org.apache.royale.utils.Language.Vector(this._limitedQuantityIncentiveSize, 'PuzzleIncentiveItemData');
            for (cnt = 0; cnt < this._limitedQuantityIncentiveSize; cnt++) {
                item = new pigg.data.puzzle.PuzzleIncentiveItemData;
                item.itemCode = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedQuantity']['limitedQuantityIncentives'][cnt]['limitedQuantityIncentiveItemCode']);
                item.itemType = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedQuantity']['limitedQuantityIncentives'][cnt]['limitedQuantityIncentiveItemType']);
                item.itemType = this.checkItemType(item.itemType);
                item.itemName = org.apache.royale.utils.Language.string(data['themeClear']['clearLimitedQuantity']['limitedQuantityIncentives'][cnt]['limitedQuantityIncentiveItemName']);
                item.itemQuantity = Number(data['themeClear']['clearLimitedQuantity']['limitedQuantityIncentives'][cnt]['limitedQuantityIncentiveItemQuantity']);
                this._limitedQuantityIncentiveItemData[cnt] = item
            }
        }
        this._isStartRoulette = data['themeClear']['startRoulette'];
        this._roulettePieceCount = Number(data['themeClear']['roulettePieceCount'])
    }
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.checkItemType = function(itemType) {
    var str;
    if (itemType == 'exterior')
        str = 'furniture';
    else if (itemType == 'cosmeticitem')
        str = 'cosmetic';
    else
        str = itemType;
    return str
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__isThemeClear = function() {
    return this._isThemeClear
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__isThemeClear = function(v) {
    this._isThemeClear = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__isStepClear = function() {
    return this._isStepClear
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__isStepClear = function(v) {
    this._isStepClear = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__isProvidedLimitedTermIncentive = function() {
    return this._isProvidedLimitedTermIncentive
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__isProvidedLimitedTermIncentive = function(v) {
    this._isProvidedLimitedTermIncentive = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__isProvidedLimitedQuantityIncentive = function() {
    return this._isProvidedLimitedQuantityIncentive
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__isProvidedLimitedQuantityIncentive = function(v) {
    this._isProvidedLimitedQuantityIncentive = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__isStartRoulette = function() {
    return this._isStartRoulette
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__isStartRoulette = function(v) {
    this._isStartRoulette = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__themePoint = function() {
    return this._themePoint
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__themePoint = function(v) {
    this._themePoint = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__winningStreakPoint = function() {
    return this._winningStreakPoint
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__winningStreakPoint = function(v) {
    this._winningStreakPoint = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__winningStreakCount = function() {
    return this._winningStreakCount
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__winningStreakCount = function(v) {
    this._winningStreakCount = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__nextStepPoint = function() {
    return this._nextStepPoint
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__nextStepPoint = function(v) {
    this._nextStepPoint = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__stepSize = function() {
    return this._stepSize
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__stepSize = function(v) {
    this._stepSize = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__step = function() {
    return this._step
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__step = function(v) {
    this._step = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__incentiveItemVec = function() {
    return this._incentiveItemVec
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__incentiveItemVec = function(v) {
    this._incentiveItemVec = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__incentiveItemData = function() {
    return this._incentiveItemData
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__incentiveItemData = function(v) {
    this._incentiveItemData = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__imitedTermIncentiveItemData = function(v) {
    this._limitedTermIncentiveItemData = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__limitedTermIncentiveItemData = function() {
    return this._limitedTermIncentiveItemData
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__limitedQuantityIncentiveItemData = function() {
    return this._limitedQuantityIncentiveItemData
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__limitedQuantityIncentiveItemData = function(v) {
    this._limitedQuantityIncentiveItemData = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__roulettePieceCount = function() {
    return this._roulettePieceCount
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__roulettePieceCount = function(v) {
    this._roulettePieceCount = v
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.get__remainignMoveTimes = function() {
    return this._remainignMoveTimes
}
;
pigg.data.puzzle.PuzzleProgressData.prototype.set__remainignMoveTimes = function(v) {
    this._remainignMoveTimes = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleProgressData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__status
    },
    isThemeClear: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__isThemeClear,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__isThemeClear
    },
    isStepClear: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__isStepClear,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__isStepClear
    },
    isProvidedLimitedTermIncentive: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__isProvidedLimitedTermIncentive,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__isProvidedLimitedTermIncentive
    },
    isProvidedLimitedQuantityIncentive: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__isProvidedLimitedQuantityIncentive,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__isProvidedLimitedQuantityIncentive
    },
    isStartRoulette: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__isStartRoulette,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__isStartRoulette
    },
    themePoint: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__themePoint,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__themePoint
    },
    winningStreakPoint: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__winningStreakPoint,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__winningStreakPoint
    },
    winningStreakCount: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__winningStreakCount,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__winningStreakCount
    },
    nextStepPoint: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__nextStepPoint,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__nextStepPoint
    },
    stepSize: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__stepSize,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__stepSize
    },
    step: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__step,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__step
    },
    incentiveItemVec: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__incentiveItemVec,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__incentiveItemVec
    },
    incentiveItemData: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__incentiveItemData,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__incentiveItemData
    },
    imitedTermIncentiveItemData: {
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__imitedTermIncentiveItemData
    },
    limitedTermIncentiveItemData: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__limitedTermIncentiveItemData
    },
    limitedQuantityIncentiveItemData: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__limitedQuantityIncentiveItemData,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__limitedQuantityIncentiveItemData
    },
    roulettePieceCount: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__roulettePieceCount,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__roulettePieceCount
    },
    remainignMoveTimes: {
        get: pigg.data.puzzle.PuzzleProgressData.prototype.get__remainignMoveTimes,
        set: pigg.data.puzzle.PuzzleProgressData.prototype.set__remainignMoveTimes
    }
});
pigg.data.puzzle.PuzzleProgressData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleProgressData',
        qName: 'pigg.data.puzzle.PuzzleProgressData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleProgressData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'isThemeClear': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'isStepClear': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'isProvidedLimitedTermIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'isProvidedLimitedQuantityIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'isStartRoulette': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'themePoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'winningStreakPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'winningStreakCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'nextStepPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'stepSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'step': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'incentiveItemVec': {
                    type: 'Vector.\x3cVector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'incentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'imitedTermIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'writeonly',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'limitedTermIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'limitedQuantityIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'roulettePieceCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'remainignMoveTimes': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleProgressData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleProgressData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.GaugeView = function(main) {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('GaugeView');
    this._main = main;
    this.init()
}
;
goog.inherits(pigg.puzzle.view.GaugeView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.GaugeView', pigg.puzzle.view.GaugeView);
pigg.puzzle.view.GaugeView.prototype._container;
pigg.puzzle.view.GaugeView.prototype._isEnd;
pigg.puzzle.view.GaugeView.prototype._numberFontManager;
pigg.puzzle.view.GaugeView.prototype._main;
pigg.puzzle.view.GaugeView.prototype._gaugeTilemap;
pigg.puzzle.view.GaugeView.prototype._gaugeTileset;
pigg.puzzle.view.GaugeView.prototype._gaugeLeftTile;
pigg.puzzle.view.GaugeView.prototype._gaugeRightTile;
pigg.puzzle.view.GaugeView.prototype._gaugeAtoTile;
pigg.puzzle.view.GaugeView.prototype._gaugeCenterTile;
pigg.puzzle.view.GaugeView.prototype._gaugeShape;
pigg.puzzle.view.GaugeView.prototype._scoreTilemap;
pigg.puzzle.view.GaugeView.prototype.init = function() {
    this.addChild(this._container = new openfl.display.Sprite);
    this._gaugeTileset = this._main.commonPartsTileset.clone();
    this._gaugeTilemap = new openfl.display.Tilemap(300,50,this._gaugeTileset);
    this._gaugeTilemap.addTile(new TileBase(this._gaugeTileset.addRect(new openfl.geom.Rectangle(600,206,220,26))));
    this._gaugeTilemap.addTile(this._gaugeCenterTile = new TileBase(this._gaugeTileset.addRect(new openfl.geom.Rectangle(579,227,1,20))));
    this._gaugeTilemap.addTile(this._gaugeLeftTile = new TileBase(this._gaugeTileset.addRect(new openfl.geom.Rectangle(564,227,14,20))));
    this._gaugeTilemap.addTile(this._gaugeRightTile = new TileBase(this._gaugeTileset.addRect(new openfl.geom.Rectangle(580,227,14,20))));
    this._gaugeTilemap.addTile(this._gaugeAtoTile = new TileBase(this._gaugeTileset.addRect(new openfl.geom.Rectangle(564,206,34,20))));
    this._container.addChild(this._gaugeTilemap);
    this._gaugeLeftTile.y = this._gaugeRightTile.y = this._gaugeCenterTile.y = 3;
    this._gaugeLeftTile.x = 3;
    this._gaugeCenterTile.x = 17;
    this._gaugeRightTile.x = 3 + 14;
    this._gaugeAtoTile.y = 4;
    this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
    this._numberFontManager.init(this._main);
    this._numberFontManager.makeFontInfo('remainPoint', 300, 50, this._container, 16777215, 7812608, 150, 2, 4.7, 'CENTER', false, true);
    this._scoreTilemap = this._numberFontManager.getFontInfo('remainPoint').tilemap
}
;
pigg.puzzle.view.GaugeView.prototype.setRemainPoint = function(score, per) {
    score = typeof score !== 'undefined' ? score : 0;
    per = typeof per !== 'undefined' ? per : 0;
    this._gaugeRightTile.x = 3 + 14 + 188 * per;
    this._gaugeCenterTile.scaleX = 188 * per;
    this._numberFontManager.makeNumber('remainPoint', score);
    var d = this.getDigit(score);
    var adjstSocreX = 30;
    var adjstAtoX = 7;
    if (d <= 2) {
        this._scoreTilemap.x = 82 - adjstSocreX;
        this._gaugeAtoTile.x = 78 - adjstAtoX
    } else if (d == 3) {
        this._scoreTilemap.x = 86 - adjstSocreX;
        this._gaugeAtoTile.x = 72 - adjstAtoX
    } else if (d == 4) {
        this._scoreTilemap.x = 90 - adjstSocreX;
        this._gaugeAtoTile.x = 67 - adjstAtoX
    } else if (d == 5) {
        this._scoreTilemap.x = 88 - adjstSocreX;
        this._gaugeAtoTile.x = 57 - adjstAtoX
    } else if (d == 6) {
        this._scoreTilemap.x = 91 - adjstSocreX;
        this._gaugeAtoTile.x = 52 - adjstAtoX
    } else if (d == 7) {
        this._scoreTilemap.x = 90 - adjstSocreX;
        this._gaugeAtoTile.x = 37 - adjstAtoX
    }
}
;
pigg.puzzle.view.GaugeView.prototype.get__isEnd = function() {
    return this._isEnd
}
;
pigg.puzzle.view.GaugeView.prototype.set__isEnd = function(v) {
    this._isEnd = v
}
;
Object.defineProperties(pigg.puzzle.view.GaugeView.prototype, {
    isEnd: {
        get: pigg.puzzle.view.GaugeView.prototype.get__isEnd,
        set: pigg.puzzle.view.GaugeView.prototype.set__isEnd
    }
});
pigg.puzzle.view.GaugeView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'GaugeView',
        qName: 'pigg.puzzle.view.GaugeView',
        kind: 'class'
    }]
};
pigg.puzzle.view.GaugeView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isEnd': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GaugeView'
                }
            }
        },
        methods: function() {
            return {
                'GaugeView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.GaugeView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GaugeView'
                },
                'setRemainPoint': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GaugeView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.EventView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._incentiveStepTilePosArray = [];
    this._incentiveStepTergetTileArray = [];
    this.traceLog('EventView')
}
;
goog.inherits(pigg.puzzle.view.EventView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.EventView', pigg.puzzle.view.EventView);
pigg.puzzle.view.EventView.prototype._fontNumberManager;
pigg.puzzle.view.EventView.prototype._eventInfoScrollBack;
pigg.puzzle.view.EventView.prototype._eventInfoScrollBackTilemap;
pigg.puzzle.view.EventView.prototype._eventInfoScrollView;
pigg.puzzle.view.EventView.prototype._eventInfoScrollContainer;
pigg.puzzle.view.EventView.prototype._eventInfoScrollBgTop;
pigg.puzzle.view.EventView.prototype._eventInfoScrollBgCenter;
pigg.puzzle.view.EventView.prototype._eventInfoScrollBgBottom;
pigg.puzzle.view.EventView.prototype._eventInfoScrollTitleTilemap;
pigg.puzzle.view.EventView.prototype._eventInfoView;
pigg.puzzle.view.EventView.prototype._backBlack;
pigg.puzzle.view.EventView.prototype._isShow = false;
pigg.puzzle.view.EventView.prototype._container;
pigg.puzzle.view.EventView.prototype._loadDataManager;
pigg.puzzle.view.EventView.prototype._eventData;
pigg.puzzle.view.EventView.prototype._main;
pigg.puzzle.view.EventView.prototype._rankingBtn;
pigg.puzzle.view.EventView.prototype._rankingBtnTile;
pigg.puzzle.view.EventView.prototype._incentiveCount = 0;
pigg.puzzle.view.EventView.prototype._eventTilemap;
pigg.puzzle.view.EventView.prototype._eventTileset;
pigg.puzzle.view.EventView.prototype._base;
pigg.puzzle.view.EventView.prototype._incentiveContainer;
pigg.puzzle.view.EventView.prototype._incentiveTxtContainer;
pigg.puzzle.view.EventView.prototype._incentiveIconContainer;
pigg.puzzle.view.EventView.prototype._incentiveStepTilemap;
pigg.puzzle.view.EventView.prototype._incentiveCurrentTile;
pigg.puzzle.view.EventView.prototype._incentiveCurrentTile2;
pigg.puzzle.view.EventView.prototype._infoContainer;
pigg.puzzle.view.EventView.prototype._infoTxts;
pigg.puzzle.view.EventView.prototype._infoRemainStepPointTxt;
pigg.puzzle.view.EventView.prototype._infoTotalPointTxt;
pigg.puzzle.view.EventView.prototype._infoTermLimitTxt;
pigg.puzzle.view.EventView.prototype._infoStockQuantityTxt;
pigg.puzzle.view.EventView.prototype._infoEventRemainTimeTxt;
pigg.puzzle.view.EventView.prototype._infoLimitedThumbContainer;
pigg.puzzle.view.EventView.prototype._limitedTermMainIncentive;
pigg.puzzle.view.EventView.prototype._limitedQuantityMainIncentive;
pigg.puzzle.view.EventView.prototype._stepIncentives;
pigg.puzzle.view.EventView.prototype._limitedInfoView;
pigg.puzzle.view.EventView.prototype._limitedInfoScrollView;
pigg.puzzle.view.EventView.prototype._limitedIncentiveContainer;
pigg.puzzle.view.EventView.prototype._spTermIconView;
pigg.puzzle.view.EventView.prototype._spQuantityIconView;
pigg.puzzle.view.EventView.prototype._specialChallengeInfoContainer;
pigg.puzzle.view.EventView.prototype._specialChallengeInfoBgTilemap;
pigg.puzzle.view.EventView.prototype._currentSpecialChallengeType = -2;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_SCROLL_BG_TOP = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_SCROLL_BG_CENTER = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_SCROLL_BG_BOTTOM = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_GAUGE_TITLE_STEP = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_GAUGE_TITLE_TERM = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_GAUGE_TITLE_QUANTITY = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_GAUGE_TITLE_COMPLETE = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_SPECIAL_BG = 0;
pigg.puzzle.view.EventView.prototype.RECT_EVENT_SPECIAL_BG_END = 0;
pigg.puzzle.view.EventView.prototype.RECT_SWITCH_BTN_RANKING = 0;
pigg.puzzle.view.EventView.prototype.RECT_SWITCH_BTN_STEP = 0;
pigg.puzzle.view.EventView.prototype.RECT_INCENTIVE_STEP_TARGET = 0;
pigg.puzzle.view.EventView.prototype.RECT_INCENTIVE_STEP_CLEAR = 0;
pigg.puzzle.view.EventView.prototype.RECT_INCENTIVE_STEP_END = 0;
pigg.puzzle.view.EventView.prototype._limitedTermGauge;
pigg.puzzle.view.EventView.prototype._limitedQuantityGauge;
pigg.puzzle.view.EventView.prototype._stepIncentiveGauge;
pigg.puzzle.view.EventView.prototype._limitedTermIsEnd = false;
pigg.puzzle.view.EventView.prototype._limitedQuantityIsEnd = false;
pigg.puzzle.view.EventView.prototype._switchButtonContainer;
pigg.puzzle.view.EventView.prototype._switchButtonRankStepTile;
pigg.puzzle.view.EventView.prototype._switchButtonStepTile;
pigg.puzzle.view.EventView.prototype._incentiveStepTilePosArray;
pigg.puzzle.view.EventView.prototype._incentiveStepTergetTileArray;
pigg.puzzle.view.EventView.prototype._showStepMode = -1;
pigg.puzzle.view.EventView.prototype._currentScrollPos = -1;
pigg.puzzle.view.EventView.prototype._this;
pigg.puzzle.view.EventView.prototype._isInit = false;
pigg.puzzle.view.EventView.prototype._currentDispMode = 'step';
pigg.puzzle.view.EventView.prototype._currentRankTypeMode = 'score';
pigg.puzzle.view.EventView.prototype._rankingContainer;
pigg.puzzle.view.EventView.prototype._rankingBgScore;
pigg.puzzle.view.EventView.prototype._rankingBgWinning;
pigg.puzzle.view.EventView.prototype._hasUpdate;
pigg.puzzle.view.EventView.prototype.init = function(main, loadDataManager, isSp) {
    isSp = typeof isSp !== 'undefined' ? isSp : -1;
    this.traceLog('EventView::init');
    this._isInit = true;
    this._main = main;
    this._container = this.makeContainer();
    this._loadDataManager = loadDataManager;
    this._showStepMode = isSp;
    this._backBlack = this.makeBackBlack();
    this._backBlack.alpha = 0;
    this._container.addChild(this._backBlack);
    this._fontNumberManager = new pigg.puzzle.manager.NumberFontManager;
    this._fontNumberManager.init(this._main);
    this._eventInfoView = new openfl.display.Sprite;
    this._container.addChild(this._eventInfoView);
    this._eventInfoView.x = 71;
    this.initBase();
    this.addChild(this._container);
    this.traceLog('\u3053\u3063\u3061\u306e', this);
    this._this = this;
    this._this.visible = false
}
;
pigg.puzzle.view.EventView.prototype.initBase = function() {
    this._base = new openfl.display.Sprite;
    this._eventTileset = this._main.commonPartsTileset.clone();
    this._eventTilemap = new openfl.display.Tilemap(498,772,this._eventTileset);
    var baseLeft;
    var baseRight;
    var baseCenter;
    var infoBase;
    this._eventTilemap.addTile(baseLeft = new openfl.display.Tile(this._eventTileset.addRect(new openfl.geom.Rectangle(0,268,20,772))));
    this._eventTilemap.addTile(baseRight = new openfl.display.Tile(this._eventTileset.addRect(new openfl.geom.Rectangle(32,268,20,772))));
    this._eventTilemap.addTile(baseCenter = new openfl.display.Tile(this._eventTileset.addRect(new openfl.geom.Rectangle(20,268,1,772))));
    this._eventTilemap.addTile(infoBase = new openfl.display.Tile(this._eventTileset.addRect(new openfl.geom.Rectangle(54,300,446,91))));
    this.RECT_EVENT_SCROLL_BG_TOP = this._eventTileset.addRect(new openfl.geom.Rectangle(54,268,454,10));
    this.RECT_EVENT_SCROLL_BG_CENTER = this._eventTileset.addRect(new openfl.geom.Rectangle(54,278,454,1));
    this.RECT_EVENT_SCROLL_BG_BOTTOM = this._eventTileset.addRect(new openfl.geom.Rectangle(54,288,454,10));
    this.RECT_EVENT_GAUGE_TITLE_COMPLETE = this._eventTileset.addRect(new openfl.geom.Rectangle(466,603,282,34));
    this.RECT_EVENT_GAUGE_TITLE_STEP = this._eventTileset.addRect(new openfl.geom.Rectangle(466,638,204,21));
    this.RECT_EVENT_GAUGE_TITLE_TERM = this._eventTileset.addRect(new openfl.geom.Rectangle(466,660,213,18));
    this.RECT_EVENT_GAUGE_TITLE_QUANTITY = this._eventTileset.addRect(new openfl.geom.Rectangle(466,679,214,18));
    this.RECT_EVENT_SPECIAL_BG = this._eventTileset.addRect(new openfl.geom.Rectangle(466,515,326,87));
    this.RECT_EVENT_SPECIAL_BG_END = this._eventTileset.addRect(new openfl.geom.Rectangle(727,391,119,87));
    this.RECT_SWITCH_BTN_RANKING = this._eventTileset.addRect(new openfl.geom.Rectangle(54,808,99,99));
    this.RECT_SWITCH_BTN_STEP = this._eventTileset.addRect(new openfl.geom.Rectangle(341,808,99,99));
    baseRight.x = 498 - 20;
    baseCenter.x = 20;
    baseCenter.scaleX = 458;
    infoBase.x = 20;
    infoBase.y = 18;
    this._base.addChild(this._eventTilemap);
    this._eventInfoView.addChild(this._base);
    var infoFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,16);
    this._infoEventRemainTimeTxt = new openfl.text.TextField;
    this._infoEventRemainTimeTxt.defaultTextFormat = infoFormat;
    this._infoEventRemainTimeTxt.textColor = 16773632;
    this._infoEventRemainTimeTxt.text = '';
    this._infoEventRemainTimeTxt.x = 58;
    this._infoEventRemainTimeTxt.y = 15;
    this._infoEventRemainTimeTxt.wordWrap = true;
    this._infoEventRemainTimeTxt.width = 220;
    if (AsData.ua > 1)
        this._infoEventRemainTimeTxt.y = 15 + 5;
    this._base.addChild(this._infoEventRemainTimeTxt);
    var totalScoreSpr = new openfl.display.Sprite;
    this._base.addChild(totalScoreSpr);
    totalScoreSpr.x = 226;
    totalScoreSpr.y = 43;
    this._fontNumberManager.makeFontInfo('totalScore', 300, 100, totalScoreSpr, 16609792, 16609792, 450, 30, 5, 'RIGHT');
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 448;
    closeBtn.y = 7;
    this._base.addChild(closeBtn);
    this._eventInfoScrollContainer = new openfl.display.Sprite;
    this._eventInfoScrollBack = new openfl.display.Sprite;
    this._eventInfoScrollContainer.addChild(this._eventInfoScrollBack);
    this._eventInfoView.addChild(this._eventInfoScrollContainer);
    this._eventInfoScrollBackTilemap = new openfl.display.Tilemap(454,483,this._eventTileset);
    this._eventInfoScrollBackTilemap.addTile(this._eventInfoScrollBgTop = new openfl.display.Tile(this.RECT_EVENT_SCROLL_BG_TOP));
    this._eventInfoScrollBackTilemap.addTile(this._eventInfoScrollBgCenter = new openfl.display.Tile(this.RECT_EVENT_SCROLL_BG_CENTER));
    this._eventInfoScrollBackTilemap.addTile(this._eventInfoScrollBgBottom = new openfl.display.Tile(this.RECT_EVENT_SCROLL_BG_BOTTOM));
    this._eventInfoScrollContainer.addChild(this._eventInfoScrollBackTilemap);
    this._eventInfoScrollBgCenter.y = 10;
    this._eventInfoScrollBgCenter.scaleY = 463;
    this._eventInfoScrollBgBottom.y = 473;
    this._eventInfoScrollView = new pigg.puzzle.view.ScrollView;
    this._eventInfoScrollView.init(454, 483, 454 - 30, 459, 12, 15);
    this._eventInfoScrollContainer.x = 22;
    this._eventInfoScrollTitleTilemap = new openfl.display.Tilemap(500,100,this._eventTileset);
    this._eventInfoScrollTitleTilemap.y = 109 - 153;
    this._eventInfoScrollContainer.addChild(this._eventInfoScrollTitleTilemap);
    this._eventInfoScrollContainer.addChild(this._eventInfoScrollView);
    if (this._main.specialChallengeExist)
        this.makeLimitedIncentive();
    this.makeIncentiveData();
    if (this._main.existRanking) {
        this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u30dc\u30bf\u30f3\u8868\u793a');
        this._switchButtonContainer = new openfl.display.Sprite;
        this._base.addChild(this._switchButtonContainer);
        var switchButtonTilemap = new openfl.display.Tilemap(100,100,this._eventTileset);
        this._switchButtonContainer.addChild(switchButtonTilemap);
        switchButtonTilemap.addTile(this._switchButtonRankStepTile = new TileBase(this.RECT_SWITCH_BTN_RANKING));
        switchButtonTilemap.x = switchButtonTilemap.y = -48;
        this._switchButtonContainer.addChild(switchButtonTilemap);
        this._switchButtonContainer.x = 342 + 70;
        this._switchButtonContainer.y = 628 + 70
    }
    this._base.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.baseCL, this, 'baseCL'))
}
;
pigg.puzzle.view.EventView.prototype.onLoadPng = function(code, bmd, container) {
    container = typeof container !== 'undefined' ? container : null
}
;
pigg.puzzle.view.EventView.prototype.show = function(isSp) {
    var self = this;
    isSp = typeof isSp !== 'undefined' ? isSp : -1;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.closeMD, self, 'closeMD'));
            self._eventInfoView.cacheAsBitmap = false
        };
        if (!self._eventInfoView.cacheAsBitmap)
            self._eventInfoView.cacheAsBitmap = true;
        com.greensock.TweenMax.to(self._eventInfoView, .4, {
            y: tarY,
            ease: com.greensock.easing.Back.easeOut,
            onComplete: __localFn0__
        })
    };
    this.traceLog('show::::', this._isShow);
    if (this._currentDispMode == 'ranking') {
        this.traceLog('EventViewShow::_main.checkUpdateRanking::', this._main.checkUpdateRanking());
        if (this._main.checkUpdateRanking()) {
            this._main.updateRankingData('eventView');
            return
        }
        this._main.eventRankingView.show(false)
    }
    this._showStepMode = isSp;
    this._isShow = true;
    this._main.isShowEventView = true;
    this.traceLog('show::::updateInfo\u524d');
    this.updateInfo();
    this.updateIconInfo();
    this._backBlack.visible = true;
    if (this._showStepMode == 0)
        this._eventInfoScrollView.updatePosition(-this._incentiveStepTilePosArray[8], false);
    else if (this._showStepMode == 1)
        this._eventInfoScrollView.updatePosition(-this._incentiveStepTilePosArray[9], false);
    else
        this._eventInfoScrollView.updatePosition(-this._incentiveStepTilePosArray[this._currentScrollPos], false);
    var d = .1;
    if (this._isInit)
        d = .4;
    this._isInit = false;
    com.greensock.TweenMax.killTweensOf(this._eventInfoView);
    com.greensock.TweenMax.killTweensOf(this._backBlack);
    com.greensock.TweenMax.to(this._backBlack, .2, {
        delay: d,
        alpha: 1
    });
    this._eventInfoView.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    var tarY;
    if (this._main.appType == 'mypage')
        tarY = 34;
    else if (this._main.appType == 'game')
        tarY = 93;
    com.greensock.TweenMax.to(this._eventInfoView, d, {
        onComplete: __localFn0__
    });
    this._this.visible = true
}
;
pigg.puzzle.view.EventView.prototype.updateInfo = function() {
    this.traceLog('\u30a4\u30d9\u30f3\u30c8view::updateInfo');
    var endTime;
    var dayCount;
    var totalHour;
    var hourCount;
    var minuteCount;
    var hourDigit = '';
    var minuteDigit = '';
    if (this._main.eventData.limitedTermIncentiveExists) {
        endTime = this._main.eventData.limitedTermEndTime - this._main.eventData.serverTime;
        dayCount = org.apache.royale.utils.Language._int(endTime / 864E5);
        totalHour = org.apache.royale.utils.Language._int(endTime / 36E5);
        hourCount = totalHour - dayCount * 24;
        minuteCount = org.apache.royale.utils.Language._int(endTime / 6E4 - totalHour * 60);
        if (this._infoTermLimitTxt)
            if (dayCount > 0)
                this._infoTermLimitTxt.text = '\u6b8b\u308a' + dayCount + '\u65e5\n ';
            else if (hourCount > 0 || minuteCount > 0)
                this._infoTermLimitTxt.text = '\u672c\u65e5\u307e\u3067\n ';
            else {
                this._limitedTermIsEnd = true;
                if (this._spTermIconView && this._spTermIconView.isSpc != 1) {
                    this._spTermIconView.isSpc = 1;
                    this._spTermIconView.isEnd = true;
                    this._spTermIconView.updateIconData();
                    this._infoTermLimitTxt.text = '';
                    this.removeFromParent(this._infoTermLimitTxt)
                }
            }
    }
    if (this._main.eventData.limitedQuantityIncentiveExists)
        if (this._main.eventData.limitedQuantityStock > 0)
            this._infoStockQuantityTxt.text = '\u6b8b\u308a' + this._main.eventData.limitedQuantityStock + '\u500b\n ';
        else {
            this._limitedQuantityIsEnd = true;
            if (this._spQuantityIconView && this._spQuantityIconView.isSpc != 1) {
                this._spQuantityIconView.isSpc = 1;
                this._spQuantityIconView.isEnd = true;
                this._spQuantityIconView.updateIconData();
                this._infoStockQuantityTxt.text = '';
                this.removeFromParent(this._infoStockQuantityTxt)
            }
        }
    if (this._main.specialChallengeExist) {
        if (this._main.userData.hasLimitedTermIncentive && !this._spTermIconView.isGet) {
            if (this._spTermIconView.isSpc == 0)
                this._spTermIconView.isSpc = 2;
            this._spTermIconView.isGet = true;
            this._spTermIconView.updateIconData()
        }
        if (this._main.userData.hasLimitedQuantityIncentive && !this._spQuantityIconView.isGet) {
            if (this._spQuantityIconView.isSpc == 0)
                this._spQuantityIconView.isSpc = 2;
            this._spQuantityIconView.isGet = true;
            this._spQuantityIconView.updateIconData()
        }
    }
    endTime = this._main.eventData.endTime - this._main.eventData.serverTime;
    dayCount = org.apache.royale.utils.Language._int(endTime / 864E5);
    totalHour = org.apache.royale.utils.Language._int(endTime / 36E5);
    hourCount = totalHour - dayCount * 24;
    minuteCount = org.apache.royale.utils.Language._int(endTime / 6E4 - totalHour * 60);
    if (hourCount < 10)
        hourDigit = '0';
    if (minuteCount < 10)
        minuteDigit = '0';
    var _currentRemainTimeTxt = '\u6b8b\u308a' + dayCount + '\u65e5\u3068' + hourDigit + hourCount + '\u6642\u9593' + minuteDigit + minuteCount + '\u5206\n ';
    this._infoEventRemainTimeTxt.text = _currentRemainTimeTxt;
    this._fontNumberManager.makeNumber('totalScore', this._main.totalPoint);
    if (!this._main.isEventComplete)
        this._currentScrollPos = this._main.currentEventStep;
    var per;
    this.setSpecialChallengeType();
    if (this._main.specialChallengeExist) {
        this.traceLog('\u30a4\u30d9\u30f3\u30c8view\u30b2\u30fc\u30b8_totalPoint_totalPoint\u4fee\u6b63');
        var _limitedTermProgressPer;
        var _limitedQuantityProgressPer;
        if (this._main.isJoinSpecialChallenge == 0 || this._main.isJoinSpecialChallenge == 2) {
            _limitedTermProgressPer = (this._main.totalPoint - this._main.eventData.stepDataVec[7].point) / (this._main.eventData.limitedTermPoint - this._main.eventData.stepDataVec[7].point);
            this._limitedTermGauge.setRemainPoint(this._main.currentRemainLimitedTermPoint, _limitedTermProgressPer)
        }
        if (this._main.isJoinSpecialChallenge == 1 || this._main.isJoinSpecialChallenge == 2) {
            _limitedQuantityProgressPer = (this._main.totalPoint - this._main.eventData.stepDataVec[7].point) / (this._main.eventData.limitedQuantityPoint - this._main.eventData.stepDataVec[7].point);
            this._limitedQuantityGauge.setRemainPoint(this._main.currentRemainLimitedQuantityPoint, _limitedQuantityProgressPer)
        }
    }
    if (this._main.currentEventStep < pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
        this.traceLog('\u30a4\u30d9\u30f3\u30c8view\u30b2\u30fc\u30b8', this._main.currentEventStep, this._main.totalPoint, this._main.eventStepMissionEachPoint[this._main.currentEventStep], this._main.currentRemainEventStepPoint, this._main.eventStepMissionEachPoint[this._main.currentEventStep]);
        per = (this._main.eventStepMissionEachPoint[this._main.currentEventStep] - this._main.currentRemainEventStepPoint) / this._main.eventStepMissionEachPoint[this._main.currentEventStep];
        this.traceLog('\u30a4\u30d9\u30f3\u30c8view\u30b2\u30fc\u30b8::per::_totalPoint_totalPoint', per);
        this._stepIncentiveGauge.setRemainPoint(this._main.currentRemainEventStepPoint, per)
    }
}
;
pigg.puzzle.view.EventView.prototype.setSpecialChallengeType = function() {
    this.traceLog('setSpecialChallengeType::', this._currentSpecialChallengeType, this._main.isJoinSpecialChallenge);
    if (this._currentSpecialChallengeType == this._main.isJoinSpecialChallenge)
        return;
    this._currentSpecialChallengeType = this._main.isJoinSpecialChallenge;
    var tl;
    this._eventInfoScrollTitleTilemap.removeTiles();
    if (this._main.isJoinSpecialChallenge == 2) {
        this._eventInfoScrollContainer.y = 187;
        this._eventInfoScrollBackTilemap.height = 483 - 30;
        this._eventInfoScrollBgCenter.scaleY = 430;
        this._eventInfoScrollBgBottom.y = 440;
        this._eventInfoScrollTitleTilemap.y = 109 - 187;
        if (this._eventInfoScrollView.contentHeight != 426) {
            this._eventInfoScrollView.contentHeight = 426;
            this._eventInfoScrollView.updateContent()
        }
    } else {
        var addHeight = 0;
        if (!this._main.specialChallengeExist)
            addHeight = 114;
        this._eventInfoScrollContainer.y = 153;
        this._eventInfoScrollBackTilemap.height = 483 + addHeight;
        this._eventInfoScrollBgCenter.scaleY = 463 + addHeight;
        this._eventInfoScrollBgBottom.y = 473 + addHeight;
        this._eventInfoScrollTitleTilemap.y = 109 - 153;
        if (this._eventInfoScrollView.contentHeight != 459 + addHeight) {
            this._eventInfoScrollView.contentHeight = 459 + addHeight;
            this._eventInfoScrollView.updateContent()
        }
    }
    if (this._main.isJoinSpecialChallenge == -1) {
        if (this._main.specialChallengeExist)
            if (!this._main.eventData.limitedQuantityIncentiveExists && !this._main.eventData.limitedTermIncentiveExists)
                this._specialChallengeInfoBgTilemap.addTile(new openfl.display.Tile(this.RECT_EVENT_SPECIAL_BG_END));
        if (this._main.isEventComplete) {
            if (this._stepIncentiveGauge)
                this.removeFromParent(this._stepIncentiveGauge);
            if (this._limitedTermGauge)
                this.removeFromParent(this._limitedTermGauge);
            if (this._limitedQuantityGauge)
                this.removeFromParent(this._limitedQuantityGauge);
            this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_COMPLETE));
            tl.x = 85;
            tl.y = 5;
            this._incentiveStepTilemap.removeTile(this._incentiveCurrentTile);
            this._incentiveStepTilemap.removeTile(this._incentiveCurrentTile2)
        } else {
            if (this._stepIncentiveGauge == null) {
                this._stepIncentiveGauge = new pigg.puzzle.view.GaugeView(this._main);
                this._eventInfoScrollContainer.addChild(this._stepIncentiveGauge);
                this._stepIncentiveGauge.y = 117 - 153;
                this._stepIncentiveGauge.x = 246 - 22
            }
            this._currentScrollPos = this._main.currentEventStep;
            this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_STEP));
            tl.x = 13;
            tl.y = 10
        }
        this.traceLog('\u3053\u3053\u3067\u5909\u308f\u308b', this._incentiveStepTilePosArray[this._main.currentEventStep]);
        this._incentiveCurrentTile.y = Number(this._incentiveStepTilePosArray[this._main.currentEventStep])
    } else if (this._main.isJoinSpecialChallenge == 0) {
        if (this._stepIncentiveGauge)
            this.removeFromParent(this._stepIncentiveGauge);
        if (this._limitedQuantityGauge)
            this.removeFromParent(this._limitedQuantityGauge);
        this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_TERM));
        tl.x = 8;
        tl.y = 10;
        if (this._limitedTermGauge == null) {
            this._limitedTermGauge = new pigg.puzzle.view.GaugeView(this._main);
            this._eventInfoScrollContainer.addChild(this._limitedTermGauge)
        }
        this._limitedTermGauge.y = 117 - 153;
        this._limitedTermGauge.x = 246 - 22;
        this._incentiveCurrentTile.y = Number(this._incentiveStepTilePosArray[8]);
        this._currentScrollPos = 8
    } else if (this._main.isJoinSpecialChallenge == 1) {
        if (this._stepIncentiveGauge)
            this.removeFromParent(this._stepIncentiveGauge);
        if (this._limitedTermGauge)
            this.removeFromParent(this._limitedTermGauge);
        this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_QUANTITY));
        tl.x = 8;
        tl.y = 10;
        if (this._limitedQuantityGauge == null) {
            this._limitedQuantityGauge = new pigg.puzzle.view.GaugeView(this._main);
            this._eventInfoScrollContainer.addChild(this._limitedQuantityGauge)
        }
        this._limitedQuantityGauge.y = 117 - 153;
        this._limitedQuantityGauge.x = 246 - 22;
        this._incentiveCurrentTile.y = Number(this._incentiveStepTilePosArray[9]);
        this._currentScrollPos = 9
    } else if (this._main.isJoinSpecialChallenge == 2) {
        if (this._stepIncentiveGauge)
            this.removeFromParent(this._stepIncentiveGauge);
        this._incentiveCurrentTile.y = Number(this._incentiveStepTilePosArray[9]);
        this._incentiveStepTilemap.addTileAt(this._incentiveCurrentTile2, 0);
        this._incentiveCurrentTile2.y = Number(this._incentiveStepTilePosArray[8]);
        this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_TERM));
        tl.x = 8;
        tl.y = 12;
        this._eventInfoScrollTitleTilemap.addTile(tl = new openfl.display.Tile(this.RECT_EVENT_GAUGE_TITLE_QUANTITY));
        tl.x = 8;
        tl.y = 45;
        if (this._limitedTermGauge == null) {
            this._limitedTermGauge = new pigg.puzzle.view.GaugeView(this._main);
            this._eventInfoScrollContainer.addChild(this._limitedTermGauge)
        }
        if (this._limitedQuantityGauge == null) {
            this._limitedQuantityGauge = new pigg.puzzle.view.GaugeView(this._main);
            this._eventInfoScrollContainer.addChild(this._limitedQuantityGauge)
        }
        this._limitedTermGauge.x = 246 - 22;
        this._limitedTermGauge.y = 117 - 187;
        this._limitedQuantityGauge.x = 246 - 22;
        this._limitedQuantityGauge.y = 150 - 187;
        this._currentScrollPos = 8
    }
}
;
pigg.puzzle.view.EventView.prototype.makeIncentiveData = function() {
    var spr = new openfl.display.Sprite;
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    var stepData;
    var itemData;
    var stepPointTxt;
    var itemNameTxt;
    var stepFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,20);
    var itemFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,24);
    var thumbUrl;
    var iconView;
    var stepTile;
    var addX = 0;
    this.traceLog('makeIncentiveData', this._main);
    this.traceLog('makeIncentiveData', this._main.eventData);
    if (this._main == null)
        return;
    if (this._main.eventData == null)
        return;
    var stepTileset = this._main.commonPartsTileset.clone();
    this._incentiveStepTilemap = new openfl.display.Tilemap(420,109,stepTileset);
    this._stepIncentives = [];
    this._incentiveCount = 0;
    this._incentiveContainer = new openfl.display.Sprite;
    this._incentiveTxtContainer = new openfl.display.Sprite;
    this._incentiveIconContainer = new openfl.display.Sprite;
    this._incentiveContainer.addChild(this._incentiveIconContainer);
    this._incentiveContainer.addChild(this._incentiveTxtContainer);
    this._incentiveIconContainer.addChild(this._incentiveStepTilemap);
    var sid = stepTileset.addRect(new openfl.geom.Rectangle(54,762,418,44));
    this._incentiveStepTilemap.addTile(this._incentiveCurrentTile = new TileBase(sid));
    this._incentiveCurrentTile2 = new TileBase(sid);
    this._incentiveStepTilemap.x = 2;
    var dg = 0;
    var point = 0;
    this.RECT_INCENTIVE_STEP_TARGET = stepTileset.addRect(new openfl.geom.Rectangle(466,700,50,19));
    this.RECT_INCENTIVE_STEP_CLEAR = stepTileset.addRect(new openfl.geom.Rectangle(520,700,73,20));
    this.RECT_INCENTIVE_STEP_END = stepTileset.addRect(new openfl.geom.Rectangle(600,700,119,19));
    if (!this._main.specialChallengeExist)
        len = this._main.eventData.stepDataVec.length;
    else
        len = this._main.eventData.stepDataVec.length + 2;
    this.traceLog('_main.specialChallengeExist::', this._main.specialChallengeExist);
    for (cnt = 0; cnt < len; cnt++) {
        if (cnt >= 1)
            addX = cnt * 4;
        this._stepIncentives[cnt] = [];
        if (cnt < 8)
            stepData = this._main.eventData.stepDataVec[cnt];
        this._incentiveStepTilemap.addTile(stepTile = new openfl.display.Tile(stepTileset.addRect(new openfl.geom.Rectangle(54,392 + cnt * 37,410,36))));
        stepTile.x = 4;
        stepTile.y = 4 + this._incentiveCount * 127 + cnt * 50 + addX;
        this._incentiveStepTilePosArray.push(stepTile.y - 4);
        this.traceLog('_incentiveStepTilePosArray::', cnt, '::', this._incentiveStepTilePosArray[cnt]);
        this._incentiveStepTergetTileArray.push(new TileBase(this.RECT_INCENTIVE_STEP_TARGET));
        this._incentiveStepTilemap.addTile(this._incentiveStepTergetTileArray[cnt]);
        this._incentiveStepTergetTileArray[cnt].y = stepTile.y + 9;
        this._incentiveStepTergetTileArray[cnt].x = 207;
        if (cnt == 9)
            point = this._main.eventData.limitedQuantityPoint;
        else if (cnt == 8)
            point = this._main.eventData.limitedTermPoint;
        else
            point = stepData.point;
        dg = this.getDigit(point);
        if (dg == 5)
            this._incentiveStepTergetTileArray[cnt].x = 207 + 40;
        else if (dg == 6)
            this._incentiveStepTergetTileArray[cnt].x = 207 + 20;
        this._fontNumberManager.makeFontInfo('targetScore' + cnt, 300, 100, this._incentiveIconContainer, 8994560, 8994560, 300, 0, 4.8, 'RIGHT');
        this._fontNumberManager.makeNumber('targetScore' + cnt, point);
        this._fontNumberManager.getFontInfo('targetScore' + cnt).tilemap.y = this._incentiveStepTergetTileArray[cnt].y - 2;
        this._fontNumberManager.getFontInfo('targetScore' + cnt).tilemap.x = 256;
        if (cnt == 9)
            len2 = this._main.eventData.eventLimitedQuantityIncentiveItemData.length;
        else if (cnt == 8)
            len2 = this._main.eventData.eventLimitedTermIncentiveItemData.length;
        else
            len2 = stepData.eventIncentiveItemData.length;
        for (cnt2 = 0; cnt2 < len2; cnt2++) {
            if (cnt == 9)
                itemData = this._main.eventData.eventLimitedQuantityIncentiveItemData[cnt2];
            else if (cnt == 8)
                itemData = this._main.eventData.eventLimitedTermIncentiveItemData[cnt2];
            else
                itemData = stepData.eventIncentiveItemData[cnt2];
            iconView = new pigg.puzzle.view.IconView(this._main);
            iconView.quantity = itemData.itemQuantity;
            if (cnt == 9 && this._main.userData.hasLimitedQuantityIncentive || cnt == 8 && this._main.userData.hasLimitedTermIncentive || this._main.currentEventStep > cnt)
                iconView.isGet = true;
            this.traceLog('_main.isLocal::', this._main.isLocal);
            if (this._main.isLocal)
                thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
            else
                thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
            this._loadIncentivePngCnt++;
            this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'), [org.apache.royale.utils.Language.closure(this.addIncentivePngCnt, this, 'addIncentivePngCnt')]);
            iconView.x = 2;
            iconView.y = this._incentiveCount * 127 + (cnt + 1) * 50 + addX;
            this._incentiveIconContainer.addChild(iconView);
            if (cnt >= 8)
                iconView.isSpecial = true;
            itemNameTxt = new openfl.text.TextField;
            itemNameTxt.setTextFormat(itemFormat);
            itemNameTxt.textColor = 8994560;
            itemNameTxt.selectable = false;
            itemNameTxt.wordWrap = true;
            itemNameTxt.width = 280;
            itemNameTxt.height = 120;
            itemNameTxt.text = itemData.itemName + '\n\u3000';
            itemNameTxt.x = 135;
            itemNameTxt.y = this._incentiveCount * 127 + (cnt + 1) * 50 + 16 + addX;
            itemNameTxt.y += (4 - itemNameTxt.numLines) * 12;
            this._incentiveTxtContainer.addChild(itemNameTxt);
            this._stepIncentives[cnt].push(iconView);
            this._incentiveCount++
        }
    }
    this._incentiveStepTilemap.height = this._incentiveContainer.height;
    this._eventInfoScrollView.setContent(this._incentiveContainer)
}
;
pigg.puzzle.view.EventView.prototype._loadIncentivePngCnt = 0;
pigg.puzzle.view.EventView.prototype._loadedIncentivePngCnt = 0;
pigg.puzzle.view.EventView.prototype.addIncentivePngCnt = function() {
    this._loadedIncentivePngCnt++;
    this.traceLog('\u8aad\u307f\u8fbc\u307f\u4e2d', this._loadIncentivePngCnt, this._loadedIncentivePngCnt);
    if (this._loadIncentivePngCnt == this._loadedIncentivePngCnt) {
        this.traceLog('\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86');
        this.show(this._showStepMode);
        this._main.hideApiLoading()
    }
    this.traceLog('addIncentivePngCnt::', this._loadIncentivePngCnt)
}
;
pigg.puzzle.view.EventView.prototype.makeLimitedIncentive = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self._eventInfoScrollView.updatePosition(-self._incentiveStepTilePosArray[8])
    };
    var __localFn1__ = function(e) {
        self._eventInfoScrollView.updatePosition(-self._incentiveStepTilePosArray[9])
    };
    this.traceLog('makeLimitedIncentive');
    this._specialChallengeInfoBgTilemap = new openfl.display.Tilemap(342,87,this._eventTileset);
    this._specialChallengeInfoBgTilemap.addTile(new openfl.display.Tile(this.RECT_EVENT_SPECIAL_BG));
    this._specialChallengeInfoContainer = new openfl.display.Sprite;
    this._base.addChild(this._specialChallengeInfoContainer);
    this._specialChallengeInfoContainer.y = 658;
    if (this._main.existRanking)
        this._specialChallengeInfoContainer.x = 22;
    else
        this._specialChallengeInfoContainer.x = 78;
    this._specialChallengeInfoContainer.addChild(this._specialChallengeInfoBgTilemap);
    this._spTermIconView = new pigg.puzzle.view.IconView(this._main);
    this._specialChallengeInfoContainer.addChild(this._spTermIconView);
    this._spTermIconView.isSpc = 0;
    this._spTermIconView.x = 117;
    this._spTermIconView.y = -13;
    this._spQuantityIconView = new pigg.puzzle.view.IconView(this._main);
    this._specialChallengeInfoContainer.addChild(this._spQuantityIconView);
    this._spQuantityIconView.isSpc = 0;
    this._spQuantityIconView.x = 222;
    this._spQuantityIconView.y = -13;
    var infoFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,16);
    infoFormat.size = 14;
    this._infoTermLimitTxt = new openfl.text.TextField;
    this._infoTermLimitTxt.defaultTextFormat = infoFormat;
    this._infoTermLimitTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    this._infoTermLimitTxt.width = 100;
    this._infoTermLimitTxt.textColor = 16777215;
    this._infoTermLimitTxt.text = '';
    this._infoTermLimitTxt.x = 117;
    this._infoTermLimitTxt.y = 58;
    if (AsData.ua > 1)
        this._infoTermLimitTxt.y = 58 + 5;
    this._specialChallengeInfoContainer.addChild(this._infoTermLimitTxt);
    this._infoStockQuantityTxt = new openfl.text.TextField;
    this._infoStockQuantityTxt.defaultTextFormat = infoFormat;
    this._infoStockQuantityTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    this._infoStockQuantityTxt.width = 100;
    this._infoStockQuantityTxt.textColor = 16777215;
    this._infoStockQuantityTxt.text = '';
    this._infoStockQuantityTxt.x = 222;
    this._infoStockQuantityTxt.y = 58;
    if (AsData.ua > 1)
        this._infoStockQuantityTxt.y = 58 + 5;
    this._specialChallengeInfoContainer.addChild(this._infoStockQuantityTxt);
    var thumbUrl;
    var itemData;
    itemData = this._main.eventData.eventLimitedTermIncentiveItemData[0];
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
    this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(this._spTermIconView.setIconData, this._spTermIconView, 'setIconData'));
    if (this._main.eventData.eventLimitedTermIncentiveItemData.length > 1)
        this._spTermIconView.isPlus = true;
    itemData = this._main.eventData.eventLimitedQuantityIncentiveItemData[0];
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
    this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(this._spQuantityIconView.setIconData, this._spQuantityIconView, 'setIconData'));
    if (this._main.eventData.eventLimitedQuantityIncentiveItemData.length > 1)
        this._spQuantityIconView.isPlus = true;
    this._spTermIconView.addEventListener(openfl.events.MouseEvent.CLICK, __localFn0__);
    this._spQuantityIconView.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__)
}
;
pigg.puzzle.view.EventView.prototype.updateIconInfo = function() {
    this.traceLog('updateIconInfo');
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    len = this._stepIncentives.length;
    for (cnt = 0; cnt < len; cnt++) {
        len2 = Number(this._stepIncentives[cnt].length);
        if (cnt == 9 && this._main.userData.hasLimitedQuantityIncentive || cnt == 8 && this._main.userData.hasLimitedTermIncentive || this._main.currentEventStep > cnt)
            if (this._incentiveStepTergetTileArray[cnt].id != this.RECT_INCENTIVE_STEP_CLEAR) {
                this._incentiveStepTergetTileArray[cnt].updateId(this.RECT_INCENTIVE_STEP_CLEAR);
                this._incentiveStepTergetTileArray[cnt].x = 321;
                this._fontNumberManager.removeNumber('targetScore' + cnt, true)
            }
        for (cnt2 = 0; cnt2 < len2; cnt2++) {
            if (this._stepIncentives[cnt][cnt2].isGet)
                continue;
            if (cnt == 9 && this._main.userData.hasLimitedQuantityIncentive || cnt == 8 && this._main.userData.hasLimitedTermIncentive || this._main.currentEventStep > cnt) {
                this._stepIncentives[cnt][cnt2].isGet = true;
                this._stepIncentives[cnt][cnt2].updateIconData()
            }
            if (cnt == 9 && this._limitedQuantityIsEnd || cnt == 8 && this._limitedTermIsEnd) {
                this._stepIncentives[cnt][cnt2].isEnd = true;
                this._stepIncentives[cnt][cnt2].updateIconData();
                if (cnt == 8) {
                    this._spTermIconView.isEnd = true;
                    this._spTermIconView.updateIconData()
                } else if (cnt == 9) {
                    this._spQuantityIconView.isEnd = true;
                    this._spQuantityIconView.updateIconData()
                }
            }
        }
    }
    if (this._limitedTermIsEnd && !this._main.userData.hasLimitedTermIncentive) {
        this._incentiveStepTergetTileArray[8].updateId(this.RECT_INCENTIVE_STEP_END);
        this._incentiveStepTergetTileArray[8].x = 275;
        this._fontNumberManager.removeNumber('targetScore' + 8, true)
    }
    if (this._limitedQuantityIsEnd && !this._main.userData.hasLimitedQuantityIncentive) {
        this._incentiveStepTergetTileArray[9].updateId(this.RECT_INCENTIVE_STEP_END);
        this._incentiveStepTergetTileArray[9].x = 275;
        this._fontNumberManager.removeNumber('targetScore' + 9, true)
    }
    if (this._limitedTermMainIncentive && !this._limitedTermMainIncentive.isGet && this._main.userData.hasLimitedTermIncentive) {
        this._limitedTermMainIncentive.isGet = true;
        this._limitedTermMainIncentive.updateIconData()
    }
    if (this._limitedQuantityMainIncentive && !this._limitedQuantityMainIncentive.isGet && this._main.userData.hasLimitedQuantityIncentive) {
        this._limitedQuantityMainIncentive.isGet = true;
        this._limitedQuantityMainIncentive.updateIconData()
    }
}
;
pigg.puzzle.view.EventView.prototype.hide = function() {
    var self = this;
    var __localFn0__ = function() {
        self._eventInfoView.cacheAsBitmap = false;
        self._this.visible = false;
        self._isShow = false;
        self._main.isShowEventView = false
    };
    com.greensock.TweenMax.killTweensOf(this._eventInfoView);
    com.greensock.TweenMax.killTweensOf(this._backBlack);
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 0
    });
    this._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
    var tarY = 0;
    if (this._main.appType == 'game')
        tarY = pigg.puzzle.view.CommonView.STAGE_HEIGHT + 40;
    else
        tarY = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT + 40;
    if (!this._eventInfoView.cacheAsBitmap)
        this._eventInfoView.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._eventInfoView, .3, {
        y: tarY,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.EventView.prototype.closeMD = function(e) {
    this.hide()
}
;
pigg.puzzle.view.EventView.prototype.switchStepRanking = function(dispType) {
    dispType = typeof dispType !== 'undefined' ? dispType : '';
    this.traceLog('EventView::switchStepRanking::', dispType, this._currentDispMode);
    if (dispType == 'ranking' || this._currentDispMode == 'step') {
        this.showRanking();
        this._currentDispMode = 'ranking';
        this._eventInfoScrollContainer.visible = false;
        if (this._switchButtonRankStepTile.id != this.RECT_SWITCH_BTN_STEP)
            this._switchButtonRankStepTile.updateId(this.RECT_SWITCH_BTN_STEP)
    } else if (dispType == 'step' || this._currentDispMode == 'ranking') {
        this.hideRanking();
        this._currentDispMode = 'step';
        this._eventInfoScrollContainer.visible = true;
        if (this._switchButtonRankStepTile.id != this.RECT_SWITCH_BTN_RANKING)
            this._switchButtonRankStepTile.updateId(this.RECT_SWITCH_BTN_RANKING)
    }
}
;
pigg.puzzle.view.EventView.prototype.baseCL = function(e) {
    this.traceLog('baseCL::', this._main.existRanking, e.currentTarget.mouseX, e.currentTarget.mouseY);
    if (e.currentTarget.mouseX > 250 && e.currentTarget.mouseX < 435 && e.currentTarget.mouseY > 15 && e.currentTarget.mouseY < 55)
        openfl.net.navigateToURL(new openfl.net.URLRequest(this._main.eventData.detailURL), '_blank');
    else if (this._main.existRanking && e.currentTarget.mouseX > 360 && e.currentTarget.mouseX < 470 && e.currentTarget.mouseY > 650 && e.currentTarget.mouseY < 750) {
        this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u5207\u308a\u66ff\u3048');
        this.switchStepRanking();
        this.btnDownAction(this._switchButtonContainer)
    }
}
;
pigg.puzzle.view.EventView.prototype._isInitRanking = false;
pigg.puzzle.view.EventView.prototype.showRanking = function() {
    if (!this._isInitRanking) {
        this._main.showApiLoading();
        this._main.initRanking('event');
        return
    }
    this.traceLog('EventView::showRanking::_main.checkUpdateRanking::', this._main.checkUpdateRanking());
    if (this._main.checkUpdateRanking())
        this._main.updateRankingData();
    this._rankingContainer.visible = true;
    this._main.eventRankingView.show();
    this._rankingContainer.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.rankingPanelCL, this, 'rankingPanelCL'))
}
;
pigg.puzzle.view.EventView.prototype.rankingPanelCL = function(e) {
    this.traceLog('rankingPanelCL::', e.currentTarget.mouseX, e.currentTarget.mouseY);
    if (e.currentTarget.mouseY > 0 && e.currentTarget.mouseY < 45)
        if (this._currentRankTypeMode == 'winning_streak' && e.currentTarget.mouseX > 0 && e.currentTarget.mouseX < 225)
            this.switchRankingType('score');
        else {
            if (this._currentRankTypeMode == 'score' && e.currentTarget.mouseX > 230 && e.currentTarget.mouseX < 450)
                this.switchRankingType('winning_streak')
        }
    else if (e.currentTarget.mouseX > 310 && e.currentTarget.mouseY > 60 && e.currentTarget.mouseX < 445 && e.currentTarget.mouseY < 90)
        this._main.showTopRankingView(this._currentRankTypeMode)
}
;
pigg.puzzle.view.EventView.prototype.hideRanking = function() {
    this._rankingContainer.visible = false;
    this._rankingContainer.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.rankingPanelCL, this, 'rankingPanelCL'))
}
;
pigg.puzzle.view.EventView.prototype.switchRankingType = function(rankType) {
    this.traceLog('switchRankingType');
    if (this._currentRankTypeMode == 'score') {
        this._currentRankTypeMode = 'winning_streak';
        this._rankingBgWinning.visible = true;
        this._rankingBgScore.visible = false;
        this._main.eventRankingView.switchRankType(1)
    } else {
        this._currentRankTypeMode = 'score';
        this._rankingBgWinning.visible = false;
        this._rankingBgScore.visible = true;
        this._main.eventRankingView.switchRankType(0)
    }
}
;
pigg.puzzle.view.EventView.prototype._rankingTileset;
pigg.puzzle.view.EventView.prototype._viewRankingIncentiveBtn;
pigg.puzzle.view.EventView.prototype.initRankingContent = function() {
    var self = this;
    var __localFn0__ = function() {
        self.btnDownAction(tl);
        self._main.showRankingIncentiveView(self._currentRankTypeMode)
    };
    var tl;
    var tilemap;
    this.traceLog('EventView::initRanking');
    this._rankingContainer = new openfl.display.Sprite;
    this._eventInfoView.addChild(this._rankingContainer);
    this._rankingTileset = this._main.rankingPartsTileset.clone();
    this._rankingBgScore = new openfl.display.Tilemap(454,521,this._rankingTileset);
    this._rankingContainer.addChild(this._rankingBgScore);
    this._rankingBgScore.addTile(new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1,974,454,90))));
    this._rankingBgScore.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1,1064,454,10))));
    tl.y = 511;
    this._rankingBgScore.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1,1063,454,1))));
    tl.scaleY = 421;
    tl.y = 90;
    this._rankingBgWinning = new openfl.display.Tilemap(454,521,this._rankingTileset);
    this._rankingContainer.addChild(this._rankingBgWinning);
    this._rankingBgWinning.addTile(new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(456,974,454,90))));
    this._rankingBgWinning.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(456,1064,454,10))));
    tl.y = 511;
    this._rankingBgWinning.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(456,1063,454,1))));
    tl.scaleY = 421;
    tl.y = 90;
    this._rankingBgWinning.visible = false;
    this._viewRankingIncentiveBtn = new openfl.display.Sprite;
    tilemap = new openfl.display.Tilemap(273,77,this._rankingTileset);
    tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1090,689,273,77))));
    tl.originX = 137;
    tl.originY = 38;
    tl.x = 137;
    tl.y = 38;
    tilemap.x = 91;
    tilemap.y = 425;
    this._viewRankingIncentiveBtn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn0__);
    this._viewRankingIncentiveBtn.addChild(tilemap);
    this._rankingContainer.addChild(this._viewRankingIncentiveBtn);
    this._rankingContainer.x = 22;
    this._rankingContainer.y = 115;
    this._rankingContainer.addChild(this._main.eventRankingView);
    this._main.hideApiLoading();
    this._isInitRanking = true;
    this.showRanking()
}
;
pigg.puzzle.view.EventView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.EventView.prototype.get__hasUpdate = function() {
    return this._hasUpdate
}
;
pigg.puzzle.view.EventView.prototype.set__hasUpdate = function(v) {
    this._hasUpdate = v
}
;
Object.defineProperties(pigg.puzzle.view.EventView.prototype, {
    isShow: {
        get: pigg.puzzle.view.EventView.prototype.get__isShow
    },
    hasUpdate: {
        get: pigg.puzzle.view.EventView.prototype.get__hasUpdate,
        set: pigg.puzzle.view.EventView.prototype.set__hasUpdate
    }
});
pigg.puzzle.view.EventView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'EventView',
        qName: 'pigg.puzzle.view.EventView',
        kind: 'class'
    }]
};
pigg.puzzle.view.EventView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'hasUpdate': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.EventView'
                }
            }
        },
        methods: function() {
            return {
                'EventView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'updateInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'addIncentivePngCnt': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'updateIconInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView'
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'switchStepRanking': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'initRankingContent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.EventView'
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleRankingUserData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleRankingUserData', pigg.data.puzzle.PuzzleRankingUserData);
pigg.data.puzzle.PuzzleRankingUserData.prototype._userCode;
pigg.data.puzzle.PuzzleRankingUserData.prototype._piggCode;
pigg.data.puzzle.PuzzleRankingUserData.prototype._nickname;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointRank = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointAwardName;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointAwardIndex = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointValue = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointPrevRank = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningRank = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningAwardName;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningAwardIndex = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningValue = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningPrevRank = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointHasSpecialIncentive = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningHasSpecialIncentive = 0;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointLastUpdateTime;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningLastUpdateTime;
pigg.data.puzzle.PuzzleRankingUserData.prototype._pointRankIncentive;
pigg.data.puzzle.PuzzleRankingUserData.prototype._winningRankIncentive;
pigg.data.puzzle.PuzzleRankingUserData.prototype.awardIndex = function(awardName) {
    if (awardName == 'kin_kuma')
        return 8;
    else if (awardName == 'gin_ookami')
        return 7;
    else if (awardName == 'dou_saru')
        return 6;
    else if (awardName == 'tanuki')
        return 5;
    else if (awardName == 'kitsune')
        return 4;
    else if (awardName == 'shika')
        return 3;
    else if (awardName == 'harinezumi')
        return 2;
    else if (awardName == 'risu')
        return 1;
    return -1
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__userCode = function() {
    return this._userCode
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__userCode = function(v) {
    this._userCode = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__piggCode = function() {
    return this._piggCode
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__piggCode = function(v) {
    this._piggCode = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__nickname = function() {
    return this._nickname
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__nickname = function(v) {
    this._nickname = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointAwardName = function() {
    return this._pointAwardName
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointAwardName = function(v) {
    this._pointAwardName = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningAwardName = function() {
    return this._winningAwardName
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningAwardName = function(v) {
    this._winningAwardName = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointRank = function() {
    return this._pointRank
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointRank = function(v) {
    this._pointRank = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointAwardIndex = function() {
    return this._pointAwardIndex
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointAwardIndex = function(v) {
    this._pointAwardIndex = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointValue = function() {
    return this._pointValue
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointValue = function(v) {
    this._pointValue = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointPrevRank = function() {
    return this._pointPrevRank
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointPrevRank = function(v) {
    this._pointPrevRank = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningRank = function() {
    return this._winningRank
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningRank = function(v) {
    this._winningRank = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningAwardIndex = function() {
    return this._winningAwardIndex
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningAwardIndex = function(v) {
    this._winningAwardIndex = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningValue = function() {
    return this._winningValue
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningValue = function(v) {
    this._winningValue = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningPrevRank = function() {
    return this._winningPrevRank
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningPrevRank = function(v) {
    this._winningPrevRank = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointHasSpecialIncentive = function() {
    return this._pointHasSpecialIncentive
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointHasSpecialIncentive = function(v) {
    this._pointHasSpecialIncentive = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningHasSpecialIncentive = function() {
    return this._winningHasSpecialIncentive
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningHasSpecialIncentive = function(v) {
    this._winningHasSpecialIncentive = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointRankIncentive = function() {
    return this._pointRankIncentive
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointRankIncentive = function(v) {
    this._pointRankIncentive = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningRankIncentive = function() {
    return this._winningRankIncentive
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningRankIncentive = function(v) {
    this._winningRankIncentive = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointLastUpdateTime = function() {
    return this._pointLastUpdateTime
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointLastUpdateTime = function(v) {
    this._pointLastUpdateTime = v
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningLastUpdateTime = function() {
    return this._winningLastUpdateTime
}
;
pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningLastUpdateTime = function(v) {
    this._winningLastUpdateTime = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleRankingUserData.prototype, {
    userCode: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__userCode,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__userCode
    },
    piggCode: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__piggCode,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__piggCode
    },
    nickname: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__nickname,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__nickname
    },
    pointAwardName: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointAwardName,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointAwardName
    },
    winningAwardName: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningAwardName,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningAwardName
    },
    pointRank: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointRank,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointRank
    },
    pointAwardIndex: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointAwardIndex,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointAwardIndex
    },
    pointValue: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointValue,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointValue
    },
    pointPrevRank: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointPrevRank,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointPrevRank
    },
    winningRank: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningRank,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningRank
    },
    winningAwardIndex: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningAwardIndex,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningAwardIndex
    },
    winningValue: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningValue,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningValue
    },
    winningPrevRank: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningPrevRank,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningPrevRank
    },
    pointHasSpecialIncentive: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointHasSpecialIncentive,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointHasSpecialIncentive
    },
    winningHasSpecialIncentive: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningHasSpecialIncentive,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningHasSpecialIncentive
    },
    pointRankIncentive: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointRankIncentive,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointRankIncentive
    },
    winningRankIncentive: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningRankIncentive,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningRankIncentive
    },
    pointLastUpdateTime: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__pointLastUpdateTime,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__pointLastUpdateTime
    },
    winningLastUpdateTime: {
        get: pigg.data.puzzle.PuzzleRankingUserData.prototype.get__winningLastUpdateTime,
        set: pigg.data.puzzle.PuzzleRankingUserData.prototype.set__winningLastUpdateTime
    }
});
pigg.data.puzzle.PuzzleRankingUserData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleRankingUserData',
        qName: 'pigg.data.puzzle.PuzzleRankingUserData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleRankingUserData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'userCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'piggCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'nickname': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointAwardName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningAwardName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointRank': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointAwardIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointValue': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointPrevRank': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningRank': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningAwardIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningValue': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningPrevRank': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointHasSpecialIncentive': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningHasSpecialIncentive': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointRankIncentive': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningRankIncentive': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'pointLastUpdateTime': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'winningLastUpdateTime': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleRankingUserData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData'
                },
                'awardIndex': {
                    type: 'int',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingUserData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Skeleton = function(data) {
    this._updateCache = org.apache.royale.utils.Language.Vector();
    this._updateCacheReset = org.apache.royale.utils.Language.Vector();
    this.color = new spine.Color(1,1,1,1);
    if (data == null)
        throw new openfl.errors.ArgumentError('Skeleton::data cannot be null.');
    this._data = data;
    this.bones = org.apache.royale.utils.Language.Vector();
    var foreachiter0_target = data.bones;
    for (var foreachiter0 in foreachiter0_target) {
        var boneData = foreachiter0_target[foreachiter0];
        {
            var bone;
            if (boneData.parent == null)
                bone = new spine.Bone(boneData,this,null);
            else {
                var parent = this.bones[boneData.parent.index];
                bone = new spine.Bone(boneData,this,parent);
                parent.children.push(bone)
            }
            this.bones.push(bone)
        }
    }
    this.slots = org.apache.royale.utils.Language.Vector();
    this.drawOrder = org.apache.royale.utils.Language.Vector();
    var foreachiter1_target = data.slots;
    for (var foreachiter1 in foreachiter1_target) {
        var slotData = foreachiter1_target[foreachiter1];
        {
            bone = this.bones[slotData.boneData.index];
            var slot = new spine.Slot(slotData,bone);
            this.slots.push(slot);
            this.drawOrder[this.drawOrder.length] = slot
        }
    }
    this.ikConstraints = org.apache.royale.utils.Language.Vector();
    var foreachiter2_target = data.ikConstraints;
    for (var foreachiter2 in foreachiter2_target) {
        var ikConstraintData = foreachiter2_target[foreachiter2];
        this.ikConstraints.push(new spine.IkConstraint(ikConstraintData,this))
    }
    this.transformConstraints = org.apache.royale.utils.Language.Vector();
    var foreachiter3_target = data.transformConstraints;
    for (var foreachiter3 in foreachiter3_target) {
        var transformConstraintData = foreachiter3_target[foreachiter3];
        this.transformConstraints.push(new spine.TransformConstraint(transformConstraintData,this))
    }
    this.pathConstraints = org.apache.royale.utils.Language.Vector();
    var foreachiter4_target = data.pathConstraints;
    for (var foreachiter4 in foreachiter4_target) {
        var pathConstraintData = foreachiter4_target[foreachiter4];
        this.pathConstraints.push(new spine.PathConstraint(pathConstraintData,this))
    }
    this.updateCache()
}
;
goog.exportSymbol('spine.Skeleton', spine.Skeleton);
spine.Skeleton.prototype._data;
spine.Skeleton.prototype.bones;
spine.Skeleton.prototype.slots;
spine.Skeleton.prototype.drawOrder;
spine.Skeleton.prototype.ikConstraints;
spine.Skeleton.prototype.transformConstraints;
spine.Skeleton.prototype.pathConstraints;
spine.Skeleton.prototype._updateCache;
spine.Skeleton.prototype._updateCacheReset;
spine.Skeleton.prototype._skin;
spine.Skeleton.prototype.color;
spine.Skeleton.prototype.time = 0;
spine.Skeleton.prototype.flipX;
spine.Skeleton.prototype.flipY;
spine.Skeleton.prototype.x = 0;
spine.Skeleton.prototype.y = 0;
spine.Skeleton.prototype.updateCache = function() {
    var updateCache = this._updateCache;
    updateCache.length = 0;
    this._updateCacheReset.length = 0;
    var bones = this.bones;
    var i = 0;
    var n = 0;
    for (i = 0,
    n = bones.length; i < n; i++)
        bones[i]._sorted = false;
    var ikConstraints = this.ikConstraints;
    var transformConstraints = this.transformConstraints;
    var pathConstraints = this.pathConstraints;
    var ikCount = ikConstraints.length
      , transformCount = transformConstraints.length
      , pathCount = pathConstraints.length;
    var constraintCount = ikCount + transformCount + pathCount;
    outer: for (i = 0; i < constraintCount; i++) {
        var ii = 0;
        for (ii = 0; ii < ikCount; ii++) {
            var ikConstraint = ikConstraints[ii];
            if (ikConstraint.data.order == i) {
                this.sortIkConstraint(ikConstraint);
                continue outer
            }
        }
        for (ii = 0; ii < transformCount; ii++) {
            var transformConstraint = transformConstraints[ii];
            if (transformConstraint.data.order == i) {
                this.sortTransformConstraint(transformConstraint);
                continue outer
            }
        }
        for (ii = 0; ii < pathCount; ii++) {
            var pathConstraint = pathConstraints[ii];
            if (pathConstraint.data.order == i) {
                this.sortPathConstraint(pathConstraint);
                continue outer
            }
        }
    }
    for (i = 0,
    n = bones.length; i < n; i++)
        this.sortBone(bones[i])
}
;
spine.Skeleton.prototype.sortIkConstraint = function(constraint) {
    var target = constraint.target;
    this.sortBone(target);
    var constrained = constraint.bones;
    var parent = constrained[0];
    this.sortBone(parent);
    if (constrained.length > 1) {
        var child = constrained[constrained.length - 1];
        if (!(this._updateCache.indexOf(child) > -1))
            this._updateCacheReset.push(child)
    }
    this._updateCache.push(constraint);
    this.sortReset(parent.children);
    constrained[constrained.length - 1]._sorted = true
}
;
spine.Skeleton.prototype.sortPathConstraint = function(constraint) {
    var slot = constraint.target;
    var slotIndex = slot.data.index;
    var slotBone = slot.bone;
    if (this.skin != null)
        this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);
    if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin)
        this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);
    var i = 0;
    var n = 0;
    for (i = 0,
    n = this.data.skins.length; i < n; i++)
        this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);
    var attachment = slot.attachment;
    if (org.apache.royale.utils.Language.is(attachment, spine.attachments.PathAttachment))
        this.sortPathConstraintAttachment2(attachment, slotBone);
    var constrained = constraint.bones;
    var boneCount = constrained.length;
    for (i = 0; i < boneCount; i++)
        this.sortBone(constrained[i]);
    this._updateCache.push(constraint);
    for (i = 0; i < boneCount; i++)
        this.sortReset(constrained[i].children);
    for (i = 0; i < boneCount; i++)
        constrained[i]._sorted = true
}
;
spine.Skeleton.prototype.sortTransformConstraint = function(constraint) {
    this.sortBone(constraint.target);
    var constrained = constraint.bones;
    var boneCount = constrained.length;
    var i = 0;
    if (constraint.data.local)
        for (i = 0; i < boneCount; i++) {
            var child = constrained[i];
            this.sortBone(child.parent);
            if (!(this._updateCache.indexOf(child) > -1))
                this._updateCacheReset.push(child)
        }
    else
        for (i = 0; i < boneCount; i++)
            this.sortBone(constrained[i]);
    this._updateCache.push(constraint);
    for (i = 0; i < boneCount; i++)
        this.sortReset(constrained[i].children);
    for (i = 0; i < boneCount; i++)
        constrained[i]._sorted = true
}
;
spine.Skeleton.prototype.sortPathConstraintAttachment = function(skin, slotIndex, slotBone) {
    if (!skin.attachments.hasOwnProperty(slotIndex))
        return;
    var dict = skin.attachments[slotIndex];
    if (!dict)
        return;
    var foreachiter5_target = dict;
    for (var foreachiter5 in foreachiter5_target) {
        var value = foreachiter5_target[foreachiter5];
        {
            this.sortPathConstraintAttachment2(value, slotBone)
        }
    }
}
;
spine.Skeleton.prototype.sortPathConstraintAttachment2 = function(attachment, slotBone) {
    var pathAttachment = org.apache.royale.utils.Language.as(attachment, spine.attachments.PathAttachment);
    if (!pathAttachment)
        return;
    var pathBones = pathAttachment.bones;
    if (pathBones == null)
        this.sortBone(slotBone);
    else {
        var bones = this.bones;
        var i = 0;
        while (i < pathBones.length) {
            var boneCount = Number(pathBones[i++]);
            for (var n = i + boneCount; i < n; i++)
                this.sortBone(bones[pathBones[i]])
        }
    }
}
;
spine.Skeleton.prototype.sortBone = function(bone) {
    if (bone._sorted)
        return;
    var parent = bone.parent;
    if (parent != null)
        this.sortBone(parent);
    bone._sorted = true;
    this._updateCache.push(bone)
}
;
spine.Skeleton.prototype.sortReset = function(bones) {
    var n = bones.length;
    for (var i = 0; i < n; i++) {
        var bone = bones[i];
        if (bone._sorted)
            this.sortReset(bone.children);
        bone._sorted = false
    }
}
;
spine.Skeleton.prototype.updateWorldTransform = function() {
    var updateCacheReset = this._updateCacheReset;
    var foreachiter6_target = updateCacheReset;
    for (var foreachiter6 in foreachiter6_target) {
        var bone = foreachiter6_target[foreachiter6];
        {
            bone.ax = bone.x;
            bone.ay = bone.y;
            bone.arotation = bone.rotation;
            bone.ascaleX = bone.scaleX;
            bone.ascaleY = bone.scaleY;
            bone.ashearX = bone.shearX;
            bone.ashearY = bone.shearY;
            bone.appliedValid = true
        }
    }
    var foreachiter7_target = this._updateCache;
    for (var foreachiter7 in foreachiter7_target) {
        var updatable = foreachiter7_target[foreachiter7];
        updatable.update()
    }
}
;
spine.Skeleton.prototype.setToSetupPose = function() {
    this.setBonesToSetupPose();
    this.setSlotsToSetupPose()
}
;
spine.Skeleton.prototype.setBonesToSetupPose = function() {
    var foreachiter8_target = this.bones;
    for (var foreachiter8 in foreachiter8_target) {
        var bone = foreachiter8_target[foreachiter8];
        bone.setToSetupPose()
    }
    var foreachiter9_target = this.ikConstraints;
    for (var foreachiter9 in foreachiter9_target) {
        var ikConstraint = foreachiter9_target[foreachiter9];
        {
            ikConstraint.bendDirection = ikConstraint._data.bendDirection;
            ikConstraint.mix = ikConstraint._data.mix
        }
    }
    var foreachiter10_target = this.transformConstraints;
    for (var foreachiter10 in foreachiter10_target) {
        var transformConstraint = foreachiter10_target[foreachiter10];
        {
            transformConstraint.rotateMix = transformConstraint._data.rotateMix;
            transformConstraint.translateMix = transformConstraint._data.translateMix;
            transformConstraint.scaleMix = transformConstraint._data.scaleMix;
            transformConstraint.shearMix = transformConstraint._data.shearMix
        }
    }
    var foreachiter11_target = this.pathConstraints;
    for (var foreachiter11 in foreachiter11_target) {
        var pathConstraint = foreachiter11_target[foreachiter11];
        {
            pathConstraint.position = pathConstraint._data.position;
            pathConstraint.spacing = pathConstraint._data.spacing;
            pathConstraint.rotateMix = pathConstraint._data.rotateMix;
            pathConstraint.translateMix = pathConstraint._data.translateMix
        }
    }
}
;
spine.Skeleton.prototype.setSlotsToSetupPose = function() {
    var i = 0;
    var foreachiter12_target = this.slots;
    for (var foreachiter12 in foreachiter12_target) {
        var slot = foreachiter12_target[foreachiter12];
        {
            this.drawOrder[i++] = slot;
            slot.setToSetupPose()
        }
    }
}
;
spine.Skeleton.prototype.findBone = function(boneName) {
    if (boneName == null)
        throw new openfl.errors.ArgumentError('boneName cannot be null.');
    var foreachiter13_target = this.bones;
    for (var foreachiter13 in foreachiter13_target) {
        var bone = foreachiter13_target[foreachiter13];
        if (bone._data._name == boneName)
            return bone
    }
    return null
}
;
spine.Skeleton.prototype.findBoneIndex = function(boneName) {
    if (boneName == null)
        throw new openfl.errors.ArgumentError('boneName cannot be null.');
    var i = 0;
    var foreachiter14_target = this.bones;
    for (var foreachiter14 in foreachiter14_target) {
        var bone = foreachiter14_target[foreachiter14];
        {
            if (bone._data._name == boneName)
                return i;
            i++
        }
    }
    return -1
}
;
spine.Skeleton.prototype.findSlot = function(slotName) {
    if (slotName == null)
        throw new openfl.errors.ArgumentError('slotName cannot be null.');
    var foreachiter15_target = this.slots;
    for (var foreachiter15 in foreachiter15_target) {
        var slot = foreachiter15_target[foreachiter15];
        if (slot._data._name == slotName)
            return slot
    }
    return null
}
;
spine.Skeleton.prototype.findSlotIndex = function(slotName) {
    if (slotName == null)
        throw new openfl.errors.ArgumentError('slotName cannot be null.');
    var i = 0;
    var foreachiter16_target = this.slots;
    for (var foreachiter16 in foreachiter16_target) {
        var slot = foreachiter16_target[foreachiter16];
        {
            if (slot._data._name == slotName)
                return i;
            i++
        }
    }
    return -1
}
;
spine.Skeleton.prototype.getAttachmentForSlotName = function(slotName, attachmentName) {
    return this.getAttachmentForSlotIndex(this.data.findSlotIndex(slotName), attachmentName)
}
;
spine.Skeleton.prototype.getAttachmentForSlotIndex = function(slotIndex, attachmentName) {
    if (attachmentName == null)
        throw new openfl.errors.ArgumentError('attachmentName cannot be null.');
    if (this.skin != null) {
        var attachment = this.skin.getAttachment(slotIndex, attachmentName);
        if (attachment != null)
            return attachment
    }
    if (this.data.defaultSkin != null)
        return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);
    return null
}
;
spine.Skeleton.prototype.setAttachment = function(slotName, attachmentName) {
    if (slotName == null)
        throw new openfl.errors.ArgumentError('slotName cannot be null.');
    var i = 0;
    var foreachiter17_target = this.slots;
    for (var foreachiter17 in foreachiter17_target) {
        var slot = foreachiter17_target[foreachiter17];
        {
            if (slot._data._name == slotName) {
                var attachment = null;
                if (attachmentName != null) {
                    attachment = this.getAttachmentForSlotIndex(i, attachmentName);
                    if (attachment == null)
                        throw new openfl.errors.ArgumentError('Attachment not found: ' + attachmentName + ', for slot: ' + slotName);
                }
                slot.attachment = attachment;
                return
            }
            i++
        }
    }
    throw new openfl.errors.ArgumentError('Slot not found: ' + slotName);
}
;
spine.Skeleton.prototype.findIkConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var foreachiter18_target = this.ikConstraints;
    for (var foreachiter18 in foreachiter18_target) {
        var ikConstraint = foreachiter18_target[foreachiter18];
        if (ikConstraint._data._name == constraintName)
            return ikConstraint
    }
    return null
}
;
spine.Skeleton.prototype.findTransformConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var foreachiter19_target = this.transformConstraints;
    for (var foreachiter19 in foreachiter19_target) {
        var transformConstraint = foreachiter19_target[foreachiter19];
        if (transformConstraint._data._name == constraintName)
            return transformConstraint
    }
    return null
}
;
spine.Skeleton.prototype.findPathConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var foreachiter20_target = this.pathConstraints;
    for (var foreachiter20 in foreachiter20_target) {
        var pathConstraint = foreachiter20_target[foreachiter20];
        if (pathConstraint._data._name == constraintName)
            return pathConstraint
    }
    return null
}
;
spine.Skeleton.prototype.update = function(delta) {
    this.time += delta
}
;
spine.Skeleton.prototype.toString = function() {
    return this._data.name != null ? this._data.name : spine.Skeleton.superClass_.toString.apply(this)
}
;
spine.Skeleton.prototype.getBounds = function(offset, size, temp) {
    if (offset == null)
        throw new openfl.errors.ArgumentError('offset cannot be null.');
    if (size == null)
        throw new openfl.errors.ArgumentError('size cannot be null.');
    var drawOrder = this.drawOrder;
    var minX = Number.POSITIVE_INFINITY
      , minY = Number.POSITIVE_INFINITY
      , maxX = Number.NEGATIVE_INFINITY
      , maxY = Number.NEGATIVE_INFINITY;
    var n = drawOrder.length;
    for (var i = 0; i < n; i++) {
        var slot = drawOrder[i];
        var verticesLength = 0;
        var vertices = null;
        var attachment = slot.attachment;
        if (org.apache.royale.utils.Language.is(attachment, spine.attachments.RegionAttachment)) {
            verticesLength = 8;
            temp.length = verticesLength;
            vertices = temp;
            org.apache.royale.utils.Language.as(attachment, spine.attachments.RegionAttachment).computeWorldVertices(slot.bone, vertices, 0, 2)
        } else if (org.apache.royale.utils.Language.is(attachment, spine.attachments.MeshAttachment)) {
            var mesh = org.apache.royale.utils.Language.as(attachment, spine.attachments.MeshAttachment);
            verticesLength = mesh.worldVerticesLength;
            temp.length = verticesLength;
            vertices = temp;
            mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2)
        }
        if (vertices != null)
            for (; ii < nn; ii += 8) {
                var x = Number(vertices[ii])
                  , y = Number(vertices[ii + 1]);
                minX = Math.min(minX, x);
                minY = Math.min(minY, y);
                maxX = Math.max(maxX, x);
                maxY = Math.max(maxY, y)
            }
    }
    offset[0] = minX;
    offset[1] = minY;
    size[0] = maxX - minX;
    size[1] = maxY - minY
}
;
spine.Skeleton.prototype.get__data = function() {
    return this._data
}
;
spine.Skeleton.prototype.get__getUpdateCache = function() {
    return this._updateCache
}
;
spine.Skeleton.prototype.get__rootBone = function() {
    if (this.bones.length == 0)
        return null;
    return this.bones[0]
}
;
spine.Skeleton.prototype.get__skin = function() {
    return this._skin
}
;
spine.Skeleton.prototype.set__skin = function(newSkin) {
    if (newSkin)
        if (this.skin)
            newSkin.attachAll(this, this.skin);
        else {
            var i = 0;
            var foreachiter21_target = this.slots;
            for (var foreachiter21 in foreachiter21_target) {
                var slot = foreachiter21_target[foreachiter21];
                {
                    var name = slot._data.attachmentName;
                    if (name) {
                        var attachment = newSkin.getAttachment(i, name);
                        if (attachment)
                            slot.attachment = attachment
                    }
                    i++
                }
            }
        }
    this._skin = newSkin
}
;
spine.Skeleton.prototype.get__skinName = function() {
    return this._skin == null ? null : this._skin._name
}
;
spine.Skeleton.prototype.set__skinName = function(skinName) {
    var skin = this.data.findSkin(skinName);
    if (skin == null)
        throw new openfl.errors.ArgumentError('Skin not found: ' + skinName);
    this.skin = skin
}
;
Object.defineProperties(spine.Skeleton.prototype, {
    data: {
        get: spine.Skeleton.prototype.get__data
    },
    getUpdateCache: {
        get: spine.Skeleton.prototype.get__getUpdateCache
    },
    rootBone: {
        get: spine.Skeleton.prototype.get__rootBone
    },
    skin: {
        get: spine.Skeleton.prototype.get__skin,
        set: spine.Skeleton.prototype.set__skin
    },
    skinName: {
        get: spine.Skeleton.prototype.get__skinName,
        set: spine.Skeleton.prototype.set__skinName
    }
});
spine.Skeleton.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Skeleton',
        qName: 'spine.Skeleton',
        kind: 'class'
    }]
};
spine.Skeleton.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cspine.Bone\x3e'
                },
                'slots': {
                    type: 'Vector.\x3cspine.Slot\x3e'
                },
                'drawOrder': {
                    type: 'Vector.\x3cspine.Slot\x3e'
                },
                'ikConstraints': {
                    type: 'Vector.\x3cspine.IkConstraint\x3e'
                },
                'transformConstraints': {
                    type: 'Vector.\x3cspine.TransformConstraint\x3e'
                },
                'pathConstraints': {
                    type: 'Vector.\x3cspine.PathConstraint\x3e'
                },
                'color': {
                    type: 'spine.Color'
                },
                'time': {
                    type: 'Number'
                },
                'flipX': {
                    type: 'Boolean'
                },
                'x': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.SkeletonData',
                    access: 'readonly',
                    declaredBy: 'spine.Skeleton'
                },
                'getUpdateCache': {
                    type: 'Vector.\x3cspine.Updatable\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.Skeleton'
                },
                'rootBone': {
                    type: 'spine.Bone',
                    access: 'readonly',
                    declaredBy: 'spine.Skeleton'
                },
                'skin': {
                    type: 'spine.Skin',
                    access: 'readwrite',
                    declaredBy: 'spine.Skeleton'
                },
                'skinName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'spine.Skeleton'
                }
            }
        },
        methods: function() {
            return {
                'Skeleton': {
                    type: '',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.SkeletonData',
                            optional: false
                        }]
                    }
                },
                'updateCache': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton'
                },
                'updateWorldTransform': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton'
                },
                'setToSetupPose': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton'
                },
                'setBonesToSetupPose': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton'
                },
                'setSlotsToSetupPose': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton'
                },
                'findBone': {
                    type: 'spine.Bone',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findBoneIndex': {
                    type: 'int',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findSlot': {
                    type: 'spine.Slot',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findSlotIndex': {
                    type: 'int',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getAttachmentForSlotName': {
                    type: 'spine.attachments.Attachment',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'getAttachmentForSlotIndex': {
                    type: 'spine.attachments.Attachment',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'setAttachment': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findIkConstraint': {
                    type: 'spine.IkConstraint',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findTransformConstraint': {
                    type: 'spine.TransformConstraint',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findPathConstraint': {
                    type: 'spine.PathConstraint',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.Skeleton'
                },
                'getBounds': {
                    type: 'void',
                    declaredBy: 'spine.Skeleton',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Skin = function(name) {
    this._attachments = org.apache.royale.utils.Language.Vector();
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.Skin', spine.Skin);
spine.Skin.prototype._name;
spine.Skin.prototype._attachments;
spine.Skin.prototype.addAttachment = function(slotIndex, name, attachment) {
    if (attachment == null)
        throw new openfl.errors.ArgumentError('attachment cannot be null.');
    if (slotIndex >= this.attachments.length)
        this.attachments.length = slotIndex + 1;
    if (!this.attachments[slotIndex])
        this.attachments[slotIndex] = new openfl.utils.Dictionary;
    this.attachments[slotIndex][name] = attachment
}
;
spine.Skin.prototype.getAttachment = function(slotIndex, name) {
    if (slotIndex >= this.attachments.length)
        return null;
    var dictionary = this.attachments[slotIndex];
    return dictionary ? dictionary[name] : null
}
;
spine.Skin.prototype.toString = function() {
    return this._name
}
;
spine.Skin.prototype.attachAll = function(skeleton, oldSkin) {
    var slotIndex = 0;
    var foreachiter0_target = skeleton.slots;
    for (var foreachiter0 in foreachiter0_target) {
        var slot = foreachiter0_target[foreachiter0];
        {
            var slotAttachment = slot.attachment;
            if (slotAttachment && slotIndex < oldSkin.attachments.length) {
                var dictionary = oldSkin.attachments[slotIndex];
                for (var name in dictionary) {
                    var skinAttachment = dictionary[name];
                    if (slotAttachment == skinAttachment) {
                        var attachment = this.getAttachment(slotIndex, name);
                        if (attachment != null)
                            slot.attachment = attachment;
                        break
                    }
                }
            }
            slotIndex++
        }
    }
}
;
spine.Skin.prototype.get__attachments = function() {
    return this._attachments
}
;
spine.Skin.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.Skin.prototype, {
    attachments: {
        get: spine.Skin.prototype.get__attachments
    },
    name: {
        get: spine.Skin.prototype.get__name
    }
});
spine.Skin.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Skin',
        qName: 'spine.Skin',
        kind: 'class'
    }]
};
spine.Skin.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'attachments': {
                    type: 'Vector.\x3copenfl.utils.Dictionary\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.Skin'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.Skin'
                }
            }
        },
        methods: function() {
            return {
                'Skin': {
                    type: '',
                    declaredBy: 'spine.Skin',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'addAttachment': {
                    type: 'void',
                    declaredBy: 'spine.Skin',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'spine.attachments.Attachment',
                            optional: false
                        }]
                    }
                },
                'getAttachment': {
                    type: 'spine.attachments.Attachment',
                    declaredBy: 'spine.Skin',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.Skin'
                },
                'attachAll': {
                    type: 'void',
                    declaredBy: 'spine.Skin',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Skin',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.TransformConstraint = function(data, skeleton) {
    this._temp = org.apache.royale.utils.Language.Vector(2, 'Number');
    if (data == null)
        throw new openfl.errors.ArgumentError('TransformConstraint::data cannot be null.');
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    this._data = data;
    this.rotateMix = data.rotateMix;
    this.translateMix = data.translateMix;
    this.scaleMix = data.scaleMix;
    this.shearMix = data.shearMix;
    this._bones = org.apache.royale.utils.Language.Vector();
    var foreachiter0_target = data.bones;
    for (var foreachiter0 in foreachiter0_target) {
        var boneData = foreachiter0_target[foreachiter0];
        this._bones.push(skeleton.findBone(boneData.name))
    }
    this.target = skeleton.findBone(data.target._name)
}
;
goog.exportSymbol('spine.TransformConstraint', spine.TransformConstraint);
spine.TransformConstraint.prototype._data;
spine.TransformConstraint.prototype._bones;
spine.TransformConstraint.prototype.target;
spine.TransformConstraint.prototype.rotateMix;
spine.TransformConstraint.prototype.translateMix;
spine.TransformConstraint.prototype.scaleMix;
spine.TransformConstraint.prototype.shearMix;
spine.TransformConstraint.prototype._temp;
spine.TransformConstraint.prototype.apply = function() {
    this.update()
}
;
spine.TransformConstraint.prototype.update = function() {
    if (this.data.local)
        if (this.data.relative)
            this.applyRelativeLocal();
        else
            this.applyAbsoluteLocal();
    else if (this.data.relative)
        this.applyRelativeWorld();
    else
        this.applyAbsoluteWorld()
}
;
spine.TransformConstraint.prototype.applyAbsoluteWorld = function() {
    var rotateMix = this.rotateMix
      , translateMix = this.translateMix
      , scaleMix = this.scaleMix
      , shearMix = this.shearMix;
    var target = this.target;
    var ta = target.a
      , tb = target.b
      , tc = target.c
      , td = target.d;
    var degRadReflect = ta * td - tb * tc > 0 ? spine.MathUtils.degRad : -spine.MathUtils.degRad;
    var offsetRotation = this.data.offsetRotation * degRadReflect;
    var offsetShearY = this.data.offsetShearY * degRadReflect;
    var bones = this._bones;
    var n = bones.length;
    for (var i = 0; i < n; i++) {
        var bone = bones[i];
        var modified = false;
        if (rotateMix != 0) {
            var a = bone.a
              , b = bone.b
              , c = bone.c
              , d = bone.d;
            var r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;
            if (r > Math.PI)
                r -= Math.PI * 2;
            else if (r < -Math.PI)
                r += Math.PI * 2;
            r *= rotateMix;
            var cos = Math.cos(r)
              , sin = Math.sin(r);
            bone.a = cos * a - sin * c;
            bone.b = cos * b - sin * d;
            bone.c = sin * a + cos * c;
            bone.d = sin * b + cos * d;
            modified = true
        }
        if (translateMix != 0) {
            this._temp[0] = this.data.offsetX;
            this._temp[1] = this.data.offsetY;
            target.localToWorld(this._temp);
            bone.worldX += (this._temp[0] - bone.worldX) * translateMix;
            bone.worldY += (this._temp[1] - bone.worldY) * translateMix;
            modified = true
        }
        if (scaleMix > 0) {
            var s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);
            var ts = Math.sqrt(ta * ta + tc * tc);
            if (s > 1E-5)
                s = (s + (ts - s + this.data.offsetScaleX) * scaleMix) / s;
            bone.a *= s;
            bone.c *= s;
            s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);
            ts = Math.sqrt(tb * tb + td * td);
            if (s > 1E-5)
                s = (s + (ts - s + this.data.offsetScaleY) * scaleMix) / s;
            bone.b *= s;
            bone.d *= s;
            modified = true
        }
        if (shearMix > 0) {
            b = bone.b,
            d = bone.d;
            var by = Math.atan2(d, b);
            r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));
            if (r > Math.PI)
                r -= Math.PI * 2;
            else if (r < -Math.PI)
                r += Math.PI * 2;
            r = by + (r + offsetShearY) * shearMix;
            s = Math.sqrt(b * b + d * d);
            bone.b = Math.cos(r) * s;
            bone.d = Math.sin(r) * s;
            modified = true
        }
        if (modified)
            bone.appliedValid = false
    }
}
;
spine.TransformConstraint.prototype.applyRelativeWorld = function() {
    var rotateMix = this.rotateMix
      , translateMix = this.translateMix
      , scaleMix = this.scaleMix
      , shearMix = this.shearMix;
    var target = this.target;
    var ta = target.a
      , tb = target.b
      , tc = target.c
      , td = target.d;
    var degRadReflect = ta * td - tb * tc > 0 ? spine.MathUtils.degRad : -spine.MathUtils.degRad;
    var offsetRotation = this.data.offsetRotation * degRadReflect
      , offsetShearY = this.data.offsetShearY * degRadReflect;
    var bones = this.bones;
    var n = bones.length;
    for (var i = 0; i < n; i++) {
        var bone = bones[i];
        var modified = false;
        if (rotateMix != 0) {
            var a = bone.a
              , b = bone.b
              , c = bone.c
              , d = bone.d;
            var r = Math.atan2(tc, ta) + offsetRotation;
            if (r > spine.MathUtils.PI)
                r -= spine.MathUtils.PI2;
            else if (r < -spine.MathUtils.PI)
                r += spine.MathUtils.PI2;
            r *= rotateMix;
            var cos = Math.cos(r)
              , sin = Math.sin(r);
            bone.a = cos * a - sin * c;
            bone.b = cos * b - sin * d;
            bone.c = sin * a + cos * c;
            bone.d = sin * b + cos * d;
            modified = true
        }
        if (translateMix != 0) {
            var temp = this._temp;
            temp[0] = this._data.offsetX;
            temp[1] = this._data.offsetY;
            target.localToWorld(temp);
            bone.worldX += temp[0] * translateMix;
            bone.worldY += temp[1] * translateMix;
            modified = true
        }
        if (scaleMix > 0) {
            var s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * scaleMix + 1;
            bone.a *= s;
            bone.c *= s;
            s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * scaleMix + 1;
            bone.b *= s;
            bone.d *= s;
            modified = true
        }
        if (shearMix > 0) {
            r = Math.atan2(td, tb) - Math.atan2(tc, ta);
            if (r > spine.MathUtils.PI)
                r -= spine.MathUtils.PI2;
            else if (r < -spine.MathUtils.PI)
                r += spine.MathUtils.PI2;
            b = bone.b;
            d = bone.d;
            r = Math.atan2(d, b) + (r - spine.MathUtils.PI / 2 + offsetShearY) * shearMix;
            s = Math.sqrt(b * b + d * d);
            bone.b = Math.cos(r) * s;
            bone.d = Math.sin(r) * s;
            modified = true
        }
        if (modified)
            bone.appliedValid = false
    }
}
;
spine.TransformConstraint.prototype.applyAbsoluteLocal = function() {
    var rotateMix = this.rotateMix
      , translateMix = this.translateMix
      , scaleMix = this.scaleMix
      , shearMix = this.shearMix;
    var target = this.target;
    if (!target.appliedValid)
        target.updateAppliedTransform();
    var bones = this.bones;
    var n = bones.length;
    for (var i = 0; i < n; i++) {
        var bone = bones[i];
        if (!bone.appliedValid)
            bone.updateAppliedTransform();
        var rotation = bone.arotation;
        if (rotateMix != 0) {
            var r = target.arotation - rotation + this.data.offsetRotation;
            r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
            rotation += r * rotateMix
        }
        var x = bone.ax
          , y = bone.ay;
        if (translateMix != 0) {
            x += (target.ax - x + this.data.offsetX) * translateMix;
            y += (target.ay - y + this.data.offsetY) * translateMix
        }
        var scaleX = bone.ascaleX
          , scaleY = bone.ascaleY;
        if (scaleMix > 0) {
            if (scaleX > 1E-5)
                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;
            if (scaleY > 1E-5)
                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY
        }
        var shearY = bone.ashearY;
        if (shearMix > 0) {
            r = target.ashearY - shearY + this.data.offsetShearY;
            r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
            bone.shearY += r * shearMix
        }
        bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY)
    }
}
;
spine.TransformConstraint.prototype.applyRelativeLocal = function() {
    var rotateMix = this.rotateMix
      , translateMix = this.translateMix
      , scaleMix = this.scaleMix
      , shearMix = this.shearMix;
    var target = this.target;
    if (!target.appliedValid)
        target.updateAppliedTransform();
    var bones = this.bones;
    var n = bones.length;
    for (var i = 0; i < n; i++) {
        var bone = bones[i];
        if (!bone.appliedValid)
            bone.updateAppliedTransform();
        var rotation = bone.arotation;
        if (rotateMix != 0)
            rotation += (target.arotation + this.data.offsetRotation) * rotateMix;
        var x = bone.ax
          , y = bone.ay;
        if (translateMix != 0) {
            x += (target.ax + this.data.offsetX) * translateMix;
            y += (target.ay + this.data.offsetY) * translateMix
        }
        var scaleX = bone.ascaleX
          , scaleY = bone.ascaleY;
        if (scaleMix > 0) {
            if (scaleX > 1E-5)
                scaleX *= (target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix + 1;
            if (scaleY > 1E-5)
                scaleY *= (target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix + 1
        }
        var shearY = bone.ashearY;
        if (shearMix > 0)
            shearY += (target.ashearY + this.data.offsetShearY) * shearMix;
        bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY)
    }
}
;
spine.TransformConstraint.prototype.getOrder = function() {
    return this._data.order
}
;
spine.TransformConstraint.prototype.toString = function() {
    return this._data._name
}
;
spine.TransformConstraint.prototype.get__data = function() {
    return this._data
}
;
spine.TransformConstraint.prototype.get__bones = function() {
    return this._bones
}
;
Object.defineProperties(spine.TransformConstraint.prototype, {
    data: {
        get: spine.TransformConstraint.prototype.get__data
    },
    bones: {
        get: spine.TransformConstraint.prototype.get__bones
    }
});
spine.TransformConstraint.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TransformConstraint',
        qName: 'spine.TransformConstraint',
        kind: 'class'
    }],
    interfaces: [spine.Constraint]
};
spine.TransformConstraint.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'target': {
                    type: 'spine.Bone'
                },
                'rotateMix': {
                    type: 'Number'
                },
                'translateMix': {
                    type: 'Number'
                },
                'scaleMix': {
                    type: 'Number'
                },
                'shearMix': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.TransformConstraintData',
                    access: 'readonly',
                    declaredBy: 'spine.TransformConstraint'
                },
                'bones': {
                    type: 'Vector.\x3cspine.Bone\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.TransformConstraint'
                }
            }
        },
        methods: function() {
            return {
                'TransformConstraint': {
                    type: '',
                    declaredBy: 'spine.TransformConstraint',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.TransformConstraintData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Skeleton',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.TransformConstraint'
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.TransformConstraint'
                },
                'applyRelativeWorld': {
                    type: 'void',
                    declaredBy: 'spine.TransformConstraint'
                },
                'applyAbsoluteLocal': {
                    type: 'void',
                    declaredBy: 'spine.TransformConstraint'
                },
                'applyRelativeLocal': {
                    type: 'void',
                    declaredBy: 'spine.TransformConstraint'
                },
                'getOrder': {
                    type: 'Number',
                    declaredBy: 'spine.TransformConstraint'
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.TransformConstraint'
                }
            }
        }
    }
}
;
spine.Slot = function(data, bone) {
    this.attachmentVertices = org.apache.royale.utils.Language.Vector();
    if (data == null)
        throw new openfl.errors.ArgumentError('Slot::data cannot be null.');
    if (bone == null)
        throw new openfl.errors.ArgumentError('bone cannot be null.');
    this._data = data;
    this._bone = bone;
    this.color = new spine.Color(1,1,1,1);
    this.darkColor = data.darkColor == null ? null : new spine.Color(1,1,1,1);
    this.setToSetupPose()
}
;
goog.exportSymbol('spine.Slot', spine.Slot);
spine.Slot.prototype._data;
spine.Slot.prototype._bone;
spine.Slot.prototype.color;
spine.Slot.prototype.darkColor;
spine.Slot.prototype._attachment;
spine.Slot.prototype._attachmentTime;
spine.Slot.prototype.attachmentVertices;
spine.Slot.prototype.setToSetupPose = function() {
    this.color.setFromColor(this.data.color);
    if (this.darkColor != null)
        this.darkColor.setFromColor(this.data.darkColor);
    if (this._data.attachmentName == null)
        this.attachment = null;
    else {
        this._attachment = null;
        this.attachment = this._bone._skeleton.getAttachmentForSlotIndex(this.data.index, this.data.attachmentName)
    }
}
;
spine.Slot.prototype.toString = function() {
    return this._data.name
}
;
spine.Slot.prototype.get__data = function() {
    return this._data
}
;
spine.Slot.prototype.get__bone = function() {
    return this._bone
}
;
spine.Slot.prototype.get__skeleton = function() {
    return this._bone._skeleton
}
;
spine.Slot.prototype.get__attachment = function() {
    return this._attachment
}
;
spine.Slot.prototype.set__attachment = function(attachment) {
    if (this._attachment == attachment)
        return;
    this._attachment = attachment;
    this._attachmentTime = this._bone._skeleton.time;
    this.attachmentVertices.length = 0
}
;
spine.Slot.prototype.get__attachmentTime = function() {
    return this._bone._skeleton.time - this._attachmentTime
}
;
spine.Slot.prototype.set__attachmentTime = function(time) {
    this._attachmentTime = this._bone._skeleton.time - time
}
;
Object.defineProperties(spine.Slot.prototype, {
    data: {
        get: spine.Slot.prototype.get__data
    },
    bone: {
        get: spine.Slot.prototype.get__bone
    },
    skeleton: {
        get: spine.Slot.prototype.get__skeleton
    },
    attachment: {
        get: spine.Slot.prototype.get__attachment,
        set: spine.Slot.prototype.set__attachment
    },
    attachmentTime: {
        get: spine.Slot.prototype.get__attachmentTime,
        set: spine.Slot.prototype.set__attachmentTime
    }
});
spine.Slot.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Slot',
        qName: 'spine.Slot',
        kind: 'class'
    }]
};
spine.Slot.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'color': {
                    type: 'spine.Color'
                },
                'darkColor': {
                    type: 'spine.Color'
                },
                'attachmentVertices': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.SlotData',
                    access: 'readonly',
                    declaredBy: 'spine.Slot'
                },
                'bone': {
                    type: 'spine.Bone',
                    access: 'readonly',
                    declaredBy: 'spine.Slot'
                },
                'skeleton': {
                    type: 'spine.Skeleton',
                    access: 'readonly',
                    declaredBy: 'spine.Slot'
                },
                'attachment': {
                    type: 'spine.attachments.Attachment',
                    access: 'readwrite',
                    declaredBy: 'spine.Slot'
                },
                'attachmentTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'spine.Slot'
                }
            }
        },
        methods: function() {
            return {
                'Slot': {
                    type: '',
                    declaredBy: 'spine.Slot',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.SlotData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Bone',
                            optional: false
                        }]
                    }
                },
                'setToSetupPose': {
                    type: 'void',
                    declaredBy: 'spine.Slot'
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.Slot'
                }
            }
        }
    }
}
;
spine.SlotData = function(index, name, boneData) {
    this.color = new spine.Color(1,1,1,1);
    if (index < 0)
        throw new openfl.errors.ArgumentError('index must be \x3e\x3d 0.');
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    if (boneData == null)
        throw new openfl.errors.ArgumentError('boneData cannot be null.');
    this._index = index;
    this._name = name;
    this._boneData = boneData
}
;
goog.exportSymbol('spine.SlotData', spine.SlotData);
spine.SlotData.prototype._index = 0;
spine.SlotData.prototype._name;
spine.SlotData.prototype._boneData;
spine.SlotData.prototype.color;
spine.SlotData.prototype.darkColor;
spine.SlotData.prototype.attachmentName;
spine.SlotData.prototype.blendMode;
spine.SlotData.prototype.toString = function() {
    return this._name
}
;
spine.SlotData.prototype.get__index = function() {
    return this._index
}
;
spine.SlotData.prototype.get__name = function() {
    return this._name
}
;
spine.SlotData.prototype.get__boneData = function() {
    return this._boneData
}
;
Object.defineProperties(spine.SlotData.prototype, {
    index: {
        get: spine.SlotData.prototype.get__index
    },
    name: {
        get: spine.SlotData.prototype.get__name
    },
    boneData: {
        get: spine.SlotData.prototype.get__boneData
    }
});
spine.SlotData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SlotData',
        qName: 'spine.SlotData',
        kind: 'class'
    }]
};
spine.SlotData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'color': {
                    type: 'spine.Color'
                },
                'darkColor': {
                    type: 'spine.Color'
                },
                'attachmentName': {
                    type: 'String'
                },
                'blendMode': {
                    type: 'spine.BlendMode'
                }
            }
        },
        accessors: function() {
            return {
                'index': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.SlotData'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.SlotData'
                },
                'boneData': {
                    type: 'spine.BoneData',
                    access: 'readonly',
                    declaredBy: 'spine.SlotData'
                }
            }
        },
        methods: function() {
            return {
                'SlotData': {
                    type: '',
                    declaredBy: 'spine.SlotData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'spine.BoneData',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.SlotData'
                }
            }
        }
    }
}
;
spine.SkeletonData = function() {
    this.bones = org.apache.royale.utils.Language.Vector();
    this.slots = org.apache.royale.utils.Language.Vector();
    this.skins = org.apache.royale.utils.Language.Vector();
    this.events = org.apache.royale.utils.Language.Vector();
    this.animations = org.apache.royale.utils.Language.Vector();
    this.ikConstraints = org.apache.royale.utils.Language.Vector();
    this.transformConstraints = org.apache.royale.utils.Language.Vector();
    this.pathConstraints = org.apache.royale.utils.Language.Vector()
}
;
goog.exportSymbol('spine.SkeletonData', spine.SkeletonData);
spine.SkeletonData.prototype.name;
spine.SkeletonData.prototype.bones;
spine.SkeletonData.prototype.slots;
spine.SkeletonData.prototype.skins;
spine.SkeletonData.prototype.defaultSkin;
spine.SkeletonData.prototype.events;
spine.SkeletonData.prototype.animations;
spine.SkeletonData.prototype.ikConstraints;
spine.SkeletonData.prototype.transformConstraints;
spine.SkeletonData.prototype.pathConstraints;
spine.SkeletonData.prototype.width;
spine.SkeletonData.prototype.height;
spine.SkeletonData.prototype.version;
spine.SkeletonData.prototype.hash;
spine.SkeletonData.prototype.fps;
spine.SkeletonData.prototype.imagesPath;
spine.SkeletonData.prototype.findBone = function(boneName) {
    if (boneName == null)
        throw new openfl.errors.ArgumentError('boneName cannot be null.');
    var n = this.bones.length;
    for (var i = 0; i < n; i++) {
        var bone = this.bones[i];
        if (bone._name == boneName)
            return bone
    }
    return null
}
;
spine.SkeletonData.prototype.findBoneIndex = function(boneName) {
    if (boneName == null)
        throw new openfl.errors.ArgumentError('boneName cannot be null.');
    var n = this.bones.length;
    for (var i = 0; i < n; i++)
        if (this.bones[i]._name == boneName)
            return i;
    return -1
}
;
spine.SkeletonData.prototype.findSlot = function(slotName) {
    if (slotName == null)
        throw new openfl.errors.ArgumentError('slotName cannot be null.');
    var n = this.slots.length;
    for (var i = 0; i < n; i++) {
        var slot = this.slots[i];
        if (slot._name == slotName)
            return slot
    }
    return null
}
;
spine.SkeletonData.prototype.findSlotIndex = function(slotName) {
    if (slotName == null)
        throw new openfl.errors.ArgumentError('slotName cannot be null.');
    var n = this.slots.length;
    for (var i = 0; i < n; i++)
        if (this.slots[i]._name == slotName)
            return i;
    return -1
}
;
spine.SkeletonData.prototype.findSkin = function(skinName) {
    if (skinName == null)
        throw new openfl.errors.ArgumentError('skinName cannot be null.');
    var foreachiter0_target = this.skins;
    for (var foreachiter0 in foreachiter0_target) {
        var skin = foreachiter0_target[foreachiter0];
        {
            if (skin._name == skinName)
                return skin
        }
    }
    return null
}
;
spine.SkeletonData.prototype.findEvent = function(eventName) {
    if (eventName == null)
        throw new openfl.errors.ArgumentError('eventName cannot be null.');
    var foreachiter1_target = this.events;
    for (var foreachiter1 in foreachiter1_target) {
        var eventData = foreachiter1_target[foreachiter1];
        {
            if (eventData._name == eventName)
                return eventData
        }
    }
    return null
}
;
spine.SkeletonData.prototype.findAnimation = function(animationName) {
    if (animationName == null)
        throw new openfl.errors.ArgumentError('animationName cannot be null.');
    var foreachiter2_target = this.animations;
    for (var foreachiter2 in foreachiter2_target) {
        var animation = foreachiter2_target[foreachiter2];
        {
            if (animation.name == animationName)
                return animation
        }
    }
    return null
}
;
spine.SkeletonData.prototype.findIkConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var foreachiter3_target = this.ikConstraints;
    for (var foreachiter3 in foreachiter3_target) {
        var ikConstraintData = foreachiter3_target[foreachiter3];
        {
            if (ikConstraintData._name == constraintName)
                return ikConstraintData
        }
    }
    return null
}
;
spine.SkeletonData.prototype.findTransformConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var foreachiter4_target = this.transformConstraints;
    for (var foreachiter4 in foreachiter4_target) {
        var transformConstraintData = foreachiter4_target[foreachiter4];
        {
            if (transformConstraintData._name == constraintName)
                return transformConstraintData
        }
    }
    return null
}
;
spine.SkeletonData.prototype.findTransformConstraintIndex = function(transformConstraintName) {
    if (transformConstraintName == null)
        throw new openfl.errors.ArgumentError('transformConstraintName cannot be null.');
    var transformConstraints = this.transformConstraints;
    var n = transformConstraints.length;
    for (var i = 0; i < n; i++)
        if (transformConstraints[i].name == transformConstraintName)
            return i;
    return -1
}
;
spine.SkeletonData.prototype.findPathConstraint = function(constraintName) {
    if (constraintName == null)
        throw new openfl.errors.ArgumentError('constraintName cannot be null.');
    var pathConstraints = this.pathConstraints;
    var n = pathConstraints.length;
    for (var i = 0; i < n; i++) {
        var constraint = pathConstraints[i];
        if (constraint.name == constraintName)
            return constraint
    }
    return null
}
;
spine.SkeletonData.prototype.findPathConstraintIndex = function(pathConstraintName) {
    if (pathConstraintName == null)
        throw new openfl.errors.ArgumentError('pathConstraintName cannot be null.');
    var pathConstraints = this.pathConstraints;
    var n = pathConstraints.length;
    for (var i = 0; i < n; i++)
        if (pathConstraints[i].name == pathConstraintName)
            return i;
    return -1
}
;
spine.SkeletonData.prototype.toString = function() {
    return this.name != null ? this.name : spine.SkeletonData.superClass_.toString.apply(this)
}
;
spine.SkeletonData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SkeletonData',
        qName: 'spine.SkeletonData',
        kind: 'class'
    }]
};
spine.SkeletonData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'name': {
                    type: 'String'
                },
                'bones': {
                    type: 'Vector.\x3cspine.BoneData\x3e'
                },
                'slots': {
                    type: 'Vector.\x3cspine.SlotData\x3e'
                },
                'skins': {
                    type: 'Vector.\x3cspine.Skin\x3e'
                },
                'defaultSkin': {
                    type: 'spine.Skin'
                },
                'events': {
                    type: 'Vector.\x3cspine.EventData\x3e'
                },
                'animations': {
                    type: 'Vector.\x3cspine.animation.Animation\x3e'
                },
                'ikConstraints': {
                    type: 'Vector.\x3cspine.IkConstraintData\x3e'
                },
                'transformConstraints': {
                    type: 'Vector.\x3cspine.TransformConstraintData\x3e'
                },
                'pathConstraints': {
                    type: 'Vector.\x3cspine.PathConstraintData\x3e'
                },
                'width': {
                    type: 'Number'
                },
                'version': {
                    type: 'String'
                },
                'fps': {
                    type: 'Number'
                },
                'imagesPath': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'SkeletonData': {
                    type: '',
                    declaredBy: 'spine.SkeletonData'
                },
                'findBone': {
                    type: 'spine.BoneData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findBoneIndex': {
                    type: 'int',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findSlot': {
                    type: 'spine.SlotData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findSlotIndex': {
                    type: 'int',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findSkin': {
                    type: 'spine.Skin',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findEvent': {
                    type: 'spine.EventData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findAnimation': {
                    type: 'spine.animation.Animation',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findIkConstraint': {
                    type: 'spine.IkConstraintData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findTransformConstraint': {
                    type: 'spine.TransformConstraintData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findTransformConstraintIndex': {
                    type: 'int',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findPathConstraint': {
                    type: 'spine.PathConstraintData',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'findPathConstraintIndex': {
                    type: 'int',
                    declaredBy: 'spine.SkeletonData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.SkeletonData'
                }
            }
        }
    }
}
;
pigg.puzzle.view.UserItemView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._socreItemNameArr = [];
    this._cheatItemNameArr = [];
    this.traceLog('UserItemView')
}
;
goog.inherits(pigg.puzzle.view.UserItemView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.UserItemView', pigg.puzzle.view.UserItemView);
pigg.puzzle.view.UserItemView.prototype._itemScrollView;
pigg.puzzle.view.UserItemView.prototype._itemView;
pigg.puzzle.view.UserItemView.prototype._itemInnerBase;
pigg.puzzle.view.UserItemView.prototype._itemBase;
pigg.puzzle.view.UserItemView.prototype._itemContainer;
pigg.puzzle.view.UserItemView.prototype._scoreItemContainer;
pigg.puzzle.view.UserItemView.prototype._cheatItemContainer;
pigg.puzzle.view.UserItemView.prototype._backBlack;
pigg.puzzle.view.UserItemView.prototype._isShow = false;
pigg.puzzle.view.UserItemView.prototype._container;
pigg.puzzle.view.UserItemView.prototype._loadDataManager;
pigg.puzzle.view.UserItemView.prototype._eventData;
pigg.puzzle.view.UserItemView.prototype._userData;
pigg.puzzle.view.UserItemView.prototype._main;
pigg.puzzle.view.UserItemView.prototype._emptyTilemap;
pigg.puzzle.view.UserItemView.prototype._emptyTileset;
pigg.puzzle.view.UserItemView.prototype._balloonSpr;
pigg.puzzle.view.UserItemView.prototype._balloonTxt;
pigg.puzzle.view.UserItemView.prototype._balloonShow = -1;
pigg.puzzle.view.UserItemView.prototype._noItemPanel;
pigg.puzzle.view.UserItemView.prototype._hasUpdate;
pigg.puzzle.view.UserItemView.prototype.init = function(main, loadDataManager) {
    this.traceLog('UserItemView::init');
    this._main = main;
    this._container = this.makeContainer();
    this._loadDataManager = loadDataManager;
    this.addChild(this._container);
    this._itemView = new openfl.display.Sprite;
    this._container.addChild(this._itemView);
    this.initItemView()
}
;
pigg.puzzle.view.UserItemView.prototype.initItemView = function() {
    this._itemBase = new openfl.display.Sprite;
    this._itemView.addChild(this._itemBase);
    this._itemInnerBase = new openfl.display.Sprite;
    this._itemView.addChild(this._itemInnerBase);
    var tl;
    var _eventTileset = this._main.commonPartsTileset.clone();
    var tilemap = new openfl.display.Tilemap(584,772,_eventTileset);
    var baseLeft;
    var baseRight;
    var baseCenter;
    tilemap.addTile(baseLeft = new openfl.display.Tile(_eventTileset.addRect(new openfl.geom.Rectangle(0,268,20,772))));
    tilemap.addTile(baseRight = new openfl.display.Tile(_eventTileset.addRect(new openfl.geom.Rectangle(32,268,20,772))));
    tilemap.addTile(baseCenter = new openfl.display.Tile(_eventTileset.addRect(new openfl.geom.Rectangle(20,268,1,772))));
    baseRight.x = 564;
    baseCenter.x = 20;
    baseCenter.scaleX = 544;
    this._itemBase.addChild(tilemap);
    var tileset = this._main.menuPartsTileset.clone();
    tilemap = new openfl.display.Tilemap(584,610,tileset);
    this._itemBase.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(296,322,138,38))));
    tl.x = 223;
    tl.y = 38;
    tilemap = new openfl.display.Tilemap(584,610,tileset);
    this._itemInnerBase.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,369,420,28))));
    tl.x = 82;
    tl.y = 93;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,400,420,28))));
    tl.x = 82;
    tl.y = 415 + 146;
    this.makeUserItemData(true);
    this._balloonSpr = new openfl.display.Sprite;
    tilemap = new openfl.display.Tilemap(256,105,tileset);
    this._balloonSpr.addChild(tilemap);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(377,452,256,105))));
    this._balloonTxt = this.makeTextField(22, 6960914, openfl.text.TextFormatAlign.CENTER);
    this._balloonTxt.x = 18;
    this._balloonTxt.y = 10;
    this._balloonTxt.width = 214;
    this._balloonTxt.wordWrap = true;
    this._balloonSpr.addChild(this._balloonTxt);
    this._itemView.addChild(this._balloonSpr);
    this._balloonSpr.visible = false;
    this._itemView.x = 28;
    this._itemView.y = 148;
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 534;
    closeBtn.y = 7;
    this._itemView.addChild(closeBtn)
}
;
pigg.puzzle.view.UserItemView.prototype.onLoadPng = function(code, bmd, container) {
    container = typeof container !== 'undefined' ? container : null
}
;
pigg.puzzle.view.UserItemView.prototype.show = function() {
    if (this._hasUpdate) {
        this.traceLog('\u66f4\u65b0\u304c\u3042\u3063\u305f\u306e\u3067\u8868\u793aupdate');
        this.makeUserItemData();
        this._hasUpdate = false
    }
    this._backBlack = this.makeBackBlack();
    this._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.closeMD, this, 'closeMD'));
    this.addChild(this._backBlack);
    this._backBlack.alpha = 1;
    this.addChild(this._container);
    this._isShow = true;
    this._itemView.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT;
    var tarY = 67;
    if (this._main.appType == 'mypage')
        tarY = 44;
    com.greensock.TweenMax.to(this._itemView, .4, {
        delay: .1,
        y: tarY,
        ease: com.greensock.easing.Back.easeOut
    })
}
;
pigg.puzzle.view.UserItemView.prototype._socreItemNameArr;
pigg.puzzle.view.UserItemView.prototype._cheatItemNameArr;
pigg.puzzle.view.UserItemView.prototype.makeUserItemData = function(init) {
    init = typeof init !== 'undefined' ? init : false;
    var spr = new openfl.display.Sprite;
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    var itemData;
    var stepTitleTxt;
    var stepPointTxt;
    var itemNameTxt;
    var iconView;
    var thumbUrl;
    var tl;
    this.traceLog('makeUserItemData', this._main);
    this.traceLog('makeUserItemData', this._main.userData);
    if (this._main == null)
        return;
    if (this._main.userData == null)
        return;
    if (init) {
        this._itemContainer = new openfl.display.Sprite;
        this._scoreItemContainer = new openfl.display.Sprite;
        this._cheatItemContainer = new openfl.display.Sprite;
        this._itemContainer.addChild(this._scoreItemContainer);
        this._itemContainer.addChild(this._cheatItemContainer);
        this._itemContainer.x = 83;
        this._itemContainer.y = 131;
        this._itemView.addChild(this._itemContainer)
    } else {
        while (this._scoreItemContainer.numChildren > 0)
            this._scoreItemContainer.removeChildAt(0);
        while (this._cheatItemContainer.numChildren > 0)
            this._cheatItemContainer.removeChildAt(0);
        if (this._emptyTilemap)
            this._emptyTilemap.removeTiles()
    }
    this._userData = this._main.userData;
    this.traceLog('makeUserItemData:::score::length::', this._userData.scoreItemData.length);
    var itemCnt = 0;
    var iconSpr;
    if (this._userData.scoreItemData.length == 0 && this._userData.cheatItemData.length == 0) {
        if (this._noItemPanel == null)
            this.initNoItemPanel();
        this._noItemPanel.visible = true;
        this._itemInnerBase.visible = false;
        return
    }
    this._itemInnerBase.visible = true;
    len = this._userData.scoreItemData.length;
    for (cnt = 0; cnt < len; cnt++) {
        itemData = this._userData.scoreItemData[cnt];
        this.traceLog('\u671f\u9650\u30c1\u30a7\u30af::', itemData.itemExpireTime, this._main.serverTime);
        if (itemData.itemExpireTime > 0 && itemData.itemExpireTime < this._main.serverTime) {
            this.traceLog('\u671f\u9650\u5207\u308c');
            continue
        }
        iconSpr = new openfl.display.Sprite;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconSpr.addChild(iconView);
        iconView.isItem = true;
        iconView.quantity = itemData.itemQuantity;
        iconView.id = itemCnt;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/135/pu/' + itemData.itemCode + '.png';
        this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        iconView.x = -63;
        iconView.y = -63;
        iconSpr.x = itemCnt % 3 * 146 + 63;
        iconSpr.y = org.apache.royale.utils.Language._int(itemCnt / 3) * 146 + 63;
        this._socreItemNameArr.push(itemData.itemName);
        this._scoreItemContainer.addChild(iconSpr);
        iconSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.itemMD, this, 'itemMD'));
        iconView.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.scoreItemCL, this, 'scoreItemCL'));
        itemCnt++
    }
    if (this._emptyTileset == null) {
        this._emptyTileset = this._main.menuPartsTileset.clone();
        this._emptyTileset.addRect(new openfl.geom.Rectangle(589,2,126,126))
    }
    if (this._emptyTilemap == null) {
        this._emptyTilemap = new openfl.display.Tilemap(418,448,this._emptyTileset);
        this._itemView.addChild(this._emptyTilemap);
        this._emptyTilemap.x = 82;
        this._emptyTilemap.y = 131
    }
    for (cnt = itemCnt; cnt < 9; cnt++) {
        this._emptyTilemap.addTile(tl = new openfl.display.Tile);
        tl.x = cnt % 3 * 146;
        tl.y = org.apache.royale.utils.Language._int(cnt / 3) * 146
    }
    this._cheatItemContainer.y = 322 + 146;
    len = this._userData.cheatItemData.length;
    for (cnt = 0; cnt < len; cnt++) {
        itemData = this._userData.cheatItemData[cnt];
        iconSpr = new openfl.display.Sprite;
        iconView = new pigg.puzzle.view.IconView(this._main);
        iconSpr.addChild(iconView);
        iconView.isItem = true;
        iconView.quantity = itemData.itemQuantity;
        iconView.id = cnt;
        this._cheatItemNameArr.push(itemData.itemName);
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/135/pu/' + itemData.itemCode + '.png';
        this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        iconView.x = -63;
        iconView.y = -63;
        iconSpr.x = cnt % 3 * 146 + 63;
        iconSpr.y = org.apache.royale.utils.Language._int(cnt / 3) * 146 + 63;
        iconSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.itemMD, this, 'itemMD'));
        iconView.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.cheatItemCL, this, 'cheatItemCL'));
        this._cheatItemContainer.addChild(iconSpr)
    }
    for (cnt = this._userData.cheatItemData.length; cnt < 3; cnt++) {
        this._emptyTilemap.addTile(tl = new openfl.display.Tile);
        tl.x = cnt % 3 * 146;
        tl.y = org.apache.royale.utils.Language._int(cnt / 3) * 146 + 322
    }
}
;
pigg.puzzle.view.UserItemView.prototype.initNoItemPanel = function() {
    this._noItemPanel = new openfl.display.Sprite;
    this._itemView.addChild(this._noItemPanel);
    var tileset = this._main.menuPartsTileset.clone();
    var tilemap = new openfl.display.Tilemap(510,520,tileset);
    this._noItemPanel.addChild(tilemap);
    var tl;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,430,374,106))));
    tl.x = 105;
    tl.y = 126 + 60;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(588,131,139,182))));
    tl.x = 222;
    tl.y = 268 + 60;
    var shopBtnSpr = new openfl.display.Sprite;
    tilemap = new openfl.display.Tilemap(234,94,tileset);
    shopBtnSpr.addChild(tilemap);
    this._noItemPanel.addChild(shopBtnSpr);
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(239,96,233,93))));
    tilemap.x = -(234 / 2);
    tilemap.y = -(94 / 2) + 60;
    shopBtnSpr.x = 176 + 234 / 2;
    shopBtnSpr.y = 470 + 94 / 2;
    shopBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.itemMD, this, 'itemMD'));
    shopBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.shopCL, this, 'shopCL'))
}
;
pigg.puzzle.view.UserItemView.prototype.itemMD = function(e) {
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
    com.greensock.TweenMax.killTweensOf(e.currentTarget);
    e.currentTarget.scaleX = e.currentTarget.scaleY = 1.2;
    com.greensock.TweenMax.to(e.currentTarget, .6, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1, .4)
    })
}
;
pigg.puzzle.view.UserItemView.prototype.scoreItemCL = function(e) {
    this._balloonTxt.text = this._socreItemNameArr[e.currentTarget.id] + '\n ';
    if (this._balloonTxt.numLines >= 3)
        this._balloonTxt.y = 8;
    else
        this._balloonTxt.y = 22;
    this.showBallon(e.currentTarget.parent.x - 45, e.currentTarget.parent.y - 20)
}
;
pigg.puzzle.view.UserItemView.prototype.cheatItemCL = function(e) {
    this._balloonTxt.text = this._cheatItemNameArr[e.currentTarget.id] + '\n ';
    if (this._balloonTxt.numLines >= 3)
        this._balloonTxt.y = 8;
    else
        this._balloonTxt.y = 22;
    this.showBallon(e.currentTarget.parent.x - 45, e.currentTarget.parent.y + 322 - 20 + 146)
}
;
pigg.puzzle.view.UserItemView.prototype.showBallon = function(tarX, tarY) {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._balloonSpr.visible = false
        };
        com.greensock.TweenMax.to(self._balloonSpr, .2, {
            delay: 3,
            y: tarY + 10,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn0__
        })
    };
    com.greensock.TweenMax.killTweensOf(this._balloonSpr);
    this._balloonSpr.visible = true;
    this._balloonSpr.x = tarX;
    this._balloonSpr.y = tarY + 10;
    com.greensock.TweenMax.to(this._balloonSpr, .4, {
        y: tarY,
        ease: com.greensock.easing.Elastic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.UserItemView.prototype.shopCL = function(e) {
    this.traceLog('shopCL');
    this._main.showOpenShopAlert()
}
;
pigg.puzzle.view.UserItemView.prototype.hide = function() {
    var self = this;
    var __localFn0__ = function() {
        self.removeFromParent(self._backBlack);
        self._backBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.closeMD, self, 'closeMD'));
        self._backBlack = null;
        self.removeFromParent(self._container);
        self._isShow = false;
        self._balloonSpr.visible = false
    };
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 0
    });
    com.greensock.TweenMax.to(this._itemView, .3, {
        y: pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.UserItemView.prototype.closeMD = function(e) {
    this.hide()
}
;
pigg.puzzle.view.UserItemView.prototype.updateItem = function() {
    this.makeUserItemData()
}
;
pigg.puzzle.view.UserItemView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.UserItemView.prototype.get__hasUpdate = function() {
    return this._hasUpdate
}
;
pigg.puzzle.view.UserItemView.prototype.set__hasUpdate = function(v) {
    this._hasUpdate = v
}
;
Object.defineProperties(pigg.puzzle.view.UserItemView.prototype, {
    isShow: {
        get: pigg.puzzle.view.UserItemView.prototype.get__isShow
    },
    hasUpdate: {
        get: pigg.puzzle.view.UserItemView.prototype.get__hasUpdate,
        set: pigg.puzzle.view.UserItemView.prototype.set__hasUpdate
    }
});
pigg.puzzle.view.UserItemView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'UserItemView',
        qName: 'pigg.puzzle.view.UserItemView',
        kind: 'class'
    }]
};
pigg.puzzle.view.UserItemView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                },
                'hasUpdate': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                }
            }
        },
        methods: function() {
            return {
                'UserItemView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }]
                    }
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'updateItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserItemView'
                }
            }
        }
    }
}
;
pigg.puzzle.view.LoadingView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('LoadingView')
}
;
goog.inherits(pigg.puzzle.view.LoadingView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.LoadingView', pigg.puzzle.view.LoadingView);
pigg.puzzle.view.LoadingView.prototype._container;
pigg.puzzle.view.LoadingView.prototype._loadingPanel;
pigg.puzzle.view.LoadingView.prototype._main;
pigg.puzzle.view.LoadingView.prototype._tweenObjects;
pigg.puzzle.view.LoadingView.prototype._isTweenPause = false;
pigg.puzzle.view.LoadingView.prototype._firstHint = false;
pigg.puzzle.view.LoadingView.prototype._back;
pigg.puzzle.view.LoadingView.prototype._miniBack;
pigg.puzzle.view.LoadingView.prototype._loadObjTilemap;
pigg.puzzle.view.LoadingView.prototype._loadObjTileset;
pigg.puzzle.view.LoadingView.prototype._loadObjTile;
pigg.puzzle.view.LoadingView.prototype._loadProgressObj;
pigg.puzzle.view.LoadingView.prototype._loadTxtTile;
pigg.puzzle.view.LoadingView.prototype._thisView;
pigg.puzzle.view.LoadingView.prototype._isShowMini;
pigg.puzzle.view.LoadingView.prototype._isShowProgress;
pigg.puzzle.view.LoadingView.prototype.clean = function() {}
;
pigg.puzzle.view.LoadingView.prototype.init = function(main) {
    var self = this;
    function LoaderInfoCompleteFunc(e) {
        self._loadObjTileset.bitmapData = new openfl.display.BitmapData(loader_obj.width,loader_obj.height,true,0);
        self._loadObjTileset.bitmapData.draw(loader_obj);
        loader_obj = null;
        info = null;
        pngDecBA = null
    }
    function LoaderInfoIOErrorFunc(event) {
        self.traceLog('\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u306e\u30a8\u30e9\u30fc')
    }
    this._main = main;
    this.addChild(this._container = new openfl.display.Sprite);
    this._back = this.makeBackBlack();
    this._container.addChild(this._back);
    this._back.alpha = 0;
    this._back.visible = false;
    this._miniBack = new openfl.display.Sprite;
    this._miniBack.graphics.beginFill(0, .5);
    this._miniBack.graphics.drawRoundRect(0, 0, 197, 55, 14);
    this._miniBack.graphics.endFill();
    this._miniBack.x = 434;
    this._miniBack.y = 12;
    this._container.addChild(this._miniBack);
    this._miniBack.visible = false;
    this._miniBack.alpha = 0;
    this._thisView = this;
    this._loadObjTileset = new openfl.display.Tileset(null);
    var pngEncoded = 'iVBORw0KGgoAAAANSUhEUgAAAOIAAAAvCAYAAAD+Zha9AAAQDklEQVR4nO2da2wc13WAvzv75nKXWj5EyrEom4pkq7aTAFJStI1Ro5BrQAnaNAH1IyiaP60UF0napkUpGS0KFLUlAU0MtApaKTXKoC4CWG1/9EcfsJvCaJMYtdjYiRX5IdEPSZaoB5daLrm7szNz+mNmyd3lzOwsyaVW7HzAguDM2TN3Zu+Zc+85Z+4o1gFz5qQCPi9XS08zW9mNKQoLZM68JtOVp4Hn4kePldZ6HBFZe2NDQroQba0KzJmTnwb+B/gH4AFMUXWaR4C/BM7rx45+Ya3HCgnZrKjVftGcOXkfcAI4uLTxRhm5uuz45LqBfKDXf+17wNfiR4+dW80xQ48Ysllp2xDNmZO9wFHg60CyYeecjnywsPSvXK4i16orVADfAv4kfvTYXDvHDg0xZLMS2BDNmZMa8BvAM8A2V6FiFZkuLv0r7+nITcNL5Q3gj4C/iR89ZgVpQ2iIIZuVQHPEunng3+JlhABRR51RARHQfQ1nCDgFvKofO/rzwZobErI58fWIrvNAD8SYxyi8TfT7H4ApYIHx5hAqM4JK9wRpy/PARPzosQ89jxF6xJBNiqshmjMnM8BTwO8BCT8FYumYi+9gli4BQvwHJXDspfpKGtEVqq+PyMgwxGKt2lME/gx4Nn70mN68MzTEkM1KgyE6+cAvAceBYf+vWpiL72MsXgBZngfGXi2jdAEB/b96l8U1DW1wEG1oEFTLqekF4HfiR4/9S/3GThiiat2W/1eIyH5gWik13UJuDBhTSr20MS3bnNT69FIvNGdO9gDfBX6l1ZetygzGwpuIubhiX+y1CmrBQnRF9ZX0iv0qHkMbGUFls0Ha+R3gUM07hobYOURkL/AikHM2nVZKHXaRywEvAPudTXngiFLq9IY0dJPRYIiXr3wjYopc6otEt2W0qPeXjHmM4nms6i1Pmeg5HW3OROY1qj/ynhuq3l60bSOohPfI14pk0Xs/fl6ZCw9nvjpurcIQc8BeYNr5rGxHaIgAiMhFYKxp8+FmAxORF1k2wnoeD71j+9T6tAYg8O2SmNuuGRWuGRUsGju8WDrG/Bvo+e/7GiEASYWgiZT9A7JSLGJeuIh19RqY5or91dRuFgd/jWpq9x6JpL/dzsk5HAJmse/yF7EjtCEuOMPRZiMEGG+SG8PdCFfIhrSH9uKlEx+Zs4wv1TbMWwbvV0uUxDYOs/Qe+uzLmGU7GNMKiYDCUgTJDIpg3bqF8c4FZM7O7YuWpJTbT7nvUUTZ3llP7v71K3992TttspIxVhreIecTsnrcjDXIvpAWaFH4Zqwpn2iIcLla5sPbP6BaPN8QjGlJzB7qSbWNIZ9hYF6+gn4DFgY/j5HY0bBbKeKaZrXjFb3uzl5385AAOEPPvMfucFi6BrS3YPAcMN+0wyi/bV40rnJeK1MJ4AlrSNwxRD14PbmoKItbH+d29jPw4fnGfSgqeoJKJTkaWKE3udYiIS044rJtCgiDNWsgKvDgdeA6di8dBfrE5Ir+QSShoIjFG1qZ+yTGgHgHcpZwPCJ6MI9oJoZZGPksZnwAgIXqdlKWgNKo6EkqegKxH+h4oP3TC1lvlFKnRWQae5ifw/aEp5VSXp4yJABRYCnHkHc+VObpM5NsixZRgIlwUekUMBmVOBGfghyJO39bDk0V5f5PUep/FNSy97REMTcTR0unkcbjxNs7tZBO4QxRw6HoOuLq4marFhdKw6S1fnbG59gem0dDuKmEgiqz00rQ61WmGsAjWtGM7QVjA0tGqFcTLJQylPUUSWKk0t2ZVhCRcezARP18cwo7PXJmtZ7BiUjWdNcCH1PAlFLqjItcPujxPHRPO7rbHlI6ucRxHI+olJpqV86J1O6lMR855aevRZs6dv02Ao+xpj0nXLBi/Lg8xFuVfsbic+yIFRAl/FQrc6/E2CaxFb5RasGairuh6pk9LG59AtFsB1eq9LBQylA1lh1eN1ayicghYAL36GCtMx0XkRO0MVRzOuuE83HVKyJTwGHsjlsfDT4kIo97HauF7prMBG3M7xydLzptqW1zyze6yZ3Arl2uLwioZ9yRewk7h+lb3VN3nCDX76Dzf+Drt5G4GqJlNeYeKhLhfGWAd/QcO2IFxuK3uayq5LHYJXHiTeYopgZNgVbREixu/WX0zB5EFKVymmIpg2kGmHfeQVwqSfzIYZcHHhKRg63u7G6d1YNa1Yvb9kPYnXu1usecNgflkIvO4yLS7F3c5CZY9lp+7AfOOkbieQ3bvH5nPba7Xr+Npq2lMgzRuKhv4T+Ko7xeHmJGNF7TKsyqxoS8WFqDTzNS25nbcZhy+iHmF/u4nr+H28Xc3WKEXpUkfowBLzplY610t+pENXK4R31XtG0VutvB7VrUKphayUHwfGMOnyKMTl6/O0EU6Gv3SxaKD6pZLlWzDEcXKMTzDCuDh4iiAWJEbEGlMT94gErmYYqlPkqVdC0Cercwweo7c60j7fPYf3wNulvRSd0byV4RGa+f49WxWc4R8JwjBkOAa0aaa0aagUiJS/F5+ZRmqq2mRjVxL/nBcSma21Q5n1qn5m4cTjDBc24VkL0iMqGUahj6OLo7UuXTSd3ryDT2cHAa20N6zb1x236XnGNbrHkVtxq3zBQ/LG1Vz1VGeGH0c9Y7fV/n5uKYKlfuPiN08KudPAHsVHbFeD92kttrwu/WYdZLtxud1L0eTAP7lFKnlVIvOUGefXgU5eMT1PGgG86xbdbNEEWLovd/Uq6PPCn/OPoZ9Y2hHnkj1iPG+h1io/G64x5RSh2pRfSUUnnH43mtYjDm3ME7obuT7e4UKyLKzv/tpFG6/RzbZs1WIpEEeu5jlEeeQO99TFmREVWxNPVWtqK+s72kfhjPynuSQZfIerR3Q3AxnBr55mFmDSfJ7TaXgcYQ/nrrXqKTutcRryhooNzhXXKObbNqQ7RiafTcw5S3/hxG+mOYsb2g7CIdXWy1t+Mmz98/q743aPKuNcAlq4+StFwuoxvwmq+0+jG9qk3q9XkFGFar2+s46627W9iU59h2sMZK5KimR7ESW0AlsCJ7EK0xKqxbkaXQqCh4ZajI+70VPntpCyU9R1JV6dcW6VWVdg5daLeta8CrOLxVgtlrf5CQ/Wp117Pe7e5GNuU5BjZEMzWMkb4XK2avQyPaEFb0AWClh6t5xHqupqpMfvQmv3Q1yyP5FB+afcSVSU4tktXKqLonPDwSHF1YbxMSsj74G6LSMFLDGOntSDSJPZLVsKK7EM39Od2q6ZhUVIHRaDtVTfj3j9xmOlPhiStZLEtjxspwy0qzRVtki1ZCQ0C747lGr7tnkAoON+rnP14RvNXqrqeTursFr3NsNero6nN0nSOKFsXoHaW89Wep9u1GoilAIVo/ZuyTnkYIYBi2Eamo9/TznWyZyY/e4kLGHpoaaNy0epk2Brlp9WLc+aS/lyGOOxUdXniF1es7j1dQYrW66+mk7m7B87dp8b27yBBVDC0xiurdTTVz/1JhNigksgMr+ggo/7xg1XSMKOZvTMWYyT+PzvHyyDymsj2nhWLW6uGGleZ6NU71DhmkU9/oded1Lbtyiqe9fuylQEEHdC/RSd3dgs8CVTnnXFbgRFq7+majARZaAi1xH5H0x1GxYbZmdqCplLPOWxIr9gmsyBhBXpVRdTwiPh6xnlcHF/j7nbPMJuwq8cWEaVmZKAUjyvvlFNf0BBVLAyi3f3orqBVPL31EpP5zvM5zeOW1xkXkrIgcEpH9IjIuIi/gXTg95VK4vF663fCKHq6H7m7B6/odd37DMbDrUR3jfGE1BxGRCRG5KDZnvVInQeXcZHEKFqJaYvSWim0dqjcyheK+1JB6t2JgRHbSTnA1qEes53qyyt/tvMWnb2R4uCfRYMFFM0LRjNAbMWUdVifK4V/kux/7yYmd2D927Sn0ZpofR/LDbWmJ03iXz7Wj240TeCe816q7WziD9zlOABNrXQPXMeD6m9Re7Bv3vqbnKgPJ+ckC+zRU7M2Vni5CJraDPb37yEXaK1FbmiNG2ktRJtIxru5LcOH+KBUXu1fwk7YUrp4cMO5UZ6z18ZgzbkMpR7ebga6ZTuruFjYoQe9l6M3bg8r5ympi6U+CtvwAokojkZ8B1U9MKe5PpNiV6CGlBTMsAWJYErRUIB6LsGM4x9i2AeKxKFey8K+7FNcyyzKmhhHXrCeDaVwXcgBOpcZqF0WqPczryhp1+9JJ3V3EYQJW46ySoEXogYvV/WS1Lw9/8Rxq4FlQoIYR7UGa3zuTiUR5MNnL9niSSIuVsUsVjSqaIuFf0hbRFNv6szxw7xB96cb3nZZi8J/3K/73HoWl4GI/f7Xv97MXfRU2coa1Ffou3W2dZefb9TBnsFe+9m2DozuowZzGPWLoGrzooG43TzTt4vmDygG+SzW6ej7n2j5OMGPM0/5v6HXtmtsTVM5XVgM4tOWRPxBt11dE2z7vFZBRwFA0zkPJXgaj3us4BZkj9md7eGD7Voa2pH2XvH9rEOPfdqmnvvqbqa95CrkzTfAfqZ4p4GDzEg2Oh6nNG/14CdsADwZdfsExmIP4V36c8JA77VVf2SndztMS9dchj0tRdVC5Jh6n0RhP+62p4xR178M2Mq/fuvZ0h9fv4bXdTadbe4LKecoCpxus4FShMAr8OQFCvYuWyWW9TNFqfDr/9Ys9mJadzDfP3W7Y15tKcM9AhmQ8UL3pfwNfmTyQfL22oRteQuNEVffSGPKvLcS0pjIq54n+vSwHiKaxF1PKN8kFemNTJ3UHfRtUULnVtMHle/UrBeSbgiqncJ+jHfG7mdUtFua7qFVQuWZZHMN07YWnCoXHgL8AHvFTCDBrVLlSLVMVwRJ47cLyG6DMH8+BQCIWZdtAhmxP0kfTEu8Bfzh5ILnCtXeDIYZ0B3WrwE0FvBmcxT0CftBjBYANQZpfy9bMqUIhCnwZ+FNarJBtIcxUdT4sGfzo3WVji769wEBPioFsT5AOXwSeAZ6dPJB0zRmGhhgCSyvq1adhaiuNr1ge0THYF3Dvw3mlVH/HGhqAloZY41ShMAA8DfwWLR6buq3D2RnBMOxy0Z7rcbTWK34LMAk8NXkgeS1Io9eT0BDvPkRkFm/nUF9dtNdHDloMSzeCwIZY41Sh8Ans4eqjXjI3SvCTm8v/x69HiZR8bfdl4HcnDyRfC9KG0BBDAGR9OkIee0mNO7qMhtS/HzEIh7PZ14BfBL4IXHGT0Ztfc+it/V3gC5MHko8FNcKQkDrWmiPNEyC9tJG0Vf5yOJuVw9nsd7FfCPMM0PBkb7MhSmTFjWseO4S7Z/JA8p/abGtISI0jrK3Qwnfh4jvBmsZlpwqFMeCbwK8CvJWHK8Xl/dFChFg+AmABzwF/PHkgObPa44VD05B6nGjoBHaNcKtS5Cla5CXvBG3PEf04VSj8AvDb527xuZlFemrbI0WtEL8VfR741uSB5E/XepzQEEO8qOUrWflIV+1FNF0zDK2n1qf/D+PeIY8y1L5bAAAAAElFTkSuQmCC';
    this.traceLog(pngEncoded);
    var pngDecBA = comm.hurlant.util.Base64.decodeToByteArray(pngEncoded);
    var loader_obj = new openfl.display.Loader;
    var info = loader_obj.contentLoaderInfo;
    info.addEventListener(openfl.events.Event.COMPLETE, LoaderInfoCompleteFunc);
    info.addEventListener(openfl.events.IOErrorEvent.IO_ERROR, LoaderInfoIOErrorFunc);
    loader_obj.loadBytes(pngDecBA);
    this._loadObjTile = new TileBase(this._loadObjTileset.addRect(new openfl.geom.Rectangle(0,0,43,47)));
    this._loadProgressObj = new TileBase(0);
    this._loadObjTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT,this._loadObjTileset);
    this._container.addChild(this._loadObjTilemap);
    this._loadObjTilemap.addTile(this._loadObjTile);
    this._loadObjTilemap.addTile(this._loadProgressObj);
    this._loadObjTile.originX = 22;
    this._loadObjTile.originY = 23;
    this._loadObjTile.x = 247;
    this._loadObjTile.y = 450;
    this._loadProgressObj.originX = 22;
    this._loadProgressObj.originY = 23;
    this._loadProgressObj.x = 623;
    this._loadProgressObj.y = 130;
    this._loadProgressObj.scaleX = this._loadProgressObj.scaleY = 0;
    this._loadTxtTile = new TileBase(this._loadObjTileset.addRect(new openfl.geom.Rectangle(53,0,173,47)));
    this._loadTxtTile.originX = 76;
    this._loadTxtTile.originY = 23;
    this._loadTxtTile.x = 277 + 76;
    this._loadTxtTile.y = 450;
    this._loadObjTilemap.addTile(this._loadTxtTile);
    this._loadObjTile.scaleX = this._loadObjTile.scaleY = 0;
    this._loadTxtTile.scaleX = this._loadTxtTile.scaleY = 0;
    this._loadProgressObj.scaleX = this._loadProgressObj.scaleY = 0
}
;
pigg.puzzle.view.LoadingView.prototype.show = function(loadType) {
    loadType = typeof loadType !== 'undefined' ? loadType : 'api';
    this._thisView.visible = true;
    com.greensock.TweenMax.killTweensOf(this._back);
    com.greensock.TweenMax.killTweensOf(this._loadObjTile);
    com.greensock.TweenMax.killTweensOf(this._miniBack);
    com.greensock.TweenMax.killTweensOf(this._loadTxtTile);
    this._back.visible = false;
    this._miniBack.visible = false;
    this.mouseEnabled = true;
    this.mouseChildren = true;
    if (loadType == 'api') {
        this._loadObjTile.scaleX = this._loadObjTile.scaleY = 0;
        this._loadTxtTile.scaleX = this._loadTxtTile.scaleY = 0;
        this._back.visible = true;
        this._loadTxtTile.x = 277 + 76;
        this._loadTxtTile.y = 450;
        this._loadObjTile.x = 247;
        this._loadObjTile.y = 450;
        this._back.alpha = 0;
        com.greensock.TweenMax.to(this._back, .2, {
            delay: .1,
            alpha: 1
        });
        com.greensock.TweenMax.to(this._loadTxtTile, .2, {
            delay: .1,
            scaleX: 1,
            scaleY: 1
        });
        com.greensock.TweenMax.to(this._loadObjTile, .2, {
            delay: .1,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Expo.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.rotateTile, this, 'rotateTile')
        })
    } else if (loadType == 'mini') {
        this._loadObjTile.scaleX = this._loadObjTile.scaleY = 0;
        this._loadTxtTile.scaleX = this._loadTxtTile.scaleY = 0;
        this._isShowMini = true;
        this._miniBack.visible = true;
        this._miniBack.alpha = 0;
        this._loadTxtTile.x = 547;
        this._loadTxtTile.y = 39;
        this._loadObjTile.x = 467;
        this._loadObjTile.y = 39;
        com.greensock.TweenMax.to(this._miniBack, .1, {
            delay: 1,
            alpha: 1
        });
        com.greensock.TweenMax.to(this._loadTxtTile, .1, {
            delay: 1,
            scaleX: .72,
            scaleY: .72
        });
        com.greensock.TweenMax.to(this._loadObjTile, .1, {
            delay: 1,
            scaleX: .72,
            scaleY: .72,
            onComplete: org.apache.royale.utils.Language.closure(this.rotateTile, this, 'rotateTile')
        })
    }
}
;
pigg.puzzle.view.LoadingView.prototype.rotateTile = function() {
    this._loadObjTile.rotation = 0;
    com.greensock.TweenMax.to(this._loadObjTile, 2.2, {
        rotation: 360 * 3,
        ease: com.greensock.easing.Cubic.easeInOut,
        onComplete: org.apache.royale.utils.Language.closure(this.rotateTile, this, 'rotateTile')
    })
}
;
pigg.puzzle.view.LoadingView.prototype.rotateProgress = function() {
    this._loadProgressObj.rotation = 0;
    com.greensock.TweenMax.to(this._loadProgressObj, 2.2, {
        rotation: 360 * 3,
        ease: com.greensock.easing.Cubic.easeInOut,
        onComplete: org.apache.royale.utils.Language.closure(this.rotateProgress, this, 'rotateProgress')
    })
}
;
pigg.puzzle.view.LoadingView.prototype.hide = function(loadType) {
    var self = this;
    loadType = typeof loadType !== 'undefined' ? loadType : 'api';
    var __localFn0__ = function() {
        self._thisView.visible = false
    };
    var __localFn1__ = function() {
        self._isShowMini = false;
        self.invisible()
    };
    com.greensock.TweenMax.killTweensOf(this._loadTxtTile);
    com.greensock.TweenMax.killTweensOf(this._back);
    com.greensock.TweenMax.killTweensOf(this._miniBack);
    if (loadType == 'api') {
        com.greensock.TweenMax.to(this._back, .2, {
            alpha: 0
        });
        com.greensock.TweenMax.killTweensOf(this._loadObjTile);
        com.greensock.TweenMax.to(this._loadTxtTile, .2, {
            scaleX: 0,
            scaleY: 0
        });
        com.greensock.TweenMax.to(this._loadObjTile, .2, {
            scaleX: 0,
            scaleY: 0,
            onComplete: __localFn0__
        })
    } else if (loadType == 'mini') {
        this.mouseEnabled = false;
        this.mouseChildren = false;
        com.greensock.TweenMax.killTweensOf(this._loadObjTile);
        com.greensock.TweenMax.to(this._miniBack, .2, {
            alpha: 0
        });
        com.greensock.TweenMax.to(this._loadTxtTile, .2, {
            scaleX: 0,
            scaleY: 0
        });
        com.greensock.TweenMax.to(this._loadObjTile, .2, {
            scaleX: 0,
            scaleY: 0,
            onComplete: __localFn1__
        })
    }
}
;
pigg.puzzle.view.LoadingView.prototype.invisible = function() {
    this.traceLog('invisible::', this._isShowMini, this._isShowProgress);
    if (this._isShowMini)
        return;
    if (this._isShowProgress)
        return;
    this._thisView.visible = false;
    this._loadObjTile.scaleX = this._loadObjTile.scaleY = 0;
    this._loadTxtTile.scaleX = this._loadTxtTile.scaleY = 0;
    this._loadProgressObj.scaleX = this._loadProgressObj.scaleY = 0;
    this._miniBack.alpha = 0;
    this._back.alpha = 0
}
;
pigg.puzzle.view.LoadingView.prototype.stackTweenObj = function(targetArray, reset) {
    reset = typeof reset !== 'undefined' ? reset : false
}
;
pigg.puzzle.view.LoadingView.prototype.pauseTweenObj = function(type) {}
;
pigg.puzzle.view.LoadingView.prototype.killTweenObj = function() {}
;
pigg.puzzle.view.LoadingView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'LoadingView',
        qName: 'pigg.puzzle.view.LoadingView',
        kind: 'class'
    }]
};
pigg.puzzle.view.LoadingView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'LoadingView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.LoadingView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'pauseTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'killTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.LoadingView'
                }
            }
        }
    }
}
;
pigg.puzzle.view.MapView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('MapView')
}
;
goog.inherits(pigg.puzzle.view.MapView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.MapView', pigg.puzzle.view.MapView);
pigg.puzzle.view.MapView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MapView',
        qName: 'pigg.puzzle.view.MapView',
        kind: 'class'
    }]
};
pigg.puzzle.view.MapView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MapView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.MapView'
                }
            }
        }
    }
}
;
var App = function() {
    openfl.display.Sprite.call(this);
    this.init(this.stage.color)
};
goog.inherits(App, openfl.display.Sprite);
goog.exportSymbol('App', App);
App.prototype.init = function(appType) {
    var mainView = new pigg.puzzle.view.MainView;
    if (appType == 0)
        mainView.init('game', this.stage);
    else if (appType == 1)
        mainView.init('game-local', this.stage);
    else if (appType == 2)
        mainView.init('mypage', this.stage);
    else if (appType == 3)
        mainView.init('mypage-local', this.stage);
    this.stage.color = 16774880;
    this.addChild(mainView)
}
;
App.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'App',
        qName: 'App',
        kind: 'class'
    }]
};
App.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'App': {
                    type: '',
                    declaredBy: 'App'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'App',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.TopRankView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.RECT_TOP_ICON = [];
    this._scoreHouseTiles = [];
    this._winningHouseTiles = [];
    this._scoreNameTxts = [];
    this._scoreIcons = [];
    this._winningNameTxts = [];
    this._winningIcons = [];
    this._winningRenzokuTiles = [];
    this.traceLog('TopRankView')
}
;
goog.inherits(pigg.puzzle.view.TopRankView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.TopRankView', pigg.puzzle.view.TopRankView);
pigg.puzzle.view.TopRankView.prototype._fontNumberManager;
pigg.puzzle.view.TopRankView.prototype._usersScrollView;
pigg.puzzle.view.TopRankView.prototype._usersView;
pigg.puzzle.view.TopRankView.prototype._scoreUsersContainer;
pigg.puzzle.view.TopRankView.prototype._scoreIconContainer;
pigg.puzzle.view.TopRankView.prototype._scoreTxtContainer;
pigg.puzzle.view.TopRankView.prototype._scoreTilemapContainer;
pigg.puzzle.view.TopRankView.prototype._winningUsersContainer;
pigg.puzzle.view.TopRankView.prototype._winningIconContainer;
pigg.puzzle.view.TopRankView.prototype._winningTxtContainer;
pigg.puzzle.view.TopRankView.prototype._winningTilemapContainer;
pigg.puzzle.view.TopRankView.prototype._backBlack;
pigg.puzzle.view.TopRankView.prototype._isShow = false;
pigg.puzzle.view.TopRankView.prototype._container;
pigg.puzzle.view.TopRankView.prototype._loadDataManager;
pigg.puzzle.view.TopRankView.prototype._main;
pigg.puzzle.view.TopRankView.prototype._lastUpdateTime;
pigg.puzzle.view.TopRankView.prototype._scoreRankUserData;
pigg.puzzle.view.TopRankView.prototype._winningRankUserData;
pigg.puzzle.view.TopRankView.prototype._rankType;
pigg.puzzle.view.TopRankView.prototype._base;
pigg.puzzle.view.TopRankView.prototype._rankTileset;
pigg.puzzle.view.TopRankView.prototype._bgScore;
pigg.puzzle.view.TopRankView.prototype._bgWinning;
pigg.puzzle.view.TopRankView.prototype._scoreTxtTilemap;
pigg.puzzle.view.TopRankView.prototype._winningTxtTilemap;
pigg.puzzle.view.TopRankView.prototype.RECT_TOP_ICON;
pigg.puzzle.view.TopRankView.prototype.RECT_SCORE_KURAI = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_WINNING_KURAI = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_POINT_ICON = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_WINNING_SAIKOU = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_WINNING_RENZOKU = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_HOUSE_ICON = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_SELF_BG_LEFT = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_SELF_BG_RIGHT = 0;
pigg.puzzle.view.TopRankView.prototype.RECT_SELF_BG_CENTER = 0;
pigg.puzzle.view.TopRankView.prototype._scoreHouseTiles;
pigg.puzzle.view.TopRankView.prototype._winningHouseTiles;
pigg.puzzle.view.TopRankView.prototype._scoreNameTxts;
pigg.puzzle.view.TopRankView.prototype._scoreIcons;
pigg.puzzle.view.TopRankView.prototype._scoreSelfBg;
pigg.puzzle.view.TopRankView.prototype._winningNameTxts;
pigg.puzzle.view.TopRankView.prototype._winningIcons;
pigg.puzzle.view.TopRankView.prototype._winningRenzokuTiles;
pigg.puzzle.view.TopRankView.prototype._winningSelfBg;
pigg.puzzle.view.TopRankView.prototype._currentDispMode = '';
pigg.puzzle.view.TopRankView.prototype._initRankType;
pigg.puzzle.view.TopRankView.prototype._thisView;
pigg.puzzle.view.TopRankView.prototype._isInit = false;
pigg.puzzle.view.TopRankView.prototype.init = function(main, loadDataManager, type) {
    this.traceLog('TopRankView::init', type);
    this._isInit = true;
    this._thisView = this;
    this._initRankType = type;
    this._main = main;
    this._container = this.makeContainer();
    this._loadDataManager = loadDataManager;
    this._rankType = type;
    this._fontNumberManager = new pigg.puzzle.manager.NumberFontManager;
    this._fontNumberManager.init(this._main);
    this._backBlack = this.makeBackBlack();
    this.addChild(this._backBlack);
    this._usersView = new openfl.display.Sprite;
    this._base = new openfl.display.Sprite;
    this._usersView.addChild(this._base);
    this._rankTileset = this._main.rankingPartsTileset.clone();
    this.RECT_TOP_ICON.push(this._rankTileset.addRect(new openfl.geom.Rectangle(1273,531,84,34)));
    this.RECT_TOP_ICON.push(this._rankTileset.addRect(new openfl.geom.Rectangle(1273,566,86,35)));
    this.RECT_TOP_ICON.push(this._rankTileset.addRect(new openfl.geom.Rectangle(1273,602,86,35)));
    this.RECT_SCORE_KURAI = this._rankTileset.addRect(new openfl.geom.Rectangle(1273,638,33,33));
    this.RECT_WINNING_KURAI = this._rankTileset.addRect(new openfl.geom.Rectangle(1307,638,33,33));
    this.RECT_POINT_ICON = this._rankTileset.addRect(new openfl.geom.Rectangle(1259,818,27,27));
    this.RECT_WINNING_SAIKOU = this._rankTileset.addRect(new openfl.geom.Rectangle(1241,767,40,20));
    this.RECT_WINNING_RENZOKU = this._rankTileset.addRect(new openfl.geom.Rectangle(1284,767,48,27));
    this.RECT_HOUSE_ICON = this._rankTileset.addRect(new openfl.geom.Rectangle(689,772,76,76));
    this.RECT_SELF_BG_LEFT = this._rankTileset.addRect(new openfl.geom.Rectangle(1652,361,15,124));
    this.RECT_SELF_BG_RIGHT = this._rankTileset.addRect(new openfl.geom.Rectangle(1667,361,15,124));
    this.RECT_SELF_BG_CENTER = this._rankTileset.addRect(new openfl.geom.Rectangle(1667,361,1,124));
    var tilemap = new openfl.display.Tilemap(498,636,this._rankTileset);
    this._base.addChild(tilemap);
    var tl;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1684,361,20,636))));
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1704,361,20,636))));
    tl.x = 478;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1703,361,1,636))));
    tl.x = 20;
    tl.scaleX = 458;
    tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1270,459,221,36))));
    tl.x = 139;
    tl.y = 22;
    this._bgScore = new openfl.display.Tilemap(454,521,this._rankTileset);
    this._base.addChild(this._bgScore);
    this._bgScore.addTile(new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,974,454,50))));
    this._bgScore.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,1024,454,1))));
    tl.y = 50;
    tl.scaleY = 461;
    this._bgScore.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1,1064,454,10))));
    tl.y = 511;
    this._bgScore.x = 23;
    this._bgScore.y = 75;
    this._bgWinning = new openfl.display.Tilemap(454,521,this._rankTileset);
    this._base.addChild(this._bgWinning);
    this._bgWinning.addTile(new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,974,454,50))));
    this._bgWinning.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,1024,454,1))));
    tl.y = 50;
    tl.scaleY = 461;
    this._bgWinning.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(456,1064,454,10))));
    tl.y = 511;
    this._bgWinning.x = 23;
    this._bgWinning.y = 75;
    this._container.addChild(this._usersView);
    this.addChild(this._container);
    this._usersScrollView = new pigg.puzzle.view.ScrollView;
    this._usersScrollView.init(454, 483, 454 - 26, 447, 12, 15);
    this._usersScrollView.x = 18;
    this._usersScrollView.y = 126;
    this._usersScrollView.mouseDownFunc = org.apache.royale.utils.Language.closure(this.homeCL, this, 'homeCL');
    this._loadDataManager = loadDataManager;
    this._usersView.addChild(this._usersScrollView);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 448;
    closeBtn.y = 7;
    this._base.addChild(closeBtn);
    this._usersView.x = 71;
    this._usersView.y = 101
}
;
pigg.puzzle.view.TopRankView.prototype.onLoadPng = function(code, bmd, container) {
    container = typeof container !== 'undefined' ? container : null
}
;
pigg.puzzle.view.TopRankView.prototype.show = function(rankType) {
    var self = this;
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._usersView.cacheAsBitmap = false
        };
        var __localFn1__ = function() {
            self._usersView.cacheAsBitmap = false
        };
        if (!self._usersView.cacheAsBitmap)
            self._usersView.cacheAsBitmap = true;
        self._usersView.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.panleCL, self, 'panleCL'));
        self._backBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.closeMD, self, 'closeMD'));
        if (self._main.appType == 'mypage')
            com.greensock.TweenMax.to(self._usersView, .4, {
                delay: .1,
                y: 101,
                ease: com.greensock.easing.Back.easeOut,
                onComplete: __localFn0__
            });
        else if (self._main.appType == 'game')
            com.greensock.TweenMax.to(self._usersView, .4, {
                delay: .1,
                y: 153,
                ease: com.greensock.easing.Back.easeOut,
                onComplete: __localFn1__
            })
    };
    this.traceLog('Toprank::show', this._rankType);
    this.switchRankType(rankType);
    this._backBlack.alpha = 0;
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 1
    });
    this.visible = true;
    com.greensock.TweenMax.killTweensOf(this._usersView);
    com.greensock.TweenMax.to(this._usersView, .1, {
        onComplete: __localFn0__
    });
    this._isShow = true
}
;
pigg.puzzle.view.TopRankView.prototype.makeUserData = function(rankType) {
    this.traceLog('makeUserData::');
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    var nameTxt;
    var icon;
    var iconContainer;
    var txtContainer;
    var nameTxtArray;
    var iconArray;
    var tilemapContainer;
    var thumbUrl;
    var targetContainer;
    var tilemap;
    var itemFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,20);
    var nameStr;
    var tl;
    var rankUserData;
    if (rankType == 'score') {
        rankUserData = this._scoreRankUserData;
        if (this._scoreUsersContainer == null) {
            this._scoreUsersContainer = new openfl.display.Sprite;
            this._scoreUsersContainer.addChild(this._scoreIconContainer = new openfl.display.Sprite);
            this._scoreUsersContainer.addChild(this._scoreTxtContainer = new openfl.display.Sprite);
            this._scoreUsersContainer.addChild(this._scoreTilemapContainer = new openfl.display.Sprite);
            this._scoreTxtTilemap = new openfl.display.Tilemap(420,128 * rankUserData.length,this._rankTileset);
            this._scoreUsersContainer.addChild(this._scoreTxtTilemap = new openfl.display.Tilemap(420,128 * rankUserData.length,this._rankTileset));
            this._fontNumberManager.makeFontInfo('scorePointTxt', 320, 128 * rankUserData.length, this._scoreTilemapContainer, 16609792, 16777215, 100, 20, 10, 'LEFT', false, true);
            this._fontNumberManager.getFontInfo('scorePointTxt').tilemap.x = 115;
            this._fontNumberManager.makeFontInfo('scoreRankTxt', 320, 128 * rankUserData.length, this._scoreTilemapContainer, 16609792, 16777215, 100, 20, 10, 'LEFT', false, true);
            this._fontNumberManager.getFontInfo('scoreRankTxt').tilemap.x = 115
        }
        if (this._scoreTxtTilemap.height != 128 * rankUserData.length)
            this._scoreTxtTilemap.height = 128 * rankUserData.length;
        if (this._fontNumberManager.getFontInfo('scorePointTxt').tilemap.height != 128 * rankUserData.length)
            this._fontNumberManager.getFontInfo('scorePointTxt').tilemap.height = 128 * rankUserData.length;
        if (this._fontNumberManager.getFontInfo('scoreRankTxt').tilemap.height != 128 * rankUserData.length)
            this._fontNumberManager.getFontInfo('scoreRankTxt').tilemap.height = 128 * rankUserData.length;
        txtContainer = this._scoreTxtContainer;
        nameTxtArray = this._scoreNameTxts;
        iconContainer = this._scoreIconContainer;
        iconArray = this._scoreIcons;
        if (this._scoreSelfBg)
            this._scoreSelfBg.visible = false
    } else if (rankType == 'winning_streak') {
        rankUserData = this._winningRankUserData;
        if (this._winningUsersContainer == null) {
            this._winningUsersContainer = new openfl.display.Sprite;
            this._winningUsersContainer.addChild(this._winningIconContainer = new openfl.display.Sprite);
            this._winningUsersContainer.addChild(this._winningTxtContainer = new openfl.display.Sprite);
            this._winningUsersContainer.addChild(this._winningTilemapContainer = new openfl.display.Sprite);
            this._winningUsersContainer.addChild(this._winningTxtTilemap = new openfl.display.Tilemap(420,128 * rankUserData.length,this._rankTileset));
            this._fontNumberManager.makeFontInfo('winningPointTxt', 320, 128 * rankUserData.length, this._winningTilemapContainer, 16609792, 16777215, 100, 20, 10, 'LEFT', false, true);
            this._fontNumberManager.getFontInfo('winningPointTxt').tilemap.x = 115;
            this._fontNumberManager.makeFontInfo('winningRankTxt', 320, 128 * rankUserData.length, this._winningTilemapContainer, 16609792, 16777215, 100, 20, 10, 'LEFT', false, true);
            this._fontNumberManager.getFontInfo('winningRankTxt').tilemap.x = 115
        }
        if (this._winningTxtTilemap.height != 128 * rankUserData.length)
            this._winningTxtTilemap.height = 128 * rankUserData.length;
        if (this._fontNumberManager.getFontInfo('winningPointTxt').tilemap.height != 128 * rankUserData.length)
            this._fontNumberManager.getFontInfo('winningPointTxt').tilemap.height = 128 * rankUserData.length;
        if (this._fontNumberManager.getFontInfo('winningRankTxt').tilemap.height != 128 * rankUserData.length)
            this._fontNumberManager.getFontInfo('winningRankTxt').tilemap.height = 128 * rankUserData.length;
        txtContainer = this._winningTxtContainer;
        nameTxtArray = this._winningNameTxts;
        iconContainer = this._winningIconContainer;
        iconArray = this._winningIcons;
        if (this._winningSelfBg)
            this._winningSelfBg.visible = false
    }
    len = 20;
    for (cnt = 0; cnt < len; cnt++) {
        if (nameTxtArray[cnt] == null) {
            nameTxt = new openfl.text.TextField;
            nameTxt.setTextFormat(itemFormat);
            nameTxt.textColor = 8994560;
            nameTxt.selectable = false;
            nameTxt.wordWrap = false;
            nameTxt.width = 200;
            nameTxt.x = 130;
            nameTxt.y = cnt * 128 + 43;
            if (AsData.ua > 1)
                nameTxt.y += 3;
            nameTxtArray.push(nameTxt);
            txtContainer.addChild(nameTxt)
        }
        nameTxt = nameTxtArray[cnt];
        if (rankUserData[cnt]) {
            nameStr = org.apache.royale.utils.Language.string(rankUserData[cnt].nickname);
            nameTxt.text = nameStr;
            this.dropText(nameTxt)
        }
        if (iconArray[cnt] == null) {
            icon = new pigg.puzzle.view.IconView(this._main);
            icon.hasBg = false;
            icon.isFace = true;
            icon.x = 10;
            icon.y = cnt * 128;
            iconArray.push(icon)
        } else
            icon = iconArray[cnt];
        if (rankUserData[cnt]) {
            if (icon.parent == null) {
                this.traceLog('ADD_CONTAINER::', cnt);
                iconContainer.addChild(icon)
            }
            this.traceLog('icon:::', icon, cnt);
            nameTxt.y = cnt * 128 + 44;
            if (AsData.ua > 1)
                nameTxt.y += 3;
            icon.y = cnt * 128;
            nameTxt.x = 130;
            if (this._main.isLocal)
                this._main.loadDataManager.loadPng(pigg.puzzle.data.CommonData.URL_USER_THUMB_API_LOCAL + '057790f15f709e7e5700745d4e5a55df' + '/image/pigg_code?part\x3dface\x26scale\x3d104\x26frame\x3dtrue\x26background\x3dtrue\x26shadow\x3dfalse\x26direction\x3dFR', 'facePng', org.apache.royale.utils.Language.closure(icon.setIconData, icon, 'setIconData'));
            else
                this._main.loadDataManager.loadPng(this.addLocation(this._main) + pigg.puzzle.data.CommonData.URL_USER_THUMB_API + rankUserData[cnt].piggCode + '?scale\x3d104\x26frame\x3dtrue\x26background\x3dtrue\x26shadow\x3dfalse\x26direction\x3dFR', 'facePng', org.apache.royale.utils.Language.closure(icon.setIconData, icon, 'setIconData'))
        } else {
            nameTxt.y = 0;
            nameTxt.x = -200;
            icon.y = 0
        }
        this.traceLog('TOPRANK::iconContainerKK:', iconContainer.height);
        this.traceLog('TOPRANK::txtContainerHH:', txtContainer.height);
        if (this._isInit) {
            if (rankType == 'score') {
                this._fontNumberManager.addFontType('scorePointTxt', 16609792, 16777215, 100, 84 + 128 * cnt, 5, 'LEFT', true);
                this._fontNumberManager.addFontType('scoreRankTxt', 7449343, 16777215, 36, 15 + 128 * cnt, 6, 'LEFT', true);
                this._scoreTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_HOUSE_ICON));
                tl.x = 344;
                tl.y = 20 + 128 * cnt;
                this._scoreHouseTiles.push(tl);
                this._scoreTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_POINT_ICON));
                tl.x = 132;
                tl.y = 81 + 128 * cnt
            } else {
                this._fontNumberManager.addFontType('winningPointTxt', 7846656, 16777215, 124, 84 + 128 * cnt, 5, 'LEFT', true);
                this._fontNumberManager.addFontType('winningRankTxt', 7846656, 16777215, 36, 15 + 128 * cnt, 6, 'LEFT', true);
                this._winningTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_HOUSE_ICON));
                tl.x = 344;
                tl.y = 20 + 128 * cnt;
                this._winningHouseTiles.push(tl);
                this._winningTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_WINNING_SAIKOU));
                tl.x = 132;
                tl.y = 87 + 128 * cnt;
                this._winningTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_WINNING_RENZOKU));
                tl.x = 182;
                tl.y = 83 + 128 * cnt;
                this._winningRenzokuTiles.push(tl)
            }
            if (cnt < 3) {
                if (rankType == 'score')
                    this._scoreTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_TOP_ICON[cnt]));
                else
                    this._winningTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_TOP_ICON[cnt]));
                tl.x = 131;
                tl.y = 8 + 128 * cnt
            } else {
                if (rankType == 'score') {
                    this._scoreTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_SCORE_KURAI));
                    this._fontNumberManager.makeNumber('scoreRankTxt', cnt + 1, cnt + 1, false)
                } else {
                    this._winningTxtTilemap.addTile(tl = new openfl.display.Tile(this.RECT_WINNING_KURAI));
                    this._fontNumberManager.makeNumber('winningRankTxt', cnt + 1, cnt + 1, false)
                }
                if (cnt < 9)
                    tl.x = 155;
                else if (cnt == 9)
                    tl.x = 171;
                else if (cnt == 10)
                    tl.x = 160;
                else if (cnt < 19)
                    tl.x = 168;
                else
                    tl.x = 178;
                tl.y = 13 + 128 * cnt
            }
        }
        if (rankType == 'score') {
            if (rankUserData[cnt]) {
                this._fontNumberManager.makeNumber('scorePointTxt', rankUserData[cnt].pointValue, cnt + 1, false);
                if (this._main.userData.piggCode == rankUserData[cnt].piggCode) {
                    this.traceLog('\u81ea\u5206\u304c\u30e9\u30f3\u30af\u30a4\u30f3');
                    this._scoreHouseTiles[cnt].visible = false;
                    if (this._scoreSelfBg == null) {
                        this._scoreSelfBg = new openfl.display.Tilemap(425,125,this._rankTileset);
                        this._scoreUsersContainer.addChildAt(this._scoreSelfBg, 0);
                        this._scoreSelfBg.addTile(new openfl.display.Tile(this.RECT_SELF_BG_LEFT));
                        this._scoreSelfBg.addTile(tl = new openfl.display.Tile(this.RECT_SELF_BG_RIGHT));
                        tl.x = 410;
                        this._scoreSelfBg.addTile(tl = new openfl.display.Tile(this.RECT_SELF_BG_CENTER));
                        tl.x = 15;
                        tl.scaleX = 395;
                        this._scoreSelfBg.x = 4
                    }
                    this._scoreSelfBg.y = -2 + 128 * cnt;
                    this._scoreSelfBg.visible = true
                }
            }
        } else if (rankUserData[cnt]) {
            this._fontNumberManager.makeNumber('winningPointTxt', rankUserData[cnt].winningValue, cnt + 1, false);
            if (rankUserData[cnt].winningValue < 10)
                this._winningRenzokuTiles[cnt].x = 196;
            else if (rankUserData[cnt].winningValue < 20)
                this._winningRenzokuTiles[cnt].x = 206;
            else if (rankUserData[cnt].winningValue < 100)
                this._winningRenzokuTiles[cnt].x = 214;
            else if (rankUserData[cnt].winningValue < 1E3)
                this._winningRenzokuTiles[cnt].x = 230;
            else
                this._winningRenzokuTiles[cnt].x = 254;
            if (this._main.userData.piggCode == rankUserData[cnt].piggCode) {
                this.traceLog('\u81ea\u5206\u304c\u30e9\u30f3\u30af\u30a4\u30f3');
                this._winningHouseTiles[cnt].visible = false;
                if (this._winningSelfBg == null) {
                    this._winningSelfBg = new openfl.display.Tilemap(425,125,this._rankTileset);
                    this._winningUsersContainer.addChildAt(this._winningSelfBg, 0);
                    this._winningSelfBg.addTile(new openfl.display.Tile(this.RECT_SELF_BG_LEFT));
                    this._winningSelfBg.addTile(tl = new openfl.display.Tile(this.RECT_SELF_BG_RIGHT));
                    tl.x = 410;
                    this._winningSelfBg.addTile(tl = new openfl.display.Tile(this.RECT_SELF_BG_CENTER));
                    tl.x = 15;
                    tl.scaleX = 395;
                    this._winningSelfBg.x = 4
                }
                this._winningSelfBg.y = -2 + 128 * cnt;
                this._winningSelfBg.visible = true
            }
        }
        if (rankUserData.length == 0) {
            if (!this._isShowNobody)
                this.showNobody()
        } else if (this._isShowNobody)
            this.hideNobody()
    }
    if (this._scoreUsersContainer)
        this.traceLog('_scoreUsersContainer::HH::', this._scoreUsersContainer.height);
    if (this._winningUsersContainer)
        this.traceLog('_winningUsersContainer::HH::', this._winningUsersContainer.height);
    if (this._isInit)
        if (rankType == 'score')
            this._usersScrollView.setContent(this._scoreUsersContainer);
        else {
            this._usersScrollView.setContent(this._winningUsersContainer);
            this._main.hideApiLoading();
            this.show(this._initRankType);
            this._isInit = false
        }
    else if (rankType == 'winning_streak')
        this._usersScrollView.updateContent()
}
;
pigg.puzzle.view.TopRankView.prototype._nobodyContainer;
pigg.puzzle.view.TopRankView.prototype._nobodyHukurou;
pigg.puzzle.view.TopRankView.prototype._isShowNobody = false;
pigg.puzzle.view.TopRankView.prototype.showNobody = function() {
    var tilemap;
    var tl;
    if (this._nobodyContainer == null) {
        this._nobodyContainer = new openfl.display.Sprite;
        this._usersView.addChild(this._nobodyContainer);
        tilemap = new openfl.display.Tilemap(365 + 67,390,this._rankTileset);
        this._nobodyContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1361,605,237,72))));
        tl.x = 72 + 67;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1364,678,219,72))));
        tl.x = 79 + 67;
        tl.y = 81;
        tilemap.addTile(this._nobodyHukurou = new openfl.display.Tile(this._rankTileset.addRect(new openfl.geom.Rectangle(1261,881,359,189))));
        this._nobodyHukurou.y = 175;
        this._nobodyHukurou.originX = 180;
        this._nobodyHukurou.originY = 95;
        this._nobodyHukurou.x = 180 + 67;
        this._nobodyHukurou.y = 95 + 175;
        this._nobodyContainer.x = 0;
        this._nobodyContainer.y = 170
    }
    this._usersScrollView.visible = false;
    this._isShowNobody = true;
    com.greensock.TweenMax.killTweensOf(this._nobodyHukurou);
    this._nobodyHukurou.scaleX = this._nobodyHukurou.scaleY = .5;
    com.greensock.TweenMax.to(this._nobodyHukurou, 1, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.TopRankView.prototype.hideNobody = function() {
    this.removeFromParent(this._nobodyContainer);
    this._nobodyContainer = null;
    this._nobodyHukurou = null;
    this._usersScrollView.visible = true;
    this._isShowNobody = false
}
;
pigg.puzzle.view.TopRankView.prototype.updateUserData = function(rankType) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    this.traceLog('updateUserData::', rankType)
}
;
pigg.puzzle.view.TopRankView.prototype.hide = function() {
    var self = this;
    var __localFn0__ = function() {
        self._usersView.cacheAsBitmap = false;
        self._thisView.visible = false;
        self._isShow = false;
        self._main.isShowTopRanking = false
    };
    com.greensock.TweenMax.killTweensOf(this._usersView);
    com.greensock.TweenMax.killTweensOf(this._backBlack);
    com.greensock.TweenMax.to(this._backBlack, .2, {
        alpha: 0
    });
    var tarY = 0;
    if (this._main.appType == 'game')
        tarY = pigg.puzzle.view.CommonView.STAGE_HEIGHT + 40;
    else
        tarY = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT + 40;
    if (!this._usersView.cacheAsBitmap)
        this._usersView.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._usersView, .3, {
        y: tarY,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    });
    this._usersView.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.panleCL, this, 'panleCL'))
}
;
pigg.puzzle.view.TopRankView.prototype.closeMD = function(e) {
    this.hide()
}
;
pigg.puzzle.view.TopRankView.prototype.switchRankType = function(rankType) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    this.traceLog('TopRankVIew:::::switchRankType::', this._currentDispMode, rankType);
    if (this._currentDispMode == rankType)
        return;
    this._currentDispMode = rankType;
    this._usersScrollView.stopTween();
    if (rankType == 'score') {
        this._scoreUsersContainer.visible = true;
        this._winningUsersContainer.visible = false;
        this._bgWinning.visible = false;
        this._bgScore.visible = true
    } else if (rankType == 'winning_streak') {
        this._scoreUsersContainer.visible = false;
        this._winningUsersContainer.visible = true;
        this._bgWinning.visible = true;
        this._bgScore.visible = false
    }
    if (this._isShowNobody) {
        com.greensock.TweenMax.killTweensOf(this._nobodyHukurou);
        this._nobodyHukurou.scaleX = this._nobodyHukurou.scaleY = .5;
        com.greensock.TweenMax.to(this._nobodyHukurou, 1, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    }
}
;
pigg.puzzle.view.TopRankView.prototype.homeCL = function(innerY) {
    var addY = 0;
    if (this._main.appType == 'game')
        addY = 50;
    this.traceLog('homeCL::', this.mouseX, this.mouseY, org.apache.royale.utils.Language._int(this.mouseY / 128), innerY);
    if (this.mouseX < 440 || this.mouseX - addY > 530)
        return;
    var num = org.apache.royale.utils.Language._int((this.mouseY - addY - 245 - innerY) / 128);
    if (num > 19 || num < 0)
        return;
    if (this._currentDispMode == 'score') {
        this.traceLog('_scoreRankUserData::', this._scoreRankUserData[num].nickname);
        if (this._main.userData.piggCode != this._scoreRankUserData[num].piggCode)
            this._main.showAlertMoveUserPage(this._scoreRankUserData[num].nickname, this._scoreRankUserData[num].piggCode)
    } else if (this._currentDispMode == 'winning_streak') {
        this.traceLog('_winningRankUserData::', this._winningRankUserData[num].nickname);
        if (this._main.userData.piggCode != this._winningRankUserData[num].piggCode)
            this._main.showAlertMoveUserPage(this._winningRankUserData[num].nickname, this._winningRankUserData[num].piggCode)
    }
}
;
pigg.puzzle.view.TopRankView.prototype.onGetPuzzleRanking = function(data) {
    this.traceLog('topRankView::onGetPuzzleRanking');
    this.traceLog('onGetPuzzleRanking::\u66f4\u65b0', data.rankingType);
    this._lastUpdateTime = data.lastUpdateTime;
    if (data.rankingType == 'score')
        this._scoreRankUserData = data.rankUserData;
    else
        this._winningRankUserData = data.rankUserData;
    this.makeUserData(data.rankingType)
}
;
pigg.puzzle.view.TopRankView.prototype.panleCL = function(e) {
    this.traceLog('TopRankPanleCL::', e.currentTarget.mouseX, e.currentTarget.mouseY);
    if (this._currentDispMode == 'winning_streak' && e.currentTarget.mouseX > 20 && e.currentTarget.mouseX < 250 && e.currentTarget.mouseY > 70 && e.currentTarget.mouseY < 125)
        this.switchRankType('score');
    else if (this._currentDispMode == 'score' && e.currentTarget.mouseX > 255 && e.currentTarget.mouseX < 475 && e.currentTarget.mouseY > 70 && e.currentTarget.mouseY < 125)
        this.switchRankType('winning_streak')
}
;
pigg.puzzle.view.TopRankView.prototype.get__isShow = function() {
    return this._isShow
}
;
Object.defineProperties(pigg.puzzle.view.TopRankView.prototype, {
    isShow: {
        get: pigg.puzzle.view.TopRankView.prototype.get__isShow
    }
});
pigg.puzzle.view.TopRankView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TopRankView',
        qName: 'pigg.puzzle.view.TopRankView',
        kind: 'class'
    }]
};
pigg.puzzle.view.TopRankView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.TopRankView'
                }
            }
        },
        methods: function() {
            return {
                'TopRankView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.TopRankView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView'
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'homeCL': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'onGetPuzzleRanking': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TopRankView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleRankingData',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.ScaleTimeline = function(frameCount) {
    spine.animation.TranslateTimeline.call(this, frameCount)
}
;
goog.inherits(spine.animation.ScaleTimeline, spine.animation.TranslateTimeline);
goog.exportSymbol('spine.animation.ScaleTimeline', spine.animation.ScaleTimeline);
spine.animation.ScaleTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.scale.ordinal << 24) + this.boneIndex
}
;
spine.animation.ScaleTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var bone = skeleton.bones[this.boneIndex];
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            bone.scaleX = bone.data.scaleX;
            bone.scaleY = bone.data.scaleY;
            return;
        case spine.animation.MixPose.current:
            bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
            bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha
        }
        return
    }
    var x, y;
    if (time >= frames[frames.length - spine.animation.TranslateTimeline.ENTRIES]) {
        x = frames[frames.length + spine.animation.TranslateTimeline.PREV_X] * bone.data.scaleX;
        y = frames[frames.length + spine.animation.TranslateTimeline.PREV_Y] * bone.data.scaleY
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.TranslateTimeline.ENTRIES);
        x = Number(frames[frame + spine.animation.TranslateTimeline.PREV_X]);
        y = Number(frames[frame + spine.animation.TranslateTimeline.PREV_Y]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.TranslateTimeline.PREV_TIME] - frameTime));
        x = (x + (frames[frame + spine.animation.TranslateTimeline.X] - x) * percent) * bone.data.scaleX;
        y = (y + (frames[frame + spine.animation.TranslateTimeline.Y] - y) * percent) * bone.data.scaleY
    }
    if (alpha == 1) {
        bone.scaleX = x;
        bone.scaleY = y
    } else {
        var bx, by;
        if (pose == spine.animation.MixPose.setup) {
            bx = bone.data.scaleX;
            by = bone.data.scaleY
        } else {
            bx = bone.scaleX;
            by = bone.scaleY
        }
        if (direction == spine.animation.MixDirection.Out) {
            x = Math.abs(x) * spine.MathUtils.signum(bx);
            y = Math.abs(y) * spine.MathUtils.signum(by)
        } else {
            bx = Math.abs(bx) * spine.MathUtils.signum(x);
            by = Math.abs(by) * spine.MathUtils.signum(y)
        }
        bone.scaleX = bx + (x - bx) * alpha;
        bone.scaleY = by + (y - by) * alpha
    }
}
;
spine.animation.ScaleTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ScaleTimeline',
        qName: 'spine.animation.ScaleTimeline',
        kind: 'class'
    }]
};
spine.animation.ScaleTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'ScaleTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.ScaleTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.ScaleTimeline'
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.ScaleTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
var org = {};
org.apache = {};
org.apache.royale = {};
org.apache.royale.utils = {};
org.apache.royale.utils.Language = function() {}
;
goog.exportSymbol('org.apache.royale.utils.Language', org.apache.royale.utils.Language);
org.apache.royale.utils.Language.sortNames;
org.apache.royale.utils.Language.sortNamesOne = [];
org.apache.royale.utils.Language.muler;
org.apache.royale.utils.Language.zeroStr = String.fromCharCode(0);
org.apache.royale.utils.Language.as = function(leftOperand, rightOperand, coercion) {
    coercion = typeof coercion !== 'undefined' ? coercion : null;
    var error, itIs, message;
    coercion = coercion !== undefined ? coercion : false;
    itIs = org.apache.royale.utils.Language.is(leftOperand, rightOperand);
    if (!itIs && coercion) {
        message = 'Type Coercion failed';
        if (TypeError)
            error = new TypeError(message);
        else
            error = new Error(message);
        throw error;
    }
    return itIs ? leftOperand : null
}
;
org.apache.royale.utils.Language._int = function(value) {
    return value >> 0
}
;
org.apache.royale.utils.Language.string = function(value) {
    return value == null ? null : value.toString()
}
;
org.apache.royale.utils.Language.is = function(leftOperand, rightOperand) {
    var superClass;
    if (leftOperand == null || rightOperand == null)
        return false;
    if (leftOperand instanceof rightOperand)
        return true;
    if (rightOperand === Object)
        return true;
    if (typeof leftOperand === 'string')
        return rightOperand === String;
    if (typeof leftOperand === 'number')
        return rightOperand === Number;
    if (typeof leftOperand === 'boolean')
        return rightOperand === Boolean;
    if (rightOperand === Array)
        return Array.isArray(leftOperand);
    if (leftOperand.ROYALE_CLASS_INFO === undefined)
        return false;
    if (leftOperand.ROYALE_CLASS_INFO.interfaces)
        if (org.apache.royale.utils.Language.checkInterfaces(leftOperand, rightOperand))
            return true;
    superClass = leftOperand.constructor;
    superClass = superClass.superClass_;
    if (superClass)
        while (superClass && superClass.ROYALE_CLASS_INFO) {
            if (superClass.ROYALE_CLASS_INFO.interfaces)
                if (org.apache.royale.utils.Language.checkInterfaces(superClass, rightOperand))
                    return true;
            superClass = superClass.constructor;
            superClass = superClass.superClass_
        }
    return false
}
;
org.apache.royale.utils.Language.checkInterfaces = function(leftOperand, rightOperand) {
    var i = 0, interfaces;
    interfaces = leftOperand.ROYALE_CLASS_INFO.interfaces;
    for (i = interfaces.length - 1; i > -1; i--) {
        if (interfaces[i] === rightOperand)
            return true;
        if (interfaces[i].prototype.ROYALE_CLASS_INFO.interfaces) {
            var isit = org.apache.royale.utils.Language.checkInterfaces(interfaces[i].prototype, rightOperand);
            if (isit)
                return true
        }
    }
    return false
}
;
org.apache.royale.utils.Language.prototype.isClass = function(classDef) {
    return typeof classDef === 'function' && classDef.prototype && classDef.prototype.constructor === classDef
}
;
org.apache.royale.utils.Language.prototype.asClass = function(classDef) {
    return this.isClass(classDef) ? classDef : null
}
;
org.apache.royale.utils.Language.trace = function(rest) {
    rest = Array.prototype.slice.call(arguments, 0);
    var theConsole;
    if (!goog.DEBUG)
        return;
    theConsole = goog.global['console'];
    if (theConsole === undefined)
        if (typeof window !== 'undefined')
            theConsole = window.console;
        else if (typeof console !== 'undefined')
            theConsole = console;
    try {
        if (theConsole && theConsole.log)
            theConsole.log.apply(theConsole, rest)
    } catch (e) {}
}
;
org.apache.royale.utils.Language.uint = function(value) {
    return value >>> 0
}
;
org.apache.royale.utils.Language.closure = function(fn, object, boundMethodName) {
    if (object.hasOwnProperty(boundMethodName))
        return object[boundMethodName];
    var boundMethod = goog.bind(fn, object);
    Object.defineProperty(object, boundMethodName, {
        value: boundMethod
    });
    return boundMethod
}
;
org.apache.royale.utils.Language.sortOn = function(arr, names, opt) {
    opt = typeof opt !== 'undefined' ? opt : 0;
    if (org.apache.royale.utils.Language.is(names, Array))
        org.apache.royale.utils.Language.sortNames = org.apache.royale.utils.Language.as(names, Array);
    else {
        org.apache.royale.utils.Language.sortNamesOne[0] = names;
        org.apache.royale.utils.Language.sortNames = org.apache.royale.utils.Language.sortNamesOne
    }
    if (org.apache.royale.utils.Language.is(opt, Array)) {
        var opt2 = 0;
        var foreachiter0_target = opt;
        for (var foreachiter0 in foreachiter0_target) {
            var o = foreachiter0_target[foreachiter0];
            {
                opt2 = opt2 | o
            }
        }
    } else
        opt2 = org.apache.royale.utils.Language.as(opt, Number);
    org.apache.royale.utils.Language.muler = (2 & opt2) > 0 ? -1 : 1;
    if (opt2 & 16)
        arr.sort(org.apache.royale.utils.Language.compareNumber);
    else if (opt2 & 1)
        arr.sort(org.apache.royale.utils.Language.compareStringCaseinsensitive);
    else
        arr.sort(org.apache.royale.utils.Language.compareString)
}
;
org.apache.royale.utils.Language.compareStringCaseinsensitive = function(a, b) {
    var foreachiter1_target = org.apache.royale.utils.Language.sortNames;
    for (var foreachiter1 in foreachiter1_target) {
        var n = foreachiter1_target[foreachiter1];
        {
            var v = Number((a[n] || org.apache.royale.utils.Language.zeroStr).toString().toLowerCase().localeCompare((b[n] || org.apache.royale.utils.Language.zeroStr).toString().toLowerCase()));
            if (v != 0)
                return v * org.apache.royale.utils.Language.muler
        }
    }
    return 0
}
;
org.apache.royale.utils.Language.compareString = function(a, b) {
    var foreachiter2_target = org.apache.royale.utils.Language.sortNames;
    for (var foreachiter2 in foreachiter2_target) {
        var n = foreachiter2_target[foreachiter2];
        {
            var v = Number((a[n] || org.apache.royale.utils.Language.zeroStr).toString().localeCompare((b[n] || org.apache.royale.utils.Language.zeroStr).toString()));
            if (v != 0)
                return v * org.apache.royale.utils.Language.muler
        }
    }
    return 0
}
;
org.apache.royale.utils.Language.compareNumber = function(a, b) {
    var foreachiter3_target = org.apache.royale.utils.Language.sortNames;
    for (var foreachiter3 in foreachiter3_target) {
        var n = foreachiter3_target[foreachiter3];
        {
            if (a[n] > b[n])
                return org.apache.royale.utils.Language.muler;
            else if (a[n] < b[n])
                return -org.apache.royale.utils.Language.muler
        }
    }
    return 0
}
;
org.apache.royale.utils.Language.Vector = function(size, basetype) {
    size = typeof size !== 'undefined' ? size : 0;
    basetype = typeof basetype !== 'undefined' ? basetype : null;
    var arr = [];
    var defValue = null;
    if (basetype == 'int' || basetype == 'uint' || basetype == 'Number')
        defValue = 0;
    else if (basetype == 'String')
        defValue = '';
    for (var i = 0; i < size; i++)
        arr.push(defValue);
    return arr
}
;
org.apache.royale.utils.Language.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Language',
        qName: 'org.apache.royale.utils.Language',
        kind: 'class'
    }]
};
org.apache.royale.utils.Language.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                '|as': {
                    type: 'Object',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Object',
                            optional: false
                        }, {
                            index: 3,
                            type: '*',
                            optional: true
                        }]
                    }
                },
                '|_int': {
                    type: 'Number',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|string': {
                    type: 'String',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                '|is': {
                    type: 'Boolean',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Object',
                            optional: false
                        }]
                    }
                },
                'isClass': {
                    type: 'Boolean',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                'asClass': {
                    type: 'Class',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                '|trace': {
                    type: 'void',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                },
                '|uint': {
                    type: 'Number',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|closure': {
                    type: 'Function',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Function',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Object',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                '|sortOn': {
                    type: 'void',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Object',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Object',
                            optional: true
                        }]
                    }
                },
                '|Vector': {
                    type: 'Array',
                    declaredBy: 'org.apache.royale.utils.Language',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'String',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.ColorTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * 5, 'Number')
}
;
goog.inherits(spine.animation.ColorTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.ColorTimeline', spine.animation.ColorTimeline);
spine.animation.ColorTimeline.ENTRIES = 5;
spine.animation.ColorTimeline.PREV_TIME = -5;
spine.animation.ColorTimeline.PREV_R = -4;
spine.animation.ColorTimeline.PREV_G = -3;
spine.animation.ColorTimeline.PREV_B = -2;
spine.animation.ColorTimeline.PREV_A = -1;
spine.animation.ColorTimeline.R = 1;
spine.animation.ColorTimeline.G = 2;
spine.animation.ColorTimeline.B = 3;
spine.animation.ColorTimeline.A = 4;
spine.animation.ColorTimeline.prototype.slotIndex = 0;
spine.animation.ColorTimeline.prototype.frames;
spine.animation.ColorTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.color.ordinal << 24) + this.slotIndex
}
;
spine.animation.ColorTimeline.prototype.setFrame = function(frameIndex, time, r, g, b, a) {
    frameIndex *= spine.animation.ColorTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.ColorTimeline.R)] = r;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.ColorTimeline.G)] = g;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.ColorTimeline.B)] = b;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.ColorTimeline.A)] = a
}
;
spine.animation.ColorTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var slot = skeleton.slots[this.slotIndex];
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            slot.color.setFromColor(slot.data.color);
            return;
        case spine.animation.MixPose.current:
            var color = slot.color
              , setup = slot.data.color;
            color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha)
        }
        return
    }
    var r, g, b, a;
    if (time >= frames[frames.length - spine.animation.ColorTimeline.ENTRIES]) {
        var i = frames.length;
        r = Number(frames[i + spine.animation.ColorTimeline.PREV_R]);
        g = Number(frames[i + spine.animation.ColorTimeline.PREV_G]);
        b = Number(frames[i + spine.animation.ColorTimeline.PREV_B]);
        a = Number(frames[i + spine.animation.ColorTimeline.PREV_A])
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.ColorTimeline.ENTRIES);
        r = Number(frames[frame + spine.animation.ColorTimeline.PREV_R]);
        g = Number(frames[frame + spine.animation.ColorTimeline.PREV_G]);
        b = Number(frames[frame + spine.animation.ColorTimeline.PREV_B]);
        a = Number(frames[frame + spine.animation.ColorTimeline.PREV_A]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.ColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.ColorTimeline.PREV_TIME] - frameTime));
        r += (frames[frame + spine.animation.ColorTimeline.R] - r) * percent;
        g += (frames[frame + spine.animation.ColorTimeline.G] - g) * percent;
        b += (frames[frame + spine.animation.ColorTimeline.B] - b) * percent;
        a += (frames[frame + spine.animation.ColorTimeline.A] - a) * percent
    }
    if (alpha == 1)
        slot.color.setFrom(r, g, b, a);
    else {
        if (pose == spine.animation.MixPose.setup)
            slot.color.setFromColor(slot.data.color);
        slot.color.r += (r - slot.color.r) * alpha;
        slot.color.g += (g - slot.color.g) * alpha;
        slot.color.b += (b - slot.color.b) * alpha;
        slot.color.a += (a - slot.color.a) * alpha
    }
}
;
spine.animation.ColorTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ColorTimeline',
        qName: 'spine.animation.ColorTimeline',
        kind: 'class'
    }]
};
spine.animation.ColorTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'slotIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'ColorTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.ColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.ColorTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.ColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.ColorTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.ClippingAttachment = function(name) {
    this.color = new spine.Color(.2275,.2275,.2275,1);
    spine.attachments.VertexAttachment.call(this, name)
}
;
goog.inherits(spine.attachments.ClippingAttachment, spine.attachments.VertexAttachment);
goog.exportSymbol('spine.attachments.ClippingAttachment', spine.attachments.ClippingAttachment);
spine.attachments.ClippingAttachment.prototype.endSlot;
spine.attachments.ClippingAttachment.prototype.color;
spine.attachments.ClippingAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ClippingAttachment',
        qName: 'spine.attachments.ClippingAttachment',
        kind: 'class'
    }]
};
spine.attachments.ClippingAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'endSlot': {
                    type: 'spine.SlotData'
                },
                'color': {
                    type: 'spine.Color'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'ClippingAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.ClippingAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.PathConstraint = function(data, skeleton) {
    this._spaces = org.apache.royale.utils.Language.Vector();
    this._positions = org.apache.royale.utils.Language.Vector();
    this._world = org.apache.royale.utils.Language.Vector();
    this._curves = org.apache.royale.utils.Language.Vector();
    this._lengths = org.apache.royale.utils.Language.Vector();
    this._segments = org.apache.royale.utils.Language.Vector(10, 'Number');
    if (data == null)
        throw new openfl.errors.ArgumentError('PathConstraint::data cannot be null.');
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    this._data = data;
    this._bones = org.apache.royale.utils.Language.Vector();
    var foreachiter0_target = data.bones;
    for (var foreachiter0 in foreachiter0_target) {
        var boneData = foreachiter0_target[foreachiter0];
        this._bones.push(skeleton.findBone(boneData.name))
    }
    this.target = skeleton.findSlot(data.target.name);
    this.position = data.position;
    this.spacing = data.spacing;
    this.rotateMix = data.rotateMix;
    this.translateMix = data.translateMix
}
;
goog.exportSymbol('spine.PathConstraint', spine.PathConstraint);
spine.PathConstraint.NONE = -1;
spine.PathConstraint.BEFORE = -2;
spine.PathConstraint.AFTER = -3;
spine.PathConstraint.epsilon = 1E-5;
spine.PathConstraint.prototype._data;
spine.PathConstraint.prototype._bones;
spine.PathConstraint.prototype.target;
spine.PathConstraint.prototype.position;
spine.PathConstraint.prototype.spacing;
spine.PathConstraint.prototype.rotateMix;
spine.PathConstraint.prototype.translateMix;
spine.PathConstraint.prototype._spaces;
spine.PathConstraint.prototype._positions;
spine.PathConstraint.prototype._world;
spine.PathConstraint.prototype._curves;
spine.PathConstraint.prototype._lengths;
spine.PathConstraint.prototype._segments;
spine.PathConstraint.prototype.apply = function() {
    this.update()
}
;
spine.PathConstraint.prototype.update = function() {
    var attachment = org.apache.royale.utils.Language.as(this.target.attachment, spine.attachments.PathAttachment);
    if (attachment == null)
        return;
    var rotateMix = this.rotateMix
      , translateMix = this.translateMix;
    var translate = translateMix > 0
      , rotate = rotateMix > 0;
    if (!translate && !rotate)
        return;
    var data = this._data;
    var spacingMode = data.spacingMode;
    var lengthSpacing = spacingMode == spine.SpacingMode._length;
    var rotateMode = data.rotateMode;
    var tangents = rotateMode == spine.RotateMode.tangent
      , scale = rotateMode == spine.RotateMode.chainScale;
    var boneCount = this._bones.length
      , spacesCount = Number(tangents ? boneCount : boneCount + 1);
    var bones = this._bones;
    this._spaces.length = spacesCount;
    var spaces = this._spaces
      , lengths = null;
    var spacing = this.spacing;
    if (scale || lengthSpacing) {
        if (scale) {
            this._lengths.length = boneCount;
            lengths = this._lengths
        }
        var n = spacesCount - 1;
        for (var i = 0; i < n; i++) {
            var bone = bones[i];
            var setupLength = bone.data.length;
            if (setupLength < spine.PathConstraint.epsilon) {
                if (scale)
                    lengths[i] = 0;
                spaces[++i] = 0
            } else {
                var x = setupLength * bone.a
                  , y = setupLength * bone.c;
                var length = Math.sqrt(x * x + y * y);
                if (scale)
                    lengths[i] = length;
                spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength
            }
        }
    } else
        for (i = 1; i < spacesCount; i++)
            spaces[i] = spacing;
    var positions = this.computeWorldPositions(attachment, spacesCount, tangents, data.positionMode == spine.PositionMode.percent, spacingMode == spine.SpacingMode.percent);
    var boneX = Number(positions[0])
      , boneY = Number(positions[1])
      , offsetRotation = data.offsetRotation;
    var tip = false;
    if (offsetRotation == 0)
        tip = rotateMode == spine.RotateMode.chain;
    else {
        tip = false;
        var pa = this.target.bone;
        offsetRotation *= pa.a * pa.d - pa.b * pa.c > 0 ? spine.MathUtils.degRad : -spine.MathUtils.degRad
    }
    var p;
    for (i = 0,
    p = 3; i < boneCount; i++,
    p += 3) {
        bone = bones[i];
        bone.worldX += (boneX - bone.worldX) * translateMix;
        bone.worldY += (boneY - bone.worldY) * translateMix;
        x = Number(positions[p]);
        y = Number(positions[p + 1]);
        var dx = x - boneX
          , dy = y - boneY;
        if (scale) {
            length = Number(lengths[i]);
            if (length != 0) {
                var s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * rotateMix + 1;
                bone.a *= s;
                bone.c *= s
            }
        }
        boneX = x;
        boneY = y;
        if (rotate) {
            var a = bone.a, b = bone.b, c = bone.c, d = bone.d, r, cos, sin;
            if (tangents)
                r = Number(positions[p - 1]);
            else if (spaces[i + 1] == 0)
                r = Number(positions[p + 2]);
            else
                r = Math.atan2(dy, dx);
            r -= Math.atan2(c, a);
            if (tip) {
                cos = Math.cos(r);
                sin = Math.sin(r);
                length = bone.data.length;
                boneX += (length * (cos * a - sin * c) - dx) * rotateMix;
                boneY += (length * (sin * a + cos * c) - dy) * rotateMix
            } else
                r += offsetRotation;
            if (r > Math.PI)
                r -= Math.PI * 2;
            else if (r < -Math.PI)
                r += Math.PI * 2;
            r *= rotateMix;
            cos = Math.cos(r);
            sin = Math.sin(r);
            bone.a = cos * a - sin * c;
            bone.b = cos * b - sin * d;
            bone.c = sin * a + cos * c;
            bone.d = sin * b + cos * d
        }
        bone.appliedValid = false
    }
}
;
spine.PathConstraint.prototype.computeWorldPositions = function(path, spacesCount, tangents, percentPosition, percentSpacing) {
    var target = this.target;
    var position = this.position;
    var spaces = this._spaces;
    this._positions.length = spacesCount * 3 + 2;
    var out = this._positions, world;
    var closed = path.closed;
    var verticesLength = path.worldVerticesLength
      , curveCount = verticesLength / 6
      , prevCurve = spine.PathConstraint.NONE;
    if (!path.constantSpeed) {
        var lengths = path.lengths;
        curveCount -= closed ? 1 : 2;
        var pathLength = Number(lengths[curveCount]);
        if (percentPosition)
            position *= pathLength;
        if (percentSpacing)
            for (var i = 0; i < spacesCount; i++)
                spaces[i] *= pathLength;
        this._world.length = 8;
        world = this._world;
        var o = 0
          , curve = 0;
        for (i = 0,
        o = 0,
        curve = 0; i < spacesCount; i++,
        o += 3) {
            var space = Number(spaces[i]);
            position += space;
            var p = position;
            if (closed) {
                p %= pathLength;
                if (p < 0)
                    p += pathLength;
                curve = 0
            } else if (p < 0) {
                if (prevCurve != spine.PathConstraint.BEFORE) {
                    prevCurve = spine.PathConstraint.BEFORE;
                    path.computeWorldVertices(target, 2, 4, world, 0, 2)
                }
                this.addBeforePosition(p, world, 0, out, o);
                continue
            } else if (p > pathLength) {
                if (prevCurve != spine.PathConstraint.AFTER) {
                    prevCurve = spine.PathConstraint.AFTER;
                    path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2)
                }
                this.addAfterPosition(p - pathLength, world, 0, out, o);
                continue
            }
            for (; ; curve++) {
                var length = Number(lengths[curve]);
                if (p > length)
                    continue;
                if (curve == 0)
                    p /= length;
                else {
                    var prev = Number(lengths[curve - 1]);
                    p = (p - prev) / (length - prev)
                }
                break
            }
            if (curve != prevCurve) {
                prevCurve = curve;
                if (closed && curve == curveCount) {
                    path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);
                    path.computeWorldVertices(target, 0, 4, world, 4, 2)
                } else
                    path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2)
            }
            this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || i > 0 && space == 0)
        }
        return out
    }
    if (closed) {
        verticesLength += 2;
        this._world.length = verticesLength;
        world = this._world;
        path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);
        path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);
        world[verticesLength - 2] = world[0];
        world[verticesLength - 1] = world[1]
    } else {
        curveCount--;
        verticesLength -= 4;
        this._world.length = verticesLength;
        world = this._world;
        path.computeWorldVertices(target, 2, verticesLength, world, 0, 2)
    }
    this._curves.length = curveCount;
    var curves = this._curves;
    pathLength = 0;
    var x1 = Number(world[0])
      , y1 = Number(world[1])
      , cx1 = 0
      , cy1 = 0
      , cx2 = 0
      , cy2 = 0
      , x2 = 0
      , y2 = 0;
    var tmpx, tmpy, dddfx, dddfy, ddfx, ddfy, dfx, dfy;
    var w = 0;
    for (i = 0,
    w = 2; i < curveCount; i++,
    w += 6) {
        cx1 = Number(world[w]);
        cy1 = Number(world[w + 1]);
        cx2 = Number(world[w + 2]);
        cy2 = Number(world[w + 3]);
        x2 = Number(world[w + 4]);
        y2 = Number(world[w + 5]);
        tmpx = (x1 - cx1 * 2 + cx2) * .1875;
        tmpy = (y1 - cy1 * 2 + cy2) * .1875;
        dddfx = ((cx1 - cx2) * 3 - x1 + x2) * .09375;
        dddfy = ((cy1 - cy2) * 3 - y1 + y2) * .09375;
        ddfx = tmpx * 2 + dddfx;
        ddfy = tmpy * 2 + dddfy;
        dfx = (cx1 - x1) * .75 + tmpx + dddfx * .16666667;
        dfy = (cy1 - y1) * .75 + tmpy + dddfy * .16666667;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx;
        dfy += ddfy;
        ddfx += dddfx;
        ddfy += dddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx;
        dfy += ddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx + dddfx;
        dfy += ddfy + dddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        curves[i] = pathLength;
        x1 = x2;
        y1 = y2
    }
    if (percentPosition)
        position *= pathLength;
    if (percentSpacing)
        for (i = 0; i < spacesCount; i++)
            spaces[i] *= pathLength;
    var segments = this._segments;
    var curveLength = 0;
    var segment = 0;
    for (i = 0,
    o = 0,
    curve = 0,
    segment = 0; i < spacesCount; i++,
    o += 3) {
        space = Number(spaces[i]);
        position += space;
        p = position;
        if (closed) {
            p %= pathLength;
            if (p < 0)
                p += pathLength;
            curve = 0
        } else if (p < 0) {
            this.addBeforePosition(p, world, 0, out, o);
            continue
        } else if (p > pathLength) {
            this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);
            continue
        }
        for (; ; curve++) {
            length = Number(curves[curve]);
            if (p > length)
                continue;
            if (curve == 0)
                p /= length;
            else {
                prev = Number(curves[curve - 1]);
                p = (p - prev) / (length - prev)
            }
            break
        }
        if (curve != prevCurve) {
            prevCurve = curve;
            var ii = curve * 6;
            x1 = Number(world[ii]);
            y1 = Number(world[ii + 1]);
            cx1 = Number(world[ii + 2]);
            cy1 = Number(world[ii + 3]);
            cx2 = Number(world[ii + 4]);
            cy2 = Number(world[ii + 5]);
            x2 = Number(world[ii + 6]);
            y2 = Number(world[ii + 7]);
            tmpx = (x1 - cx1 * 2 + cx2) * .03;
            tmpy = (y1 - cy1 * 2 + cy2) * .03;
            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * .006;
            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * .006;
            ddfx = tmpx * 2 + dddfx;
            ddfy = tmpy * 2 + dddfy;
            dfx = (cx1 - x1) * .3 + tmpx + dddfx * .16666667;
            dfy = (cy1 - y1) * .3 + tmpy + dddfy * .16666667;
            curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
            segments[0] = curveLength;
            for (ii = 1; ii < 8; ii++) {
                dfx += ddfx;
                dfy += ddfy;
                ddfx += dddfx;
                ddfy += dddfy;
                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
                segments[ii] = curveLength
            }
            dfx += ddfx;
            dfy += ddfy;
            curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
            segments[8] = curveLength;
            dfx += ddfx + dddfx;
            dfy += ddfy + dddfy;
            curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
            segments[9] = curveLength;
            segment = 0
        }
        p *= curveLength;
        for (; ; segment++) {
            length = Number(segments[segment]);
            if (p > length)
                continue;
            if (segment == 0)
                p /= length;
            else {
                prev = Number(segments[segment - 1]);
                p = segment + (p - prev) / (length - prev)
            }
            break
        }
        this.addCurvePosition(p * .1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || i > 0 && space == 0)
    }
    return out
}
;
spine.PathConstraint.prototype.addBeforePosition = function(p, temp, i, out, o) {
    var x1 = Number(temp[i])
      , y1 = Number(temp[i + 1])
      , dx = temp[i + 2] - x1
      , dy = temp[i + 3] - y1
      , r = Math.atan2(dy, dx);
    out[o] = x1 + p * Math.cos(r);
    out[o + 1] = y1 + p * Math.sin(r);
    out[o + 2] = r
}
;
spine.PathConstraint.prototype.addAfterPosition = function(p, temp, i, out, o) {
    var x1 = Number(temp[i + 2])
      , y1 = Number(temp[i + 3])
      , dx = x1 - temp[i]
      , dy = y1 - temp[i + 1]
      , r = Math.atan2(dy, dx);
    out[o] = x1 + p * Math.cos(r);
    out[o + 1] = y1 + p * Math.sin(r);
    out[o + 2] = r
}
;
spine.PathConstraint.prototype.addCurvePosition = function(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {
    if (p == 0 || isNaN(p))
        p = 1E-4;
    var tt = p * p
      , ttt = tt * p
      , u = 1 - p
      , uu = u * u
      , uuu = uu * u;
    var ut = u * p
      , ut3 = ut * 3
      , uut3 = u * ut3
      , utt3 = ut3 * p;
    var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt
      , y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
    out[o] = x;
    out[o + 1] = y;
    if (tangents)
        out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt))
}
;
spine.PathConstraint.prototype.getOrder = function() {
    return this._data.order
}
;
spine.PathConstraint.prototype.toString = function() {
    return this._data.name
}
;
spine.PathConstraint.prototype.get__bones = function() {
    return this._bones
}
;
spine.PathConstraint.prototype.get__data = function() {
    return this._data
}
;
Object.defineProperties(spine.PathConstraint.prototype, {
    bones: {
        get: spine.PathConstraint.prototype.get__bones
    },
    data: {
        get: spine.PathConstraint.prototype.get__data
    }
});
spine.PathConstraint.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathConstraint',
        qName: 'spine.PathConstraint',
        kind: 'class'
    }],
    interfaces: [spine.Constraint]
};
spine.PathConstraint.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'target': {
                    type: 'spine.Slot'
                },
                'position': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'bones': {
                    type: 'Vector.\x3cspine.Bone\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.PathConstraint'
                },
                'data': {
                    type: 'spine.PathConstraintData',
                    access: 'readonly',
                    declaredBy: 'spine.PathConstraint'
                }
            }
        },
        methods: function() {
            return {
                'PathConstraint': {
                    type: '',
                    declaredBy: 'spine.PathConstraint',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.PathConstraintData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Skeleton',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.PathConstraint'
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.PathConstraint'
                },
                'getOrder': {
                    type: 'Number',
                    declaredBy: 'spine.PathConstraint'
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.PathConstraint'
                }
            }
        }
    }
}
;
pigg.puzzle.view.MainView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._eventStepMissionPoint = org.apache.royale.utils.Language.Vector([1E4, 3E4, 6E4, 1E5, 15E4, 21E4, 28E4, 36E4], 'int');
    this._eventStepMissionEachPoint = org.apache.royale.utils.Language.Vector([1E4, 2E4, 3E4, 4E4, 5E4, 6E4, 7E4, 8E4], 'int');
    this._potionItemCount = [0, 0, 0, 0];
    this._cheatItemCount = [10, 10, 10, 10];
    this.dummyThemeArray = ['12,12,7,1,1,1,1,1,1,12,12,12,7,9,0,1,1,1,12,12,7,1,1,1,1,1,1,12,7,9,0,1,1,1,1,1,12,12,7,1,1,1,1,1,1,12,12,12,7,9,0,1,1,1,12,12,7,1,1,1,1,1,1,12,7,9,0,1,1,1,1,1,12,12,7,1,1,1,1,1,1,12,12,12,7,9,0,1,1,1,12,12,7,1,1,1,1,1,1_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_20,20,0,0,0,0,0,0_2,35,4,1,1,0,0,1,1', '0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,100,4,2,100,0,1,0,0,4,0,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,7,7,7,1,1,1,1,1,7,7,7,7,1,1,1,1,1,1,7,7,7,7,1,1,1,1,7,7,7,7,7,7,1,1,1,1,7,7,7,7,1,1,1,1,7,7,7,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,7,7,1,1,1,1,1,1,1,1,7,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,30,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,7,7,7,1,1,7,7,1,1,1,1,1,1,7,1,1,7,7,7,7,7,1,1,7,7,1,1,1,1,1,1,7,1,1,1,1,7,7,7,1,1,7,7,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,2,0,0,2,2,2,2,2,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,2,2,2,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,22,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,0,2,0,0,0,0,2,2,2,0,2,0,0,0,0,2,2,2,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,20,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,1,1,1,1,1,11,11,11,11,0,0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,23,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,7,11,11,11,1,1,1,1,1,7,7,11,11,1,1,1,1,1,1,7,7,11,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,7,7,11,1,1,1,1,1,7,7,11,11,1,1,1,1,1,7,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,18,5,', '0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,11,11,0,1,1,1,1,1,7,11,11,11,1,1,1,1,1,7,11,7,7,1,1,1,1,1,7,11,7,11,1,1,1,1,1,7,11,7,11,1,1,1,1,1,7,11,7,11,1,1,1,1,1,7,11,7,7,1,1,1,1,1,7,11,11,11,0,1,1,1,1,7,11,11,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,1,1,1,0,2,0,0,0,1,1,1,1,0,2,0,2,2,1,1,1,1,0,2,0,2,0,1,1,1,1,0,2,0,2,0,1,1,1,1,0,2,0,2,0,1,1,1,1,0,2,0,2,2,1,1,1,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,25,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,7,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,7,0,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,1,7,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,0,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,20,5,', '0,0,0,0,0,0,0,0,0,0,1,1,1,0,11,11,11,6,1,1,1,1,1,11,11,6,6,1,1,1,1,0,11,6,6,6,1,1,1,1,1,11,11,6,6,1,1,1,1,0,11,6,6,6,1,1,1,1,1,11,11,6,6,1,1,1,1,0,11,6,6,6,1,1,1,1,1,11,11,6,6,0,1,1,1,0,11,11,11,6,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,22,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,6,7,7,1,1,1,1,1,1,1,6,7,0,1,1,1,1,1,1,1,6,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,6,7,1,1,1,1,1,1,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,22,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,7,7,1,1,1,1,1,1,7,7,1,6,1,1,1,1,7,7,1,6,6,1,1,1,1,1,1,6,6,6,1,1,1,1,7,7,1,6,6,1,1,1,1,1,7,7,1,6,1,1,1,1,1,1,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,2,1,1,0,0,2,2,2,2,1,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,22,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,7,11,11,11,7,1,1,1,1,7,11,11,11,7,1,1,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,1,1,7,11,11,11,7,1,1,1,1,7,11,11,11,7,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,22,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,20,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,11,0,1,1,1,1,1,1,1,11,0,0,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,1,1,1,1,1,1,1,2,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,24,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,1,1,1,1,1,1,1,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,19,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,0,11,11,11,0,11,11,11,0,0,0,11,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,2,2,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,19,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,7,7,0,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,18,5,2,0,2,0,0,0', '0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,9,0,0,0,7,7,7,7,7,9,0,0,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,7,7,7,0,7,7,7,7,7,9,0,0,0,0,7,7,7,7,9,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,18,5,2,0,2,0,0,0', '0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,9,0,0,1,1,1,1,1,1,7,9,12,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,7,0,0,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,7,12,1,1,1,1,1,1,1,7,0,1,1,1,1,1,1,7,9,0,0,1,1,1,1,7,9,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,20,5,1,1,1,1,0,0', '0,0,0,0,0,0,0,0,0,12,1,1,1,1,1,1,9,0,12,1,1,1,1,1,1,1,9,7,7,7,1,1,1,1,1,1,7,7,7,7,1,1,1,1,1,1,7,7,7,1,1,1,1,1,7,7,7,7,1,1,1,1,1,7,7,7,1,1,1,1,1,1,12,1,1,1,1,1,1,1,9,12,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,18,6,1,0,1,0,0,0', '0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,15,15,1,1,1,1,1,1,1,15,15,1,1,1,1,1,1,1,7,7,1,7,7,7,7,7,7,7,15,1,7,7,15,15,15,7,15,15,1,7,7,7,7,7,7,7,15,1,1,1,1,1,1,1,7,7,1,1,1,1,1,1,1,15,15,1,1,1,0,0,1,1,15,15,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,15,5,15', '0,0,0,0,0,0,0,0,0,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,15,15,15,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,14,6,27', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,1,1,1,1,15,15,15,15,15,1,1,1,1,15,15,15,15,15,1,1,1,1,15,15,15,15,15,1,1,1,1,15,15,15,15,15,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,15,5,25', '0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,1,6,15,15,15,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,15,6,21', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,0,0,0,0,15,15,15,15,1,1,1,1,1,15,15,15,15,1,1,1,1,1,15,15,15,15,1,1,1,1,1,15,15,15,15,1,1,1,1,1,15,15,15,15,1,1,1,1,1,15,15,15,15,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,18,5,27', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,7,15,15,0,1,1,1,1,7,7,15,15,0,1,1,1,1,7,7,0,0,0,1,1,1,1,7,7,15,15,15,1,1,1,1,7,7,0,0,0,1,1,1,1,7,7,15,15,0,1,1,1,1,7,7,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_5,21,5,11', '0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,12,12,1,1,1,7,1,1,1,1,7,7,7,1,1,1,1,1,12,12,1,1,1,7,1,1,1,1,7,7,7,7,7,1,1,1,12,12,1,1,1,7,1,1,1,1,7,7,7,1,1,1,1,1,12,12,1,1,1,7,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,22,6,3,0,3,0,0,0', '0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,7,7,9,1,1,1,1,1,7,1,11,11,1,1,1,1,1,7,7,11,11,1,1,1,1,7,7,7,11,11,1,1,1,1,7,7,7,11,11,1,1,1,1,7,7,7,11,11,1,1,1,1,1,7,7,11,11,1,1,1,1,1,7,1,11,11,0,1,1,1,1,1,7,7,9,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,19,6,1,0,1,0,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,7,7,6,11,11,12,1,1,1,1,7,6,11,12,12,1,1,1,1,7,6,12,12,12,1,1,1,1,7,6,12,12,12,1,1,1,1,7,6,12,12,12,1,1,1,1,7,6,11,12,12,1,1,1,7,7,6,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,18,5,1,0,1,0,0,0', '0,0,0,0,0,0,0,0,0,8,8,8,8,8,1,1,1,1,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,8,8,8,8,8,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_30,10,0,0,0,0,0,0_2,18,6,2,0,1,0,1,0', '0,0,0,0,0,0,0,0,0,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_30,10,0,0,0,0,0,0_2,18,6,2,2,2,2,0,0', '0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,10,4,2,10,0,1,0,0,4,0,0', '15,8,15,8,15,1,1,1,1,15,8,15,15,15,15,1,1,1,15,15,15,8,8,8,1,1,1,15,8,15,8,15,15,1,1,1,15,8,15,8,15,1,1,1,1,15,8,15,15,15,1,1,1,1,15,8,15,8,15,1,1,1,1,15,8,15,8,15,15,1,1,1,15,15,15,8,8,8,1,1,1,15,8,15,15,15,15,1,1,1,15,8,15,8,15,1,1,1,1_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,20,20_5,25,4,50', '0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,10,4,2,3,0,1,0,0,4,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,30,4,', '0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,6,6,6,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,6,6,6,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,30,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_0,13,4,2,20,0,3,20,0,4,20,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,13,4,2,55,0,3,55,0,2,0,0', '0,0,0,0,0,0,0,0,0,8,8,8,1,1,1,0,0,0,8,8,8,1,1,1,0,0,0,8,8,8,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,1,1,1,0,0,0,8,8,8,1,1,1,0,0,0,8,8,8,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,15,5,1,15,0,4,15,0,3,15,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_1,20,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_2,25,5,1,1,1,1,0,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,1,1,8,8,1,1,8,8,8,1,1,8,8,1,1,8,8,8,1,1,8,8,1,1,8,8,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,6,4,660', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,3,0,0,0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,3,0,0,0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,3,3,3,0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,30,20_5,20,4,40', '1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,13,1,1,1,1,1,1,13,1,1,1,1,0,0,1,1,1,1,13,1,1,1,1,1,1,13,1,1,1,0,1,1,1,1,1,1,13,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0_0,0,0,0,2,0,0,2,2,2,0,0,2,0,0,0,2,2,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,2,0,0,0,0,2,0,0,2,2_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_0,20,5,1,20,0,2,20,0,4,20,0', '0,0,0,0,0,0,0,0,0,1,1,1,6,6,1,1,6,6,1,1,1,1,1,6,6,1,1,1,1,1,1,1,6,6,1,1,1,1,1,6,6,1,1,6,6,1,1,1,6,6,1,1,6,6,1,1,1,6,6,1,1,6,6,1,1,1,1,1,6,6,1,1,1,1,1,1,1,6,6,1,1,1,1,1,6,6,1,1,6,6,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,30,5,', '0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,9,0,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,1,1,0,0,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,30,5,1,1,1,1,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,6,1,1,1,0,8,1,1,1,6,1,1,1,0,8,1,1,1,6,1,1,1,0,8,1,1,1,6,1,1,1,0,8,1,1,1,6,1,1,1,0,8,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,20,4,1,20,0,4,20,0,3,0,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,6,6,6,1,1,1,1,1,1,6,7,6,1,6,6,1,1,1,6,6,6,1,1,6,1,1,1,1,1,1,1,1,6,1,1,1,6,6,6,1,1,6,1,1,1,6,7,6,1,6,6,1,1,1,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,1,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,2,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_1,25,5,', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_2,25,5,1,1,1,1,0,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,6,1,6,6,6,1,6,1,1,6,1,1,1,1,1,6,1,1,6,1,6,1,6,1,6,1,1,6,1,1,6,1,1,6,1,1,6,1,6,1,6,1,6,1,1,6,1,1,1,1,1,6,1,1,6,1,6,6,6,1,6,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,15,4,2600', '8,8,8,15,15,15,0,0,0,8,8,15,1,1,1,15,0,0,8,15,1,1,1,1,1,15,0,15,1,1,1,1,1,1,1,15,15,1,1,8,8,8,1,1,15,15,1,1,8,8,8,1,1,15,15,1,1,8,8,8,1,1,15,15,1,1,1,1,1,1,1,15,8,15,1,1,1,1,1,15,0,8,8,15,1,1,1,15,0,0,8,8,8,15,15,15,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,40,20_5,20,4,35', '1,8,1,8,1,8,1,8,1,1,8,1,8,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,8,1,8,1,8,1,8,1,1,8,1,8,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,8,1,8,1,8,1,8,1,1,8,1,8,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,8,1,8,1,8,1,8,1,1,8,1,8,1,8,1,8,1_4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,1,3,1,3,1,3,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,1,3,1,3,1,3,1,3,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,3,1,3,1,3,1,3,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_20,20,0,0,0,0,0,0_0,25,4,4,60,0,2,0,0,3,0,0', '1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,8,8,1,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_1,30,5,', '8,8,8,8,8,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,1,1,1,1,1,1,1,8,1,1,1,8,8,1,1,1,1,1,1,8,8,8,1,1,1,1,1,8,8,1,1,1,1,1,1,1,1,8,8,8,1,1,1,8,1,1,1,8,8,1,1,1,8,8,1,1,1,1,1,1,1,8,8,8,1,1,1,1,1,1,8,8,8,8,1,1,1,1,1_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_2,25,4,3,0,1,0,2,0', '0,0,0,0,0,0,0,0,0,1,1,1,1,1,7,7,7,7,1,1,1,1,1,7,15,15,15,1,1,1,1,1,7,7,7,7,1,1,1,1,1,7,15,15,15,1,1,1,1,1,7,7,7,7,1,1,1,1,1,7,15,15,15,1,1,1,1,1,7,7,7,7,1,1,1,1,1,7,15,15,15,1,1,1,1,1,7,7,7,7,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_'];
    this.dummyTutorialThemeArray = ['0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,3,6,1,0,0,0,0,2,6,3,5,6,0,0,0,0,3,4,5,4,4,0,0,0,0,6,5,2,5,1,0,0,0,0,2,2,6,3,5,0,0,0,0,3,5,6,2,6,0,0,0,0,6,4,1,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,6,4,180', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,2,1,2,0,0,0,6,5,6,3,1,6,3,0,0,3,6,4,5,2,4,5,0,0,6,5,5,6,5,1,6,0,0,6,1,3,2,6,5,5,0,0,3,6,4,6,5,3,6,0,0,0,2,6,5,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,6,4,400', '0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,8,1,1,1,1,1,0,0,8,8,8,1,1,1,0,0,0,8,8,1,1,1,1,1,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,5,6,6,5,4,0,0,0,6,5,2,3,5,2,5,0,0,6,3,5,5,1,6,2,0,0,0,5,6,2,3,2,0,0,0,0,0,5,5,6,0,0,0,0,0,6,5,3,1,5,0,0,0,6,1,6,6,2,4,1,0,0,5,6,1,3,6,2,6,0,0,0,5,2,5,6,4,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_3,7,4,420', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,1,1,1,1,1,0,8,1,3,1,1,1,1,1,0,8,1,2,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,4,2,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,6,2,6,1,2,0,0,6,1,5,5,6,5,6,0,0,5,4,5,6,5,3,2,0,0,6,1,6,5,5,6,5,0,0,5,1,6,3,1,1,3,0,0,5,4,5,3,3,2,3,0,0,3,2,6,2,4,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,6,4,500', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3,1,2,3,3,0,0,3,6,1,5,3,1,2,0,0,5,2,3,5,4,4,3,0,0,6,4,5,1,1,2,3,0,0,5,3,1,5,3,2,2,0,0,5,1,4,5,3,4,3,0,0,3,1,3,3,2,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_3,6,4,300', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,3,3,1,0,0,0,0,1,3,4,1,3,0,0,0,0,3,4,1,1,3,0,1,0,0,2,1,3,2,2,0,0,0,0,1,2,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,10,4,1,9,0,4,0,0,3,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,1,0,1,1,1,0,8,1,1,1,1,1,1,1,0,8,8,1,1,1,1,1,1,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,2,1,0,4,1,1,0,0,1,2,1,4,2,3,5,0,0,0,4,3,2,1,3,1,0,0,0,3,5,2,4,1,0,0,0,0,2,2,4,1,2,2,0,0,1,3,1,2,4,5,1,0,1,4,1,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,10,5,1,9,0,2,9,0,3,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,4,2,1,5,2,1,1,1,1,5,4,2,1,3,1,1,1,1,3,4,5,1,5,1,1,1,1,1,3,5,2,2,1,1,1,1,4,3,2,1,3,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_1,10,5,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,0,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,1,1,1,1,1,1,1,0,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,3,2,3,0,0,0,2,6,5,4,3,2,2,0,0,6,4,3,5,6,3,4,0,0,1,1,4,2,1,2,1,0,0,4,4,2,4,1,3,3,0,0,3,2,2,1,4,4,2,0,0,0,1,3,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_1,15,4,', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,1,1,1,1,9,0,8,8,1,1,1,1,1,9,0,8,1,1,1,1,1,1,9,0,8,8,1,1,1,1,1,9,0,8,8,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,3,2,0,0,0,0,3,4,4,2,4,0,0,0,11,4,3,2,4,2,0,0,0,0,3,4,2,3,4,0,0,0,0,2,4,3,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_2,10,4,1,0,1,0,0,0', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,1,1,7,11,11,6,1,9,1,1,1,7,11,11,6,1,9,8,1,1,7,11,11,6,4,9,1,1,1,7,11,11,6,1,9,8,1,1,7,11,11,6,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,1,2,4,0,0,4,4,4,4,4,1,4,0,0,4,3,4,0,5,1,4,0,0,4,4,4,4,2,5,4,0,0,4,4,4,0,2,5,4,0,0,4,2,4,4,4,4,4,4,4,4,4,4,0,4,4,4,0,0,4,0,4,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_2,20,4,1,1,1,1,0,0'];
    this.dummyTutorial2ndThemeArray = ['0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,12,12,12,1,0,0,8,8,1,12,12,12,1,0,0,8,1,1,12,1,12,1,1,0,8,1,1,1,12,1,1,1,0,8,1,1,12,1,12,1,1,0,8,8,1,12,12,12,1,0,0,8,8,1,12,12,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,4,0,0,0,0,4,0,0,0,4,0,0,0,1,2,0,1,0,3,2,0,0,3,2,1,2,1,2,4,0,0,4,4,0,1,0,3,1,0,0,0,3,0,0,0,4,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_30,10,0,0,0,0,0,0_0,20,4,1,10,0,3,10,0,3,0,0', '0,0,0,0,0,0,0,0,0,8,8,8,1,1,1,0,0,0,8,8,1,1,1,1,1,0,0,8,1,1,15,15,15,1,1,0,1,1,15,1,15,1,15,1,1,1,1,15,15,1,15,15,1,1,1,1,15,1,15,1,15,1,1,8,1,1,15,15,15,1,1,0,8,8,1,1,1,1,1,0,0,8,8,8,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,4,3,3,4,1,0,0,0,3,2,3,0,3,4,3,0,1,4,3,3,0,3,3,1,1,2,1,0,0,3,0,0,4,2,4,3,3,3,0,3,3,3,1,0,1,4,3,0,3,2,4,0,0,0,1,4,2,3,1,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,40,20_5,20,4,20', '0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,1,1,1,1,1,1,6,13,6,1,1,1,1,1,1,6,6,6,1,1,1,1,1,1,6,14,6,1,1,1,1,1,1,6,6,6,1,1,1,1,1,1,6,13,6,1,1,1,1,1,1,6,6,6,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0_-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1_0,0,0,0,0,0,0,0_3,20,4,5000'];
    this.traceLog('MainView')
}
;
goog.inherits(pigg.puzzle.view.MainView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.MainView', pigg.puzzle.view.MainView);
pigg.puzzle.view.MainView.prototype._userData;
pigg.puzzle.view.MainView.prototype._eventData;
pigg.puzzle.view.MainView.prototype._progressData;
pigg.puzzle.view.MainView.prototype._container;
pigg.puzzle.view.MainView.prototype._loadingContainer;
pigg.puzzle.view.MainView.prototype._mypageView;
pigg.puzzle.view.MainView.prototype._loadingView;
pigg.puzzle.view.MainView.prototype._infoView;
pigg.puzzle.view.MainView.prototype._mapView;
pigg.puzzle.view.MainView.prototype._gameView;
pigg.puzzle.view.MainView.prototype._mappingView;
pigg.puzzle.view.MainView.prototype._eventView;
pigg.puzzle.view.MainView.prototype._announceView;
pigg.puzzle.view.MainView.prototype._userItemView;
pigg.puzzle.view.MainView.prototype._tutorialGameView;
pigg.puzzle.view.MainView.prototype._tutorialMypageView;
pigg.puzzle.view.MainView.prototype._howToPlayView;
pigg.puzzle.view.MainView.prototype._rouletteView;
pigg.puzzle.view.MainView.prototype._mypageRankingView;
pigg.puzzle.view.MainView.prototype._eventRankingView;
pigg.puzzle.view.MainView.prototype._alertView;
pigg.puzzle.view.MainView.prototype._sceneCurrent = 0;
pigg.puzzle.view.MainView.prototype._mappingContainer;
pigg.puzzle.view.MainView.prototype._baseMask;
pigg.puzzle.view.MainView.prototype._isActive;
pigg.puzzle.view.MainView.prototype._eventStepMissionPoint;
pigg.puzzle.view.MainView.prototype._eventStepMissionEachPoint;
pigg.puzzle.view.MainView.prototype._currentRemainEventStepPoint = 0;
pigg.puzzle.view.MainView.prototype._currentEventStepPoint = 0;
pigg.puzzle.view.MainView.prototype._totalPoint = 0;
pigg.puzzle.view.MainView.prototype._currentEventStep = -1;
pigg.puzzle.view.MainView.prototype._stepSize = 8;
pigg.puzzle.view.MainView.prototype._isEventComplete = false;
pigg.puzzle.view.MainView.prototype._specialChallengeExist = false;
pigg.puzzle.view.MainView.prototype._currentRemainLimitedQuantityPoint = 0;
pigg.puzzle.view.MainView.prototype._currentRemainLimitedTermPoint = 0;
pigg.puzzle.view.MainView.prototype._isJoinSpecialChallenge = -1;
pigg.puzzle.view.MainView.prototype._userTutorialStatus = 0;
pigg.puzzle.view.MainView.prototype._userTutorialStatus2nd = 0;
pigg.puzzle.view.MainView.prototype._userTutorialStatusTemp = 0;
pigg.puzzle.view.MainView.prototype._userSpStatus = 0;
pigg.puzzle.view.MainView.prototype._userEventStatus = 0;
pigg.puzzle.view.MainView.prototype._isEventFirstTime;
pigg.puzzle.view.MainView.prototype._keepClearCount = 0;
pigg.puzzle.view.MainView.prototype._keepClearBonusScore = 0;
pigg.puzzle.view.MainView.prototype._carryOverScore = 0;
pigg.puzzle.view.MainView.prototype._oldMouseX = 0;
pigg.puzzle.view.MainView.prototype._oldMouseY = 0;
pigg.puzzle.view.MainView.prototype._diffMouse = 0;
pigg.puzzle.view.MainView.prototype._currentMissionIndex = 0;
pigg.puzzle.view.MainView.prototype._isStepClear = false;
pigg.puzzle.view.MainView.prototype._gameBgType = -1;
pigg.puzzle.view.MainView.prototype._mypageBgType = -1;
pigg.puzzle.view.MainView.prototype._currentThemeType = -1;
pigg.puzzle.view.MainView.prototype._clearMoveTimes = 0;
pigg.puzzle.view.MainView.prototype._isMask = false;
pigg.puzzle.view.MainView.prototype._isOpenTheme = false;
pigg.puzzle.view.MainView.prototype._isSendEquip = false;
pigg.puzzle.view.MainView.prototype._existThemeSilver = false;
pigg.puzzle.view.MainView.prototype._existThemeGold = false;
pigg.puzzle.view.MainView.prototype._bgTilemap;
pigg.puzzle.view.MainView.prototype._bgTileset;
pigg.puzzle.view.MainView.prototype._potionItemCount;
pigg.puzzle.view.MainView.prototype._currentUsePotion = -1;
pigg.puzzle.view.MainView.prototype._cheatItemCount;
pigg.puzzle.view.MainView.prototype._currentSoundType = -1;
pigg.puzzle.view.MainView.prototype._tweenObjects;
pigg.puzzle.view.MainView.prototype._firstOpen = false;
pigg.puzzle.view.MainView.prototype._enableScoreItem = false;
pigg.puzzle.view.MainView.prototype._serverTime;
pigg.puzzle.view.MainView.prototype._currentBGM = '';
pigg.puzzle.view.MainView.prototype._saveBoardData = '';
pigg.puzzle.view.MainView.prototype._isFirstLoad = false;
pigg.puzzle.view.MainView.prototype._confStatus = 0;
pigg.puzzle.view.MainView.prototype._isGameTutorial = false;
pigg.puzzle.view.MainView.prototype._loadingHint;
pigg.puzzle.view.MainView.prototype._isTweenPause = false;
pigg.puzzle.view.MainView.prototype._bgmSoundMap;
pigg.puzzle.view.MainView.prototype._bgmSoundGame;
pigg.puzzle.view.MainView.prototype._bgmSoundClear;
pigg.puzzle.view.MainView.prototype._bgmSoundFailed;
pigg.puzzle.view.MainView.prototype._specialCarryOberExist = true;
pigg.puzzle.view.MainView.prototype._isBoardMoved = false;
pigg.puzzle.view.MainView.prototype._firstHint = 0;
pigg.puzzle.view.MainView.prototype._existMission = false;
pigg.puzzle.view.MainView.prototype._totalMissionPieceCount = 0;
pigg.puzzle.view.MainView.prototype._missionRequiredPoint = 10;
pigg.puzzle.view.MainView.prototype._isDuringRoulette = false;
pigg.puzzle.view.MainView.prototype._existMissionMassge = false;
pigg.puzzle.view.MainView.prototype._existRanking = false;
pigg.puzzle.view.MainView.prototype._hasRankingIncentive = false;
pigg.puzzle.view.MainView.prototype._statusT = 0;
pigg.puzzle.view.MainView.prototype._statusT2 = 0;
pigg.puzzle.view.MainView.prototype._statusT3 = 0;
pigg.puzzle.view.MainView.prototype._baseHintCount = 17;
pigg.puzzle.view.MainView.prototype._rankingInvisible = 0;
pigg.puzzle.view.MainView.prototype._confStatusTimer;
pigg.puzzle.view.MainView.prototype._mainX = 0;
pigg.puzzle.view.MainView.prototype._mainY = 0;
pigg.puzzle.view.MainView.prototype._continueSaleExist = false;
pigg.puzzle.view.MainView.prototype._continueSale = false;
pigg.puzzle.view.MainView.prototype._continuePrice = 80;
pigg.puzzle.view.MainView.prototype._continueSaleStartTime;
pigg.puzzle.view.MainView.prototype._continueSaleEndTime;
pigg.puzzle.view.MainView.prototype._waitContinueSale;
pigg.puzzle.view.MainView.prototype._loadDataManager;
pigg.puzzle.view.MainView.prototype._isMouseDown = false;
pigg.puzzle.view.MainView.prototype._isEnterFrameAnimation = false;
pigg.puzzle.view.MainView.prototype._fontWin8;
pigg.puzzle.view.MainView.prototype._isLocal = false;
pigg.puzzle.view.MainView.prototype._userCode = 'ff0b849c14ff8881';
pigg.puzzle.view.MainView.prototype._isWaitShowTheme = -1;
pigg.puzzle.view.MainView.prototype._isWaitInitShowTheme = -1;
pigg.puzzle.view.MainView.prototype._isWaitInitShowGame = -1;
pigg.puzzle.view.MainView.prototype._isWaitInitShowMypage = -1;
pigg.puzzle.view.MainView.prototype._gameBG;
pigg.puzzle.view.MainView.prototype._mypageBG;
pigg.puzzle.view.MainView.prototype._spineAnimal;
pigg.puzzle.view.MainView.prototype._spineHukurouFront;
pigg.puzzle.view.MainView.prototype._spineHukurouQuarter;
pigg.puzzle.view.MainView.prototype._spineAnimalRankingScore;
pigg.puzzle.view.MainView.prototype._spineAnimalRankingWinning;
pigg.puzzle.view.MainView.prototype._tickTimer;
pigg.puzzle.view.MainView.prototype._menuView;
pigg.puzzle.view.MainView.prototype._isShowTheme;
pigg.puzzle.view.MainView.prototype._isShowEventView;
pigg.puzzle.view.MainView.prototype._isShowTopRanking;
pigg.puzzle.view.MainView.prototype._isShowGameTutorial;
pigg.puzzle.view.MainView.prototype._appType;
pigg.puzzle.view.MainView.prototype._debugType = '';
pigg.puzzle.view.MainView.prototype._localLimitedType = 0;
pigg.puzzle.view.MainView.prototype._localInitType = -1;
pigg.puzzle.view.MainView.prototype._itemPartsTileset;
pigg.puzzle.view.MainView.prototype._gamePartsTileset;
pigg.puzzle.view.MainView.prototype._gamePieceTileset;
pigg.puzzle.view.MainView.prototype._gamePanelTileset;
pigg.puzzle.view.MainView.prototype._commonPartsTileset;
pigg.puzzle.view.MainView.prototype._mypagePartsTileset;
pigg.puzzle.view.MainView.prototype._menuPartsTileset;
pigg.puzzle.view.MainView.prototype._rankingPartsTileset;
pigg.puzzle.view.MainView.prototype._particleTileset;
pigg.puzzle.view.MainView.prototype._initLoadedCnt = 0;
pigg.puzzle.view.MainView.prototype.LOAD_COUNT_GAME = 4;
pigg.puzzle.view.MainView.prototype.LOAD_COUNT_MYPAGE = 2;
pigg.puzzle.view.MainView.prototype._loadedCnt = 0;
pigg.puzzle.view.MainView.prototype._loadCompleteCnt = 1;
pigg.puzzle.view.MainView.prototype._isLoadComplete = false;
pigg.puzzle.view.MainView.prototype._isWaitComplete = -1;
pigg.puzzle.view.MainView.prototype._isLowSpecMode = false;
pigg.puzzle.view.MainView.prototype._isShowGame = false;
pigg.puzzle.view.MainView.prototype._stage;
pigg.puzzle.view.MainView.prototype._isMypageTutorial = -1;
pigg.puzzle.view.MainView.prototype._rankingIncentiveView;
pigg.puzzle.view.MainView.prototype._currentScoreAward = -1;
pigg.puzzle.view.MainView.prototype._currentWinningAward = -1;
pigg.puzzle.view.MainView.prototype._scoreRankingData;
pigg.puzzle.view.MainView.prototype._winningRankingData;
pigg.puzzle.view.MainView.prototype._openData;
pigg.puzzle.view.MainView.prototype._checkUpdateUserItem = false;
pigg.puzzle.view.MainView.prototype._isSendUserStatus = false;
pigg.puzzle.view.MainView.prototype._isSendGetEventData = false;
pigg.puzzle.view.MainView.prototype._isParticle = true;
pigg.puzzle.view.MainView.prototype._soundMap;
pigg.puzzle.view.MainView.prototype._soundChannelMap;
pigg.puzzle.view.MainView.prototype._soundBgmChannel;
pigg.puzzle.view.MainView.prototype._waitBgm = '';
pigg.puzzle.view.MainView.prototype._soundLoaded = false;
pigg.puzzle.view.MainView.prototype._isSoundOn = false;
pigg.puzzle.view.MainView.prototype._isSoundPlaying = true;
pigg.puzzle.view.MainView.prototype._isWindowFocus = true;
pigg.puzzle.view.MainView.prototype._fps;
pigg.puzzle.view.MainView.prototype._soundResumeTime = 0;
pigg.puzzle.view.MainView.prototype._localStorageSound = 'init';
pigg.puzzle.view.MainView.prototype._isSoundLoadBySwitch = false;
pigg.puzzle.view.MainView.prototype._emptySoundChannel;
pigg.puzzle.view.MainView.prototype._soundRelease = true;
pigg.puzzle.view.MainView.prototype.init = function(appType, stage) {
    this.checkUA();
    this._stage = stage;
    if (appType == 'game-local') {
        this._appType = 'game';
        this._debugType = 'local'
    } else if (appType == 'mypage-local') {
        this._appType = 'mypage';
        this._debugType = 'local'
    } else
        this._appType = appType;
    if (this._debugType == 'local' || window.location.href.indexOf('http://localhost:') == 0)
        AsData.log = true;
    this.addChild(this._container = new openfl.display.Sprite);
    this.addChild(this._loadingContainer = new openfl.display.Sprite);
    this._itemPartsTileset = new openfl.display.Tileset(null);
    this._commonPartsTileset = new openfl.display.Tileset(null);
    this._soundMap = new Map;
    this._soundChannelMap = new Map;
    this._loadDataManager = new pigg.puzzle.manager.LoadDataManager;
    this._loadDataManager.init(this);
    this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_IMG_COMMON_PARTS), 'commonPartsSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'));
    if (this._appType == 'game') {
        this._loadCompleteCnt = 2;
        this._gamePartsTileset = new openfl.display.Tileset(null);
        this._gamePieceTileset = new openfl.display.Tileset(null);
        this._gamePanelTileset = new openfl.display.Tileset(null);
        this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_IMG_GAME_PARTS), 'gamePartsSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'));
        this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_IMG_GAME_PIECE), 'gamePieceSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'));
        this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_IMG_GAME_PANEL), 'gamePanelSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'))
    } else if (this._appType == 'mypage') {
        this._loadCompleteCnt = 1;
        this._mypagePartsTileset = new openfl.display.Tileset(null);
        this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_IMG_MYPAGE_PARTS), 'mypagePartsSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'))
    }
    this._fps = new openfl.display.FPS;
    if (AsData.log) {
        this.addChild(this._fps);
        this._fps.y = 770
    }
    this.traceLog('UPDATE::0151');
    this.resizeWindow();
    AsData.animation = true;
    AsData.eventContainer.addEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.checkTweenObj, this, 'checkTweenObj'));
    if (this._appType == 'game')
        if (this._soundRelease) {
            this._localStorageSound = window.localStorage.getItem('piggPuzzleSoundOn');
            this.traceLog('_localStorageSound::', this._localStorageSound);
            if (this._localStorageSound != 'off' && this._localStorageSound != 'on') {
                this.traceLog('_localStorageSound\u306a\u3057');
                window.localStorage.setItem('piggPuzzleSoundOn', 'off');
                this.traceLog('\u30bb\u30c3\u30c8\u5f8c::', window.localStorage.getItem('piggPuzzleSoundOn'));
                this._localStorageSound = 'off';
                this._isSoundOn = false
            } else if (this._localStorageSound == 'off')
                this._isSoundOn = false;
            else if (this._localStorageSound == 'on')
                this._isSoundOn = true;
            document.addEventListener('visibilitychange', org.apache.royale.utils.Language.closure(this.handleVisibilitychange, this, 'handleVisibilitychange'));
            window.addEventListener('focus', org.apache.royale.utils.Language.closure(this.handleFocus, this, 'handleFocus'));
            window.addEventListener('blur', org.apache.royale.utils.Language.closure(this.handleBlur, this, 'handleBlur'))
        } else {
            window.localStorage.removeItem('piggPuzzleSoundOn');
            this._isSoundOn = false
        }
}
;
pigg.puzzle.view.MainView.prototype.handleVisibilitychange = function() {
    var state = org.apache.royale.utils.Language.as(document.visibilityState, String);
    if (this._isSoundOn)
        if (state == 'hidden') {
            this.traceLog('handleVisibilitychange::\u304b\u304f\u308c\u305f\u306e\u3067\u505c\u6b62');
            this.switchTabSound(false)
        } else if (state == 'visible') {
            this.traceLog('handleVisibilitychange::\u8868\u793a\u3055\u308c\u305f\u306e\u3067\u518d\u751f');
            if (this._isWindowFocus && !this._isSoundPlaying)
                this.switchTabSound(true)
        }
}
;
pigg.puzzle.view.MainView.prototype.handleFocus = function() {
    if (this._isSoundOn) {
        this.traceLog('handleFocus::window\u304c\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f');
        this._isWindowFocus = true;
        if (!this._isSoundPlaying)
            this.switchTabSound(true)
    }
}
;
pigg.puzzle.view.MainView.prototype.handleBlur = function() {
    if (this._isSoundOn) {
        this.traceLog('handleBlur::window\u304c\u30cf\u30ba\u30ec\u305f');
        this._isWindowFocus = false;
        this.switchTabSound(false)
    }
}
;
pigg.puzzle.view.MainView.prototype.switchTabSound = function(play) {
    var self = this;
    var __localFn0__ = function() {
        self.playBGM(self._currentBGM, 0, true)
    };
    if (this._isSoundPlaying == play)
        return;
    this._isSoundPlaying = play;
    if (play) {
        this.traceLog('switchTabSound::\u518d\u751f::');
        com.greensock.TweenMax.to(this, .5, {
            onComplete: __localFn0__
        })
    } else {
        this.traceLog('switchTabSound::\u505c\u6b62::');
        this.stopBGM()
    }
}
;
pigg.puzzle.view.MainView.prototype.switchSoundOn = function(on) {
    if (on) {
        this.traceLog('\u30b5\u30a6\u30f3\u30c9ON');
        this._isSoundOn = true;
        window.localStorage.setItem('piggPuzzleSoundOn', 'on');
        if (!this._soundLoaded) {
            this.traceLog('\u30b5\u30a6\u30f3\u30c9\u3092\u8aad\u307f\u8fbc\u3080');
            this._isSoundLoadBySwitch = true;
            this.loadSound();
            return
        }
        this.switchTabSound(true)
    } else {
        this.traceLog('\u30b5\u30a6\u30f3\u30c9OFF');
        this._isSoundOn = false;
        window.localStorage.setItem('piggPuzzleSoundOn', 'off');
        this.switchTabSound(false)
    }
}
;
pigg.puzzle.view.MainView.prototype.checkUA = function() {
    var ua = navigator.userAgent.toLowerCase();
    var uaType = 0;
    if (ua.indexOf('iphone') > -1)
        uaType = 0;
    else if (ua.indexOf('ipad') > -1)
        uaType = 1;
    else
        uaType = 2;
    AsData.ua = uaType
}
;
pigg.puzzle.view.MainView.prototype._requestStopBufferCnt = 0;
pigg.puzzle.view.MainView.prototype.checkTweenObj = function() {
    if (com.greensock.TweenMax.getAllTweens().length > 0 || AsData.isSpineAnimation > 0 || this._isMouseDown || this._isEnterFrameAnimation) {
        this._requestStopBufferCnt = 60;
        if (!AsData.animation) {
            this.startRequestAnimation();
            this.traceLog('AsData.animation \x3d true')
        }
    } else if (AsData.animation)
        if (this._requestStopBufferCnt > 0)
            this._requestStopBufferCnt--;
        else {
            AsData.animation = false;
            this.traceLog('AsData.animation \x3d false')
        }
}
;
pigg.puzzle.view.MainView.prototype._isFirstTouch = false;
pigg.puzzle.view.MainView.prototype.MouseDownFunc = function(e) {
    var self = this;
    var __localFn0__ = function() {
        self.playSoundBGM(self._waitBgm)
    };
    this._isMouseDown = true;
    this.startRequestAnimation();
    if (!this._isFirstTouch) {
        this.traceLog('\u6700\u521d\u306e\u30bf\u30c3\u30c1::', this._isFirstTouch, this._waitBgm);
        if (this._waitBgm != '') {
            this.traceLog('WAIT\u3067\u518d\u751f::', this._waitBgm);
            com.greensock.TweenMax.to(this, .5, {
                onComplete: __localFn0__
            })
        }
        this._isFirstTouch = true
    }
}
;
pigg.puzzle.view.MainView.prototype.MouseUpFunc = function(e) {
    this._isMouseDown = false;
    this.startRequestAnimation()
}
;
pigg.puzzle.view.MainView.prototype.startRequestAnimation = function() {
    AsData.animation = true;
    this._requestStopBufferCnt = 30
}
;
pigg.puzzle.view.MainView.prototype.resizeWindow = function() {
    var displayScale = 1;
    var marginLeft = 0;
    var marginTop = 0;
    var elementWidth = 0;
    var elementHeight = 0;
    var sizeW = 0;
    var sizeH = 0;
    if (this._appType == 'game') {
        sizeW = pigg.puzzle.view.CommonView.STAGE_WIDTH;
        sizeH = pigg.puzzle.view.CommonView.STAGE_HEIGHT
    } else if (this._appType == 'mypage') {
        sizeW = pigg.puzzle.view.CommonView.MYPAGE_WIDTH;
        sizeH = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT
    }
    if (document.getElementById('content') != null) {
        elementWidth = document.getElementById('content').clientWidth;
        elementHeight = document.getElementById('content').clientHeight
    } else {
        elementWidth = window.innerWidth;
        elementHeight = window.innerHeight
    }
    if (elementWidth / sizeW < elementHeight / sizeH || this._appType == 'mypage') {
        displayScale = elementWidth / sizeW;
        if (this._appType == 'game') {
            if (Math.floor(displayScale * sizeW) > window.innerWidth)
                displayScale = window.innerWidth / sizeW;
            marginTop = Math.floor((window.innerHeight - displayScale * sizeH) / 2)
        } else if (this._appType == 'mypage')
            marginTop = 0
    } else {
        displayScale = elementHeight / sizeH;
        if (Math.floor(displayScale * sizeH) > window.innerHeight)
            displayScale = window.innerHeight / sizeH;
        marginLeft = Math.floor((window.innerWidth - displayScale * sizeW) / 2)
    }
    var targetWidth = elementWidth;
    var targetHeight = elementHeight;
    var cont = document.getElementById('content');
    var canv = cont.getElementsByTagName('canvas')[0];
    canv.style.width = Math.floor(displayScale * sizeW) + 'px';
    canv.style.height = Math.floor(displayScale * sizeH) + 'px';
    canv.style.marginLeft = marginLeft + 'px';
    canv.style.marginTop = marginTop + 'px';
    if (this._appType == 'mypage')
        cont.style.height = Math.floor(sizeH * displayScale) + 'px';
    this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.MouseDownFunc, this, 'MouseDownFunc'));
    this.addEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.MouseUpFunc, this, 'MouseUpFunc'))
}
;
pigg.puzzle.view.MainView.prototype.onloadTilesetPng = function(code, bmd) {
    if (code == 'gamePartsSheet')
        this._gamePartsTileset.bitmapData = bmd;
    else if (code == 'gamePieceSheet')
        this._gamePieceTileset.bitmapData = bmd;
    else if (code == 'gamePanelSheet')
        this._gamePanelTileset.bitmapData = bmd;
    else if (code == 'commonPartsSheet')
        this._commonPartsTileset.bitmapData = bmd;
    else if (code == 'mypagePartsSheet')
        this._mypagePartsTileset.bitmapData = bmd;
    else if (code == 'menuPartsSheet') {
        this._menuPartsTileset.bitmapData = bmd;
        this.showMenu()
    } else if (code == 'commonRankingSheet') {
        this._rankingPartsTileset.bitmapData = bmd;
        this._loadDataManager.getRankingData('score');
        this.traceLog('\u3053\u3053\u3067_rankingPartsTileset.bitmapData \x3d bmd;')
    }
    this._initLoadedCnt++;
    this.traceLog('onloadTilesetPng::', this._initLoadedCnt, code);
    if (this._appType == 'game' && this._initLoadedCnt == this.LOAD_COUNT_GAME)
        this.initView();
    else if (this._appType == 'mypage' && this._initLoadedCnt == this.LOAD_COUNT_MYPAGE)
        this.initView()
}
;
pigg.puzzle.view.MainView.prototype._isSendInitRankingData = false;
pigg.puzzle.view.MainView.prototype._isSendUpdateRankingData = false;
pigg.puzzle.view.MainView.prototype._isLoadedRankingData = false;
pigg.puzzle.view.MainView.prototype.initRanking = function(viewType) {
    if (this._isLoadedRankingData)
        if (viewType == 'mypage') {
            this.traceLog('\u3053\u3053\u3067initRankingContent');
            this._mypageView.initRankingContent()
        } else {
            if (viewType == 'event') {
                this.traceLog('\u3053\u3053\u3067initRankingContent');
                this._eventView.initRankingContent()
            }
        }
    else {
        this._isSendInitRankingData = true;
        this.loadRankingSheet()
    }
}
;
pigg.puzzle.view.MainView.prototype.loadRankingSheet = function() {
    this.traceLog('\u3053\u3053\u3067new::_rankingPartsTileset');
    this._rankingPartsTileset = new openfl.display.Tileset(null);
    this.traceLog('\u3053\u3053\u3067new::_rankingPartsTileset', this._rankingPartsTileset);
    this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_COMMON_RANKING_PARTS), 'commonRankingSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'))
}
;
pigg.puzzle.view.MainView.prototype.initView = function() {
    this.initSpine();
    if (this._appType == 'game') {
        if (this._debugType == 'local')
            this._isLocal = true;
        this.traceLog('MainView::::_isLocal::', this._isLocal);
        this._gameBG = new openfl.display.Sprite;
        this._container.addChild(this._gameBG);
        this._mappingView = new pigg.puzzle.view.MappingView;
        this._mappingView.init(this);
        this._mappingContainer = this._mappingView.mappingContainer;
        this._gameView = new pigg.puzzle.view.GameView;
        this._gameView.init(this, this._mappingView);
        this._infoView = new pigg.puzzle.view.InfoView;
        this._infoView.init(this);
        this._container.addChild(this._gameView);
        this._container.addChild(this._infoView);
        this.setDummyBtn();
        this._tweenObjects = org.apache.royale.utils.Language.Vector();
        if (this._isLocal)
            this.setUserCode();
        else
            this._loadDataManager.getEventData();
        if (this._soundRelease)
            if (this._localStorageSound == 'init')
                ;
            else if (this._isSoundOn)
                this.loadSound()
    } else if (this._appType == 'mypage') {
        if (this._debugType == 'local')
            this._isLocal = true;
        this._mypageBG = new openfl.display.Sprite;
        this._container.addChild(this._mypageBG);
        this._mypageView = new pigg.puzzle.view.MypageView;
        this._mypageView.init(this, this._loadDataManager);
        this._container.addChild(this._mypageView);
        if (this._isLocal)
            this.setUserCode();
        else
            this._loadDataManager.getEventData()
    }
}
;
pigg.puzzle.view.MainView.prototype.addLoadedCnt = function() {
    this.traceLog('addLoadedCnt');
    this._loadedCnt++;
    this.traceLog('addLoadedCnt', this._loadedCnt, this._gotoNextLoadedCnt);
    if (this._loadedCnt == this._loadCompleteCnt) {
        if (!this._isLoadComplete)
            this.addEventListener(openfl.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.checkTweenObj, this, 'checkTweenObj'));
        this._isLoadComplete = true;
        if (this._appType == 'game') {
            if (this._isWaitInitShowGame == 0) {
                this.showGameView(false);
                this.hideApiLoading()
            } else if (this._isWaitInitShowTheme == 0)
                this.showThemePanel();
            else if (this._isWaitInitShowTheme == 1)
                this._loadDataManager.getBoardData();
            this._isWaitInitShowGame = -1;
            this._isWaitInitShowTheme = -1
        } else if (this._appType == 'mypage') {
            if (this._isWaitInitShowMypage == 0)
                this.readyMypage();
            this._isWaitInitShowMypage = -1
        }
    }
    if (this._gotoNextFlg) {
        this._gotoNextLoadedCnt++;
        if (this._gotoNextLoadedCnt == 2)
            this.onLoadCompleteGeToNext()
    }
}
;
pigg.puzzle.view.MainView.prototype._isReadyMypageBg = false;
pigg.puzzle.view.MainView.prototype.readyMypage = function() {
    this._isReadyMypageBg = true;
    this.checkJoinSpecialChallenge();
    this.changeMypageBg(this._currentEventStep + 1);
    if (this._existRanking && this._isEventComplete && this._isJoinSpecialChallenge == -1)
        this._mypageView.ready('rank');
    else
        this._mypageView.ready('step')
}
;
pigg.puzzle.view.MainView.prototype.showMypage = function() {
    this._mypageView.show()
}
;
pigg.puzzle.view.MainView.prototype.initSpine = function() {
    this._spineHukurouFront = new pigg.puzzle.view.SpineView('hukurouFront');
    this._spineHukurouQuarter = new pigg.puzzle.view.SpineView('hukurouQuarter')
}
;
pigg.puzzle.view.MainView.prototype.checkAnimal = function() {
    var cnt = 0;
    var spr
}
;
pigg.puzzle.view.MainView.prototype._userTxtSpr;
pigg.puzzle.view.MainView.prototype._loadBtn;
pigg.puzzle.view.MainView.prototype._localType = -1;
pigg.puzzle.view.MainView.prototype._localRankTypeTxt;
pigg.puzzle.view.MainView.prototype._localLimitedTypeTxt;
pigg.puzzle.view.MainView.prototype._localAnnounceTypeTxt;
pigg.puzzle.view.MainView.prototype._localInitTypeTxt;
pigg.puzzle.view.MainView.prototype._localTypeTxt;
pigg.puzzle.view.MainView.prototype._localRankingType = true;
pigg.puzzle.view.MainView.prototype._localAnnounceType = false;
pigg.puzzle.view.MainView.prototype._localTutorial = -1;
pigg.puzzle.view.MainView.prototype._tutorialTxt;
pigg.puzzle.view.MainView.prototype.setUserCode = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self._localType = names.indexOf(e.currentTarget.text);
        if (self._localInitType == 0)
            self._localType = 0;
        self.traceLog(e.currentTarget.text, self._localType);
        if (e.currentTarget.text != 'TUTORIAL')
            self.removeUserCode(null)
    };
    var __localFn1__ = function(e) {
        if (self._localRankingType) {
            self._localRankingType = false;
            self._localRankTypeTxt.text = '\u30e9\u30f3\u30ad\u30f3\u30b0 : OFF '
        } else {
            self._localRankingType = true;
            self._localRankTypeTxt.text = '\u30e9\u30f3\u30ad\u30f3\u30b0 : ON '
        }
    };
    var __localFn2__ = function(e) {
        if (self._localAnnounceType) {
            self._localAnnounceType = false;
            self._localAnnounceTypeTxt.text = '\u30c9\u30ab\u30f3 : OFF '
        } else {
            self._localAnnounceType = true;
            self._localAnnounceTypeTxt.text = '\u30c9\u30ab\u30f3 : ON '
        }
    };
    var __localFn3__ = function(e) {
        if (self._localInitType < 1)
            self._localInitType++;
        else
            self._localInitType = -1;
        if (self._localInitType == -1)
            self._localInitTypeTxt.text = 'SP\u521d\u56de : OFF';
        else if (self._localInitType == 0)
            self._localInitTypeTxt.text = 'SP\u521d\u56de : \u65b0\u898f\u30e6\u30fc\u30b6\u30fc';
        else if (self._localInitType == 1)
            self._localInitTypeTxt.text = 'SP\u521d\u56de : \u65e2\u5b58\u30e6\u30fc\u30b6\u30fc'
    };
    var __localFn4__ = function(e) {
        if (self._localLimitedType < 3)
            self._localLimitedType++;
        else
            self._localLimitedType = 0;
        if (self._localLimitedType == 0)
            self._localLimitedTypeTxt.text = '\u5148\u884c\u30fb\u5148\u7740\u3042\u308a';
        else if (self._localLimitedType == 1)
            self._localLimitedTypeTxt.text = '\u5148\u884c\u306e\u307f\u3042\u308a';
        else if (self._localLimitedType == 2)
            self._localLimitedTypeTxt.text = '\u5148\u7740\u306e\u307f\u3042\u308a';
        else if (self._localLimitedType == 3)
            self._localLimitedTypeTxt.text = '\u5148\u884c\u30fb\u5148\u7740\u306a\u3057'
    };
    this._loadBtn = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.CENTER);
    this._loadBtn.background = true;
    this._loadBtn.backgroundColor = 13421772;
    this._loadBtn.width = 600;
    this._loadBtn.height = 100;
    this._loadBtn.y = 840;
    this._loadBtn.border = true;
    this._loadBtn.text = ' GET EVENT DATA ';
    this._loadBtn.selectable = false;
    this._loadBtn.borderColor = 0;
    this._container.addChild(this._loadBtn);
    this._userTxtSpr = new openfl.display.Sprite;
    this._container.addChild(this._userTxtSpr);
    var idTxt;
    var cnt = 0
      , len = 0;
    var names = ['STEP1', 'STEP2', 'STEP3', 'STEP4', 'STEP5', 'STEP6', 'STEP7', 'STEP8', 'DURING_SPECIAL_CHALLENGE', 'CLEARED_SPECIAL_TERM', 'CLEARED_SPECIAL_QUANTITY', 'TUTORIAL'];
    if (this._appType == 'mypage')
        len = 11;
    else
        len = 12;
    for (cnt = 0; cnt < len; cnt++) {
        idTxt = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.LEFT);
        idTxt.text = org.apache.royale.utils.Language.string(names[cnt]);
        idTxt.width = 600;
        idTxt.height = 100;
        idTxt.y = 50 * cnt + 50;
        idTxt.x = 50;
        idTxt.background = true;
        idTxt.backgroundColor = 3355443;
        idTxt.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
        this._userTxtSpr.addChild(idTxt)
    }
    this._localRankTypeTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
    this._localRankTypeTxt.x = 200;
    this._localRankTypeTxt.y = 200;
    this._localRankTypeTxt.text = '\u30e9\u30f3\u30ad\u30f3\u30b0 : ON ';
    this._userTxtSpr.addChild(this._localRankTypeTxt);
    idTxt = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.LEFT);
    idTxt.text = '\u30e9\u30f3\u30ad\u30f3\u30b0';
    idTxt.width = 600;
    idTxt.height = 100;
    idTxt.x = 200;
    idTxt.y = 150;
    idTxt.background = true;
    idTxt.backgroundColor = 3355443;
    idTxt.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn1__);
    this._userTxtSpr.addChild(idTxt);
    if (this._appType == 'mypage') {
        this._localAnnounceTypeTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
        this._localAnnounceTypeTxt.x = 200;
        this._localAnnounceTypeTxt.y = 300;
        this._localAnnounceTypeTxt.text = '\u30c9\u30ab\u30f3 : OFF ';
        this._userTxtSpr.addChild(this._localAnnounceTypeTxt);
        idTxt = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.LEFT);
        idTxt.text = '\u30c9\u30ab\u30f3';
        idTxt.width = 600;
        idTxt.height = 100;
        idTxt.x = 200;
        idTxt.y = 250;
        idTxt.background = true;
        idTxt.backgroundColor = 3355443;
        idTxt.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
        this._userTxtSpr.addChild(idTxt);
        this._localInitTypeTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
        this._localInitTypeTxt.x = 350;
        this._localInitTypeTxt.y = 300;
        this._localInitTypeTxt.text = 'SP\u521d\u56de : OFF ';
        this._userTxtSpr.addChild(this._localInitTypeTxt);
        idTxt = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.LEFT);
        idTxt.text = 'SP\u521d\u56de\u30d5\u30e9\u30b0';
        idTxt.width = 600;
        idTxt.height = 100;
        idTxt.x = 350;
        idTxt.y = 250;
        idTxt.background = true;
        idTxt.backgroundColor = 3355443;
        idTxt.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn3__);
        this._userTxtSpr.addChild(idTxt)
    }
    idTxt = this.makeTextField(30, 16777215, openfl.text.TextFieldAutoSize.LEFT);
    idTxt.text = '\u5148\u7740\u30fb\u5148\u884c';
    idTxt.width = 600;
    idTxt.height = 100;
    idTxt.x = 400;
    idTxt.y = 150;
    idTxt.background = true;
    idTxt.backgroundColor = 3355443;
    idTxt.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn4__);
    this._userTxtSpr.addChild(idTxt);
    this._localLimitedTypeTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
    this._localLimitedTypeTxt.x = 400;
    this._localLimitedTypeTxt.y = 200;
    this._localLimitedTypeTxt.text = '\u5148\u884c\u30fb\u5148\u7740\u3042\u308a';
    this._userTxtSpr.addChild(this._localLimitedTypeTxt);
    if (this._appType == 'game') {
        this._tutorialTxt = this.makeTextField(40, 3355443);
        this._tutorialTxt.x = 200;
        this._tutorialTxt.y = 50 * 11 + 50;
        this._tutorialTxt.width = 500;
        this._tutorialTxt.height = 70;
        this._tutorialTxt.background = true;
        this._tutorialTxt.backgroundColor = 11184810;
        this._tutorialTxt.border = true;
        this._tutorialTxt.borderColor = 13421772;
        this._tutorialTxt.selectable = true;
        this._tutorialTxt.type = openfl.text.TextFieldType.INPUT;
        this._tutorialTxt.text = '1';
        this._userTxtSpr.addChild(this._tutorialTxt);
        idTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
        idTxt.x = 240;
        idTxt.y = 50 * 11 + 70;
        idTxt.width = 300;
        idTxt.text = '(TUTORIAL\u6307\u5b9a\u5f8c\u30001\u301c11\u307e\u3067\u306e\u6570\u5b57\u5165\u529b)';
        idTxt.mouseEnabled = false;
        this._userTxtSpr.addChild(idTxt);
        idTxt = this.makeTextField(20, 3355443, openfl.text.TextFieldAutoSize.LEFT);
        idTxt.x = 200;
        idTxt.y = 50;
        idTxt.width = 300;
        idTxt.text = '\u30bf\u30c3\u30d7\u3067STEP\u6307\u5b9a\n\u6307\u5b9a\u5f8c\u3000GET EVENT DATA \u3092\u62bc\u3059';
        this._userTxtSpr.addChild(idTxt)
    }
    this._loadBtn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.removeUserCode, this, 'removeUserCode'))
}
;
pigg.puzzle.view.MainView.prototype.removeUserCode = function(e) {
    if (this._isLocal) {
        if (this._appType == 'game')
            this._localTutorial = org.apache.royale.utils.Language._int(this._tutorialTxt.text);
        this.showApiLoading();
        this.removeFromParent(this._loadBtn);
        this.removeFromParent(this._userTxtSpr);
        this._loadBtn = null;
        this._userTxtSpr = null;
        this._loadDataManager.getEventData()
    } else {
        this._loadDataManager.getEventData();
        this.removeFromParent(this._loadBtn);
        this.removeFromParent(this._userTxtSpr);
        this._userTxtSpr = null;
        this._loadBtn = null
    }
}
;
pigg.puzzle.view.MainView.prototype.onErrorApi = function(e) {
    this.traceLog('onErrorApi')
}
;
pigg.puzzle.view.MainView.prototype.clean = function() {}
;
pigg.puzzle.view.MainView.prototype.setDummyBtn = function() {
    var cnt = 0
      , cnt2 = 0;
    var btnContainer = new openfl.display.MovieClip;
    var btn;
    btn = new openfl.display.MovieClip;
    btn.graphics.beginFill(0, 0);
    btn.graphics.drawRect(0, 0, 340, 120);
    btn.graphics.endFill();
    btnContainer.addChild(btn);
    btn = new openfl.display.MovieClip;
    btn.graphics.beginFill(0, 0);
    btn.graphics.drawRect(400, 0, 240, 120);
    btn.graphics.endFill();
    btnContainer.addChild(btn);
    btn = new openfl.display.MovieClip;
    btn.graphics.beginFill(16711935, 0);
    btn.graphics.drawCircle(70, 850, 54);
    btn.graphics.endFill();
    btnContainer.y = 0;
    btnContainer.x = 0;
    this._container.addChild(btnContainer)
}
;
pigg.puzzle.view.MainView.prototype.sethemeId = 0;
pigg.puzzle.view.MainView.prototype.dummyThemeArray;
pigg.puzzle.view.MainView.prototype.dummyTutorialThemeArray;
pigg.puzzle.view.MainView.prototype.dummyTutorial2ndThemeArray;
pigg.puzzle.view.MainView.prototype.themeStart = function() {
    if (this._gameView == null)
        return;
    this._gameView.show()
}
;
pigg.puzzle.view.MainView.prototype.showEventView = function(isSp) {
    isSp = typeof isSp !== 'undefined' ? isSp : -1;
    this.updateEventData(false);
    this.traceLog('showEventView\uff1b\uff1b\uff1b\uff1b\uff1b\uff1b\uff1b\uff1b');
    this.traceLog('showEventView');
    if (this._eventView == null) {
        this._eventView = new pigg.puzzle.view.EventView;
        this._eventView.init(this, this._loadDataManager, isSp);
        this._container.addChild(this._eventView);
        this.showApiLoading()
    } else if (this._eventView.isShow == false)
        this._eventView.show(isSp);
    else
        this._eventView.hide();
    if (this._appType == 'mypage' && this._mypageView)
        this._mypageView.updateInfo()
}
;
pigg.puzzle.view.MainView.prototype.hideEventView = function() {
    if (this._eventView == null)
        return;
    this._eventView.visible = false
}
;
pigg.puzzle.view.MainView.prototype.showAnnounce = function() {
    this.traceLog('showAnnounce');
    if (this._announceView == null) {
        this._announceView = new pigg.puzzle.view.AnnounceView;
        this._announceView.init(this);
        this._container.addChild(this._announceView);
        this.showApiLoading()
    }
}
;
pigg.puzzle.view.MainView.prototype.testSwitchMission = function() {
    if (this._existMission)
        this._existMission = false;
    else
        this._existMission = true;
    this._gameView.testSwitchMission()
}
;
pigg.puzzle.view.MainView.prototype.updateServerTime = function(serverTime) {
    this._serverTime = serverTime;
    if (this._tickTimer) {
        this._tickTimer.stop();
        this._tickTimer.removeEventListener(openfl.events.TimerEvent.TIMER, org.apache.royale.utils.Language.closure(this.onTickTimer, this, 'onTickTimer'));
        this._tickTimer = null
    }
    this._tickTimer = new openfl.utils.Timer(1E3);
    this._tickTimer.addEventListener(openfl.events.TimerEvent.TIMER, org.apache.royale.utils.Language.closure(this.onTickTimer, this, 'onTickTimer'));
    this._tickTimer.start()
}
;
pigg.puzzle.view.MainView.prototype.onTickTimer = function(e) {
    this._serverTime += 1E3;
    this.checkJoinSpecialChallenge();
    if (this._continueSaleExist)
        if (this.serverTime < this._eventData.continueSaleStartTime || this.serverTime > this._eventData.continueSaleEndTime) {
            this._continueSale = false;
            this._continuePrice = this._eventData.continueBasePrice
        } else if (this.serverTime > this._eventData.continueSaleStartTime && this.serverTime < this._eventData.continueSaleEndTime) {
            this._continueSale = true;
            this._continuePrice = this._eventData.continueSalePrice
        }
}
;
pigg.puzzle.view.MainView.prototype.loadSound = function() {
    this.traceLog('loadSound');
    if (this._appType == 'game') {
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_EMPTY);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_GAME_INTRO);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_GAME_LOOP);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_CLEAR_INTRO);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_CLEAR_LOOP);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_FAILED_INTRO);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.BGM_FAILED_LOOP);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_ERASE);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_MATCH);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_FALL);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_SWITCH);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_ARROW_START);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_BONUS_POINT);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_FINISH);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_HO_START);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_MAKE_SPECIAL);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_RAINBOW_HIT);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_RAINBOW_THROUGH);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_TOGETOGE_START);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_TOGETOGE_LARGE_START);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_POINT_GET);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_SCROLL);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_HO_VOICE);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_CRUSH_MARSHMALLOW);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_CRUSH_SILVERGOLD);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_ROULETTE_ROTATION);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_ROULETTE_END);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_MISSION_PIECE_GET);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_RANKING_RESULT);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_BUTTON_CANCEL);
        this._loadDataManager.loadSound(pigg.puzzle.data.CommonData.SE_USE_POTION)
    }
    this._soundLoaded = true
}
;
pigg.puzzle.view.MainView.prototype.loadSoundComplete = function(code, clazz) {}
;
pigg.puzzle.view.MainView.prototype.loadMotion = function() {}
;
pigg.puzzle.view.MainView.prototype.playSoundBGM = function(name, loop) {
    loop = typeof loop !== 'undefined' ? loop : 1;
    this.traceLog('window.AudioContext::', AudioContext);
    this._soundResumeTime = 0;
    this.traceLog('playSoundBGM::', name, loop, this._currentBGM, this._isSoundPlaying, this._isSoundOn);
    if (!this._isSoundPlaying) {
        this._currentBGM = name;
        this._waitBgm = name;
        this.traceLog('\u3053\u3053\u3067::_waitBgm \x3d ', name, ' ::_isSoundPlaying');
        return
    }
    if (!this._isSoundOn) {
        this._currentBGM = name;
        this._waitBgm = name;
        this.traceLog('\u3053\u3053\u3067::_waitBgm \x3d', name, ' ::_isSoundOn');
        return
    }
    if (this._currentBGM == name)
        return;
    if (this._soundMap[name] == null) {
        this.traceLog('_waitBgm', this._currentBGM, name);
        this._waitBgm = name;
        return
    }
    this.playBGM(name)
}
;
pigg.puzzle.view.MainView.prototype._isPlaying = false;
pigg.puzzle.view.MainView.prototype._bgmTweenObj;
pigg.puzzle.view.MainView.prototype._bgmTweenSt;
pigg.puzzle.view.MainView.prototype.playBGM = function(name, loop, isSwitch) {
    var self = this;
    name = typeof name !== 'undefined' ? name : '';
    loop = typeof loop !== 'undefined' ? loop : 1;
    isSwitch = typeof isSwitch !== 'undefined' ? isSwitch : false;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            if (self._soundBgmChannel)
                self._soundBgmChannel.soundTransform = self._bgmTweenSt;
            else
                com.greensock.TweenMax.killTweensOf(self._bgmTweenSt)
        };
        if (self._currentBGM == name)
            startTime = self._soundResumeTime;
        self._soundBgmChannel = self._soundMap[name].play(startTime);
        self._soundBgmChannel.addEventListener(openfl.events.Event.SOUND_COMPLETE, org.apache.royale.utils.Language.closure(self.onCompleteSound, self, 'onCompleteSound'));
        if (isSwitch) {
            self.traceLog('\u8aad\u307f\u8fbc\u307fwait\u304b\u3089\u306e\u521d\u56de\u518d\u751f\u30d5\u30a7\u30fc\u30c9\u30a4\u30f3');
            if (self._bgmTweenSt == null)
                self._bgmTweenSt = new openfl.media.SoundTransform(0,0);
            com.greensock.TweenMax.killTweensOf(self._bgmTweenSt);
            self._bgmTweenSt.volume = 0;
            self._soundBgmChannel.soundTransform = self._bgmTweenSt;
            com.greensock.TweenMax.to(self._bgmTweenSt, 3, {
                volume: 1,
                onUpdate: __localFn0__
            })
        }
    };
    var __localFn1__ = function() {
        self._soundBgmChannel.stop();
        if (self._currentBGM == name)
            startTime = self._soundResumeTime;
        self._soundBgmChannel = self._soundMap[name].play(startTime);
        self._soundBgmChannel.addEventListener(openfl.events.Event.SOUND_COMPLETE, org.apache.royale.utils.Language.closure(self.onCompleteSound, self, 'onCompleteSound'));
        self._soundBgmChannel.soundTransform = new openfl.media.SoundTransform(1,0)
    };
    if (this._isPlaying)
        return;
    if (!this._isSoundOn)
        return;
    if (!this._isSoundPlaying)
        return;
    if (name == '')
        return;
    this.traceLog('playBGM::_currentBGM', this._currentBGM, name, this._soundBgmChannel, this._soundResumeTime);
    var startTime = 0;
    var buffer = 0;
    if (isSwitch)
        buffer = .1;
    if (this._bgmTweenObj == null)
        this._bgmTweenObj = new openfl.display.Sprite;
    this._emptySoundChannel = this._soundMap[pigg.puzzle.data.CommonData.SE_EMPTY].play();
    com.greensock.TweenMax.killTweensOf(this._bgmTweenObj);
    if (this._soundBgmChannel == null)
        com.greensock.TweenMax.to(this._bgmTweenObj, buffer, {
            onComplete: __localFn0__
        });
    else
        com.greensock.TweenMax.to(this._bgmTweenObj, buffer, {
            onComplete: __localFn1__
        });
    this._currentBGM = name;
    this._waitBgm = '';
    this.traceLog('\u3053\u3053\u3067::_waitBgm \x3d null')
}
;
pigg.puzzle.view.MainView.prototype.onCompleteSound = function(e) {
    if (!this._isSoundOn)
        return;
    if (!this._isSoundPlaying)
        return;
    this.traceLog('onCompleteSound::_currentBGM::', this._currentBGM);
    if (this._currentBGM.indexOf('loop') != -1) {
        this._soundResumeTime = 0;
        this.playBGM(this._currentBGM)
    }
}
;
pigg.puzzle.view.MainView.prototype.stopBGM = function(name) {
    name = typeof name !== 'undefined' ? name : '';
    this.traceLog('stopBgm?? ', name, this._currentBGM);
    this._isPlaying = false;
    if (this._bgmTweenObj)
        com.greensock.TweenMax.killTweensOf(this._bgmTweenObj);
    if (this._soundBgmChannel) {
        if (this._soundBgmChannel.position > 0)
            this._soundResumeTime = this._soundBgmChannel.position;
        this._soundBgmChannel.stop();
        this._soundBgmChannel.removeEventListener(openfl.events.Event.SOUND_COMPLETE, org.apache.royale.utils.Language.closure(this.onCompleteSound, this, 'onCompleteSound'));
        this._soundBgmChannel = null
    }
}
;
pigg.puzzle.view.MainView.prototype.playSE = function(name, loop) {
    name = typeof name !== 'undefined' ? name : '';
    loop = typeof loop !== 'undefined' ? loop : 0;
    if (name == '')
        return;
    if (!this._isSoundOn)
        return;
    if (!this._isSoundPlaying)
        return;
    if (this._soundMap[name] == null)
        return;
    if (this._soundChannelMap[name] == null)
        this._soundChannelMap[name] = this._soundMap[name].play();
    else {
        this._soundChannelMap[name].stop();
        this._soundChannelMap[name] = this._soundMap[name].play()
    }
}
;
pigg.puzzle.view.MainView.prototype.stopSE = function(name) {
    name = typeof name !== 'undefined' ? name : '';
    if (name == '')
        return
}
;
pigg.puzzle.view.MainView.prototype.showGameTutorial = function(pageNum, balloonNum, showBlack) {
    this.traceLog('mainView::showGameTutorial::', pageNum, balloonNum, showBlack);
    if (this._gameView.isGameCleared)
        return;
    if (this._tutorialGameView == null) {
        this._tutorialGameView = new pigg.puzzle.view.TutorialGameView;
        this._tutorialGameView.init(this);
        this._container.addChild(this._tutorialGameView)
    }
    this._tutorialGameView.mouseChildren = false;
    this._tutorialGameView.mouseEnabled = false;
    this._tutorialGameView.show();
    this._tutorialGameView.showGameTutorial(pageNum, balloonNum, showBlack)
}
;
pigg.puzzle.view.MainView.prototype.showGameTutorialEnd = function(balloonNum, hasTutorailEnd) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0;
    hasTutorailEnd = typeof hasTutorailEnd !== 'undefined' ? hasTutorailEnd : false;
    this.traceLog('showGameTutorialEnd();');
    if (this._tutorialGameView == null) {
        this._tutorialGameView = new pigg.puzzle.view.TutorialGameView;
        this._tutorialGameView.init(this);
        this._container.addChild(this._tutorialGameView)
    }
    this._tutorialGameView.mouseChildren = true;
    this._tutorialGameView.mouseEnabled = true;
    this._tutorialGameView.hasTutorialEnd = hasTutorailEnd;
    this._tutorialGameView.show();
    this._tutorialGameView.showGameTutorialEnd(balloonNum)
}
;
pigg.puzzle.view.MainView.prototype.showThemeTutorial = function() {
    if (this._tutorialGameView == null) {
        this._tutorialGameView = new pigg.puzzle.view.TutorialGameView;
        this._tutorialGameView.init(this);
        this._container.addChild(this._tutorialGameView)
    }
    this._tutorialGameView.mouseChildren = false;
    this._tutorialGameView.mouseEnabled = false;
    this._tutorialGameView.show();
    this._tutorialGameView.showThemeTutorial()
}
;
pigg.puzzle.view.MainView.prototype.hideGameTutorial = function() {
    if (this._tutorialGameView == null)
        return;
    this._tutorialGameView.hideGameTutorial()
}
;
pigg.puzzle.view.MainView.prototype.showRankingDescription = function() {}
;
pigg.puzzle.view.MainView.prototype.showMapRankingView = function() {}
;
pigg.puzzle.view.MainView.prototype.onOpenPuzzle = function(data) {
    this.traceLog('onOpenPuzzle::', data);
    this.traceLog('onOpenPuzzle::', data.isEventFirstTime);
    if (data.isEventFirstTime) {
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u521d\u53c2\u52a0');
        this._isEventFirstTime = true;
        this.traceLog('onOpenPuzzle::hasPrevEventRanking::', data.hasPrevEventRanking);
        this._hasRankingIncentive = data.hasPrevEventRanking;
        this._openData = data;
        this.traceLog('onOpenPuzzle::\u30e9\u30f3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bb\u30f3\u6709\u7121::', this._hasRankingIncentive)
    }
}
;
pigg.puzzle.view.MainView.prototype.setEventData = function(data) {
    var firstLoad = false;
    if (this._eventData == null)
        firstLoad = true;
    this.traceLog('MainView::setEventData::\u53d7\u3051\u53d6\u308a\u7d42\u4e86::', firstLoad);
    this._eventData = data;
    if (!this.checkEventDataStatus(data.status))
        return;
    if (firstLoad)
        this.onOpenPuzzle(data.openData);
    this.traceLog('continueSaleExists::', data.continueSaleExists);
    this.traceLog('continueSaleStartTime::', data.continueSaleStartTime);
    this.traceLog('continueSaleEndTime::', data.continueSaleEndTime);
    this.traceLog('continueSalePrice::', data.continueSalePrice);
    this.traceLog('continueBasePrice::', data.continueBasePrice);
    this._continueSaleExist = data.continueSaleExists;
    if (this._continueSaleExist) {
        this._continueSaleStartTime = data.continueSaleStartTime;
        this._continueSaleEndTime = data.continueSaleEndTime;
        if (this._serverTime)
            this.traceLog('_serverTime::\u30a2\u30ea:::', this._serverTime);
        if (this._serverTime && this._serverTime > this._continueSaleStartTime && this._serverTime < this._continueSaleEndTime) {
            this._continuePrice = data.continueSalePrice;
            this._continueSale = true
        } else {
            this._continuePrice = data.continueBasePrice;
            this._continueSale = false
        }
    }
    if (firstLoad) {
        this._existRanking = data.rankingExists;
        var cnt = 0
          , len = 0
          , cnt2 = 0
          , len2 = 0;
        len = this._eventData.stepDataVec.length;
        var stepData;
        this._eventStepMissionPoint = org.apache.royale.utils.Language.Vector(this._eventData.stepDataVec.length, 'int');
        this._eventStepMissionEachPoint = org.apache.royale.utils.Language.Vector(this._eventData.stepDataVec.length, 'int');
        for (cnt = 0; cnt < len; cnt++) {
            stepData = this._eventData.stepDataVec[cnt];
            this._eventStepMissionPoint[cnt] = stepData.point;
            if (cnt == 0)
                this._eventStepMissionEachPoint[cnt] = stepData.point;
            else
                this._eventStepMissionEachPoint[cnt] = stepData.point - this._eventStepMissionPoint[cnt - 1];
            this.traceLog('setEventData::: ', stepData.step);
            this.traceLog('setEventData::: ', stepData.point);
            this.traceLog('setEventData::: ', stepData.eventIncentiveItemData);
            len2 = stepData.eventIncentiveItemData.length;
            for (cnt2 = 0; cnt2 < len2; cnt2++) {
                this.traceLog('eventIncentiveItemData::', cnt2, stepData.eventIncentiveItemData[cnt2].itemCode);
                this.traceLog('eventIncentiveItemData::', cnt2, stepData.eventIncentiveItemData[cnt2].itemName);
                this.traceLog('eventIncentiveItemData::', cnt2, stepData.eventIncentiveItemData[cnt2].itemQuantity);
                this.traceLog('eventIncentiveItemData::', cnt2, stepData.eventIncentiveItemData[cnt2].itemType)
            }
        }
        this.traceLog(this._eventData.stepDataVec);
        this.traceLog('_eventStepMissionPoint::', this._eventStepMissionPoint);
        this.traceLog('_eventStepMissionEachPoint::', this._eventStepMissionEachPoint);
        this.traceLog('_specialChallengeExist:::', firstLoad, this._eventData.limitedQuantityIncentiveExists, this._eventData.limitedTermIncentiveExists, this._eventStepMissionPoint[7], this._eventData.limitedQuantityPoint, this._eventData.limitedTermPoint);
        if (this._eventData.limitedQuantityIncentiveExists && this._eventData.limitedTermIncentiveExists) {
            if (this._eventStepMissionPoint.length != 8)
                this._specialChallengeExist = false;
            else if (this._eventStepMissionPoint[7] == this._eventData.limitedQuantityPoint && this._eventStepMissionPoint[7] == this._eventData.limitedTermPoint)
                this._specialChallengeExist = false;
            else
                this._specialChallengeExist = true;
            this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u306e\u6709\u7121::', this._specialChallengeExist)
        }
        if (this._gameView)
            this._gameView.winningPointLimit = this._eventData.winningStreakPointLimit;
        this._missionRequiredPoint = this._eventData.missionRequiredPoint
    }
    this.setUserData(data.userData)
}
;
pigg.puzzle.view.MainView.prototype.checkEventDataStatus = function(status) {
    var errorTxt;
    var errorFormat;
    if (this._eventData.status == 'SUCCESS')
        return true;
    errorFormat = new openfl.text.TextFormat;
    errorFormat.size = 40;
    errorTxt = new openfl.text.TextField;
    errorTxt.defaultTextFormat = errorFormat;
    errorTxt.y = 40;
    this.addChild(errorTxt);
    if (status == 'OUT_OF_TERM') {
        errorTxt.text = 'OUT_OF_TERM :: \n\u30a4\u30d9\u30f3\u30c8\u671f\u9593\u5916';
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u671f\u9593\u5916::')
    } else if (status == 'ERROR') {
        errorTxt.text = 'ERROR :: \n \u30a8\u30e9\u30fc';
        this.traceLog('\u30a8\u30e9\u30fc')
    } else if (status == 'FINISH_EVENT') {
        errorTxt.text = 'FINISH_EVENT :: \n \u30a4\u30d9\u30f3\u30c8\u7d42\u4e86';
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86')
    }
    return true
}
;
pigg.puzzle.view.MainView.prototype.setUserData = function(data) {
    var firstLoad = false;
    var cnt = 0
      , len = 0;
    var potionCount = [0, 0, 0, 0];
    var cheatCount = [0, 0, 0];
    if (this._userData == null)
        firstLoad = true;
    this._userData = data;
    this.traceLog('MainView::userData \u53d7\u3051\u53d6\u308a\u7d42\u4e86', firstLoad);
    this.traceLog('setUserData::\u30a4\u30d9\u30f3\u30c8\u30dd\u30a4\u30f3\u30c8::', this._userData.eventPoint, this._eventData);
    if (firstLoad)
        this.setStatus(false, true);
    if (this._eventData == null)
        return;
    if (firstLoad) {
        len = this._eventData.stepSize;
        this._stepSize = len;
        this.traceLog('setUserData:::len::', this._eventData.stepSize);
        for (cnt = 0; cnt < len; cnt++) {
            this.traceLog('setUserData::\u30a4\u30d9\u30f3\u30c8\u30dd\u30a4\u30f3\u30c8\u3001\u3001\u3001::', this._eventData.stepDataVec[cnt].point);
            this.traceLog('_eventStepMissionPoint:::', this._eventStepMissionPoint);
            if (this._eventStepMissionPoint[cnt] > this._userData.eventPoint) {
                this._currentEventStep = cnt;
                this.setAnimationAnimal(this._currentEventStep);
                break
            }
        }
        if (this._currentEventStep == -1) {
            this._currentEventStep = 8;
            this._isEventComplete = true;
            this.setAnimationAnimal(this._currentEventStep)
        }
        if (this._isEventComplete) {
            this.traceLog('\u3059\u3067\u306bSTEP8\u306a\u306e\u3067\u6301\u3061\u8d8a\u3057\u6f14\u51fa\u306a\u3057');
            this._specialCarryOberExist = false
        }
    }
    this.traceLog('setUserData::\u73fe\u5728\u306e\u30b9\u30c6\u30c3\u30d7::', this._currentEventStep);
    this._totalMissionPieceCount = this._userData.missionPoint;
    this.traceLog('userData::\u6240\u6301\u3057\u3066\u308b\u30df\u30c3\u30b7\u30e7\u30f3\u30dd\u30a4\u30f3\u30c8::', this._totalMissionPieceCount);
    this._isDuringRoulette = this._userData.isDuringRoulette;
    if (this._isDuringRoulette)
        this.traceLog('_isDuringRoulette::\u30eb\u30fc\u30ec\u30c3\u30c8\u3042\u308a\u5224\u5b9a');
    len = this._userData.scoreItemData.length;
    this.traceLog('\u30b9\u30b3\u30a2\u30a2\u30a4\u30c6\u30e0\u6240\u6301\u7a2e\u985e\u6570', len);
    var minExpiredItem;
    if (this._serverTime) {
        this.traceLog('\u6240\u6301\u30dd\u30fc\u30b7\u30e7\u30f3\u6570\u30c1\u30a7\u30af::', this._serverTime);
        for (cnt = 0; cnt < len; cnt++) {
            this.traceLog(this._userData.scoreItemData[cnt].itemExpireTime, this._serverTime);
            if (this._userData.scoreItemData[cnt].itemExpireTime == 0 || this._userData.scoreItemData[cnt].itemExpireTime > this._serverTime) {
                if (this._userData.scoreItemData[cnt].itemExpireTime > 0)
                    if (minExpiredItem == null || minExpiredItem && minExpiredItem.itemExpireTime > this._userData.scoreItemData[cnt].itemExpireTime) {
                        minExpiredItem = this._userData.scoreItemData[cnt];
                        this.traceLog('\u30a2\u30e9\u30fc\u30c8\u51fa\u3059\u30a2\u30a4\u30c6\u30e0::', minExpiredItem.itemCategory, minExpiredItem.itemCode, minExpiredItem.itemMagnification)
                    } else if (minExpiredItem && minExpiredItem.itemExpireTime == this._userData.scoreItemData[cnt].itemExpireTime) {
                        this.traceLog('\u6d88\u8cbb\u65e5\u6642\u304a\u306a\u3058');
                        if (minExpiredItem.itemMagnification < this._userData.scoreItemData[cnt].itemMagnification) {
                            minExpiredItem = this._userData.scoreItemData[cnt];
                            this.traceLog('\u30a2\u30e9\u30fc\u30c8\u51fa\u3059\u30a2\u30a4\u30c6\u30e0::', minExpiredItem.itemCategory, minExpiredItem.itemCode, minExpiredItem.itemMagnification)
                        }
                    }
                if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_3')
                    potionCount[0] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_5')
                    potionCount[1] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_10')
                    potionCount[2] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_20')
                    potionCount[3] += this._userData.scoreItemData[cnt].itemQuantity
            } else
                this.traceLog('\u671f\u9593\u5916::', this._userData.scoreItemData[cnt].itemName)
        }
    }
    this.traceLog('\u6240\u6301\u30dd\u30fc\u30b7\u30e7\u30f3\u6570::', potionCount);
    this._potionItemCount = potionCount;
    if (this._userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
        this._enableScoreItem = false;
        if (this._userData.equippedScoreItemCategory != '')
            ;
    } else
        this._enableScoreItem = true;
    len = this._userData.cheatItemData.length;
    this.traceLog('\u30c1\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u6240\u6301\u7a2e\u985e\u6570', len);
    for (cnt = 0; cnt < len; cnt++)
        if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_switch')
            cheatCount[0] += this._userData.cheatItemData[cnt].itemQuantity;
        else if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_delete')
            cheatCount[1] += this._userData.cheatItemData[cnt].itemQuantity;
        else if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_arrow')
            cheatCount[2] += this._userData.cheatItemData[cnt].itemQuantity;
    this.traceLog('\u6240\u6301\u30c1\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u6570::', cheatCount);
    this._cheatItemCount = cheatCount;
    if (this._gameView) {
        this._gameView.updateCheatItem();
        this._gameView.updateSelectPotion()
    }
    if (this._appType == 'mypage' && this._mypageView)
        if (!firstLoad)
            this._mypageView.updateInfo();
    if (this._userItemView)
        if (!firstLoad)
            this._userItemView.hasUpdate = true;
    if (this._infoView && this._isShowTheme)
        this._infoView.makeThemePotion();
    this.traceLog('\u30dd\u30fc\u30b7\u30e7\u30f3\u521d\u671f\u72b6\u614b::', this._userData.equippedScoreItemCategory, this._userData.boardUsingPuzzleScoreItemCategory);
    if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_3 || this._userData.boardUsingPuzzleScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_3)
        this._currentUsePotion = 0;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_5 || this._userData.boardUsingPuzzleScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_5)
        this._currentUsePotion = 1;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_10 || this._userData.boardUsingPuzzleScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_10)
        this._currentUsePotion = 2;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_20 || this._userData.boardUsingPuzzleScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_20)
        this._currentUsePotion = 3;
    else
        this._currentUsePotion = -1;
    this.traceLog('\u305d\u3046\u3073\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0::', this._userData.equippedScoreItemCategory, this._currentUsePotion);
    if (firstLoad) {
        this._totalPoint = this._userData.eventPoint;
        this.traceLog('\u73fe\u5728\u306e\u30a4\u30d9\u30f3\u30c8\u7d2f\u7a4d\u30dd\u30a4\u30f3\u30c8::', this._totalPoint);
        if (!this._isEventComplete && this._currentEventStep < 8) {
            this._currentRemainEventStepPoint = this._eventStepMissionPoint[this._currentEventStep] - this._totalPoint;
            this.traceLog('\u73fe\u5728\u306e\u30a4\u30d9\u30f3\u30c8\u306e\u3053\u308a\u30dd\u30a4\u30f3\u30c8::', this._currentRemainEventStepPoint)
        }
    } else
        this.traceLog('\u73fe\u5728\u306e\u30a4\u30d9\u30f3\u30c8::', this._totalPoint, this._userData.eventPoint, this._currentRemainEventStepPoint, this._eventStepMissionPoint[this._currentEventStep]);
    this.traceLog('showTheme::::', this._isOpenTheme);
    if (this._appType == 'mypage') {
        if (firstLoad) {
            this._mypageView.initTop();
            if (this._isLoadComplete)
                this.readyMypage();
            else
                this._isWaitInitShowMypage = 0
        }
        return
    }
    this._gameView.updateKeepClearCount(true, this._userData.eventWinningStreakCount);
    this.traceLog('\u9023\u52dd\u4e2d::', this._userData.eventWinningStreakCount);
    if (firstLoad) {
        if (this._userData.progressCount > 0)
            this._isBoardMoved = true;
        else
            this._isBoardMoved = false;
        if (this._userData.hasTheme)
            if (this._userData.boardUUID != '' && this._userData.boardUUID != null) {
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d');
                this.traceLog('isScoreItemUsing::', this._userData.isScoreItemUsing);
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d::\u306e\u3053\u308a\u624b\u6570::', this._userData.boardRemainingMoveCount);
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d::\u73fe\u72b6\u30dd\u30a4\u30f3\u30c8::', this._userData.boardPoint);
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d::\u4f7f\u7528\u30a2\u30a4\u30c6\u30e0::', this._userData.boardUsingPuzzleScoreItemCategory);
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d::\u4f7f\u7528\u30a2\u30a4\u30c6\u30e0\u500d\u7387::', this._userData.boardUsingPuzzleScoreItemMagnification);
                this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d::\u73fe\u72b6\u306e\u30df\u30c3\u30b7\u30e7\u30f3\u30dd\u30a4\u30f3\u30c8::', this._userData.themeMissionPoint);
                this.setNextTheme(this.userData.boardBaseData, true);
                if (this._isLoadComplete)
                    this.showGameView(false);
                else
                    this._isWaitInitShowGame = 0;
                if (firstLoad && this._userData.boardRemainingMoveCount == 0 && this._userTutorialStatus >= pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                    this.traceLog('\u8aad\u307f\u8fbc\u307f\u6642\u306b\u624b\u6570\u304c\u306a\u304b\u3063\u305f\u306e\u3067GET\u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fcinfo');
                    this._gameView.isSendingFailed = true;
                    this._loadDataManager.getContinueInfo()
                }
            } else {
                this.traceLog('\u304a\u984c\u306f\u3042\u308b\u3051\u3069\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u306a\u3044::\u304a\u984c\u8868\u793a::');
                if (this._isDuringRoulette) {
                    this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u6a29\u5229\u3042\u308a\u3001\u8868\u793a');
                    this.showRoulette();
                    this._isWaitShowTheme = 0
                } else if (this._isLoadComplete)
                    this.showThemePanel();
                else
                    this._isWaitInitShowTheme = 0
            }
        else {
            this.traceLog('\u30d7\u30ec\u30a4\u9014\u4e2d\u3067\u306f\u306a\u3044::\u30dc\u30fc\u30c9\u30c7\u30fc\u30bf\u53d6\u5f97');
            if (this._isDuringRoulette) {
                this.traceLog('\u30eb\u30fc\u30ec\u30c3\u30c8\u6a29\u5229\u3042\u308a\u3001\u8868\u793a');
                this.showRoulette();
                this._isWaitShowTheme = 1
            } else if (this._isLocal)
                if (this._isLoadComplete)
                    this.onGetBoardData();
                else
                    this._isWaitInitShowTheme = 0;
            else if (this._isLoadComplete)
                this._loadDataManager.getBoardData();
            else
                this._isWaitInitShowTheme = 1
        }
    }
    if (firstLoad && this._appType == 'game')
        this.changeGameBg(this._currentEventStep + 1)
}
;
pigg.puzzle.view.MainView.prototype.changeGameBg = function(type) {
    type = typeof type !== 'undefined' ? type : -1;
    this.traceLog('changeBG:::', this._gameBgType, type, this._currentEventStep);
    if (this._gameBgType == type)
        return;
    if (type < 1 || type > 9)
        this._gameBgType = 1;
    else
        this._gameBgType = type;
    if (this._bgTilemap == null) {
        this._bgTileset = new openfl.display.Tileset(null,[new openfl.geom.Rectangle(0,0,pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT)]);
        this._bgTilemap = new openfl.display.Tilemap(640,906,this._bgTileset);
        this._bgTilemap.addTile(new TileBase);
        this._gameBG.addChild(this._bgTilemap)
    }
    this._gameView.updateEventBtn();
    this._loadDataManager.loadPng(this.getBgUrl(this._gameBgType, this._appType), 'bg' + this._gameBgType, org.apache.royale.utils.Language.closure(this.onLoadBg, this, 'onLoadBg'))
}
;
pigg.puzzle.view.MainView.prototype.changeMypageBg = function(type) {
    type = typeof type !== 'undefined' ? type : -1;
    this.traceLog('changeMypageBg:::', this._mypageBgType, type, this._currentEventStep, this._isEventComplete, this._isJoinSpecialChallenge);
    if (this._mypageBgType == type)
        return;
    if (this._isJoinSpecialChallenge != -1)
        this._mypageBgType = 10;
    if (this._isEventComplete && this._isJoinSpecialChallenge == -1)
        this._mypageBgType = 11;
    else if (type < 1 || type > 9)
        this._mypageBgType = 1;
    else
        this._mypageBgType = type;
    if (this._bgTilemap == null) {
        this._bgTileset = new openfl.display.Tileset(null,[new openfl.geom.Rectangle(0,0,pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT)]);
        this._bgTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT,this._bgTileset);
        this._bgTilemap.addTile(new TileBase);
        this._mypageBG.addChild(this._bgTilemap)
    }
    this._mypageView.updateEventBtn();
    this._loadDataManager.loadPng(this.getBgUrl(this._mypageBgType, this._appType), 'bg' + this._mypageBgType, org.apache.royale.utils.Language.closure(this.onLoadBg, this, 'onLoadBg'))
}
;
pigg.puzzle.view.MainView.prototype.onLoadBg = function(code, bmd) {
    this.traceLog('BG::LOADED::', code, bmd);
    if (this._appType == 'mypage') {
        this._isReadyMypageBg = false;
        this.showMypage();
        if (this._isMypageTutorial == -1)
            this.hideApiLoading();
        else {
            this.traceLog('SP\u30d1\u30ba\u30eb\u521d\u56de');
            this._tutorialMypageView = new pigg.puzzle.view.TutorialMypageView;
            this._tutorialMypageView.init(this, this._isMypageTutorial);
            this._container.addChild(this._tutorialMypageView);
            this._userSpStatus = 1;
            this._loadDataManager.setUserStatus(String(this._userTutorialStatus) + ',' + this._userEventStatus + ',' + this._userTutorialStatus2nd + ',' + this._userTutorialStatusTemp + ',' + this._userSpStatus)
        }
    }
    this._bgTileset.bitmapData = bmd;
    this.addLoadedCnt()
}
;
pigg.puzzle.view.MainView.prototype.refreshUserItem = function() {
    var cnt = 0
      , len = 0;
    var cheatCount = [0, 0, 0];
    len = this._userData.cheatItemData.length;
    this.traceLog('refreshCheatItem::\u30c1\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u6240\u6301\u7a2e\u985e\u6570', len);
    for (cnt = 0; cnt < len; cnt++)
        if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_switch')
            cheatCount[0] += this._userData.cheatItemData[cnt].itemQuantity;
        else if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_delete')
            cheatCount[1] += this._userData.cheatItemData[cnt].itemQuantity;
        else if (this._userData.cheatItemData[cnt].itemCategory == 'puzzle_cheat_arrow')
            cheatCount[2] += this._userData.cheatItemData[cnt].itemQuantity;
    this.traceLog('refreshCheatItem::\u6240\u6301\u30c1\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\u6570::', cheatCount);
    this._cheatItemCount = cheatCount;
    if (this._gameView)
        this._gameView.updateCheatItem();
    if (this._userItemView)
        this._userItemView.hasUpdate = true
}
;
pigg.puzzle.view.MainView.prototype.refreshScoreItem = function() {
    this.traceLog('refreshScoreItem::::', this._serverTime);
    var cnt = 0
      , len = 0;
    var minExpiredItem;
    var potionCount = [0, 0, 0, 0];
    len = this._userData.scoreItemData.length;
    if (this._serverTime)
        for (cnt = 0; cnt < len; cnt++) {
            this.traceLog(this._userData.scoreItemData[cnt].itemExpireTime, this._serverTime);
            if (this._userData.scoreItemData[cnt].itemExpireTime == 0 || this._userData.scoreItemData[cnt].itemExpireTime > this._serverTime) {
                if (this._userData.scoreItemData[cnt].itemExpireTime > 0)
                    if (minExpiredItem == null || minExpiredItem && minExpiredItem.itemExpireTime > this._userData.scoreItemData[cnt].itemExpireTime) {
                        minExpiredItem = this._userData.scoreItemData[cnt];
                        this.traceLog('\u30a2\u30e9\u30fc\u30c8\u51fa\u3059\u30a2\u30a4\u30c6\u30e0::', minExpiredItem.itemCategory, minExpiredItem.itemCode, minExpiredItem.itemMagnification)
                    } else if (minExpiredItem && minExpiredItem.itemExpireTime == this._userData.scoreItemData[cnt].itemExpireTime) {
                        this.traceLog('\u6d88\u8cbb\u65e5\u6642\u304a\u306a\u3058');
                        if (minExpiredItem.itemMagnification < this._userData.scoreItemData[cnt].itemMagnification) {
                            minExpiredItem = this._userData.scoreItemData[cnt];
                            this.traceLog('\u30a2\u30e9\u30fc\u30c8\u51fa\u3059\u30a2\u30a4\u30c6\u30e0::', minExpiredItem.itemCategory, minExpiredItem.itemCode, minExpiredItem.itemMagnification)
                        }
                    }
                if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_3')
                    potionCount[0] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_5')
                    potionCount[1] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_10')
                    potionCount[2] += this._userData.scoreItemData[cnt].itemQuantity;
                else if (this._userData.scoreItemData[cnt].itemCategory == 'puzzle_score_20')
                    potionCount[3] += this._userData.scoreItemData[cnt].itemQuantity
            } else
                this.traceLog('\u671f\u9593\u5916::', this._userData.scoreItemData[cnt].itemName)
        }
    this.traceLog('\u6240\u6301\u30dd\u30fc\u30b7\u30e7\u30f3\u6570::', potionCount);
    this._potionItemCount = potionCount
}
;
pigg.puzzle.view.MainView.prototype.checkJoinSpecialChallenge = function() {
    if (!this._specialChallengeExist)
        return;
    if (this._eventData == null)
        return;
    if (this._userData == null)
        return;
    if (!this._isEventComplete) {
        this._isJoinSpecialChallenge = -1;
        return
    }
    if (this._eventData.limitedTermIncentiveExists)
        this._currentRemainLimitedTermPoint = this._eventData.limitedTermPoint - this._totalPoint;
    if (this._eventData.limitedTermIncentiveExists && this._eventData.limitedTermEndTime > this._serverTime && !this._userData.hasLimitedTermIncentive) {
        this._currentRemainLimitedTermPoint = this._eventData.limitedTermPoint - this._totalPoint;
        this._isJoinSpecialChallenge = 0
    } else if ((this._isJoinSpecialChallenge == 0 || this._isJoinSpecialChallenge == 2) && this._userData.hasLimitedTermIncentive) {
        this.traceLog('checkJoinSpecialChallenge:::\u5148\u884c\u30af\u30ea\u30a2\u3057\u305f\u306e\u3067-1\u306b\u3082\u3069\u3059');
        this._currentRemainLimitedTermPoint = this._eventData.limitedTermPoint - this._totalPoint;
        this._isJoinSpecialChallenge = -1
    } else if ((this._isJoinSpecialChallenge == 0 || this._isJoinSpecialChallenge == 2) && this._eventData.limitedTermEndTime < this._serverTime && !this._userData.hasLimitedTermIncentive) {
        this.traceLog('\u5148\u884c\u304c\u7d42\u308f\u3063\u305f+\u81ea\u5206\u306f\u30b2\u30c3\u30c8\u3057\u3066\u306a\u3044');
        this._isJoinSpecialChallenge = -1
    }
    if (this._eventData.limitedQuantityIncentiveExists)
        this._currentRemainLimitedQuantityPoint = this._eventData.limitedQuantityPoint - this._totalPoint;
    if (this._eventData.limitedQuantityIncentiveExists && this._eventData.limitedQuantityStock > 0 && !this._userData.hasLimitedQuantityIncentive) {
        this._currentRemainLimitedQuantityPoint = this._eventData.limitedQuantityPoint - this._totalPoint;
        if (this._isJoinSpecialChallenge == 0)
            this._isJoinSpecialChallenge = 2;
        else
            this._isJoinSpecialChallenge = 1
    } else if ((this._isJoinSpecialChallenge == 1 || this._isJoinSpecialChallenge == 0) && this._userData.hasLimitedQuantityIncentive) {
        this._currentRemainLimitedQuantityPoint = this._eventData.limitedQuantityPoint - this._totalPoint;
        if (this._isJoinSpecialChallenge == 1) {
            this.traceLog('_isJoinSpecialChallenge\u3092\u5148\u7740\u30af\u30ea\u30a2\u3057\u305f\u306e\u3067-1\u306b\u3082\u3069\u3059');
            this._isJoinSpecialChallenge = -1
        }
    } else if (this._isJoinSpecialChallenge == 1 && this._eventData.limitedQuantityStock == 0 && !this._userData.hasLimitedQuantityIncentive) {
        this.traceLog('\u5148\u7740\u304c\u306f\u3051\u305f+\u81ea\u5206\u306f\u30b2\u30c3\u30c8\u3057\u3066\u306a\u3044');
        this._isJoinSpecialChallenge = -1
    }
}
;
pigg.puzzle.view.MainView.prototype.setStatus = function(isLocalTutorial, isFirst) {
    isLocalTutorial = typeof isLocalTutorial !== 'undefined' ? isLocalTutorial : false;
    isFirst = typeof isFirst !== 'undefined' ? isFirst : false;
    this.traceLog('setStatus::\u53d7\u4fe1::', this._userData.status);
    this.traceLog('setStatus::\u73fe\u72b6::', this._userTutorialStatus, this._userEventStatus, this._userTutorialStatus2nd, this._userTutorialStatusTemp, this._userSpStatus);
    var arr = this._userData.status.split(',');
    if (isLocalTutorial)
        arr = [this._userTutorialStatus, this._userEventStatus, this._userTutorialStatus2nd, this._userTutorialStatusTemp, this._userSpStatus];
    this.traceLog('_userData.status', this._userData.status);
    if (this._userTutorialStatus < org.apache.royale.utils.Language._int(arr[0]))
        this._userTutorialStatus = org.apache.royale.utils.Language._int(arr[0]);
    if (arr.length > 2)
        if (this._userTutorialStatus2nd < org.apache.royale.utils.Language._int(arr[2])) {
            this._userTutorialStatus2nd = Number(arr[2]);
            this.traceLog('2nd\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c7\u30fc\u30bf\u5b58\u5728', this._userTutorialStatus2nd)
        }
    if (arr.length > 3)
        if (this._userTutorialStatusTemp < org.apache.royale.utils.Language._int(arr[3])) {
            this._userTutorialStatusTemp = Number(arr[3]);
            this.traceLog('temp\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c7\u30fc\u30bf\u5b58\u5728', this._userTutorialStatusTemp)
        }
    if (arr.length > 4)
        if (this._userSpStatus < org.apache.royale.utils.Language._int(arr[4])) {
            this._userSpStatus = Number(arr[4]);
            this.traceLog('SP\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c7\u30fc\u30bf\u5b58\u5728', this._userSpStatus)
        }
    if (!this._isEventFirstTime) {
        this._userEventStatus = org.apache.royale.utils.Language._int(arr[1]);
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u521d\u53c2\u52a0\u3067\u306f\u306a\u3044', this._userEventStatus)
    } else {
        this._isEventFirstTime = false;
        this._userEventStatus = 0;
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u521d\u53c2\u52a0\u3000\u30c9\u30ab\u30f3\u898b\u305f\u5c65\u6b74\u3092\u521d\u671f\u5316', this._userEventStatus)
    }
    if (this._userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
        this._isGameTutorial = true;
    else
        this._isGameTutorial = false;
    if (this._debugType == 'local')
        if (this._localInitType == -1)
            this._userSpStatus = 1;
        else {
            this._userSpStatus = 0;
            this._isMypageTutorial = this._localInitType
        }
    else if (this._userSpStatus == 0) {
        this.traceLog('SP\u30b9\u30de\u30db\u306b\u521d\u3081\u3066\u304d\u305f\u3072\u3068');
        if (this._userTutorialStatus == 0) {
            this.traceLog('SP\u30b9\u30de\u30db\u306b\u521d\u3081\u3066\u304d\u305f\u3072\u3068\u3001\u65b0\u898f\u30e6\u30fc\u30b6\u30fc');
            this._isMypageTutorial = 0
        } else {
            this.traceLog('SP\u30b9\u30de\u30db\u306b\u521d\u3081\u3066\u304d\u305f\u3072\u3068\u3001\u65e2\u5b58\u30e6\u30fc\u30b6\u30fc');
            this._isMypageTutorial = 1
        }
    }
    if (this._userSpStatus == 2)
        this.switchLowSpecMode(true);
    this.traceLog('setStatus :: \u30b2\u30fc\u30e0\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4e2d\u304b  ::', this._isGameTutorial);
    this.traceLog('setStatus :: _userTutorialStatus -- ', this._userTutorialStatus);
    this.traceLog('setStatus :: _userEventStatus -- ', this._userEventStatus);
    if (this._userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND) {
        this._existMission = false;
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u7d42\u308f\u3063\u3066\u306a\u3044\u306e\u3067\u30df\u30c3\u30b7\u30e7\u30f3\u975e\u8868\u793a')
    } else if (this._eventData && this._eventData.missionExists) {
        this._existMission = true;
        this.traceLog('\u30df\u30c3\u30b7\u30e7\u30f3\u8868\u793a')
    }
}
;
pigg.puzzle.view.MainView.prototype._pointTopRankView;
pigg.puzzle.view.MainView.prototype._winningTopRankView;
pigg.puzzle.view.MainView.prototype._topRankView;
pigg.puzzle.view.MainView.prototype.onGetTopRankingData = function(data) {
    this._updateRankingTime = (new Date).getTime();
    this.traceLog('onGetTopRankingData::', this._updateRankingTime);
    this.traceLog('onGetRankingData::', data.rankingType);
    if (data.rankingType == 'score')
        this._scoreRankingData = data;
    else if (data.rankingType == 'winning_streak')
        this._winningRankingData = data
}
;
pigg.puzzle.view.MainView.prototype.showRankingIncentiveView = function(rankType, award) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    award = typeof award !== 'undefined' ? award : -1;
    if (this._rankingIncentiveView == null) {
        this.showApiLoading();
        this._rankingIncentiveView = new pigg.puzzle.view.RankingIncentiveView;
        this._rankingIncentiveView.init(this, this._loadDataManager, rankType, award);
        this._container.addChild(this._rankingIncentiveView)
    } else
        this._rankingIncentiveView.show(rankType, award);
    this._container.setChildIndex(this._rankingIncentiveView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype._isWaitShowTopRank = '';
pigg.puzzle.view.MainView.prototype._isUpdateRanking = false;
pigg.puzzle.view.MainView.prototype._updateRankingTime;
pigg.puzzle.view.MainView.prototype.checkUpdateRanking = function() {
    if (this._isSendGetEventData)
        return false;
    var now = (new Date).getTime();
    this.traceLog('\u524d\u306e\u8aad\u307f\u8fbc\u307f\u6642\u9593::', this._updateRankingTime);
    this.traceLog('\u73fe\u5728\u306e\u6642\u9593::', now);
    this.traceLog('\u5dee\u5206::', now - this._updateRankingTime);
    if (now - this._updateRankingTime > 3E5) {
        this.traceLog('5\u5206\u4ee5\u4e0a\u7d4c\u3063\u3066\u305f\u306e\u3067\u66f4\u65b0');
        return true
    }
    this.traceLog('checkUpdateRanking::');
    return false
}
;
pigg.puzzle.view.MainView.prototype._openView;
pigg.puzzle.view.MainView.prototype.updateRankingData = function(openView) {
    openView = typeof openView !== 'undefined' ? openView : '';
    this.traceLog('updateRankingata::');
    this.showApiLoading();
    this._openView = openView;
    this._isSendUpdateRankingData = true;
    this._loadDataManager.getRankingData('score')
}
;
pigg.puzzle.view.MainView.prototype.showTopRankingView = function(rankType) {
    rankType = typeof rankType !== 'undefined' ? rankType : 'score';
    this.traceLog('showTopRankingView', rankType);
    if (this._isShowTopRanking)
        return;
    var data;
    if (rankType == 'score')
        data = this._scoreRankingData;
    else
        data = this._winningRankingData;
    if (this._topRankView == null) {
        this.showApiLoading();
        this._topRankView = new pigg.puzzle.view.TopRankView;
        this._topRankView.init(this, this._loadDataManager, data.rankingType);
        this._topRankView.onGetPuzzleRanking(this._scoreRankingData);
        this._topRankView.onGetPuzzleRanking(this._winningRankingData);
        this._container.addChild(this._topRankView)
    } else
        this._topRankView.show(rankType);
    this._isShowTopRanking = true;
    this._container.setChildIndex(this._topRankView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype.onGetUserRankingData = function(data, rankTypeCode) {
    this._userData.hasRanking = data.hasRanking;
    if (data.rankingStatus)
        this._userData.piggCode = data.rankingStatus.piggCode;
    this.traceLog('\u81ea\u5206\u306epiggCode::', this._userData.piggCode);
    this.traceLog('onGetUserRankingData', data.hasRanking, rankTypeCode);
    if (this._appType == 'mypage') {
        if (this._mypageRankingView == null) {
            this._mypageRankingView = new pigg.puzzle.view.UserRankingView;
            this._mypageRankingView.init(this, 'mypage')
        }
        this._mypageRankingView.setUserRankInfo(data, rankTypeCode)
    }
    if (this._eventRankingView == null) {
        this._eventRankingView = new pigg.puzzle.view.UserRankingView;
        this._eventRankingView.init(this, 'event')
    }
    this._eventRankingView.setUserRankInfo(data, rankTypeCode);
    if (rankTypeCode == 'winning_streak')
        this.hideApiLoading();
    if (this._isSendInitRankingData)
        if (rankTypeCode == 'score')
            this._loadDataManager.getRankingData('winning_streak');
        else {
            if (rankTypeCode == 'winning_streak') {
                this._isSendInitRankingData = false;
                this._isLoadedRankingData = true;
                if (this._appType == 'mypage') {
                    this.traceLog('\u3053\u3053\u3067initRankingContent');
                    this._mypageView.initRankingContent()
                }
                this.traceLog('\u3053\u3053\u3067Event::initRankingContent');
                if (this._eventView)
                    this._eventView.initRankingContent()
            }
        }
    else if (this._isSendUpdateRankingData)
        if (rankTypeCode == 'score')
            this._loadDataManager.getRankingData('winning_streak');
        else if (rankTypeCode == 'winning_streak') {
            this._isSendUpdateRankingData = false;
            if (this._topRankView) {
                this._topRankView.onGetPuzzleRanking(this._scoreRankingData);
                this._topRankView.onGetPuzzleRanking(this._winningRankingData)
            }
            if (this._openView == 'eventView')
                this.showEventView();
            this._openView = ''
        }
}
;
pigg.puzzle.view.MainView.prototype.setPuzzleData = function() {
    this.traceLog('\u3053\u3053\u3067\u304a\u306d\u304c\u3044\u30d1\u30cd\u30eb\u51fa\u3059')
}
;
pigg.puzzle.view.MainView.prototype.onGiveUp = function() {
    this._userData.eventWinningStreakCount = 0;
    this._gameView.onGiveUp()
}
;
pigg.puzzle.view.MainView.prototype.onProgress = function(data) {
    this.traceLog('onProgress');
    this._progressData = data;
    if (this._progressData.isThemeClear) {
        this.traceLog('onProgress::', this._progressData.roulettePieceCount, this._progressData.winningStreakPoint);
        this._isDuringRoulette = this._progressData.isStartRoulette;
        this._userData.isDuringRoulette = this._progressData.isStartRoulette;
        this._userData.missionPoint = this._progressData.roulettePieceCount;
        this._totalMissionPieceCount = this._progressData.roulettePieceCount;
        this._userData.eventWinningStreakCount = this._progressData.winningStreakCount
    }
    this._gameView.onProgress(data);
    this._infoView.onProgress(data)
}
;
pigg.puzzle.view.MainView.prototype.onEquipPuzzleScoreItem = function() {
    this.traceLog('onEquipPuzzleScoreItem::', this._userData, this._userData.equippedScoreItemCategory);
    if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_3)
        this._currentUsePotion = 0;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_5)
        this._currentUsePotion = 1;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_10)
        this._currentUsePotion = 2;
    else if (this._userData.equippedScoreItemCategory == pigg.puzzle.view.CommonView.SCORE_ITEM_20)
        this._currentUsePotion = 3;
    else
        this._currentUsePotion = -1;
    if (this._currentUsePotion != -1)
        this._userData.boardUsingPuzzleScoreItemMagnification = Number(pigg.puzzle.view.CommonView.POTION_MAGNIFICATION[this._currentUsePotion]);
    else
        this._userData.boardUsingPuzzleScoreItemMagnification = 0;
    this._infoView.onEquipPuzzleScoreItem()
}
;
pigg.puzzle.view.MainView.prototype.onFailedEquipPuzzleScoreItem = function() {
    this.traceLog('\u30a2\u30a4\u30c6\u30e0\u4e0d\u8db3\u306e\u305f\u3081\u30a2\u30e9\u30fc\u30c8\u51fa\u3059');
    this._infoView.onFailedEquipPuzzleScoreItem()
}
;
pigg.puzzle.view.MainView.prototype.onGetContinueInfo = function(data) {
    this._gameView.onGetContinueInfo(data)
}
;
pigg.puzzle.view.MainView.prototype.onContinue = function(data) {
    this._gameView.onContinue(data)
}
;
pigg.puzzle.view.MainView.prototype.onSetUserStatus = function(status) {
    this._isSendUserStatus = false;
    this.traceLog('onSetUserStatus::', status, this._userTutorialStatus, this._userTutorialStatus2nd);
    if (status == 'SUCCESS')
        if (this._userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
            ;
}
;
pigg.puzzle.view.MainView.prototype.onUseScoreItem = function(status) {
    this._gameView.onUseScoreItem(status)
}
;
pigg.puzzle.view.MainView.prototype.onUseCheatItem = function() {
    this._gameView.onUseCheatItem()
}
;
pigg.puzzle.view.MainView.prototype.onStopRoulette = function(data) {
    this.traceLog('onStopRoulette::');
    if (this._rouletteView)
        this._rouletteView.onStopRoulette(data)
}
;
pigg.puzzle.view.MainView.prototype.playPanelAnimal = function(type) {}
;
pigg.puzzle.view.MainView.prototype.playMapAnimalAction = function(code, index, loop) {}
;
pigg.puzzle.view.MainView.prototype.switchIncentiveMapPlayBtn = function(active) {
    active = typeof active !== 'undefined' ? active : true
}
;
pigg.puzzle.view.MainView.prototype.showStepClearIncentivePanel = function(special) {
    special = typeof special !== 'undefined' ? special : -1;
    this._infoView.showStepClearIncentive(special)
}
;
pigg.puzzle.view.MainView.prototype._hasNextIncentive = false;
pigg.puzzle.view.MainView.prototype.gotoNextStepIncentiveMap = function(isDescription, hasNextIncentive, hasTutorailEnd) {
    var self = this;
    isDescription = typeof isDescription !== 'undefined' ? isDescription : false;
    hasNextIncentive = typeof hasNextIncentive !== 'undefined' ? hasNextIncentive : false;
    hasTutorailEnd = typeof hasTutorailEnd !== 'undefined' ? hasTutorailEnd : false;
    var __localFn0__ = function() {
        self._loadDataManager.getBoardData()
    };
    this.traceLog('gotoNextStepIncentiveMap::_currentEventStep::', this._currentEventStep, this._isEventComplete, hasTutorailEnd);
    if (hasTutorailEnd) {
        this.showGameTutorialEnd(0, true);
        return
    }
    this._hasNextIncentive = hasNextIncentive;
    if (isDescription)
        return;
    if (this._currentEventStep < this._stepSize - 1)
        this._currentEventStep++;
    else if (pigg.puzzle.view.CommonView.EVENT_STEP_MAX > this._currentEventStep)
        this._currentEventStep++;
    this.traceLog('gotoNextStepIncentiveMap::_currentEventStep::', this._gameBgType, pigg.puzzle.view.CommonView.EVENT_STEP_MAX, this._currentEventStep, this._isEventComplete, this._stepSize);
    if (this._currentEventStep == pigg.puzzle.view.CommonView.EVENT_STEP_MAX)
        this._isEventComplete = true;
    if (this._isEventComplete)
        ;this.traceLog('\u30c1\u30a7\u30c3\u30af;\u4fee\u6b63', this._eventStepMissionEachPoint);
    this.traceLog('\u6b21\u306e\u6b8b\u308a\u30dd\u30a4\u30f3\u30c8::\u524d---_currentRemainEventStepPoint::CHANGE::_totalPoint\u4fee\u6b63', this._totalPoint, this._currentRemainEventStepPoint, this._eventStepMissionEachPoint[this._currentEventStep], this._currentEventStep);
    if (!this._isEventComplete) {
        this._carryOverScore = this._totalPoint - this._eventStepMissionPoint[this._currentEventStep - 1];
        this._currentRemainEventStepPoint = this._eventStepMissionEachPoint[this._currentEventStep] - this._carryOverScore
    }
    this.traceLog('\u6b21\u306e\u6b8b\u308a\u30dd\u30a4\u30f3\u30c8::\u5f8c---_currentRemainEventStepPoint::CHANGE', this._currentRemainEventStepPoint, this._eventStepMissionEachPoint[this._currentEventStep], this._currentEventStep);
    this.traceLog('\u6b21\u306e\u6b8b\u308a\u30dd\u30a4\u30f3\u30c8::---_currentRemainEventStepPoint::CHANGE', this._totalPoint, this._currentRemainEventStepPoint, this._eventStepMissionEachPoint[this._currentEventStep], this._currentEventStep);
    this.traceLog('_gameBgType::_currentEventStep + 1::', this._gameBgType, this._currentEventStep + 1);
    if (this._gameBgType != this._currentEventStep + 1) {
        this.showApiLoading();
        this._gotoNextFlg = true;
        this._gotoNextLoadedCnt = 0;
        this.setAnimationAnimal(this._currentEventStep);
        this.changeGameBg(this._currentEventStep + 1)
    } else {
        this.traceLog('\u5148\u884c\u304b\u3089\u5148\u7740\u306f\u6f14\u51fa\u7121\u3057');
        if (this._userData.hasLimitedQuantityIncentive) {
            this.traceLog('\u5148\u7740\u30af\u30ea\u30a2::');
            this.showEnding(true)
        } else
            com.greensock.TweenMax.to(this._gameBG, .2, {
                onComplete: __localFn0__
            })
    }
}
;
pigg.puzzle.view.MainView.prototype._gotoNextLoadedCnt = 0;
pigg.puzzle.view.MainView.prototype._gotoNextFlg = false;
pigg.puzzle.view.MainView.prototype._gotoNextContainer;
pigg.puzzle.view.MainView.prototype._gotoNextAnimalContainer;
pigg.puzzle.view.MainView.prototype._gotoNextHoContainer;
pigg.puzzle.view.MainView.prototype.onLoadCompleteGeToNext = function() {
    var self = this;
    var __localFn0__ = function() {
        self._spineHukurouQuarter.playAction('joy');
        self._spineAnimal.completeFunc = org.apache.royale.utils.Language.closure(self.gotoActionEnd, self, 'gotoActionEnd');
        self._spineAnimal.playAction('joy')
    };
    this.traceLog('onLoadCompleteGeToNext', this.isEventComplete);
    this.hideApiLoading();
    this._gotoNextLoadedCnt = 0;
    this._gotoNextFlg = false;
    if (this.isEventComplete) {
        this.traceLog('\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5168\u30b9\u30c6\u30c3\u30d7\u30af\u30ea\u30a2\u304a\u3081\u3067\u3068\u3046');
        this.showEnding();
        return
    }
    if (this._gotoNextContainer == null) {
        this._gotoNextContainer = new openfl.display.Sprite;
        this._gotoNextAnimalContainer = new openfl.display.Sprite;
        this._gotoNextHoContainer = new openfl.display.Sprite
    }
    this._container.addChild(this._gotoNextContainer);
    this._gotoNextContainer.addChild(this._gotoNextAnimalContainer);
    this._gotoNextContainer.addChild(this._gotoNextHoContainer);
    this.addSpine(this._spineHukurouQuarter, this._gotoNextHoContainer);
    this.addSpine(this._spineAnimal, this._gotoNextAnimalContainer);
    this._gotoNextHoContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    this._gotoNextAnimalContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    this._gotoNextHoContainer.x = -200;
    this._gotoNextAnimalContainer.scaleX = -1;
    this._gotoNextAnimalContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH + 200;
    this._spineHukurouQuarter.playAction('joy_fix');
    com.greensock.TweenMax.to(this._gotoNextHoContainer, .3, {
        x: 200,
        scaleX: 1.4,
        scaleY: 1.4,
        ease: com.greensock.easing.Cubic.easeOut
    });
    com.greensock.TweenMax.to(this._gotoNextAnimalContainer, .3, {
        x: pigg.puzzle.view.CommonView.STAGE_WIDTH - 200,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    });
    return
}
;
pigg.puzzle.view.MainView.prototype.showEnding = function(spc) {
    spc = typeof spc !== 'undefined' ? spc : false;
    if (this._tutorialGameView == null) {
        this._tutorialGameView = new pigg.puzzle.view.TutorialGameView;
        this._tutorialGameView.init(this);
        this._container.addChild(this._tutorialGameView)
    }
    this._tutorialGameView.mouseChildren = true;
    this._tutorialGameView.mouseEnabled = true;
    this.checkJoinSpecialChallenge();
    this._tutorialGameView.showAllStepClear(0, spc);
    this.traceLog('showEnding::_userData.hasLimitedTermIncentive::', this._userData.hasLimitedTermIncentive);
    this.traceLog('showEnding::_gameView.isGetLimitedTerm::', this._gameView.isGetLimitedTerm)
}
;
pigg.puzzle.view.MainView.prototype.gotoActionEnd = function(name) {
    var self = this;
    var __localFn0__ = function() {
        self.removeSpine(self._spineAnimal, self._gotoNextAnimalContainer);
        self.removeSpine(self._spineHukurouQuarter, self._gotoNextHoContainer);
        if (self._hasNextIncentive) {
            self.traceLog('\u7e70\u308a\u8d8a\u3057\u30a4\u30f3\u30bb\u30f3\u8868\u793a');
            self.showStepClearIncentivePanel()
        } else if (self._isLoadComplete)
            self._loadDataManager.getBoardData();
        else
            self._isWaitInitShowTheme = 1
    };
    this.traceLog('gotoActionEnd', name);
    if (name == 'joy') {
        com.greensock.TweenMax.to(this._gotoNextHoContainer, .3, {
            x: -200,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(this._gotoNextAnimalContainer, .3, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH + 200,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn0__
        });
        this._spineAnimal.completeFunc = null
    }
}
;
pigg.puzzle.view.MainView.prototype._currentAnimalStep = -1;
pigg.puzzle.view.MainView.prototype.setAnimationAnimal = function(step, target, container) {
    var self = this;
    step = typeof step !== 'undefined' ? step : 0;
    target = typeof target !== 'undefined' ? target : 0;
    container = typeof container !== 'undefined' ? container : null;
    var __localFn0__ = function() {
        self.traceLog('\u3053\u3053\u3067addSpine::_spineAnimalRankingScore', container);
        self.addSpine(self._spineAnimalRankingScore, container);
        self._spineAnimalRankingScore.onLoadCompleteFunc = null
    };
    var __localFn1__ = function() {
        self.traceLog('\u3053\u3053\u3067addSpine::_spineAnimalRankingWinning', container);
        self.addSpine(self._spineAnimalRankingWinning, container);
        self._spineAnimalRankingWinning.onLoadCompleteFunc = null
    };
    if (target == 0) {
        this.traceLog('setAnimationAnimal::', this._currentAnimalStep, step);
        if (this._currentAnimalStep == step)
            return;
        this._currentAnimalStep = step;
        if (this._spineAnimal) {
            this.removeFromParent(this._spineAnimal);
            this._spineAnimal.clean();
            this._spineAnimal = null
        }
        this._spineAnimal = new pigg.puzzle.view.SpineView(pigg.puzzle.view.CommonView.ANIMAL_CODE[this._currentAnimalStep]);
        this._spineAnimal.onLoadCompleteFunc = org.apache.royale.utils.Language.closure(this.addLoadedCnt, this, 'addLoadedCnt');
        if (this._appType == 'game' && this._currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX)
            this._gameView.updateTelopAnimal()
    } else if (target == 1) {
        if (this._spineAnimalRankingScore) {
            this.removeFromParent(this._spineAnimalRankingScore);
            this._spineAnimalRankingScore.clean();
            this._spineAnimalRankingScore = null
        }
        this._spineAnimalRankingScore = new pigg.puzzle.view.SpineView(pigg.puzzle.view.CommonView.ANIMAL_CODE[step]);
        if (container)
            this._spineAnimalRankingScore.onLoadCompleteFunc = __localFn0__
    } else if (target == 2) {
        if (this._spineAnimalRankingWinning) {
            this.removeFromParent(this._spineAnimalRankingWinning);
            this._spineAnimalRankingWinning.clean();
            this._spineAnimalRankingWinning = null
        }
        this._spineAnimalRankingWinning = new pigg.puzzle.view.SpineView(pigg.puzzle.view.CommonView.ANIMAL_CODE[step]);
        if (container)
            this._spineAnimalRankingWinning.onLoadCompleteFunc = __localFn1__
    }
}
;
pigg.puzzle.view.MainView.prototype.addSpine = function(spn, container) {
    this.traceLog('addSpine::', spn);
    if (spn == null)
        return;
    if (container == null)
        return;
    if (spn.parent == container)
        return;
    this.traceLog('addSpine::::::', container);
    this.removeFromParent(spn);
    spn.stopAction();
    container.addChild(spn)
}
;
pigg.puzzle.view.MainView.prototype.removeSpine = function(spn, container) {
    if (spn == null)
        return;
    if (container == null)
        return;
    if (spn.parent != container)
        return;
    this.removeFromParent(spn);
    spn.stopAction()
}
;
pigg.puzzle.view.MainView.prototype.setRequestGetConfStatus = function() {}
;
pigg.puzzle.view.MainView.prototype.endConfTimer = function(e) {
    this.traceLog('endConfTimer::', this._confStatusTimer);
    this._confStatusTimer.removeEventListener(openfl.events.TimerEvent.TIMER, org.apache.royale.utils.Language.closure(this.endConfTimer, this, 'endConfTimer'));
    this._confStatusTimer = null
}
;
pigg.puzzle.view.MainView.prototype.showTutorialMapRemain = function() {}
;
pigg.puzzle.view.MainView.prototype.endTutorialMapMotion = function() {}
;
pigg.puzzle.view.MainView.prototype.showEternalModeDescription = function() {}
;
pigg.puzzle.view.MainView.prototype.showSpecialChallengeDescription = function() {}
;
pigg.puzzle.view.MainView.prototype.show = function() {
    this._isActive = true;
    this.visible = true;
    this.scaleX = this.scaleY = 1;
    this._infoView.show();
    this.pauseTweenObj(false)
}
;
pigg.puzzle.view.MainView.prototype.hide = function() {}
;
pigg.puzzle.view.MainView.prototype.showLoading = function(reload) {
    reload = typeof reload !== 'undefined' ? reload : false
}
;
pigg.puzzle.view.MainView.prototype.hideLoading = function() {
    this._loadingView.hide()
}
;
pigg.puzzle.view.MainView.prototype.removeLoading = function() {
    this.removeFromParent(this._loadingView);
    this._loadingView.clean();
    this._loadingView = null
}
;
pigg.puzzle.view.MainView.prototype.showApiLoading = function(loadType) {
    loadType = typeof loadType !== 'undefined' ? loadType : 'api';
    this.traceLog('showApiLoading::', loadType);
    if (this._loadingView == null) {
        this._loadingView = new pigg.puzzle.view.LoadingView;
        this._loadingView.init(this)
    }
    this._loadingView.show(loadType);
    this._loadingContainer.addChild(this._loadingView)
}
;
pigg.puzzle.view.MainView.prototype.hideApiLoading = function(loadType) {
    loadType = typeof loadType !== 'undefined' ? loadType : 'api';
    this.traceLog('hideApiLoading::', loadType);
    if (this._loadingView == null)
        return;
    if (this._isReadyMypageBg)
        return;
    this._loadingView.hide(loadType)
}
;
pigg.puzzle.view.MainView.prototype.showRankingResultIncentive = function() {
    if (this._infoView == null) {
        this._infoView = new pigg.puzzle.view.InfoView;
        this._infoView.init(this);
        this._container.addChild(this._infoView);
        this._container.setChildIndex(this._tutorialMypageView, this._container.numChildren - 1)
    }
    this._infoView.showRankingIncentive()
}
;
pigg.puzzle.view.MainView.prototype.nextRankingResultDescription = function() {
    this._tutorialMypageView.nextRankingResultDescription()
}
;
pigg.puzzle.view.MainView.prototype.showStepTutorial = function() {}
;
pigg.puzzle.view.MainView.prototype.showRankingResultDescription = function() {
    this.traceLog('MainView::showRankingResultDescription');
    if (this._tutorialMypageView == null) {
        this._tutorialMypageView = new pigg.puzzle.view.TutorialMypageView;
        this._tutorialMypageView.init(this, 2);
        this._container.addChild(this._tutorialMypageView)
    } else
        this._tutorialMypageView.showRankingResultDescription()
}
;
pigg.puzzle.view.MainView.prototype.showThemePanel = function() {
    if (this._isLocal) {
        var boardStr;
        var boardCode;
        if (this._userData.equippedScoreItemCategory == '') {
            this._userData.isScoreItemUsing = false;
            this._currentUsePotion = -1
        } else
            ;if (this._userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4e2d\u306a\u306e\u3067\u76e4\u9762\u6307\u5b9a\u3067getPuzzle\u3059\u308b::', this._userTutorialStatus);
            boardStr = org.apache.royale.utils.Language.string(this.dummyTutorialThemeArray[this._userTutorialStatus - 1])
        } else if (this._userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2nd\u4e2d\u306a\u306e\u3067\u76e4\u9762\u6307\u5b9a\u3067getPuzzle\u3059\u308b::', this._userTutorialStatus2nd);
            boardStr = org.apache.royale.utils.Language.string(this.dummyTutorial2ndThemeArray[this._userTutorialStatus2nd])
        } else {
            boardStr = org.apache.royale.utils.Language.string(this.dummyThemeArray[this.sethemeId]);
            if (this.sethemeId < this.dummyThemeArray.length - 1)
                this.sethemeId++;
            else
                this.sethemeId = 0
        }
        this.traceLog('showThemePanel::', this._currentEventStep);
        this.setNextTheme(boardStr);
        this._infoView.showTheme();
        this._gameView.showTheme()
    } else {
        this.traceLog('showThemePanel::', this.userData, this.userData.boardBaseData);
        if (this.userData == null)
            return;
        if (this.userData.boardBaseData == '')
            return;
        this._saveBoardData = '';
        this._clearMoveTimes = 0;
        this.setNextTheme(this.userData.boardBaseData)
    }
}
;
pigg.puzzle.view.MainView.prototype.showInfoTheme = function() {
    this._infoView.showTheme();
    this._gameView.showTheme()
}
;
pigg.puzzle.view.MainView.prototype.showPanelAnimal = function(type, mode) {
    type = typeof type !== 'undefined' ? type : 1;
    mode = typeof mode !== 'undefined' ? mode : 0;
    this.traceLog('MAIN::showPanelAnimal', mode)
}
;
pigg.puzzle.view.MainView.prototype.changePanelAnimal = function(type) {
    type = typeof type !== 'undefined' ? type : 1;
    this.traceLog('MAIN::cahngePanelAnimal', type)
}
;
pigg.puzzle.view.MainView.prototype.hidePanelAnimal = function(type) {
    type = typeof type !== 'undefined' ? type : 1
}
;
pigg.puzzle.view.MainView.prototype.setNextTheme = function(boardBaseData, isLoad) {
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    this._gameView.setGameTheme(boardBaseData, isLoad)
}
;
pigg.puzzle.view.MainView.prototype.showGameView = function(animation) {
    animation = typeof animation !== 'undefined' ? animation : true;
    this._gameView.show(animation)
}
;
pigg.puzzle.view.MainView.prototype.showGameTelop = function(type) {
    this._gameView.showGameTelop(type)
}
;
pigg.puzzle.view.MainView.prototype.applyMask = function(isSet) {
    isSet = typeof isSet !== 'undefined' ? isSet : true;
    this.traceLog('applyMask::', isSet, this._isMask);
    if (isSet && !this._isMask) {
        this._baseMask = new openfl.display.Sprite;
        this.makeBaseMask(this._baseMask);
        this.addChild(this._baseMask);
        this.mask = this._baseMask;
        this._baseMask.x = this.x;
        this._baseMask.y = this.y;
        this._isMask = true
    } else if (!isSet && this._isMask) {
        this.removeChild(this._baseMask);
        this.mask = null;
        this._baseMask = null;
        this._isMask = false
    }
}
;
pigg.puzzle.view.MainView.prototype.stackTweenObj = function(targetArray, reset) {
    reset = typeof reset !== 'undefined' ? reset : false;
    if (reset) {
        this._tweenObjects = org.apache.royale.utils.Language.Vector();
        this.traceLog('stackTweenObj::\u521d\u671f\u5316::');
        return
    }
    var cnt = 0
      , len = 0;
    len = targetArray.length;
    for (cnt = 0; cnt < len; cnt++) {
        if (this._tweenObjects.indexOf(targetArray[cnt]) != -1)
            continue;
        this._tweenObjects.push(targetArray[cnt])
    }
}
;
pigg.puzzle.view.MainView.prototype.pauseTweenObj = function(type) {
    if (this._isTweenPause == type)
        return;
    this._isTweenPause = type;
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    if (this._tweenObjects == null)
        return;
    len = this._tweenObjects.length;
    var tArray;
    for (cnt = 0; cnt < len; cnt++) {
        tArray = com.greensock.TweenMax.getTweensOf(this._tweenObjects[cnt]);
        if (tArray && tArray.length > 0) {
            len2 = tArray.length;
            for (cnt2 = 0; cnt2 < len2; cnt2++)
                if (this._isTweenPause)
                    tArray[cnt2].pause();
                else
                    tArray[cnt2].resume()
        }
    }
}
;
pigg.puzzle.view.MainView.prototype.killTweenObj = function() {
    var cnt = 0
      , len = 0;
    if (this._tweenObjects == null)
        return;
    len = this._tweenObjects.length;
    var tArray;
    for (cnt = 0; cnt < len; cnt++)
        com.greensock.TweenMax.killTweensOf(this._tweenObjects[cnt]);
    this._tweenObjects = null
}
;
pigg.puzzle.view.MainView.prototype.switchSoundMode = function(mode) {}
;
pigg.puzzle.view.MainView.prototype.showInfoTutorialMapItemBalloon = function(show) {
    show = typeof show !== 'undefined' ? show : true
}
;
pigg.puzzle.view.MainView.prototype.onGetAvatarViewList = function(defineAvatarList) {}
;
pigg.puzzle.view.MainView.prototype.showRoulette = function() {
    this.traceLog('showRoulette');
    if (this._rouletteView == null) {
        this.showApiLoading();
        this._rouletteView = new pigg.puzzle.view.RouletteView;
        this._rouletteView.init(this);
        this._container.addChild(this._rouletteView)
    } else
        this._rouletteView.show()
}
;
pigg.puzzle.view.MainView.prototype.hideRoulette = function() {
    this.traceLog('hideRoulette');
    if (this._appType == 'game')
        if (this._isWaitShowTheme == 0)
            this.showThemePanel();
        else if (this._isWaitShowTheme == 1)
            this._loadDataManager.getBoardData();
        else
            this._gameView.hideRoulette();
    else if (this._appType == 'mypage')
        ;this._isDuringRoulette = false;
    this._userData.isDuringRoulette = false;
    this._isWaitShowTheme = -1
}
;
pigg.puzzle.view.MainView.prototype.onPlayPuzzle = function() {
    this.traceLog('MainView::OnPlayPuzzle');
    this._infoView.onPlayPuzzle();
    this._userData.boardRemainingMoveCount = this._clearMoveTimes;
    this.traceLog('MainView::OnPlayPuzzle', this._userData.boardRemainingMoveCount, this._clearMoveTimes);
    if (this._currentUsePotion != -1)
        this._userData.boardUsingPuzzleScoreItemMagnification = Number(pigg.puzzle.view.CommonView.POTION_MAGNIFICATION[this._currentUsePotion]);
    else
        this._userData.boardUsingPuzzleScoreItemMagnification = 0
}
;
pigg.puzzle.view.MainView.prototype.onGetBoardData = function() {
    this.traceLog('MainView::onGetBoardData::\u304a\u306d\u304c\u3044\u30d1\u30cd\u30eb\u8868\u793a');
    this.showThemePanel();
    if (this._userData.equippedScoreItemCategory == '') {
        this._userData.isScoreItemUsing = false;
        this._currentUsePotion = -1
    }
}
;
pigg.puzzle.view.MainView.prototype.showMenu = function() {
    if (this._menuView == null)
        if (this._menuPartsTileset == null) {
            this.showApiLoading();
            this._menuPartsTileset = new openfl.display.Tileset(null);
            this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_COMMON_MENU_PARTS), 'menuPartsSheet', org.apache.royale.utils.Language.closure(this.onloadTilesetPng, this, 'onloadTilesetPng'))
        } else {
            this._menuView = new pigg.puzzle.view.MenuView;
            this._menuView.init(this, this._loadDataManager);
            this._container.addChild(this._menuView);
            this.hideApiLoading()
        }
    else
        this._menuView.show()
}
;
pigg.puzzle.view.MainView.prototype.showConfirmRetire = function() {
    this._gameView.showConfirmRetire()
}
;
pigg.puzzle.view.MainView.prototype.showUserItem = function() {
    this.traceLog('showUserItem');
    if (this._userItemView == null) {
        this._userItemView = new pigg.puzzle.view.UserItemView;
        this._userItemView.init(this, this._loadDataManager);
        this._container.addChild(this._userItemView)
    }
    this._userItemView.show()
}
;
pigg.puzzle.view.MainView.prototype.showHowToPlay = function() {
    this.traceLog('showHowToPlay');
    if (this._howToPlayView == null) {
        this._howToPlayView = new pigg.puzzle.view.HowToPlayView;
        this._howToPlayView.init(this);
        this._container.addChild(this._howToPlayView)
    } else
        this._howToPlayView.show()
}
;
pigg.puzzle.view.MainView.prototype.hideGameBgBlack = function(tween) {
    tween = typeof tween !== 'undefined' ? tween : true;
    if (this._gameView == null)
        return;
    this._gameView.hideBgBlack()
}
;
pigg.puzzle.view.MainView.prototype.showOpenShopAlert = function() {
    if (this._alertView == null)
        this.initAlertView();
    this.traceLog('showOpenShopAlert');
    this._alertView.showOpenShopAlert();
    this._container.setChildIndex(this._alertView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype.showAlertItemShortage = function() {
    if (this._alertView == null)
        this.initAlertView();
    this.traceLog('showAlertItemShortage');
    this._alertView.showAlertItemShortage();
    this._container.setChildIndex(this._alertView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype.showAlertReload = function(str) {
    if (this._alertView == null)
        this.initAlertView();
    this.traceLog('showAlertReload');
    this._alertView.showAlertReload(str);
    this.removeFromParent(this._alertView);
    this.addChild(this._alertView)
}
;
pigg.puzzle.view.MainView.prototype.showAlertMoveUserPage = function(nickname, targetId) {
    if (this._alertView == null)
        this.initAlertView();
    this.traceLog('showAlertMoveUserPage');
    this._alertView.showMoveUserPageAlert(nickname, targetId);
    this._container.setChildIndex(this._alertView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype.showSoundAnnounce = function() {
    if (this._alertView == null)
        this.initAlertView();
    this.traceLog('showSoundAnnounce');
    this._alertView.showSoundAnnounce();
    this._container.setChildIndex(this._alertView, this._container.numChildren - 1)
}
;
pigg.puzzle.view.MainView.prototype.initAlertView = function() {
    this._alertView = new pigg.puzzle.view.AlertView;
    this._alertView.init(this);
    this._container.addChild(this._alertView)
}
;
pigg.puzzle.view.MainView.prototype.switchLowSpecMode = function(type) {
    this._isLowSpecMode = type;
    if (this._isLowSpecMode) {
        this._stage.frameRate = 60;
        this.stage.quality = openfl.display.StageQuality.LOW;
        if (this._userSpStatus != 2) {
            this._isSendUserStatus = true;
            this._userSpStatus = 2;
            this._loadDataManager.setUserStatus(String(this._userTutorialStatus) + ',' + this._userEventStatus + ',' + this._userTutorialStatus2nd + ',' + this._userTutorialStatusTemp + ',' + this._userSpStatus)
        }
    } else {
        this._stage.frameRate = 60;
        this.stage.quality = openfl.display.StageQuality.HIGH;
        if (this._userSpStatus != 1) {
            this._isSendUserStatus = true;
            this._userSpStatus = 1;
            this._loadDataManager.setUserStatus(String(this._userTutorialStatus) + ',' + this._userEventStatus + ',' + this._userTutorialStatus2nd + ',' + this._userTutorialStatusTemp + ',' + this._userSpStatus)
        }
    }
    if (this._appType == 'game')
        this._gameView.changeSpecMode()
}
;
pigg.puzzle.view.MainView.prototype.showTutotiralIncentive = function() {
    this._mypageView.showTutotiralIncentive()
}
;
pigg.puzzle.view.MainView.prototype.showMypagePlayButton = function() {
    this._mypageView.showPlayButton()
}
;
pigg.puzzle.view.MainView.prototype.showOutOfTerm = function() {
    this._mypageView.showOutOfTerm()
}
;
pigg.puzzle.view.MainView.prototype._updateEventDataLastTime = 0;
pigg.puzzle.view.MainView.prototype._updateBufferTime = 12E4;
pigg.puzzle.view.MainView.prototype.updateEventData = function(force) {
    force = typeof force !== 'undefined' ? force : true;
    var now = (new Date).getTime();
    this.traceLog('updateEventData::::', now - this._updateEventDataLastTime);
    if (!force)
        if (this._updateEventDataLastTime + this._updateBufferTime > now) {
            this.traceLog('\u4e8c\u5206\u7d4c\u3063\u3066\u306a\u304b\u3063\u305f\u3089\u66f4\u65b0\u3057\u306a\u3044');
            return
        }
    this._updateEventDataLastTime = now;
    this.traceLog('updateEventData::\u4e8c\u5206\u7d4c\u3063\u305f or force');
    this._loadDataManager.getEventData()
}
;
pigg.puzzle.view.MainView.prototype.get__eventData = function() {
    return this._eventData
}
;
pigg.puzzle.view.MainView.prototype.set__eventData = function(v) {
    this._eventData = v
}
;
pigg.puzzle.view.MainView.prototype.get__userData = function() {
    return this._userData
}
;
pigg.puzzle.view.MainView.prototype.set__userData = function(v) {
    this._userData = v
}
;
pigg.puzzle.view.MainView.prototype.get__fontWin8 = function() {
    return this._fontWin8
}
;
pigg.puzzle.view.MainView.prototype.get__isLocal = function() {
    return this._isLocal
}
;
pigg.puzzle.view.MainView.prototype.get__currentThemeType = function() {
    return this._currentThemeType
}
;
pigg.puzzle.view.MainView.prototype.set__currentThemeType = function(v) {
    this._currentThemeType = v
}
;
pigg.puzzle.view.MainView.prototype.get__carryOverScore = function() {
    return this._carryOverScore
}
;
pigg.puzzle.view.MainView.prototype.set__carryOverScore = function(v) {
    this._carryOverScore = v
}
;
pigg.puzzle.view.MainView.prototype.get__keepClearCount = function() {
    return this._keepClearCount
}
;
pigg.puzzle.view.MainView.prototype.set__keepClearCount = function(v) {
    this._keepClearCount = v
}
;
pigg.puzzle.view.MainView.prototype.get__currentEventStep = function() {
    return this._currentEventStep
}
;
pigg.puzzle.view.MainView.prototype.set__currentEventStep = function(v) {
    this._currentEventStep = v
}
;
pigg.puzzle.view.MainView.prototype.get__eventStepMissionEachPoint = function() {
    return this._eventStepMissionEachPoint
}
;
pigg.puzzle.view.MainView.prototype.get__currentRemainEventStepPoint = function() {
    return this._currentRemainEventStepPoint
}
;
pigg.puzzle.view.MainView.prototype.set__currentRemainEventStepPoint = function(v) {
    this._currentRemainEventStepPoint = v
}
;
pigg.puzzle.view.MainView.prototype.get__totalPoint = function() {
    return this._totalPoint
}
;
pigg.puzzle.view.MainView.prototype.set__totalPoint = function(v) {
    this._totalPoint = v
}
;
pigg.puzzle.view.MainView.prototype.get__eventStepMissionPoint = function() {
    return this._eventStepMissionPoint
}
;
pigg.puzzle.view.MainView.prototype.get__serverTime = function() {
    return this._serverTime
}
;
pigg.puzzle.view.MainView.prototype.get__currentRemainLimitedQuantityPoint = function() {
    return this._currentRemainLimitedQuantityPoint
}
;
pigg.puzzle.view.MainView.prototype.set__currentRemainLimitedQuantityPoint = function(v) {
    this._currentRemainLimitedQuantityPoint = v
}
;
pigg.puzzle.view.MainView.prototype.get__currentRemainLimitedTermPoint = function() {
    return this._currentRemainLimitedTermPoint
}
;
pigg.puzzle.view.MainView.prototype.set__currentRemainLimitedTermPoint = function(v) {
    this._currentRemainLimitedTermPoint = v
}
;
pigg.puzzle.view.MainView.prototype.get__isJoinSpecialChallenge = function() {
    return this._isJoinSpecialChallenge
}
;
pigg.puzzle.view.MainView.prototype.set__isJoinSpecialChallenge = function(v) {
    this._isJoinSpecialChallenge = v
}
;
pigg.puzzle.view.MainView.prototype.get__specialChallengeExist = function() {
    return this._specialChallengeExist
}
;
pigg.puzzle.view.MainView.prototype.set__specialChallengeExist = function(v) {
    this._specialChallengeExist = v
}
;
pigg.puzzle.view.MainView.prototype.get__specialCarryOberExist = function() {
    return this._specialCarryOberExist
}
;
pigg.puzzle.view.MainView.prototype.get__existThemeSilver = function() {
    return this._existThemeSilver
}
;
pigg.puzzle.view.MainView.prototype.set__existThemeSilver = function(v) {
    this._existThemeSilver = v
}
;
pigg.puzzle.view.MainView.prototype.get__existThemeGold = function() {
    return this._existThemeGold
}
;
pigg.puzzle.view.MainView.prototype.set__existThemeGold = function(v) {
    this._existThemeGold = v
}
;
pigg.puzzle.view.MainView.prototype.get__isParticle = function() {
    return this._isParticle
}
;
pigg.puzzle.view.MainView.prototype.get__userTutorialStatus = function() {
    return this._userTutorialStatus
}
;
pigg.puzzle.view.MainView.prototype.set__userTutorialStatus = function(v) {
    this._userTutorialStatus = v
}
;
pigg.puzzle.view.MainView.prototype.get__userTutorialStatus2nd = function() {
    return this._userTutorialStatus2nd
}
;
pigg.puzzle.view.MainView.prototype.set__userTutorialStatus2nd = function(v) {
    this._userTutorialStatus2nd = v
}
;
pigg.puzzle.view.MainView.prototype.get__userTutorialStatusTemp = function() {
    return this._userTutorialStatusTemp
}
;
pigg.puzzle.view.MainView.prototype.set__userTutorialStatusTemp = function(v) {
    this._userTutorialStatusTemp = v
}
;
pigg.puzzle.view.MainView.prototype.get__userSpStatus = function() {
    return this._userSpStatus
}
;
pigg.puzzle.view.MainView.prototype.set__userSpStatus = function(v) {
    this._userSpStatus = v
}
;
pigg.puzzle.view.MainView.prototype.get__userEventStatus = function() {
    return this._userEventStatus
}
;
pigg.puzzle.view.MainView.prototype.set__userEventStatus = function(v) {
    this._userEventStatus = v
}
;
pigg.puzzle.view.MainView.prototype.get__sceneCurrent = function() {
    return this._sceneCurrent
}
;
pigg.puzzle.view.MainView.prototype.set__sceneCurrent = function(v) {
    this._sceneCurrent = v
}
;
pigg.puzzle.view.MainView.prototype.get__isMask = function() {
    return this._isMask
}
;
pigg.puzzle.view.MainView.prototype.get__potionItemCount = function() {
    return this._potionItemCount
}
;
pigg.puzzle.view.MainView.prototype.set__potionItemCount = function(v) {
    this._potionItemCount = v
}
;
pigg.puzzle.view.MainView.prototype.get__currentUsePotion = function() {
    return this._currentUsePotion
}
;
pigg.puzzle.view.MainView.prototype.set__currentUsePotion = function(v) {
    this._currentUsePotion = v
}
;
pigg.puzzle.view.MainView.prototype.get__cheatItemCount = function() {
    return this._cheatItemCount
}
;
pigg.puzzle.view.MainView.prototype.set__cheatItemCount = function(v) {
    this._cheatItemCount = v
}
;
pigg.puzzle.view.MainView.prototype.get__currentSoundType = function() {
    return this._currentSoundType
}
;
pigg.puzzle.view.MainView.prototype.get__isOpenTheme = function() {
    return this._isOpenTheme
}
;
pigg.puzzle.view.MainView.prototype.set__isOpenTheme = function(v) {
    this._isOpenTheme = v
}
;
pigg.puzzle.view.MainView.prototype.get__diffMouse = function() {
    return this._diffMouse
}
;
pigg.puzzle.view.MainView.prototype.get__clearMoveTimes = function() {
    return this._clearMoveTimes
}
;
pigg.puzzle.view.MainView.prototype.set__clearMoveTimes = function(v) {
    this._clearMoveTimes = v
}
;
pigg.puzzle.view.MainView.prototype.get__isEventComplete = function() {
    return this._isEventComplete
}
;
pigg.puzzle.view.MainView.prototype.set__isEventComplete = function(v) {
    this._isEventComplete = v
}
;
pigg.puzzle.view.MainView.prototype.get__enableScoreItem = function() {
    return this._enableScoreItem
}
;
pigg.puzzle.view.MainView.prototype.get__saveBoardData = function() {
    return this._saveBoardData
}
;
pigg.puzzle.view.MainView.prototype.set__saveBoardData = function(v) {
    this._saveBoardData = v
}
;
pigg.puzzle.view.MainView.prototype.get__isSoundOn = function() {
    return this._isSoundOn
}
;
pigg.puzzle.view.MainView.prototype.set__isSoundOn = function(v) {
    this._isSoundOn = v
}
;
pigg.puzzle.view.MainView.prototype.get__confStatus = function() {
    return this._confStatus
}
;
pigg.puzzle.view.MainView.prototype.get__isGameTutorial = function() {
    return this._isGameTutorial
}
;
pigg.puzzle.view.MainView.prototype.get__isActive = function() {
    return this._isActive
}
;
pigg.puzzle.view.MainView.prototype.set__isActive = function(v) {
    this._isActive = v
}
;
pigg.puzzle.view.MainView.prototype.get__isBoardMoved = function() {
    return this._isBoardMoved
}
;
pigg.puzzle.view.MainView.prototype.get__existMission = function() {
    return this._existMission
}
;
pigg.puzzle.view.MainView.prototype.set__existMission = function(v) {
    this._existMission = v
}
;
pigg.puzzle.view.MainView.prototype.get__totalMissionPieceCount = function() {
    return this._totalMissionPieceCount
}
;
pigg.puzzle.view.MainView.prototype.set__totalMissionPieceCount = function(v) {
    this._totalMissionPieceCount = v
}
;
pigg.puzzle.view.MainView.prototype.get__missionRequiredPoint = function() {
    return this._missionRequiredPoint
}
;
pigg.puzzle.view.MainView.prototype.set__missionRequiredPoint = function(v) {
    this._missionRequiredPoint = v
}
;
pigg.puzzle.view.MainView.prototype.get__isDuringRoulette = function() {
    return this._isDuringRoulette
}
;
pigg.puzzle.view.MainView.prototype.set__isDuringRoulette = function(v) {
    this._isDuringRoulette = v
}
;
pigg.puzzle.view.MainView.prototype.get__existMissionMessage = function() {
    return this._existMissionMassge
}
;
pigg.puzzle.view.MainView.prototype.set__existMissionMessage = function(v) {
    this._existMissionMassge = v
}
;
pigg.puzzle.view.MainView.prototype.get__statusT = function() {
    return this._statusT
}
;
pigg.puzzle.view.MainView.prototype.set__statusT = function(v) {
    this._statusT = v
}
;
pigg.puzzle.view.MainView.prototype.get__statusT2 = function() {
    return this._statusT2
}
;
pigg.puzzle.view.MainView.prototype.set__statusT2 = function(v) {
    this._statusT2 = v
}
;
pigg.puzzle.view.MainView.prototype.get__statusT3 = function() {
    return this._statusT3
}
;
pigg.puzzle.view.MainView.prototype.set__statusT3 = function(v) {
    this._statusT3 = v
}
;
pigg.puzzle.view.MainView.prototype.get__isSendEquip = function() {
    return this._isSendEquip
}
;
pigg.puzzle.view.MainView.prototype.set__isSendEquip = function(v) {
    this._isSendEquip = v
}
;
pigg.puzzle.view.MainView.prototype.get__localType = function() {
    return this._localType
}
;
pigg.puzzle.view.MainView.prototype.get__localTutorial = function() {
    return this._localTutorial
}
;
pigg.puzzle.view.MainView.prototype.get__localRankingType = function() {
    return this._localRankingType
}
;
pigg.puzzle.view.MainView.prototype.get__localLimitedType = function() {
    return this._localLimitedType
}
;
pigg.puzzle.view.MainView.prototype.get__localAnnounceType = function() {
    return this._localAnnounceType
}
;
pigg.puzzle.view.MainView.prototype.get__isLowSpecMode = function() {
    return this._isLowSpecMode
}
;
pigg.puzzle.view.MainView.prototype.set__isLowSpecMode = function(v) {
    this._isLowSpecMode = v
}
;
pigg.puzzle.view.MainView.prototype.get__existRanking = function() {
    return this._existRanking
}
;
pigg.puzzle.view.MainView.prototype.set__existRanking = function(v) {
    this._existRanking = v
}
;
pigg.puzzle.view.MainView.prototype.get__rankingInvisible = function() {
    return this._rankingInvisible
}
;
pigg.puzzle.view.MainView.prototype.get__continueSaleExist = function() {
    return this._continueSaleExist
}
;
pigg.puzzle.view.MainView.prototype.get__continueSale = function() {
    return this._continueSale
}
;
pigg.puzzle.view.MainView.prototype.set__continueSale = function(v) {
    this._continueSale = v
}
;
pigg.puzzle.view.MainView.prototype.get__continuePrice = function() {
    return this._continuePrice
}
;
pigg.puzzle.view.MainView.prototype.set__continuePrice = function(v) {
    this._continuePrice = v
}
;
pigg.puzzle.view.MainView.prototype.get__itemPartsTileset = function() {
    return this._itemPartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__gamePartsTileset = function() {
    return this._gamePartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__gamePieceTileset = function() {
    return this._gamePieceTileset
}
;
pigg.puzzle.view.MainView.prototype.get__gamePanelTileset = function() {
    return this._gamePanelTileset
}
;
pigg.puzzle.view.MainView.prototype.get__commonPartsTileset = function() {
    return this._commonPartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__particleTileset = function() {
    return this._particleTileset
}
;
pigg.puzzle.view.MainView.prototype.set__particleTileset = function(v) {
    this._particleTileset = v
}
;
pigg.puzzle.view.MainView.prototype.get__mypagePartsTileset = function() {
    return this._mypagePartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__menuPartsTileset = function() {
    return this._menuPartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__rankingPartsTileset = function() {
    return this._rankingPartsTileset
}
;
pigg.puzzle.view.MainView.prototype.get__spineAnimal = function() {
    return this._spineAnimal
}
;
pigg.puzzle.view.MainView.prototype.get__spineHukurouFront = function() {
    return this._spineHukurouFront
}
;
pigg.puzzle.view.MainView.prototype.get__spineHukurouQuarter = function() {
    return this._spineHukurouQuarter
}
;
pigg.puzzle.view.MainView.prototype.get__spineAnimalRankingScore = function() {
    return this._spineAnimalRankingScore
}
;
pigg.puzzle.view.MainView.prototype.get__spineAnimalRankingWinning = function() {
    return this._spineAnimalRankingWinning
}
;
pigg.puzzle.view.MainView.prototype.set__isStepClear = function(v) {
    this._isStepClear = v
}
;
pigg.puzzle.view.MainView.prototype.set__loadingHint = function(v) {
    this._loadingHint = v
}
;
pigg.puzzle.view.MainView.prototype.get__mainX = function() {
    return this._mainX
}
;
pigg.puzzle.view.MainView.prototype.set__mainX = function(v) {
    this._mainX = v
}
;
pigg.puzzle.view.MainView.prototype.get__mainY = function() {
    return this._mainY
}
;
pigg.puzzle.view.MainView.prototype.set__mainY = function(v) {
    this._mainY = v
}
;
pigg.puzzle.view.MainView.prototype.get__userCode = function() {
    return this._userCode
}
;
pigg.puzzle.view.MainView.prototype.set__userCode = function(v) {
    this._userCode = v
}
;
pigg.puzzle.view.MainView.prototype.get__isShowTopRanking = function() {
    return this._isShowTopRanking
}
;
pigg.puzzle.view.MainView.prototype.set__isShowTopRanking = function(v) {
    this._isShowTopRanking = v
}
;
pigg.puzzle.view.MainView.prototype.get__isShowEventView = function() {
    return this._isShowEventView
}
;
pigg.puzzle.view.MainView.prototype.set__isShowEventView = function(v) {
    this._isShowEventView = v
}
;
pigg.puzzle.view.MainView.prototype.get__isShowTheme = function() {
    return this._isShowTheme
}
;
pigg.puzzle.view.MainView.prototype.set__isShowTheme = function(v) {
    this._isShowTheme = v
}
;
pigg.puzzle.view.MainView.prototype.get__isShowGameTutorial = function() {
    return this._isShowGameTutorial
}
;
pigg.puzzle.view.MainView.prototype.set__isShowGameTutorial = function(v) {
    this._isShowGameTutorial = v
}
;
pigg.puzzle.view.MainView.prototype.get__appType = function() {
    return this._appType
}
;
pigg.puzzle.view.MainView.prototype.get__debugType = function() {
    return this._debugType
}
;
pigg.puzzle.view.MainView.prototype.get__isShowGame = function() {
    return this._isShowGame
}
;
pigg.puzzle.view.MainView.prototype.set__isShowGame = function(v) {
    this._isShowGame = v
}
;
pigg.puzzle.view.MainView.prototype.get__isEnterFrameAnimation = function() {
    return this._isEnterFrameAnimation
}
;
pigg.puzzle.view.MainView.prototype.set__isEnterFrameAnimation = function(v) {
    this._isEnterFrameAnimation = v
}
;
pigg.puzzle.view.MainView.prototype.get__isMypageTutorial = function() {
    return this._isMypageTutorial
}
;
pigg.puzzle.view.MainView.prototype.set__isMypageTutorial = function(v) {
    this._isMypageTutorial = v
}
;
pigg.puzzle.view.MainView.prototype.get__mypageRankingView = function() {
    return this._mypageRankingView
}
;
pigg.puzzle.view.MainView.prototype.get__eventRankingView = function() {
    return this._eventRankingView
}
;
pigg.puzzle.view.MainView.prototype.get__rankingIncentiveView = function() {
    return this._rankingIncentiveView
}
;
pigg.puzzle.view.MainView.prototype.get__currentScoreAward = function() {
    return this._currentScoreAward
}
;
pigg.puzzle.view.MainView.prototype.set__currentScoreAward = function(v) {
    this._currentScoreAward = v
}
;
pigg.puzzle.view.MainView.prototype.get__currentWinningAward = function() {
    return this._currentWinningAward
}
;
pigg.puzzle.view.MainView.prototype.set__currentWinningAward = function(v) {
    this._currentWinningAward = v
}
;
pigg.puzzle.view.MainView.prototype.get__scoreRankingData = function() {
    return this._scoreRankingData
}
;
pigg.puzzle.view.MainView.prototype.set__scoreRankingData = function(v) {
    this._scoreRankingData = v
}
;
pigg.puzzle.view.MainView.prototype.get__winningRankingData = function() {
    return this._winningRankingData
}
;
pigg.puzzle.view.MainView.prototype.set__winningRankingData = function(v) {
    this._winningRankingData = v
}
;
pigg.puzzle.view.MainView.prototype.get__hasRankingIncentive = function() {
    return this._hasRankingIncentive
}
;
pigg.puzzle.view.MainView.prototype.set__hasRankingIncentive = function(v) {
    this._hasRankingIncentive = v
}
;
pigg.puzzle.view.MainView.prototype.get__openData = function() {
    return this._openData
}
;
pigg.puzzle.view.MainView.prototype.set__openData = function(v) {
    this._openData = v
}
;
pigg.puzzle.view.MainView.prototype.get__checkUpdateUserItem = function() {
    return this._checkUpdateUserItem
}
;
pigg.puzzle.view.MainView.prototype.set__checkUpdateUserItem = function(v) {
    this._checkUpdateUserItem = v
}
;
pigg.puzzle.view.MainView.prototype.get__isSendUserStatus = function() {
    return this._isSendUserStatus
}
;
pigg.puzzle.view.MainView.prototype.set__isSendUserStatus = function(v) {
    this._isSendUserStatus = v
}
;
pigg.puzzle.view.MainView.prototype.get__isSendGetEventData = function() {
    return this._isSendGetEventData
}
;
pigg.puzzle.view.MainView.prototype.set__isSendGetEventData = function(v) {
    this._isSendGetEventData = v
}
;
pigg.puzzle.view.MainView.prototype.get__soundMap = function() {
    return this._soundMap
}
;
pigg.puzzle.view.MainView.prototype.set__soundMap = function(v) {
    this._soundMap = v
}
;
pigg.puzzle.view.MainView.prototype.get__waitBgm = function() {
    return this._waitBgm
}
;
pigg.puzzle.view.MainView.prototype.set__waitBgm = function(v) {
    this._waitBgm = v
}
;
pigg.puzzle.view.MainView.prototype.get__soundLoaded = function() {
    return this._soundLoaded
}
;
pigg.puzzle.view.MainView.prototype.set__soundLoaded = function(v) {
    this._soundLoaded = v
}
;
pigg.puzzle.view.MainView.prototype.get__fps = function() {
    return this._fps
}
;
pigg.puzzle.view.MainView.prototype.get__isSoundLoadBySwitch = function() {
    return this._isSoundLoadBySwitch
}
;
pigg.puzzle.view.MainView.prototype.set__isSoundLoadBySwitch = function(v) {
    this._isSoundLoadBySwitch = v
}
;
pigg.puzzle.view.MainView.prototype.get__soundRelease = function() {
    return this._soundRelease
}
;
pigg.puzzle.view.MainView.prototype.set__soundRelease = function(v) {
    this._soundRelease = v
}
;
pigg.puzzle.view.MainView.prototype.get__loadDataManager = function() {
    return this._loadDataManager
}
;
Object.defineProperties(pigg.puzzle.view.MainView.prototype, {
    eventData: {
        get: pigg.puzzle.view.MainView.prototype.get__eventData,
        set: pigg.puzzle.view.MainView.prototype.set__eventData
    },
    userData: {
        get: pigg.puzzle.view.MainView.prototype.get__userData,
        set: pigg.puzzle.view.MainView.prototype.set__userData
    },
    fontWin8: {
        get: pigg.puzzle.view.MainView.prototype.get__fontWin8
    },
    isLocal: {
        get: pigg.puzzle.view.MainView.prototype.get__isLocal
    },
    currentThemeType: {
        get: pigg.puzzle.view.MainView.prototype.get__currentThemeType,
        set: pigg.puzzle.view.MainView.prototype.set__currentThemeType
    },
    carryOverScore: {
        get: pigg.puzzle.view.MainView.prototype.get__carryOverScore,
        set: pigg.puzzle.view.MainView.prototype.set__carryOverScore
    },
    keepClearCount: {
        get: pigg.puzzle.view.MainView.prototype.get__keepClearCount,
        set: pigg.puzzle.view.MainView.prototype.set__keepClearCount
    },
    currentEventStep: {
        get: pigg.puzzle.view.MainView.prototype.get__currentEventStep,
        set: pigg.puzzle.view.MainView.prototype.set__currentEventStep
    },
    eventStepMissionEachPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__eventStepMissionEachPoint
    },
    currentRemainEventStepPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__currentRemainEventStepPoint,
        set: pigg.puzzle.view.MainView.prototype.set__currentRemainEventStepPoint
    },
    totalPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__totalPoint,
        set: pigg.puzzle.view.MainView.prototype.set__totalPoint
    },
    eventStepMissionPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__eventStepMissionPoint
    },
    serverTime: {
        get: pigg.puzzle.view.MainView.prototype.get__serverTime
    },
    currentRemainLimitedQuantityPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__currentRemainLimitedQuantityPoint,
        set: pigg.puzzle.view.MainView.prototype.set__currentRemainLimitedQuantityPoint
    },
    currentRemainLimitedTermPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__currentRemainLimitedTermPoint,
        set: pigg.puzzle.view.MainView.prototype.set__currentRemainLimitedTermPoint
    },
    isJoinSpecialChallenge: {
        get: pigg.puzzle.view.MainView.prototype.get__isJoinSpecialChallenge,
        set: pigg.puzzle.view.MainView.prototype.set__isJoinSpecialChallenge
    },
    specialChallengeExist: {
        get: pigg.puzzle.view.MainView.prototype.get__specialChallengeExist,
        set: pigg.puzzle.view.MainView.prototype.set__specialChallengeExist
    },
    specialCarryOberExist: {
        get: pigg.puzzle.view.MainView.prototype.get__specialCarryOberExist
    },
    existThemeSilver: {
        get: pigg.puzzle.view.MainView.prototype.get__existThemeSilver,
        set: pigg.puzzle.view.MainView.prototype.set__existThemeSilver
    },
    existThemeGold: {
        get: pigg.puzzle.view.MainView.prototype.get__existThemeGold,
        set: pigg.puzzle.view.MainView.prototype.set__existThemeGold
    },
    isParticle: {
        get: pigg.puzzle.view.MainView.prototype.get__isParticle
    },
    userTutorialStatus: {
        get: pigg.puzzle.view.MainView.prototype.get__userTutorialStatus,
        set: pigg.puzzle.view.MainView.prototype.set__userTutorialStatus
    },
    userTutorialStatus2nd: {
        get: pigg.puzzle.view.MainView.prototype.get__userTutorialStatus2nd,
        set: pigg.puzzle.view.MainView.prototype.set__userTutorialStatus2nd
    },
    userTutorialStatusTemp: {
        get: pigg.puzzle.view.MainView.prototype.get__userTutorialStatusTemp,
        set: pigg.puzzle.view.MainView.prototype.set__userTutorialStatusTemp
    },
    userSpStatus: {
        get: pigg.puzzle.view.MainView.prototype.get__userSpStatus,
        set: pigg.puzzle.view.MainView.prototype.set__userSpStatus
    },
    userEventStatus: {
        get: pigg.puzzle.view.MainView.prototype.get__userEventStatus,
        set: pigg.puzzle.view.MainView.prototype.set__userEventStatus
    },
    sceneCurrent: {
        get: pigg.puzzle.view.MainView.prototype.get__sceneCurrent,
        set: pigg.puzzle.view.MainView.prototype.set__sceneCurrent
    },
    isMask: {
        get: pigg.puzzle.view.MainView.prototype.get__isMask
    },
    potionItemCount: {
        get: pigg.puzzle.view.MainView.prototype.get__potionItemCount,
        set: pigg.puzzle.view.MainView.prototype.set__potionItemCount
    },
    currentUsePotion: {
        get: pigg.puzzle.view.MainView.prototype.get__currentUsePotion,
        set: pigg.puzzle.view.MainView.prototype.set__currentUsePotion
    },
    cheatItemCount: {
        get: pigg.puzzle.view.MainView.prototype.get__cheatItemCount,
        set: pigg.puzzle.view.MainView.prototype.set__cheatItemCount
    },
    currentSoundType: {
        get: pigg.puzzle.view.MainView.prototype.get__currentSoundType
    },
    isOpenTheme: {
        get: pigg.puzzle.view.MainView.prototype.get__isOpenTheme,
        set: pigg.puzzle.view.MainView.prototype.set__isOpenTheme
    },
    diffMouse: {
        get: pigg.puzzle.view.MainView.prototype.get__diffMouse
    },
    clearMoveTimes: {
        get: pigg.puzzle.view.MainView.prototype.get__clearMoveTimes,
        set: pigg.puzzle.view.MainView.prototype.set__clearMoveTimes
    },
    isEventComplete: {
        get: pigg.puzzle.view.MainView.prototype.get__isEventComplete,
        set: pigg.puzzle.view.MainView.prototype.set__isEventComplete
    },
    enableScoreItem: {
        get: pigg.puzzle.view.MainView.prototype.get__enableScoreItem
    },
    saveBoardData: {
        get: pigg.puzzle.view.MainView.prototype.get__saveBoardData,
        set: pigg.puzzle.view.MainView.prototype.set__saveBoardData
    },
    isSoundOn: {
        get: pigg.puzzle.view.MainView.prototype.get__isSoundOn,
        set: pigg.puzzle.view.MainView.prototype.set__isSoundOn
    },
    confStatus: {
        get: pigg.puzzle.view.MainView.prototype.get__confStatus
    },
    isGameTutorial: {
        get: pigg.puzzle.view.MainView.prototype.get__isGameTutorial
    },
    isActive: {
        get: pigg.puzzle.view.MainView.prototype.get__isActive,
        set: pigg.puzzle.view.MainView.prototype.set__isActive
    },
    isBoardMoved: {
        get: pigg.puzzle.view.MainView.prototype.get__isBoardMoved
    },
    existMission: {
        get: pigg.puzzle.view.MainView.prototype.get__existMission,
        set: pigg.puzzle.view.MainView.prototype.set__existMission
    },
    totalMissionPieceCount: {
        get: pigg.puzzle.view.MainView.prototype.get__totalMissionPieceCount,
        set: pigg.puzzle.view.MainView.prototype.set__totalMissionPieceCount
    },
    missionRequiredPoint: {
        get: pigg.puzzle.view.MainView.prototype.get__missionRequiredPoint,
        set: pigg.puzzle.view.MainView.prototype.set__missionRequiredPoint
    },
    isDuringRoulette: {
        get: pigg.puzzle.view.MainView.prototype.get__isDuringRoulette,
        set: pigg.puzzle.view.MainView.prototype.set__isDuringRoulette
    },
    existMissionMessage: {
        get: pigg.puzzle.view.MainView.prototype.get__existMissionMessage,
        set: pigg.puzzle.view.MainView.prototype.set__existMissionMessage
    },
    statusT: {
        get: pigg.puzzle.view.MainView.prototype.get__statusT,
        set: pigg.puzzle.view.MainView.prototype.set__statusT
    },
    statusT2: {
        get: pigg.puzzle.view.MainView.prototype.get__statusT2,
        set: pigg.puzzle.view.MainView.prototype.set__statusT2
    },
    statusT3: {
        get: pigg.puzzle.view.MainView.prototype.get__statusT3,
        set: pigg.puzzle.view.MainView.prototype.set__statusT3
    },
    isSendEquip: {
        get: pigg.puzzle.view.MainView.prototype.get__isSendEquip,
        set: pigg.puzzle.view.MainView.prototype.set__isSendEquip
    },
    localType: {
        get: pigg.puzzle.view.MainView.prototype.get__localType
    },
    localTutorial: {
        get: pigg.puzzle.view.MainView.prototype.get__localTutorial
    },
    localRankingType: {
        get: pigg.puzzle.view.MainView.prototype.get__localRankingType
    },
    localLimitedType: {
        get: pigg.puzzle.view.MainView.prototype.get__localLimitedType
    },
    localAnnounceType: {
        get: pigg.puzzle.view.MainView.prototype.get__localAnnounceType
    },
    isLowSpecMode: {
        get: pigg.puzzle.view.MainView.prototype.get__isLowSpecMode,
        set: pigg.puzzle.view.MainView.prototype.set__isLowSpecMode
    },
    existRanking: {
        get: pigg.puzzle.view.MainView.prototype.get__existRanking,
        set: pigg.puzzle.view.MainView.prototype.set__existRanking
    },
    rankingInvisible: {
        get: pigg.puzzle.view.MainView.prototype.get__rankingInvisible
    },
    continueSaleExist: {
        get: pigg.puzzle.view.MainView.prototype.get__continueSaleExist
    },
    continueSale: {
        get: pigg.puzzle.view.MainView.prototype.get__continueSale,
        set: pigg.puzzle.view.MainView.prototype.set__continueSale
    },
    continuePrice: {
        get: pigg.puzzle.view.MainView.prototype.get__continuePrice,
        set: pigg.puzzle.view.MainView.prototype.set__continuePrice
    },
    itemPartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__itemPartsTileset
    },
    gamePartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__gamePartsTileset
    },
    gamePieceTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__gamePieceTileset
    },
    gamePanelTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__gamePanelTileset
    },
    commonPartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__commonPartsTileset
    },
    particleTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__particleTileset,
        set: pigg.puzzle.view.MainView.prototype.set__particleTileset
    },
    mypagePartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__mypagePartsTileset
    },
    menuPartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__menuPartsTileset
    },
    rankingPartsTileset: {
        get: pigg.puzzle.view.MainView.prototype.get__rankingPartsTileset
    },
    spineAnimal: {
        get: pigg.puzzle.view.MainView.prototype.get__spineAnimal
    },
    spineHukurouFront: {
        get: pigg.puzzle.view.MainView.prototype.get__spineHukurouFront
    },
    spineHukurouQuarter: {
        get: pigg.puzzle.view.MainView.prototype.get__spineHukurouQuarter
    },
    spineAnimalRankingScore: {
        get: pigg.puzzle.view.MainView.prototype.get__spineAnimalRankingScore
    },
    spineAnimalRankingWinning: {
        get: pigg.puzzle.view.MainView.prototype.get__spineAnimalRankingWinning
    },
    isStepClear: {
        set: pigg.puzzle.view.MainView.prototype.set__isStepClear
    },
    loadingHint: {
        set: pigg.puzzle.view.MainView.prototype.set__loadingHint
    },
    mainX: {
        get: pigg.puzzle.view.MainView.prototype.get__mainX,
        set: pigg.puzzle.view.MainView.prototype.set__mainX
    },
    mainY: {
        get: pigg.puzzle.view.MainView.prototype.get__mainY,
        set: pigg.puzzle.view.MainView.prototype.set__mainY
    },
    userCode: {
        get: pigg.puzzle.view.MainView.prototype.get__userCode,
        set: pigg.puzzle.view.MainView.prototype.set__userCode
    },
    isShowTopRanking: {
        get: pigg.puzzle.view.MainView.prototype.get__isShowTopRanking,
        set: pigg.puzzle.view.MainView.prototype.set__isShowTopRanking
    },
    isShowEventView: {
        get: pigg.puzzle.view.MainView.prototype.get__isShowEventView,
        set: pigg.puzzle.view.MainView.prototype.set__isShowEventView
    },
    isShowTheme: {
        get: pigg.puzzle.view.MainView.prototype.get__isShowTheme,
        set: pigg.puzzle.view.MainView.prototype.set__isShowTheme
    },
    isShowGameTutorial: {
        get: pigg.puzzle.view.MainView.prototype.get__isShowGameTutorial,
        set: pigg.puzzle.view.MainView.prototype.set__isShowGameTutorial
    },
    appType: {
        get: pigg.puzzle.view.MainView.prototype.get__appType
    },
    debugType: {
        get: pigg.puzzle.view.MainView.prototype.get__debugType
    },
    isShowGame: {
        get: pigg.puzzle.view.MainView.prototype.get__isShowGame,
        set: pigg.puzzle.view.MainView.prototype.set__isShowGame
    },
    isEnterFrameAnimation: {
        get: pigg.puzzle.view.MainView.prototype.get__isEnterFrameAnimation,
        set: pigg.puzzle.view.MainView.prototype.set__isEnterFrameAnimation
    },
    isMypageTutorial: {
        get: pigg.puzzle.view.MainView.prototype.get__isMypageTutorial,
        set: pigg.puzzle.view.MainView.prototype.set__isMypageTutorial
    },
    mypageRankingView: {
        get: pigg.puzzle.view.MainView.prototype.get__mypageRankingView
    },
    eventRankingView: {
        get: pigg.puzzle.view.MainView.prototype.get__eventRankingView
    },
    rankingIncentiveView: {
        get: pigg.puzzle.view.MainView.prototype.get__rankingIncentiveView
    },
    currentScoreAward: {
        get: pigg.puzzle.view.MainView.prototype.get__currentScoreAward,
        set: pigg.puzzle.view.MainView.prototype.set__currentScoreAward
    },
    currentWinningAward: {
        get: pigg.puzzle.view.MainView.prototype.get__currentWinningAward,
        set: pigg.puzzle.view.MainView.prototype.set__currentWinningAward
    },
    scoreRankingData: {
        get: pigg.puzzle.view.MainView.prototype.get__scoreRankingData,
        set: pigg.puzzle.view.MainView.prototype.set__scoreRankingData
    },
    winningRankingData: {
        get: pigg.puzzle.view.MainView.prototype.get__winningRankingData,
        set: pigg.puzzle.view.MainView.prototype.set__winningRankingData
    },
    hasRankingIncentive: {
        get: pigg.puzzle.view.MainView.prototype.get__hasRankingIncentive,
        set: pigg.puzzle.view.MainView.prototype.set__hasRankingIncentive
    },
    openData: {
        get: pigg.puzzle.view.MainView.prototype.get__openData,
        set: pigg.puzzle.view.MainView.prototype.set__openData
    },
    checkUpdateUserItem: {
        get: pigg.puzzle.view.MainView.prototype.get__checkUpdateUserItem,
        set: pigg.puzzle.view.MainView.prototype.set__checkUpdateUserItem
    },
    isSendUserStatus: {
        get: pigg.puzzle.view.MainView.prototype.get__isSendUserStatus,
        set: pigg.puzzle.view.MainView.prototype.set__isSendUserStatus
    },
    isSendGetEventData: {
        get: pigg.puzzle.view.MainView.prototype.get__isSendGetEventData,
        set: pigg.puzzle.view.MainView.prototype.set__isSendGetEventData
    },
    soundMap: {
        get: pigg.puzzle.view.MainView.prototype.get__soundMap,
        set: pigg.puzzle.view.MainView.prototype.set__soundMap
    },
    waitBgm: {
        get: pigg.puzzle.view.MainView.prototype.get__waitBgm,
        set: pigg.puzzle.view.MainView.prototype.set__waitBgm
    },
    soundLoaded: {
        get: pigg.puzzle.view.MainView.prototype.get__soundLoaded,
        set: pigg.puzzle.view.MainView.prototype.set__soundLoaded
    },
    fps: {
        get: pigg.puzzle.view.MainView.prototype.get__fps
    },
    isSoundLoadBySwitch: {
        get: pigg.puzzle.view.MainView.prototype.get__isSoundLoadBySwitch,
        set: pigg.puzzle.view.MainView.prototype.set__isSoundLoadBySwitch
    },
    soundRelease: {
        get: pigg.puzzle.view.MainView.prototype.get__soundRelease,
        set: pigg.puzzle.view.MainView.prototype.set__soundRelease
    },
    loadDataManager: {
        get: pigg.puzzle.view.MainView.prototype.get__loadDataManager
    }
});
pigg.puzzle.view.MainView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MainView',
        qName: 'pigg.puzzle.view.MainView',
        kind: 'class'
    }]
};
pigg.puzzle.view.MainView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'eventData': {
                    type: 'pigg.data.puzzle.PuzzleEventData',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userData': {
                    type: 'pigg.data.puzzle.PuzzleUserData',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'fontWin8': {
                    type: 'openfl.text.Font',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isLocal': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentThemeType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'carryOverScore': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'keepClearCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentEventStep': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'eventStepMissionEachPoint': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentRemainEventStepPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'totalPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'eventStepMissionPoint': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'serverTime': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentRemainLimitedQuantityPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentRemainLimitedTermPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isJoinSpecialChallenge': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'specialChallengeExist': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'specialCarryOberExist': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'existThemeSilver': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'existThemeGold': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isParticle': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userTutorialStatus': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userTutorialStatus2nd': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userTutorialStatusTemp': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userSpStatus': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userEventStatus': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'sceneCurrent': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isMask': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'potionItemCount': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentUsePotion': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'cheatItemCount': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentSoundType': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isOpenTheme': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'diffMouse': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'clearMoveTimes': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isEventComplete': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'enableScoreItem': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'saveBoardData': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isSoundOn': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'confStatus': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isGameTutorial': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isActive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isBoardMoved': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'existMission': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'totalMissionPieceCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'missionRequiredPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isDuringRoulette': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'existMissionMessage': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'statusT': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'statusT2': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'statusT3': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isSendEquip': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'localType': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'localTutorial': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'localRankingType': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'localLimitedType': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'localAnnounceType': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isLowSpecMode': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'existRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'rankingInvisible': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'continueSaleExist': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'continueSale': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'continuePrice': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'itemPartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'gamePartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'gamePieceTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'gamePanelTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'commonPartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'particleTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'mypagePartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'menuPartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'rankingPartsTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'spineAnimal': {
                    type: 'pigg.puzzle.view.SpineView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'spineHukurouFront': {
                    type: 'pigg.puzzle.view.SpineView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'spineHukurouQuarter': {
                    type: 'pigg.puzzle.view.SpineView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'spineAnimalRankingScore': {
                    type: 'pigg.puzzle.view.SpineView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'spineAnimalRankingWinning': {
                    type: 'pigg.puzzle.view.SpineView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isStepClear': {
                    type: 'Boolean',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'loadingHint': {
                    type: 'openfl.display.MovieClip',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'mainX': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'mainY': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'userCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isShowTopRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isShowEventView': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isShowTheme': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isShowGameTutorial': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'appType': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'debugType': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isShowGame': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isEnterFrameAnimation': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isMypageTutorial': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'mypageRankingView': {
                    type: 'pigg.puzzle.view.UserRankingView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'eventRankingView': {
                    type: 'pigg.puzzle.view.UserRankingView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'rankingIncentiveView': {
                    type: 'pigg.puzzle.view.RankingIncentiveView',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentScoreAward': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'currentWinningAward': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'scoreRankingData': {
                    type: 'pigg.data.puzzle.PuzzleRankingData',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'winningRankingData': {
                    type: 'pigg.data.puzzle.PuzzleRankingData',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'hasRankingIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'openData': {
                    type: 'pigg.data.puzzle.PuzzleOpenData',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'checkUpdateUserItem': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isSendUserStatus': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isSendGetEventData': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'soundMap': {
                    type: 'Map',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'waitBgm': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'soundLoaded': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'fps': {
                    type: 'openfl.display.FPS',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'isSoundLoadBySwitch': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'soundRelease': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'loadDataManager': {
                    type: 'pigg.puzzle.manager.LoadDataManager',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MainView'
                }
            }
        },
        methods: function() {
            return {
                'MainView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Stage',
                            optional: false
                        }]
                    }
                },
                'handleVisibilitychange': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'handleFocus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'handleBlur': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'switchTabSound': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'switchSoundOn': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'checkTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'MouseDownFunc': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'MouseUpFunc': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'startRequestAnimation': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onloadTilesetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'initRanking': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'loadRankingSheet': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'addLoadedCnt': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onErrorApi': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.ErrorEvent',
                            optional: false
                        }]
                    }
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'themeStart': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showEventView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showAnnounce': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'updateServerTime': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'onTickTimer': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.TimerEvent',
                            optional: false
                        }]
                    }
                },
                'playSoundBGM': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'playBGM': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'playSE': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'showGameTutorialEnd': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showThemeTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'hideGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showRankingDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showMapRankingView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onOpenPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleOpenData',
                            optional: false
                        }]
                    }
                },
                'setEventData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleEventData',
                            optional: false
                        }]
                    }
                },
                'setUserData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleUserData',
                            optional: false
                        }]
                    }
                },
                'onLoadBg': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'refreshUserItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'refreshScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'checkJoinSpecialChallenge': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'setStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'onGetTopRankingData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleRankingData',
                            optional: false
                        }]
                    }
                },
                'showRankingIncentiveView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'checkUpdateRanking': {
                    type: 'Boolean',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'updateRankingData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'showTopRankingView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'onGetUserRankingData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleUserRankingData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'setPuzzleData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onGiveUp': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onProgress': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleProgressData',
                            optional: false
                        }]
                    }
                },
                'onEquipPuzzleScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onFailedEquipPuzzleScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onGetContinueInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleContinueInfoData',
                            optional: false
                        }]
                    }
                },
                'onContinue': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleContinueData',
                            optional: false
                        }]
                    }
                },
                'onSetUserStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onUseScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onUseCheatItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onStopRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleIncentiveItemData',
                            optional: false
                        }]
                    }
                },
                'playPanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'playMapAnimalAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'switchIncentiveMapPlayBtn': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showStepClearIncentivePanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'gotoNextStepIncentiveMap': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'gotoActionEnd': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'setAnimationAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'addSpine': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.SpineView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'removeSpine': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.SpineView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'setRequestGetConfStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showTutorialMapRemain': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'endTutorialMapMotion': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showEternalModeDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showSpecialChallengeDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showLoading': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'removeLoading': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showApiLoading': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'hideApiLoading': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'showRankingResultIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'nextRankingResultDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showStepTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showRankingResultDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showThemePanel': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showInfoTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showPanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'changePanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'hidePanelAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'setNextTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showGameView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showGameTelop': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'applyMask': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'pauseTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'killTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'switchSoundMode': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'showInfoTutorialMapItemBalloon': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'onGetAvatarViewList': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }]
                    }
                },
                'showRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'hideRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onPlayPuzzle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'onGetBoardData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showMenu': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showConfirmRetire': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showUserItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showHowToPlay': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'hideGameBgBlack': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showOpenShopAlert': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showAlertItemShortage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showAlertReload': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'showAlertMoveUserPage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'showSoundAnnounce': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'switchLowSpecMode': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'showTutotiralIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showMypagePlayButton': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'showOutOfTerm': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView'
                },
                'updateEventData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MainView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleRankingData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleRankingData', pigg.data.puzzle.PuzzleRankingData);
pigg.data.puzzle.PuzzleRankingData.prototype._status;
pigg.data.puzzle.PuzzleRankingData.prototype._eventCode;
pigg.data.puzzle.PuzzleRankingData.prototype._eventTitle;
pigg.data.puzzle.PuzzleRankingData.prototype._rankingType;
pigg.data.puzzle.PuzzleRankingData.prototype._rankingTypeIndex = 0;
pigg.data.puzzle.PuzzleRankingData.prototype._lastUpdateTime;
pigg.data.puzzle.PuzzleRankingData.prototype._rankSize = 0;
pigg.data.puzzle.PuzzleRankingData.prototype._rankUserData;
pigg.data.puzzle.PuzzleRankingData.prototype.readData = function(data) {
    var cnt = 0;
    this._status = org.apache.royale.utils.Language.string(data['status']);
    if (this._status != 'SUCCESS')
        return;
    var rankingData = data['ranking'];
    this._rankingType = org.apache.royale.utils.Language.string(rankingData['rankingTypeCode']);
    this._lastUpdateTime = Number(rankingData['lastUpdateTime']);
    this._rankUserData = org.apache.royale.utils.Language.Vector(this._rankSize, 'PuzzleRankingUserData');
    var userData;
    if (this._rankingType == 'score')
        this._rankingTypeIndex = 0;
    else if (this._rankingType == 'winning_streak')
        this._rankingTypeIndex = 1;
    this._rankSize = Number(rankingData['users'].length);
    for (cnt = 0; cnt < this._rankSize; cnt++) {
        userData = new pigg.data.puzzle.PuzzleRankingUserData;
        userData.userCode = org.apache.royale.utils.Language.string(rankingData['users'][cnt]['userCode']);
        userData.piggCode = org.apache.royale.utils.Language.string(rankingData['users'][cnt]['piggCode']);
        userData.nickname = org.apache.royale.utils.Language.string(rankingData['users'][cnt]['nickname']);
        if (this._rankingType == 'score') {
            userData.pointRank = Number(rankingData['users'][cnt]['rank']);
            userData.pointPrevRank = Number(rankingData['users'][cnt]['prevRank']);
            userData.pointAwardName = org.apache.royale.utils.Language.string(rankingData['users'][cnt]['awardTypeCode']);
            userData.pointValue = Number(rankingData['users'][cnt]['value']);
            userData.pointAwardIndex = userData.awardIndex(userData.pointAwardName)
        } else if (this._rankingType == 'winning_streak') {
            userData.winningRank = Number(rankingData['users'][cnt]['rank']);
            userData.winningPrevRank = Number(rankingData['users'][cnt]['prevRank']);
            userData.winningAwardName = org.apache.royale.utils.Language.string(rankingData['users'][cnt]['awardTypeCode']);
            userData.winningValue = Number(rankingData['users'][cnt]['value']);
            userData.winningAwardIndex = userData.awardIndex(userData.winningAwardName)
        }
        this._rankUserData[cnt] = userData
    }
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__eventCode = function() {
    return this._eventCode
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__eventCode = function(v) {
    this._eventCode = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__eventTitle = function() {
    return this._eventTitle
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__eventTitle = function(v) {
    this._eventTitle = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__rankingType = function() {
    return this._rankingType
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__rankingType = function(v) {
    this._rankingType = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__ankingTypeIndex = function(v) {
    this._rankingTypeIndex = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__rankingTypeIndex = function() {
    return this._rankingTypeIndex
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__rankSize = function() {
    return this._rankSize
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__rankSize = function(v) {
    this._rankSize = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__lastUpdateTime = function() {
    return this._lastUpdateTime
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__lastUpdateTime = function(v) {
    this._lastUpdateTime = v
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.get__rankUserData = function() {
    return this._rankUserData
}
;
pigg.data.puzzle.PuzzleRankingData.prototype.set__rankUserData = function(v) {
    this._rankUserData = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleRankingData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__status
    },
    eventCode: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__eventCode,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__eventCode
    },
    eventTitle: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__eventTitle,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__eventTitle
    },
    rankingType: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__rankingType,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__rankingType
    },
    ankingTypeIndex: {
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__ankingTypeIndex
    },
    rankingTypeIndex: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__rankingTypeIndex
    },
    rankSize: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__rankSize,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__rankSize
    },
    lastUpdateTime: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__lastUpdateTime,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__lastUpdateTime
    },
    rankUserData: {
        get: pigg.data.puzzle.PuzzleRankingData.prototype.get__rankUserData,
        set: pigg.data.puzzle.PuzzleRankingData.prototype.set__rankUserData
    }
});
pigg.data.puzzle.PuzzleRankingData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleRankingData',
        qName: 'pigg.data.puzzle.PuzzleRankingData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleRankingData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'eventCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'eventTitle': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'rankingType': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'ankingTypeIndex': {
                    type: 'int',
                    access: 'writeonly',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'rankingTypeIndex': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'rankSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'lastUpdateTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'rankUserData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleRankingUserData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleRankingData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleRankingData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.PointAttachment = function(name) {
    this.color = new spine.Color(.38,.94,0,1);
    spine.attachments.VertexAttachment.call(this, name)
}
;
goog.inherits(spine.attachments.PointAttachment, spine.attachments.VertexAttachment);
goog.exportSymbol('spine.attachments.PointAttachment', spine.attachments.PointAttachment);
spine.attachments.PointAttachment.prototype.x;
spine.attachments.PointAttachment.prototype.y;
spine.attachments.PointAttachment.prototype.rotation;
spine.attachments.PointAttachment.prototype.color;
spine.attachments.PointAttachment.prototype.computeWorldPosition = function(bone, point) {
    point[0] = this.x * bone.a + this.y * bone.b + bone.worldX;
    point[1] = this.x * bone.c + this.y * bone.d + bone.worldY;
    return point
}
;
spine.attachments.PointAttachment.prototype.computeWorldRotation = function(bone) {
    var cos = spine.MathUtils.cosDeg(this.rotation)
      , sin = spine.MathUtils.sinDeg(this.rotation);
    var x = cos * bone.a + sin * bone.b;
    var y = cos * bone.c + sin * bone.d;
    return Math.atan2(y, x) * spine.MathUtils.radDeg
}
;
spine.attachments.PointAttachment.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PointAttachment',
        qName: 'spine.attachments.PointAttachment',
        kind: 'class'
    }]
};
spine.attachments.PointAttachment.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'x': {
                    type: 'Number'
                },
                'color': {
                    type: 'spine.Color'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'PointAttachment': {
                    type: '',
                    declaredBy: 'spine.attachments.PointAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'computeWorldPosition': {
                    type: 'Vector.\x3cNumber\x3e',
                    declaredBy: 'spine.attachments.PointAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Bone',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }]
                    }
                },
                'computeWorldRotation': {
                    type: 'Number',
                    declaredBy: 'spine.attachments.PointAttachment',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Bone',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.IconView = function(main) {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('itemView');
    this._main = main;
    this.init()
}
;
goog.inherits(pigg.puzzle.view.IconView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.IconView', pigg.puzzle.view.IconView);
pigg.puzzle.view.IconView.prototype._container;
pigg.puzzle.view.IconView.prototype._isGet;
pigg.puzzle.view.IconView.prototype._hasBg = true;
pigg.puzzle.view.IconView.prototype._isEnd;
pigg.puzzle.view.IconView.prototype._isSpecial;
pigg.puzzle.view.IconView.prototype._isRanking;
pigg.puzzle.view.IconView.prototype._isLimited;
pigg.puzzle.view.IconView.prototype._quantity = 0;
pigg.puzzle.view.IconView.prototype._isPlus;
pigg.puzzle.view.IconView.prototype._itemTilemap;
pigg.puzzle.view.IconView.prototype._itemTileset;
pigg.puzzle.view.IconView.prototype._itemTile;
pigg.puzzle.view.IconView.prototype._mypageMain = false;
pigg.puzzle.view.IconView.prototype._isSpc = -1;
pigg.puzzle.view.IconView.prototype._isItem = false;
pigg.puzzle.view.IconView.prototype._id = 0;
pigg.puzzle.view.IconView.prototype._isIncentive = false;
pigg.puzzle.view.IconView.prototype._isRankMain = -1;
pigg.puzzle.view.IconView.prototype._isFace = false;
pigg.puzzle.view.IconView.prototype._frontTilemap;
pigg.puzzle.view.IconView.prototype._tileset;
pigg.puzzle.view.IconView.prototype._frontTile;
pigg.puzzle.view.IconView.prototype._backTilemap;
pigg.puzzle.view.IconView.prototype._backTileset;
pigg.puzzle.view.IconView.prototype._backTile;
pigg.puzzle.view.IconView.prototype._quantityTxt;
pigg.puzzle.view.IconView.prototype.RECT_BACK_NORMAL = 0;
pigg.puzzle.view.IconView.prototype.RECT_BACK_NORMAL_GET = 1;
pigg.puzzle.view.IconView.prototype.RECT_BACK_SPECIAL = 2;
pigg.puzzle.view.IconView.prototype.RECT_BACK_SPECIAL_END = 3;
pigg.puzzle.view.IconView.prototype.RECT_BACK_SPECIAL_GET = 4;
pigg.puzzle.view.IconView.prototype.RECT_PLUS = 5;
pigg.puzzle.view.IconView.prototype.RECT_CHECK = 6;
pigg.puzzle.view.IconView.prototype.RECT_PLUS_LARGE = 7;
pigg.puzzle.view.IconView.prototype.RECT_SP_CHALLENGE_BG = 8;
pigg.puzzle.view.IconView.prototype.RECT_SP_CHALLENGE_BG_END = 9;
pigg.puzzle.view.IconView.prototype.RECT_SP_CHALLENGE_BG_GET = 10;
pigg.puzzle.view.IconView.prototype.RECT_ITEM_BG = 11;
pigg.puzzle.view.IconView.prototype._numberFontManager;
pigg.puzzle.view.IconView.prototype._main;
pigg.puzzle.view.IconView.prototype.ADJUST_RECT_POS_Y = 266;
pigg.puzzle.view.IconView.prototype._updateIsGet = false;
pigg.puzzle.view.IconView.prototype._updateIsEnd = false;
pigg.puzzle.view.IconView.prototype._qContainer;
pigg.puzzle.view.IconView.prototype.init = function() {
    this.addChild(this._container = new openfl.display.Sprite);
    this._tileset = this._main.commonPartsTileset.clone();
    this._tileset.addRect(new openfl.geom.Rectangle(472,392,121,121));
    this._tileset.addRect(new openfl.geom.Rectangle(602,392,122,121));
    this._tileset.addRect(new openfl.geom.Rectangle(513,265,121,121));
    this._tileset.addRect(new openfl.geom.Rectangle(635,265,121,121));
    this._tileset.addRect(new openfl.geom.Rectangle(757,265,121,121));
    this._tileset.addRect(new openfl.geom.Rectangle(488,104,27,27));
    this._tileset.addRect(new openfl.geom.Rectangle(440,104,47,38));
    this._tileset.addRect(new openfl.geom.Rectangle(400,104,39,39));
    this._tileset.addRect(new openfl.geom.Rectangle(525,104,99,96));
    this._tileset.addRect(new openfl.geom.Rectangle(626,104,99,96));
    this._tileset.addRect(new openfl.geom.Rectangle(727,104,99,96));
    this._tileset.addRect(new openfl.geom.Rectangle(54,952,126,126))
}
;
pigg.puzzle.view.IconView.prototype.setIconData = function(code, bmd, option) {
    option = typeof option !== 'undefined' ? option : null;
    this.traceLog('setIconData::', code, bmd, option);
    this.initTiles();
    var tl;
    if (this._hasBg) {
        if (this._backTilemap == null)
            this._backTilemap = new openfl.display.Tilemap(160,160,this._tileset);
        if (this._isItem) {
            this._backTilemap.height = 140;
            this._backTile = new TileBase(this.RECT_ITEM_BG)
        } else if (this._isSpc == 0)
            this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG);
        else if (this._isSpc == 1)
            this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG_END);
        else if (this._isSpc == 2)
            this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG_GET);
        else if (this._isSpecial)
            this._backTile = new TileBase(this.RECT_BACK_SPECIAL);
        else if (this._isGet)
            this._backTile = new TileBase(this.RECT_BACK_NORMAL_GET);
        else
            this._backTile = new TileBase(this.RECT_BACK_NORMAL);
        this._backTilemap.addTile(this._backTile);
        this._container.addChild(this._backTilemap)
    }
    this._itemTileset = new openfl.display.Tileset(bmd);
    this._itemTileset.addRect(new openfl.geom.Rectangle(0,0,135,135));
    this._itemTilemap = new openfl.display.Tilemap(135,135,this._itemTileset);
    this._itemTile = new TileBase;
    this._itemTilemap.addTile(this._itemTile);
    this._container.addChild(this._itemTilemap);
    if (this._quantity > 1) {
        if (this._numberFontManager == null) {
            this._qContainer = new openfl.display.Sprite;
            this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
            this._numberFontManager.init(this._main);
            if (this._mypageMain)
                this._numberFontManager.makeFontInfo('quantity', 200, 160, this._qContainer, 3355443, 3355443, 0, 0, 6, openfl.text.TextFieldAutoSize.RIGHT, true);
            if (this._isItem)
                this._numberFontManager.makeFontInfo('quantity', 120, 60, this._qContainer, 3355443, 3355443, 200, 0, 5, 'RIGHT', true);
            else if (this._isIncentive)
                this._numberFontManager.makeFontInfo('quantity', 200, 160, this._qContainer, 3355443, 3355443, 200, 0, 4.2, 'RIGHT', true);
            else
                this._numberFontManager.makeFontInfo('quantity', 200, 160, this._qContainer, 3355443, 3355443, 200, 0, 5, 'RIGHT', true);
            this.addChild(this._qContainer);
            this._qContainer.x = 100;
            this._qContainer.y = 100
        }
        if (this._isItem) {
            this._qContainer.x = 18;
            this._qContainer.y = 96
        } else if (this._isIncentive) {
            this._qContainer.x = 35;
            this._qContainer.y = 90
        } else if (this._isRankMain != -1) {
            this._qContainer.scaleX = this._qContainer.scaleY = .8;
            this._qContainer.x = 18;
            this._qContainer.y = 60
        } else if (this._isSpc == -1) {
            this._qContainer.x = 20;
            this._qContainer.y = 87;
            this._qContainer.scaleX = this._qContainer.scaleY = .8
        }
        this._numberFontManager.makeNumber('quantity', this._quantity)
    } else if (this._numberFontManager)
        this._numberFontManager.removeNumber('quantity');
    if (this._mypageMain) {
        this._itemTilemap.width = this._itemTilemap.height = 270;
        this._itemTile.scaleX = this._itemTile.scaleY = 1.5;
        if (this._qContainer) {
            this._qContainer.x = 145;
            if (this._isPlus)
                this._qContainer.y = 118;
            else
                this._qContainer.y = 135
        }
    } else if (this._isSpc != -1) {
        this._itemTile.scaleX = this._itemTile.scaleY = .5;
        this._itemTile.x = 16;
        this._itemTile.y = 12
    } else if (this._isRankMain != -1) {
        this._itemTile.scaleX = this._itemTile.scaleY = .65;
        this._itemTile.x = this._itemTile.y = 7;
        this._itemTilemap.height = 110
    } else if (this._isFace) {
        this._itemTile.scaleX = 1.1;
        this._itemTile.scaleY = 1.1
    } else {
        this._itemTile.scaleX = this._itemTile.scaleY = .8;
        this._itemTile.x = this._itemTile.y = 7
    }
    if (this._isPlus || this._isGet) {
        if (this._frontTilemap == null) {
            this._frontTilemap = new openfl.display.Tilemap(160,160,this._tileset);
            this._container.addChild(this._frontTilemap);
            if (this._mypageMain)
                this._frontTilemap.width = this._frontTilemap.height = 270
        }
        if (this._isPlus) {
            if (this._mypageMain) {
                tl = new TileBase(this.RECT_PLUS_LARGE);
                tl.x = 145;
                tl.y = 145
            } else if (this._isSpc != -1) {
                tl = new TileBase(this.RECT_PLUS);
                tl.x = 72;
                tl.y = 52
            } else if (this._isRankMain != -1) {
                tl = new TileBase(this.RECT_PLUS);
                if (this._isRankMain == 0) {
                    tl.x = 72;
                    tl.y = 82
                } else {
                    tl.x = 75;
                    tl.y = 77
                }
                this._frontTilemap.height = 120
            } else {
                tl = new TileBase(this.RECT_PLUS);
                tl.x = 120;
                tl.y = 120
            }
            this._frontTilemap.addTile(tl)
        }
        if (this._isGet)
            this.updateIconData()
    }
    if (option && option.length > 0)
        option[0]()
}
;
pigg.puzzle.view.IconView.prototype.initTiles = function() {
    if (this._frontTilemap) {
        this._frontTilemap.removeTiles();
        this.removeFromParent(this._frontTilemap);
        this._frontTilemap = null
    }
    if (this._backTilemap) {
        this._backTilemap.removeTiles();
        this.removeFromParent(this._backTilemap);
        this._backTilemap = null
    }
    if (this._itemTilemap) {
        this._itemTilemap.removeTiles();
        this.removeFromParent(this._itemTilemap);
        this._itemTilemap = null
    }
}
;
pigg.puzzle.view.IconView.prototype.updateIconData = function() {
    if (this._itemTile == null)
        return;
    if (this._isGet && !this._updateIsGet) {
        this._updateIsGet = true;
        this._itemTile.alpha = .7;
        if (this._backTilemap == null) {
            if (this._hasBg) {
                this._backTilemap = new openfl.display.Tilemap(160,160,this._tileset);
                this._container.addChild(this._backTilemap)
            }
        } else
            this._backTilemap.removeTiles();
        if (this._isSpc == -1)
            if (this.isSpecial) {
                if (this._backTile == null)
                    this._backTile = new TileBase(this.RECT_BACK_SPECIAL_GET);
                else
                    this._backTile.updateId(this.RECT_BACK_SPECIAL_GET);
                this._backTilemap.addTile(this._backTile)
            } else {
                if (this._backTile == null)
                    this._backTile = new TileBase(this.RECT_BACK_NORMAL_GET);
                else
                    this._backTile.updateId(this.RECT_BACK_NORMAL_GET);
                this._backTilemap.addTile(this._backTile)
            }
        else if (this._isSpc == 2) {
            if (this._backTile == null)
                this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG_GET);
            else
                this._backTile.updateId(this.RECT_SP_CHALLENGE_BG_GET);
            this._backTilemap.addTile(this._backTile)
        } else if (this._isSpc == 1) {
            if (this._backTile == null)
                this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG_END);
            else
                this._backTile.updateId(this.RECT_SP_CHALLENGE_BG_END);
            this._backTilemap.addTile(this._backTile)
        }
        if (this._frontTilemap == null) {
            this._frontTilemap = new openfl.display.Tilemap(160,160,this._tileset);
            this._container.addChild(this._frontTilemap)
        } else
            this._frontTilemap.removeTiles();
        var tl;
        tl = new TileBase(this.RECT_CHECK);
        tl.setCenter();
        if (this._isSpc != -1) {
            tl.x = 27;
            tl.y = 27
        } else {
            tl.x = 40;
            tl.y = 40
        }
        this._frontTilemap.addTile(tl)
    }
    if (this._isEnd && !this._updateIsEnd) {
        this._updateIsEnd = true;
        if (this._isSpc == -1) {
            if (this._backTile == null)
                this._backTile = new TileBase(this.RECT_BACK_SPECIAL_END);
            else
                this._backTile.updateId(this.RECT_BACK_SPECIAL_END);
            this._backTilemap.addTile(this._backTile)
        } else {
            if (this._backTile == null)
                this._backTile = new TileBase(this.RECT_SP_CHALLENGE_BG_END);
            else
                this._backTile.updateId(this.RECT_SP_CHALLENGE_BG_END);
            this._backTilemap.addTile(this._backTile)
        }
    }
}
;
pigg.puzzle.view.IconView.prototype.get__isGet = function() {
    return this._isGet
}
;
pigg.puzzle.view.IconView.prototype.set__isGet = function(v) {
    this._isGet = v
}
;
pigg.puzzle.view.IconView.prototype.get__hasBg = function() {
    return this._hasBg
}
;
pigg.puzzle.view.IconView.prototype.set__hasBg = function(v) {
    this._hasBg = v
}
;
pigg.puzzle.view.IconView.prototype.get__isEnd = function() {
    return this._isEnd
}
;
pigg.puzzle.view.IconView.prototype.set__isEnd = function(v) {
    this._isEnd = v
}
;
pigg.puzzle.view.IconView.prototype.get__isSpecial = function() {
    return this._isSpecial
}
;
pigg.puzzle.view.IconView.prototype.set__isSpecial = function(v) {
    this._isSpecial = v
}
;
pigg.puzzle.view.IconView.prototype.get__isRanking = function() {
    return this._isRanking
}
;
pigg.puzzle.view.IconView.prototype.set__isRanking = function(v) {
    this._isRanking = v
}
;
pigg.puzzle.view.IconView.prototype.get__isLimited = function() {
    return this._isLimited
}
;
pigg.puzzle.view.IconView.prototype.set__isLimited = function(v) {
    this._isLimited = v
}
;
pigg.puzzle.view.IconView.prototype.get__quantity = function() {
    return this._quantity
}
;
pigg.puzzle.view.IconView.prototype.set__quantity = function(v) {
    this._quantity = v
}
;
pigg.puzzle.view.IconView.prototype.get__isPlus = function() {
    return this._isPlus
}
;
pigg.puzzle.view.IconView.prototype.set__isPlus = function(v) {
    this._isPlus = v
}
;
pigg.puzzle.view.IconView.prototype.get__itemTilemap = function() {
    return this._itemTilemap
}
;
pigg.puzzle.view.IconView.prototype.set__itemTilemap = function(value) {
    this._itemTilemap = value
}
;
pigg.puzzle.view.IconView.prototype.get__itemTileset = function() {
    return this._itemTileset
}
;
pigg.puzzle.view.IconView.prototype.set__itemTileset = function(value) {
    this._itemTileset = value
}
;
pigg.puzzle.view.IconView.prototype.get__itemTile = function() {
    return this._itemTile
}
;
pigg.puzzle.view.IconView.prototype.set__itemTile = function(value) {
    this._itemTile = value
}
;
pigg.puzzle.view.IconView.prototype.get__mypageMain = function() {
    return this._mypageMain
}
;
pigg.puzzle.view.IconView.prototype.set__mypageMain = function(v) {
    this._mypageMain = v
}
;
pigg.puzzle.view.IconView.prototype.get__isSpc = function() {
    return this._isSpc
}
;
pigg.puzzle.view.IconView.prototype.set__isSpc = function(v) {
    this._isSpc = v
}
;
pigg.puzzle.view.IconView.prototype.get__isItem = function() {
    return this._isItem
}
;
pigg.puzzle.view.IconView.prototype.set__isItem = function(v) {
    this._isItem = v
}
;
pigg.puzzle.view.IconView.prototype.get__id = function() {
    return this._id
}
;
pigg.puzzle.view.IconView.prototype.set__id = function(v) {
    this._id = v
}
;
pigg.puzzle.view.IconView.prototype.get__isIncentive = function() {
    return this._isIncentive
}
;
pigg.puzzle.view.IconView.prototype.set__isIncentive = function(v) {
    this._isIncentive = v
}
;
pigg.puzzle.view.IconView.prototype.get__isRankMain = function() {
    return this._isRankMain
}
;
pigg.puzzle.view.IconView.prototype.set__isRankMain = function(v) {
    this._isRankMain = v
}
;
pigg.puzzle.view.IconView.prototype.get__isFace = function() {
    return this._isFace
}
;
pigg.puzzle.view.IconView.prototype.set__isFace = function(v) {
    this._isFace = v
}
;
Object.defineProperties(pigg.puzzle.view.IconView.prototype, {
    isGet: {
        get: pigg.puzzle.view.IconView.prototype.get__isGet,
        set: pigg.puzzle.view.IconView.prototype.set__isGet
    },
    hasBg: {
        get: pigg.puzzle.view.IconView.prototype.get__hasBg,
        set: pigg.puzzle.view.IconView.prototype.set__hasBg
    },
    isEnd: {
        get: pigg.puzzle.view.IconView.prototype.get__isEnd,
        set: pigg.puzzle.view.IconView.prototype.set__isEnd
    },
    isSpecial: {
        get: pigg.puzzle.view.IconView.prototype.get__isSpecial,
        set: pigg.puzzle.view.IconView.prototype.set__isSpecial
    },
    isRanking: {
        get: pigg.puzzle.view.IconView.prototype.get__isRanking,
        set: pigg.puzzle.view.IconView.prototype.set__isRanking
    },
    isLimited: {
        get: pigg.puzzle.view.IconView.prototype.get__isLimited,
        set: pigg.puzzle.view.IconView.prototype.set__isLimited
    },
    quantity: {
        get: pigg.puzzle.view.IconView.prototype.get__quantity,
        set: pigg.puzzle.view.IconView.prototype.set__quantity
    },
    isPlus: {
        get: pigg.puzzle.view.IconView.prototype.get__isPlus,
        set: pigg.puzzle.view.IconView.prototype.set__isPlus
    },
    itemTilemap: {
        get: pigg.puzzle.view.IconView.prototype.get__itemTilemap,
        set: pigg.puzzle.view.IconView.prototype.set__itemTilemap
    },
    itemTileset: {
        get: pigg.puzzle.view.IconView.prototype.get__itemTileset,
        set: pigg.puzzle.view.IconView.prototype.set__itemTileset
    },
    itemTile: {
        get: pigg.puzzle.view.IconView.prototype.get__itemTile,
        set: pigg.puzzle.view.IconView.prototype.set__itemTile
    },
    mypageMain: {
        get: pigg.puzzle.view.IconView.prototype.get__mypageMain,
        set: pigg.puzzle.view.IconView.prototype.set__mypageMain
    },
    isSpc: {
        get: pigg.puzzle.view.IconView.prototype.get__isSpc,
        set: pigg.puzzle.view.IconView.prototype.set__isSpc
    },
    isItem: {
        get: pigg.puzzle.view.IconView.prototype.get__isItem,
        set: pigg.puzzle.view.IconView.prototype.set__isItem
    },
    id: {
        get: pigg.puzzle.view.IconView.prototype.get__id,
        set: pigg.puzzle.view.IconView.prototype.set__id
    },
    isIncentive: {
        get: pigg.puzzle.view.IconView.prototype.get__isIncentive,
        set: pigg.puzzle.view.IconView.prototype.set__isIncentive
    },
    isRankMain: {
        get: pigg.puzzle.view.IconView.prototype.get__isRankMain,
        set: pigg.puzzle.view.IconView.prototype.set__isRankMain
    },
    isFace: {
        get: pigg.puzzle.view.IconView.prototype.get__isFace,
        set: pigg.puzzle.view.IconView.prototype.set__isFace
    }
});
pigg.puzzle.view.IconView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'IconView',
        qName: 'pigg.puzzle.view.IconView',
        kind: 'class'
    }]
};
pigg.puzzle.view.IconView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isGet': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'hasBg': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isEnd': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isSpecial': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isLimited': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'quantity': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isPlus': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'itemTilemap': {
                    type: 'openfl.display.Tilemap',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'itemTileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'itemTile': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'mypageMain': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isSpc': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isItem': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'id': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isRankMain': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'isFace': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.IconView'
                }
            }
        },
        methods: function() {
            return {
                'IconView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.IconView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'setIconData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.IconView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Array',
                            optional: true
                        }]
                    }
                },
                'initTiles': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.IconView'
                },
                'updateIconData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.IconView'
                }
            }
        }
    }
}
;
pigg.puzzle.view.MypageView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.RECT_STEP_BTN = [];
    this.traceLog('MypageView')
}
;
goog.inherits(pigg.puzzle.view.MypageView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.MypageView', pigg.puzzle.view.MypageView);
pigg.puzzle.view.MypageView.prototype._backBlack;
pigg.puzzle.view.MypageView.prototype._container;
pigg.puzzle.view.MypageView.prototype._loadDataManager;
pigg.puzzle.view.MypageView.prototype._eventData;
pigg.puzzle.view.MypageView.prototype._userData;
pigg.puzzle.view.MypageView.prototype._main;
pigg.puzzle.view.MypageView.prototype._bottomContainer;
pigg.puzzle.view.MypageView.prototype._topContainer;
pigg.puzzle.view.MypageView.prototype._contentContainer;
pigg.puzzle.view.MypageView.prototype._rankingContainer;
pigg.puzzle.view.MypageView.prototype._menuEventTilemap;
pigg.puzzle.view.MypageView.prototype._menuEventTileset;
pigg.puzzle.view.MypageView.prototype._menuBtnTile;
pigg.puzzle.view.MypageView.prototype._eventBtnTile;
pigg.puzzle.view.MypageView.prototype._menuEventBtnContainer;
pigg.puzzle.view.MypageView.prototype.RECT_STEP_BTN;
pigg.puzzle.view.MypageView.prototype.RECT_RANKINCENTIVE_BTN = 0;
pigg.puzzle.view.MypageView.prototype._playBtnsTilemap;
pigg.puzzle.view.MypageView.prototype._playBtnsTileset;
pigg.puzzle.view.MypageView.prototype._playBtnTile;
pigg.puzzle.view.MypageView.prototype._rankingBtnTile;
pigg.puzzle.view.MypageView.prototype._stepBtnTile;
pigg.puzzle.view.MypageView.prototype._remmyTile;
pigg.puzzle.view.MypageView.prototype._playBtnsContainer;
pigg.puzzle.view.MypageView.prototype._spineAnimalContainer;
pigg.puzzle.view.MypageView.prototype._mainIncentiveContainer;
pigg.puzzle.view.MypageView.prototype._bannerContainer;
pigg.puzzle.view.MypageView.prototype._totalScoreContainer;
pigg.puzzle.view.MypageView.prototype._specialChallengeInfoContainer;
pigg.puzzle.view.MypageView.prototype._spQuantityIconView;
pigg.puzzle.view.MypageView.prototype._spTermIconView;
pigg.puzzle.view.MypageView.prototype._imageBtnContainer;
pigg.puzzle.view.MypageView.prototype._imageBtnTile;
pigg.puzzle.view.MypageView.prototype._infoEventRemainTimeTxt;
pigg.puzzle.view.MypageView.prototype._infoStockQuantityTxt;
pigg.puzzle.view.MypageView.prototype._infoTermLimitTxt;
pigg.puzzle.view.MypageView.prototype._fontNumberManager;
pigg.puzzle.view.MypageView.prototype._innerContent;
pigg.puzzle.view.MypageView.prototype._spChallengeTxtTile;
pigg.puzzle.view.MypageView.prototype._allStepClearTxtTile;
pigg.puzzle.view.MypageView.prototype._spcTilemap;
pigg.puzzle.view.MypageView.prototype._spcTileset;
pigg.puzzle.view.MypageView.prototype._setTermStatus = -1;
pigg.puzzle.view.MypageView.prototype._setQuantityStatus = -1;
pigg.puzzle.view.MypageView.prototype._stepIncentiveGauge;
pigg.puzzle.view.MypageView.prototype._limitedTermGauge;
pigg.puzzle.view.MypageView.prototype._limitedQuantityGauge;
pigg.puzzle.view.MypageView.prototype._imageViewContainer;
pigg.puzzle.view.MypageView.prototype._imageView;
pigg.puzzle.view.MypageView.prototype._imageViewBlack;
pigg.puzzle.view.MypageView.prototype._imageViewPng;
pigg.puzzle.view.MypageView.prototype._isWaitShowImageView = false;
pigg.puzzle.view.MypageView.prototype._isShowOverView = -1;
pigg.puzzle.view.MypageView.prototype._currentDispMode = 'step';
pigg.puzzle.view.MypageView.prototype._annouceViewContainer;
pigg.puzzle.view.MypageView.prototype._annouceView;
pigg.puzzle.view.MypageView.prototype._annouceViewBlack;
pigg.puzzle.view.MypageView.prototype._annouceViewPng;
pigg.puzzle.view.MypageView.prototype._currentRankingMode = 'score';
pigg.puzzle.view.MypageView.prototype.init = function(main, loadDataManager) {
    this.traceLog('MypageView::init');
    this._main = main;
    this._container = this.makeContainer();
    this._loadDataManager = loadDataManager;
    this._fontNumberManager = new pigg.puzzle.manager.NumberFontManager;
    this._fontNumberManager.init(this._main);
    this.addChild(this._container);
    this._contentContainer = new openfl.display.Sprite;
    this._container.addChild(this._contentContainer);
    this._contentContainer.y = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT;
    this._container.addChild(this._rankingContainer = new openfl.display.Sprite);
    this._topContainer = new openfl.display.Sprite;
    this._container.addChild(this._topContainer);
    this._topContainer.y = -pigg.puzzle.view.CommonView.MYPAGE_HEIGHT;
    this._bottomContainer = new openfl.display.Sprite;
    this._container.addChild(this._bottomContainer);
    this._bottomContainer.y = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT;
    this.initBottom();
    this.addEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.mu, this, 'mu'));
    this.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.mypageViewCL, this, 'mypageViewCL'));
    this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.mypageViewMD, this, 'mypageViewMD'))
}
;
pigg.puzzle.view.MypageView.prototype._baseMouseY;
pigg.puzzle.view.MypageView.prototype._baseScrollTop;
pigg.puzzle.view.MypageView.prototype._scalePer;
pigg.puzzle.view.MypageView.prototype._mouseDiff;
pigg.puzzle.view.MypageView.prototype.md = function() {
    com.greensock.TweenMax.killTweensOf(document.documentElement);
    com.greensock.TweenMax.killTweensOf(document.body);
    this._scalePer = this.checkScale();
    this._baseMouseY = this.mouseY;
    this._baseScrollTop = document.body.scrollTop;
    this.traceLog('md::', this._baseMouseY, this.mouseY);
    this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.mm, this, 'mm'))
}
;
pigg.puzzle.view.MypageView.prototype.checkScale = function() {
    var swStr = org.apache.royale.utils.Language.string(document.getElementsByTagName('canvas')[0].style.width);
    var sw = org.apache.royale.utils.Language._int(swStr.slice(0, swStr.indexOf('px')));
    var per = sw / 640;
    this.traceLog('\u62e1\u5927\u7e2e\u5c0fper::', per);
    if (per > 1)
        per = 1;
    return per
}
;
pigg.puzzle.view.MypageView.prototype.mmCnt = 0;
pigg.puzzle.view.MypageView.prototype.mm = function(e) {
    if (this._baseMouseY == -1)
        return;
    this._mouseDiff = org.apache.royale.utils.Language._int((this._baseMouseY - this.mouseY) * this._scalePer);
    document.body.scrollTop += this._mouseDiff;
    document.documentElement.scrollTop += this._mouseDiff;
    this._baseMouseY -= this._mouseDiff;
    this.traceLog('document.body.scrollTop::mm::', document.body.scrollTop, this._mouseDiff, this._baseMouseY, this.mouseY)
}
;
pigg.puzzle.view.MypageView.prototype.mu = function(e) {
    this.traceLog('mu:::', document.documentElement.scrollTop, this._mouseDiff);
    var cy;
    if (document.documentElement.scrollTop != 0) {
        com.greensock.TweenMax.killTweensOf(document.documentElement);
        cy = document.documentElement.scrollTop;
        com.greensock.TweenMax.to(document.documentElement, .5, {
            scrollTop: cy + this._mouseDiff * 10,
            ease: com.greensock.easing.Cubic.easeOut
        })
    }
    if (document.body.scrollTop != 0) {
        com.greensock.TweenMax.killTweensOf(document.body);
        cy = document.body.scrollTop;
        com.greensock.TweenMax.to(document.body, .5, {
            scrollTop: cy + this._mouseDiff * 10,
            ease: com.greensock.easing.Cubic.easeOut
        })
    }
    this._baseMouseY = -1;
    this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.mm, this, 'mm'))
}
;
pigg.puzzle.view.MypageView.prototype._isInitEvent = false;
pigg.puzzle.view.MypageView.prototype._isInitRanking = false;
pigg.puzzle.view.MypageView.prototype.ready = function(dispType) {
    var self = this;
    dispType = typeof dispType !== 'undefined' ? dispType : 'step';
    var __localFn0__ = function() {
        com.greensock.TweenMax.to(self._mainIncentiveContainer, 1, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
        });
        self._main.spineAnimal.playAction('joy', 3)
    };
    var __localFn1__ = function() {
        self._spChallengeTxtTile.scaleX = self._spChallengeTxtTile.scaleY = .7;
        com.greensock.TweenMax.to(self._spChallengeTxtTile, 1, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
        })
    };
    var __localFn2__ = function() {
        self._allStepClearTxtTile.scaleX = self._allStepClearTxtTile.scaleY = .7;
        com.greensock.TweenMax.to(self._allStepClearTxtTile, 1, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
        });
        self._main.spineHukurouQuarter.playAction('joy', 5)
    };
    this.traceLog('ready::::', dispType);
    this.setRankingBtn();
    if (dispType == 'rank') {
        this.traceLog('ready::\u30e9\u30f3\u30ad\u30f3\u30b0\u8868\u793a');
        this._main.initRanking('mypage');
        this.updateInfo(true)
    } else if (dispType == 'step') {
        this._currentDispMode = 'step';
        this.traceLog('ready::\u30b9\u30c6\u30c3\u30d7\u8868\u793a');
        this.initEventTop();
        this.setContent();
        this.setIncentive();
        this.setContentAnimal();
        this.updateInfo();
        if (!this._main.isEventComplete) {
            this._mainIncentiveContainer.scaleX = this._mainIncentiveContainer.scaleY = 0;
            if (this._main.isMypageTutorial != 0)
                com.greensock.TweenMax.to(this._mainIncentiveContainer, .2, {
                    onComplete: __localFn0__
                })
        } else if (this._main.isJoinSpecialChallenge != -1)
            com.greensock.TweenMax.to(this._spChallengeTxtTile, .3, {
                onComplete: __localFn1__
            });
        else {
            this._main.spineHukurouQuarter.playAction('joy_fix');
            com.greensock.TweenMax.to(this._allStepClearTxtTile, .3, {
                onComplete: __localFn2__
            })
        }
        this._isInitEvent = true
    }
}
;
pigg.puzzle.view.MypageView.prototype.showTutotiralIncentive = function() {
    com.greensock.TweenMax.to(this._mainIncentiveContainer, 1, {
        delay: .2,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.MypageView.prototype.show = function() {
    this._bottomContainer.y = 0;
    this._contentContainer.y = 0;
    this._topContainer.y = 0;
    if (this._main.isMypageTutorial == -1) {
        if (this._main.userEventStatus == 0)
            if (this._main.hasRankingIncentive) {
                this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bb\u30f3\u304c\u3042\u308b\u306e\u3067\u6f14\u51fa\u958b\u59cb');
                this._main.showRankingResultDescription();
                this._playBtnTile.visible = false;
                this._playBtnTemp.visible = false
            } else {
                this._main.showApiLoading();
                this._main.showAnnounce();
                this._main.userEventStatus = 1;
                this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
            }
    } else {
        this._playBtnTile.visible = false;
        this._playBtnTemp.visible = false
    }
}
;
pigg.puzzle.view.MypageView.prototype.hide = function() {}
;
pigg.puzzle.view.MypageView.prototype.showPlayButton = function(animate) {
    animate = typeof animate !== 'undefined' ? animate : true;
    this._playBtnTile.visible = true;
    this._playBtnTemp.visible = true;
    if (animate) {
        this._playBtnTile.scaleX = this._playBtnTile.scaleY = 0;
        com.greensock.TweenMax.to(this._playBtnTile, 1, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    }
}
;
pigg.puzzle.view.MypageView.prototype.closeMD = function(e) {}
;
pigg.puzzle.view.MypageView.prototype._playBtnTemp;
pigg.puzzle.view.MypageView.prototype.RECT_BTN_PLAY = 0;
pigg.puzzle.view.MypageView.prototype.RECT_BTN_RANKING = 0;
pigg.puzzle.view.MypageView.prototype.RECT_BTN_STEP = 0;
pigg.puzzle.view.MypageView.prototype.RECT_BTN_REMMY = 0;
pigg.puzzle.view.MypageView.prototype.initBottom = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnAction('down', 1)
    };
    var __localFn1__ = function(e) {
        self.btnAction('out', 1)
    };
    var __localFn2__ = function(e) {
        self.btnAction('down', 2)
    };
    var __localFn3__ = function(e) {
        self.btnAction('out', 2)
    };
    var __localFn4__ = function(e) {
        self.btnAction('down', 3)
    };
    var __localFn5__ = function(e) {
        self.btnAction('out', 3)
    };
    var cnt = 0
      , cnt2 = 0
      , len = 0;
    var format = new openfl.text.TextFormat('Rounded Mplus 1c',20,2236962);
    var tl;
    this._menuEventBtnContainer = new openfl.display.Sprite;
    this._bottomContainer.addChild(this._menuEventBtnContainer);
    this._menuEventTileset = this._main.commonPartsTileset.clone();
    this._menuEventTileset.addRect(new openfl.geom.Rectangle(945,0,103,103));
    len = 9;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_STEP_BTN.push(this._menuEventTileset.addRect(new openfl.geom.Rectangle(cnt * 105,0,103,103)));
    this.RECT_RANKINCENTIVE_BTN = this._menuEventTileset.addRect(new openfl.geom.Rectangle(879,199,103,103));
    this._menuEventTilemap = new openfl.display.Tilemap(275,400,this._menuEventTileset);
    this._eventBtnTile = new TileBase(5);
    this._eventBtnTile.originX = this._eventBtnTile.originY = 100 / 2;
    this._eventBtnTile.x = 25 + 50;
    this._eventBtnTile.y = 50 + 30;
    this._menuBtnTile = new TileBase(0);
    this._menuBtnTile.originX = this._menuBtnTile.originY = 100 / 2;
    this._menuBtnTile.x = 25 + 50;
    this._menuBtnTile.y = 169 + 30;
    this._menuEventTilemap.addTile(this._eventBtnTile);
    this._menuEventTilemap.addTile(this._menuBtnTile);
    this._menuEventBtnContainer.addChild(this._menuEventTilemap);
    this._menuEventBtnContainer.y = 598;
    this._menuEventTilemap.y = -30;
    this._playBtnsContainer = new openfl.display.Sprite;
    this._bottomContainer.addChild(this._playBtnsContainer);
    this._playBtnsTileset = this._main.mypagePartsTileset.clone();
    this.RECT_BTN_PLAY = this._playBtnsTileset.addRect(new openfl.geom.Rectangle(0,246,300,100));
    this.RECT_BTN_REMMY = this._playBtnsTileset.addRect(new openfl.geom.Rectangle(574,469,152,135));
    this.RECT_BTN_RANKING = this._playBtnsTileset.addRect(new openfl.geom.Rectangle(379,449,195,192));
    this.RECT_BTN_STEP = this._playBtnsTileset.addRect(new openfl.geom.Rectangle(576,698,153,47));
    this._playBtnsTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,300,this._playBtnsTileset);
    this._playBtnsTilemap.addTile(this._playBtnTile = new TileBase(this.RECT_BTN_PLAY));
    this._playBtnTile.y = 118 + 50;
    this._playBtnTile.x = 170 + 150;
    this._playBtnTile.originX = 300 / 2;
    this._playBtnTile.originY = 100 / 2;
    this._playBtnsContainer.addChild(this._playBtnsTilemap);
    this._playBtnsContainer.y = 600;
    this._playBtnTemp = new openfl.display.Sprite;
    this._playBtnTemp.graphics.beginFill(16711680, 0);
    this._playBtnTemp.graphics.drawRect(0, 0, 330, 122);
    this._playBtnTemp.graphics.endFill();
    this._playBtnTemp.x = 155;
    this._playBtnTemp.y = 106;
    this._playBtnsContainer.addChild(this._playBtnTemp);
    this._playBtnTemp.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    this._playBtnTemp.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn1__);
    var btn = new openfl.display.Sprite;
    btn.graphics.beginFill(16711680, 0);
    btn.graphics.drawRect(0, 0, 117, 117);
    btn.graphics.endFill();
    btn.x = 15;
    btn.y = -10;
    this._playBtnsContainer.addChild(btn);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn3__);
    btn = new openfl.display.Sprite;
    btn.graphics.beginFill(16711680, 0);
    btn.graphics.drawRect(0, 0, 117, 117);
    btn.graphics.endFill();
    btn.x = 15;
    btn.y = 109;
    this._playBtnsContainer.addChild(btn);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn4__);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn5__)
}
;
pigg.puzzle.view.MypageView.prototype.setContent = function() {
    if (!this._main.isEventComplete) {
        if (this._mainIncentiveContainer == null) {
            this._mainIncentiveContainer = new openfl.display.Sprite;
            this._contentContainer.addChild(this._mainIncentiveContainer);
            var incentiveTileset = this._main.mypagePartsTileset.clone();
            incentiveTileset.addRect(new openfl.geom.Rectangle(618,0,223,241));
            var incentiveTilemap = new openfl.display.Tilemap(400,400,incentiveTileset);
            this._mainIncentiveContainer.addChild(incentiveTilemap);
            incentiveTilemap.addTile(new TileBase);
            incentiveTilemap.x = -108;
            incentiveTilemap.y = -118;
            this._mainIncentiveContainer.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
            this._mainIncentiveContainer.y = 466;
            this._spineAnimalContainer = new openfl.display.Sprite;
            this._contentContainer.addChild(this._spineAnimalContainer);
            this._stepIncentiveGauge = new pigg.puzzle.view.GaugeView(this._main);
            this._contentContainer.addChild(this._stepIncentiveGauge);
            var per = (this._main.eventStepMissionEachPoint[this._main.currentEventStep] - this._main.currentRemainEventStepPoint) / this._main.eventStepMissionEachPoint[this._main.currentEventStep];
            this.traceLog('setRemainPoint::per::', per);
            this._stepIncentiveGauge.x = 208;
            this._stepIncentiveGauge.y = 671;
            this._stepIncentiveGauge.setRemainPoint(this._main.currentRemainEventStepPoint, per)
        }
    } else if (this._main.isJoinSpecialChallenge == -1) {
        this._spineAnimalContainer = new openfl.display.Sprite;
        this._contentContainer.addChild(this._spineAnimalContainer)
    }
}
;
pigg.puzzle.view.MypageView.prototype._topTileset;
pigg.puzzle.view.MypageView.prototype.initTop = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnAction('down', 0)
    };
    var __localFn1__ = function(e) {
        self.btnAction('out', 0)
    };
    this._bannerContainer = new openfl.display.Sprite;
    this._topContainer.addChild(this._bannerContainer);
    var thumbUrl;
    this._topTileset = this._main.mypagePartsTileset.clone();
    this._topTileset.addRect(new openfl.geom.Rectangle(0,0,617,246));
    this._topTileset.addRect(new openfl.geom.Rectangle(626,248,217,65));
    this._topTileset.addRect(new openfl.geom.Rectangle(561,333,178,48));
    var bannerTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT,this._topTileset);
    bannerTilemap.addTile(new TileBase);
    this._bannerContainer.addChild(bannerTilemap);
    this._bannerContainer.x = 11;
    var imgContainer = new openfl.display.Sprite;
    imgContainer.x = 42;
    imgContainer.y = 47;
    this._bannerContainer.addChild(imgContainer);
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/sp_banner_' + this._main.eventData.eventCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/sp_banner_' + this._main.eventData.eventCode + '.png';
    this._main.loadDataManager.loadPng(thumbUrl, 'spBanner', org.apache.royale.utils.Language.closure(this.onLoadPng, this, 'onLoadPng'), imgContainer);
    var infoFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,16);
    this._infoEventRemainTimeTxt = new openfl.text.TextField;
    this._infoEventRemainTimeTxt.defaultTextFormat = infoFormat;
    this._infoEventRemainTimeTxt.textColor = 16773632;
    this._infoEventRemainTimeTxt.text = '';
    this._infoEventRemainTimeTxt.x = 380;
    this._infoEventRemainTimeTxt.y = 9;
    if (AsData.ua > 1)
        this._infoEventRemainTimeTxt.y = 9 + 4;
    this._bannerContainer.addChild(this._infoEventRemainTimeTxt);
    this._imageBtnContainer = new openfl.display.Sprite;
    this._bannerContainer.addChild(this._imageBtnContainer);
    var imgBtnTilemap = new openfl.display.Tilemap(178 * 2,48 * 2,this._topTileset);
    imgBtnTilemap.addTile(this._imageBtnTile = new TileBase(2));
    this._imageBtnContainer.addChild(imgBtnTilemap);
    this._imageBtnTile.originX = 178 / 2;
    this._imageBtnTile.originY = 48 / 2;
    this._imageBtnTile.x = 178;
    this._imageBtnTile.y = 48;
    this._imageBtnContainer.x = 424 - 178 / 2;
    this._imageBtnContainer.y = 182 - 48 / 2;
    this._imageBtnContainer.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    this._imageBtnContainer.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn1__);
    this.traceLog('_main.isJoinSpecialChallenge::', this._main.isJoinSpecialChallenge);
    if (this._main.existRanking && this._main.isEventComplete && this._main.isJoinSpecialChallenge == -1)
        this.traceLog('\u30e9\u30f3\u30ad\u30f3\u30b0\u8868\u793a');
    else
        this.traceLog('\u30b9\u30c6\u30c3\u30d7\u8868\u793a')
}
;
pigg.puzzle.view.MypageView.prototype.initEventTop = function() {
    this._totalScoreContainer = new openfl.display.Sprite;
    this._topContainer.addChild(this._totalScoreContainer);
    var totalScoreTilemap = new openfl.display.Tilemap(217,65,this._topTileset);
    totalScoreTilemap.addTile(new TileBase(1));
    this._totalScoreContainer.addChild(totalScoreTilemap);
    this._totalScoreContainer.x = 17;
    this._totalScoreContainer.y = 250;
    this._fontNumberManager.makeFontInfo('totalScore', 300, 100, this._totalScoreContainer, 16609792, 16609792, 450, 30, 4.5, 'RIGHT');
    this._specialChallengeInfoContainer = new openfl.display.Sprite;
    this._innerContent = new openfl.display.Sprite;
    this._specialChallengeInfoContainer.addChild(this._innerContent);
    this._spTermIconView = new pigg.puzzle.view.IconView(this._main);
    this._innerContent.addChild(this._spTermIconView);
    this._spTermIconView.isSpc = 0;
    this._spQuantityIconView = new pigg.puzzle.view.IconView(this._main);
    this._innerContent.addChild(this._spQuantityIconView);
    this._spQuantityIconView.isSpc = 0;
    var infoFormat = new openfl.text.TextFormat(pigg.puzzle.view.CommonView.FONT_ROUNDED_MPLUS,16);
    infoFormat.size = 14;
    this._infoTermLimitTxt = new openfl.text.TextField;
    this._infoTermLimitTxt.defaultTextFormat = infoFormat;
    this._infoTermLimitTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    this._infoTermLimitTxt.width = 100;
    this._infoTermLimitTxt.textColor = 16777215;
    this._infoTermLimitTxt.text = '';
    this._innerContent.addChild(this._infoTermLimitTxt);
    this._infoStockQuantityTxt = new openfl.text.TextField;
    this._infoStockQuantityTxt.defaultTextFormat = infoFormat;
    this._infoStockQuantityTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    this._infoStockQuantityTxt.width = 100;
    this._infoStockQuantityTxt.textColor = 16777215;
    this._infoStockQuantityTxt.text = '';
    this._innerContent.addChild(this._infoStockQuantityTxt)
}
;
pigg.puzzle.view.MypageView.prototype._rankingScoreBgTilemap;
pigg.puzzle.view.MypageView.prototype._rankingWinningBgTilemap;
pigg.puzzle.view.MypageView.prototype._rankingTileset;
pigg.puzzle.view.MypageView.prototype._rankingScoreContainer;
pigg.puzzle.view.MypageView.prototype._rankingWinningContainer;
pigg.puzzle.view.MypageView.prototype._rankingTotalScoreSpr;
pigg.puzzle.view.MypageView.prototype._rankingWinningCountSpr;
pigg.puzzle.view.MypageView.prototype._rankingLastUpdateTimeContaienr;
pigg.puzzle.view.MypageView.prototype._rankingLoadedCnt = 0;
pigg.puzzle.view.MypageView.prototype.initRankingContent = function() {
    var tl;
    this._rankingContainer.addChild(this._rankingScoreContainer = new openfl.display.Sprite);
    this._rankingContainer.addChild(this._rankingWinningContainer = new openfl.display.Sprite);
    this.traceLog('_main.rankingPartsTileset:::', this._main.rankingPartsTileset);
    this._rankingTileset = this._main.rankingPartsTileset.clone();
    this._rankingScoreBgTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT,this._rankingTileset);
    this._rankingScoreContainer.addChild(this._rankingScoreBgTilemap);
    this._rankingScoreBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,0,640,1))));
    tl.scaleY = 252;
    this._rankingScoreBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,3,640,128))));
    tl.y = 252;
    this._rankingScoreBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,130,640,1))));
    tl.y = 380;
    tl.scaleY = 458;
    if (this._main.userData.hasRanking) {
        this._rankingScoreBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1018,939,73,88))));
        tl.x = 34;
        tl.y = 478;
        this._rankingScoreBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1178,869,82,61))));
        tl.x = 419;
        tl.y = 332
    }
    this._fontNumberManager.makeFontInfo('rankingTotalScore', 300, 60, this._rankingScoreContainer, 16609792, 16609792, 460, 20, 4.5, 'RIGHT');
    this._fontNumberManager.makeNumber('rankingTotalScore', this._main.totalPoint);
    this._fontNumberManager.getFontInfo('rankingTotalScore').tilemap.y = 320;
    this._rankingWinningBgTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT,this._rankingTileset);
    this._rankingWinningContainer.addChild(this._rankingWinningBgTilemap);
    this._rankingWinningBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,133,640,1))));
    tl.scaleY = 252;
    this._rankingWinningBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,136,640,128))));
    tl.y = 252;
    this._rankingWinningBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,263,640,1))));
    tl.y = 380;
    tl.scaleY = 458;
    if (this._main.userData.hasRanking) {
        this._rankingWinningBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1091,908,73,88))));
        tl.x = 34;
        tl.y = 478;
        this._rankingWinningBgTilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1178,932,82,61))));
        tl.x = 419;
        tl.y = 332
    }
    this._fontNumberManager.makeFontInfo('rankingWinningCount', 300, 60, this._rankingWinningContainer, 12943433, 12943433, 450, 20, 4.5, 'RIGHT');
    this._fontNumberManager.makeNumber('rankingWinningCount', this._main.userData.eventWinningStreakCount);
    this._fontNumberManager.getFontInfo('rankingWinningCount').tilemap.x = -57;
    this._fontNumberManager.getFontInfo('rankingWinningCount').tilemap.y = 321;
    this._rankingWinningContainer.visible = false;
    this._rankingContainer.addChild(this._main.mypageRankingView);
    this._rankingContainer.visible = false;
    if (!this._isInitRanking)
        this._isInitRanking = true;
    if (this._main.isShowEventView)
        return;
    if (this._currentDispMode == 'step')
        this.switchStepRanking();
    this._main.hideApiLoading()
}
;
pigg.puzzle.view.MypageView.prototype.onLoadPng = function(code, bmd, spr) {
    spr = typeof spr !== 'undefined' ? spr : null;
    var ts;
    var tm;
    var tl;
    if (code == 'spBanner') {
        ts = new openfl.display.Tileset(bmd);
        ts.addRect(new openfl.geom.Rectangle(0,0,530,170));
        tm = new openfl.display.Tilemap(530,170,ts);
        tm.addTile(new TileBase);
        spr.addChild(tm)
    } else if (code == 'imageView') {
        ts = new openfl.display.Tileset(bmd);
        ts.addRect(new openfl.geom.Rectangle(0,0,380,380));
        tm = new openfl.display.Tilemap(494,494,ts);
        tm.addTile(tl = new openfl.display.Tile);
        tl.scaleX = tl.scaleY = 1.3;
        spr.addChild(tm);
        if (this._isWaitShowImageView) {
            this._isWaitShowImageView = false;
            this.showImageView();
            this._main.hideApiLoading()
        }
    }
}
;
pigg.puzzle.view.MypageView.prototype.setIncentive = function() {
    if (!this._main.isEventComplete) {
        var stepData = this._main.eventData.stepDataVec[this._main.currentEventStep];
        var itemData;
        var thumbUrl;
        itemData = stepData.eventIncentiveItemData[0];
        var iconView = new pigg.puzzle.view.IconView(this._main);
        iconView.hasBg = false;
        iconView.mypageMain = true;
        iconView.quantity = itemData.itemQuantity;
        iconView.x = -102;
        iconView.y = -90;
        if (stepData.eventIncentiveItemData.length > 1)
            iconView.isPlus = true;
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
        this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(iconView.setIconData, iconView, 'setIconData'));
        this._mainIncentiveContainer.addChild(iconView)
    }
    if (this._main.specialChallengeExist) {
        itemData = this._main.eventData.eventLimitedTermIncentiveItemData[0];
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
        this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(this._spTermIconView.setIconData, this._spTermIconView, 'setIconData'));
        if (this._main.eventData.eventLimitedTermIncentiveItemData.length > 1)
            this._spTermIconView.isPlus = true;
        itemData = this._main.eventData.eventLimitedQuantityIncentiveItemData[0];
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + itemData.itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(itemData.itemType, itemData.itemCode, 135);
        this._loadDataManager.loadPng(thumbUrl, itemData.itemCode, org.apache.royale.utils.Language.closure(this._spQuantityIconView.setIconData, this._spQuantityIconView, 'setIconData'));
        if (this._main.eventData.eventLimitedQuantityIncentiveItemData.length > 1)
            this._spQuantityIconView.isPlus = true
    }
    this._spcTileset = this._main.mypagePartsTileset.clone();
    this._spcTilemap = new openfl.display.Tilemap(400,400,this._spcTileset);
    var alstepclrTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,600,this._spcTileset);
    var alClearPlayTxtTile;
    if (this._main.isJoinSpecialChallenge == -1) {
        this._totalScoreContainer.x = 17;
        this._totalScoreContainer.y = 250;
        this._topContainer.addChild(this._specialChallengeInfoContainer);
        this._spcTileset.addRect(new openfl.geom.Rectangle(300,246,326,87));
        this._spcTilemap.addTile(new TileBase(0));
        if (this._main.specialChallengeExist)
            this._innerContent.addChildAt(this._spcTilemap, 0);
        this._specialChallengeInfoContainer.x = 297;
        this._specialChallengeInfoContainer.y = 255;
        this._spTermIconView.x = 112;
        this._spTermIconView.y = -14;
        this._spQuantityIconView.x = 219;
        this._spQuantityIconView.y = -14;
        this._infoTermLimitTxt.x = 112;
        this._infoTermLimitTxt.y = 57;
        if (AsData.ua > 1)
            this._infoTermLimitTxt.y = 59 + 3;
        this._infoStockQuantityTxt.x = 220;
        this._infoStockQuantityTxt.y = 57;
        if (AsData.ua > 1)
            this._infoStockQuantityTxt.y = 59 + 3;
        if (this._main.isEventComplete) {
            this._spcTileset.addRect(new openfl.geom.Rectangle(573,381,119,87));
            this._spcTilemap.addTile(new TileBase(1));
            this._spcTileset.addRect(new openfl.geom.Rectangle(0,727,288,110));
            alstepclrTilemap.addTile(this._allStepClearTxtTile = new TileBase(2));
            this._allStepClearTxtTile.originX = 288 / 2;
            this._allStepClearTxtTile.originY = 110 / 2;
            this._allStepClearTxtTile.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
            this._allStepClearTxtTile.y = 168;
            alstepclrTilemap.y = 355;
            this._contentContainer.addChild(alstepclrTilemap);
            this._allStepClearTxtTile.scaleX = this._allStepClearTxtTile.scaleY = 1E-4;
            if (!this._main.existRanking) {
                this._spcTileset.addRect(new openfl.geom.Rectangle(289,727,286,40));
                alstepclrTilemap.addTile(alClearPlayTxtTile = new TileBase(3))
            } else {
                this._spcTileset.addRect(new openfl.geom.Rectangle(289,768,286,40));
                alstepclrTilemap.addTile(alClearPlayTxtTile = new TileBase(3))
            }
            alClearPlayTxtTile.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2 - 286 / 2;
            alClearPlayTxtTile.y = 307
        }
    } else {
        this._totalScoreContainer.x = 212;
        this._totalScoreContainer.y = 250;
        this._contentContainer.addChild(this._specialChallengeInfoContainer);
        this._spcTileset.addRect(new openfl.geom.Rectangle(0,346,378,284));
        this._spcTileset.addRect(new openfl.geom.Rectangle(0,659,462,68));
        this._spcTilemap.addTile(new TileBase(0));
        if (this._main.specialChallengeExist)
            this._innerContent.addChildAt(this._spcTilemap, 0);
        this._specialChallengeInfoContainer.x = 137;
        this._specialChallengeInfoContainer.y = 404;
        this._spTermIconView.x = 27;
        this._spTermIconView.y = 12;
        this._spQuantityIconView.x = 27;
        this._spQuantityIconView.y = 121;
        this._infoTermLimitTxt.x = 27;
        this._infoTermLimitTxt.y = 83;
        if (AsData.ua > 1)
            this._infoTermLimitTxt.y = 85 + 3;
        this._infoStockQuantityTxt.x = 27;
        this._infoStockQuantityTxt.y = 192;
        if (AsData.ua > 1)
            this._infoStockQuantityTxt.y = 194 + 3;
        alstepclrTilemap.addTile(this._spChallengeTxtTile = new TileBase(1));
        this._spChallengeTxtTile.originX = 462 / 2;
        this._spChallengeTxtTile.originY = 68 / 2;
        this._spChallengeTxtTile.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
        this._spChallengeTxtTile.y = 134 + 68 / 2;
        alstepclrTilemap.y = 200;
        this._contentContainer.addChild(alstepclrTilemap);
        this._spChallengeTxtTile.scaleX = this._spChallengeTxtTile.scaleY = 1E-4;
        var per;
        var _limitedTermProgressPer;
        var _limitedQuantityProgressPer;
        if (this._main.specialChallengeExist) {
            if (this._main.isJoinSpecialChallenge == 0 || this._main.isJoinSpecialChallenge == 2) {
                this._limitedTermGauge = new pigg.puzzle.view.GaugeView(this._main);
                this._specialChallengeInfoContainer.addChild(this._limitedTermGauge);
                _limitedTermProgressPer = (this._main.totalPoint - this._main.eventData.stepDataVec[7].point) / (this._main.eventData.limitedTermPoint - this._main.eventData.stepDataVec[7].point);
                this._limitedTermGauge.x = 136;
                this._limitedTermGauge.y = 72;
                this._limitedTermGauge.setRemainPoint(this._main.currentRemainLimitedTermPoint, _limitedTermProgressPer)
            }
            if (this._main.isJoinSpecialChallenge == 1 || this._main.isJoinSpecialChallenge == 2) {
                this._limitedQuantityGauge = new pigg.puzzle.view.GaugeView(this._main);
                this._specialChallengeInfoContainer.addChild(this._limitedQuantityGauge);
                _limitedQuantityProgressPer = (this._main.totalPoint - this._main.eventData.stepDataVec[7].point) / (this._main.eventData.limitedQuantityPoint - this._main.eventData.stepDataVec[7].point);
                this._limitedQuantityGauge.x = 136;
                this._limitedQuantityGauge.y = 181;
                this._limitedQuantityGauge.setRemainPoint(this._main.currentRemainLimitedQuantityPoint, _limitedQuantityProgressPer)
            }
        }
    }
}
;
pigg.puzzle.view.MypageView.prototype.setJoinSpecialChallenge = function(limitedType, status) {
    status = typeof status !== 'undefined' ? status : 0;
    if (this._main.isJoinSpecialChallenge == -1)
        return;
    var tl;
    if (limitedType == 'term') {
        this._setTermStatus = status;
        tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,333,160,29)));
        this._spcTilemap.addTile(tl);
        tl.x = 138;
        if (status == 0) {
            tl.y = 17;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(430,391,100,26)));
            tl.x = 138;
            tl.y = 42
        } else if (status == 1) {
            tl.y = 43;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,391,51,29)));
            tl.x = 300;
            tl.y = 43
        } else if (status == 2) {
            tl.y = 33;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,420,79,29)));
            tl.x = 138;
            tl.y = 59
        }
        this._spcTilemap.addTile(tl)
    } else if (limitedType == 'quantity') {
        this._setQuantityStatus = status;
        tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,362,161,29)));
        this._spcTilemap.addTile(tl);
        tl.x = 138;
        if (status == 0) {
            tl.y = 127;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(430,391,100,26)));
            tl.x = 138;
            tl.y = 151
        } else if (status == 1) {
            tl.y = 153;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,391,51,29)));
            tl.x = 300;
            tl.y = 153
        } else if (status == 2) {
            tl.y = 143;
            tl = new TileBase(this._spcTileset.addRect(new openfl.geom.Rectangle(380,420,79,29)));
            tl.x = 138;
            tl.y = 169
        }
        this._spcTilemap.addTile(tl)
    }
}
;
pigg.puzzle.view.MypageView.prototype.setContentAnimal = function() {
    if (!this._main.isEventComplete) {
        var scl;
        this._main.addSpine(this._main.spineAnimal, this._spineAnimalContainer);
        this._spineAnimalContainer.x = 446;
        this._spineAnimalContainer.y = 642;
        if (this._main.currentEventStep <= 3)
            scl = .5;
        else if (this._main.currentEventStep == 4)
            scl = .5;
        else if (this._main.currentEventStep == 5)
            scl = .5;
        else if (this._main.currentEventStep == 6)
            scl = .4;
        else if (this._main.currentEventStep >= 7)
            scl = .42;
        this._spineAnimalContainer.scaleX = -scl;
        this._spineAnimalContainer.scaleY = scl
    } else if (this._main.isJoinSpecialChallenge == -1) {
        this._main.addSpine(this._main.spineHukurouQuarter, this._spineAnimalContainer);
        this._spineAnimalContainer.x = 330;
        this._spineAnimalContainer.y = 390;
        this._spineAnimalContainer.scaleX = -.5;
        this._spineAnimalContainer.scaleY = .5
    }
}
;
pigg.puzzle.view.MypageView.prototype.updateEventBtn = function() {
    if (this._currentDispMode == 'rank')
        if (this._eventBtnTile)
            this._eventBtnTile.updateId(this.RECT_RANKINCENTIVE_BTN);
        else
            this._eventBtnTile = new TileBase(this.RECT_RANKINCENTIVE_BTN);
    else if (this._currentDispMode == 'step')
        if (this._eventBtnTile)
            this._eventBtnTile.updateId(this.RECT_STEP_BTN[this._main.currentEventStep]);
        else
            this._eventBtnTile = new TileBase(this.RECT_STEP_BTN[this._main.currentEventStep])
}
;
pigg.puzzle.view.MypageView.prototype.switchStepRanking = function() {
    this.traceLog('switchStepRanking::', this._currentDispMode);
    if (this._currentDispMode == 'step') {
        this._currentDispMode = 'rank';
        this.hideEventContent();
        this.showRankingContent();
        this.updateEventBtn();
        this._rankingBtnTile.visible = false;
        this._stepBtnTile.visible = true;
        this._stepBtnTile.scaleX = this._stepBtnTile.scaleY = 1;
        this._rankStepSwitchBtn.y = 94 + 80
    } else if (this._currentDispMode == 'rank') {
        this._currentDispMode = 'step';
        this.hideRankingContent();
        this.showEventContent();
        this.updateEventBtn();
        this._rankingBtnTile.visible = true;
        this._stepBtnTile.visible = false;
        this._rankingBtnTile.scaleX = this._rankingBtnTile.scaleY = 1;
        this._rankStepSwitchBtn.y = 94;
        if (!this._main.isEventComplete && this._mainIncentiveContainer) {
            com.greensock.TweenMax.killTweensOf(this._mainIncentiveContainer);
            this._mainIncentiveContainer.scaleX = this._mainIncentiveContainer.scaleY = .5;
            com.greensock.TweenMax.to(this._mainIncentiveContainer, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            })
        } else if (this._main.isJoinSpecialChallenge != -1 && this._spChallengeTxtTile) {
            com.greensock.TweenMax.killTweensOf(this._spChallengeTxtTile);
            this._spChallengeTxtTile.scaleX = this._spChallengeTxtTile.scaleY = .7;
            com.greensock.TweenMax.to(this._spChallengeTxtTile, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
            })
        } else if (this._main.isEventComplete && this._main.isJoinSpecialChallenge == -1 && this._allStepClearTxtTile) {
            this._main.spineHukurouQuarter.playAction('joy', 1);
            com.greensock.TweenMax.killTweensOf(this._allStepClearTxtTile);
            this._allStepClearTxtTile.scaleX = this._allStepClearTxtTile.scaleY = .7;
            com.greensock.TweenMax.to(this._allStepClearTxtTile, .5, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
            })
        }
    }
}
;
pigg.puzzle.view.MypageView.prototype.switchRankingType = function() {
    this.traceLog('mypageView\u306eswitchRankingType::', this._currentRankingMode);
    if (this._currentRankingMode == 'score') {
        this._rankingScoreContainer.visible = false;
        this._rankingWinningContainer.visible = true;
        this._currentRankingMode = 'winning_streak';
        this._main.mypageRankingView.switchRankType(1);
        this._fontNumberManager.makeNumber('rankingTotalScore', this._main.totalPoint)
    } else if (this._currentRankingMode == 'winning_streak') {
        this._rankingWinningContainer.visible = false;
        this._rankingScoreContainer.visible = true;
        this._currentRankingMode = 'score';
        this._main.mypageRankingView.switchRankType(0);
        this._fontNumberManager.makeNumber('rankingWinningCount', this._main.userData.eventWinningStreakCount)
    }
}
;
pigg.puzzle.view.MypageView.prototype.showEventContent = function() {
    if (!this._isInitEvent)
        this.ready('step');
    this._totalScoreContainer.visible = true;
    this._specialChallengeInfoContainer.visible = true;
    this._contentContainer.visible = true
}
;
pigg.puzzle.view.MypageView.prototype.hideEventContent = function() {
    if (this._totalScoreContainer)
        this._totalScoreContainer.visible = false;
    if (this._specialChallengeInfoContainer)
        this._specialChallengeInfoContainer.visible = false;
    if (this._contentContainer)
        this._contentContainer.visible = false
}
;
pigg.puzzle.view.MypageView.prototype.showRankingContent = function() {
    if (!this._isInitRanking) {
        this._main.showApiLoading();
        this._main.initRanking('mypage');
        return
    } else {
        this._main.mypageRankingView.show();
        this._rankingContainer.visible = true
    }
}
;
pigg.puzzle.view.MypageView.prototype.hideRankingContent = function() {
    this._rankingContainer.visible = false
}
;
pigg.puzzle.view.MypageView.prototype.updateInfo = function(onlyEventTime) {
    onlyEventTime = typeof onlyEventTime !== 'undefined' ? onlyEventTime : false;
    var endTime;
    var dayCount;
    var totalHour;
    var hourCount;
    var minuteCount;
    var hourDigit = '';
    var minuteDigit = '';
    endTime = this._main.eventData.endTime - this._main.eventData.serverTime;
    dayCount = org.apache.royale.utils.Language._int(endTime / 864E5);
    totalHour = org.apache.royale.utils.Language._int(endTime / 36E5);
    hourCount = totalHour - dayCount * 24;
    minuteCount = org.apache.royale.utils.Language._int(endTime / 6E4 - totalHour * 60);
    if (hourCount < 10)
        hourDigit = '0';
    if (minuteCount < 10)
        minuteDigit = '0';
    var _currentRemainTimeTxt = '\u6b8b\u308a' + dayCount + '\u65e5\u3068' + hourDigit + hourCount + '\u6642\u9593' + minuteDigit + minuteCount + '\u5206\n ';
    this._infoEventRemainTimeTxt.text = _currentRemainTimeTxt;
    if (onlyEventTime)
        return;
    if (this._main.eventData.limitedTermIncentiveExists) {
        endTime = this._main.eventData.limitedTermEndTime - this._main.eventData.serverTime;
        dayCount = org.apache.royale.utils.Language._int(endTime / 864E5);
        totalHour = org.apache.royale.utils.Language._int(endTime / 36E5);
        hourCount = totalHour - dayCount * 24;
        minuteCount = org.apache.royale.utils.Language._int(endTime / 6E4 - totalHour * 60);
        if (this._infoTermLimitTxt)
            if (dayCount > 0)
                this._infoTermLimitTxt.text = '\u6b8b\u308a' + dayCount + '\u65e5\n ';
            else if (hourCount > 0 || minuteCount > 0)
                this._infoTermLimitTxt.text = '\u672c\u65e5\u307e\u3067\n ';
            else if (this._spTermIconView && this._spTermIconView.isSpc != 1) {
                this._spTermIconView.isSpc = 1;
                this._spTermIconView.isEnd = true;
                this._spTermIconView.updateIconData();
                this._infoTermLimitTxt.text = '';
                this.removeFromParent(this._infoTermLimitTxt);
                if (!this._main.userData.hasLimitedTermIncentive)
                    this.setJoinSpecialChallenge('term', 1)
            }
    }
    if (this._main.eventData.limitedQuantityIncentiveExists)
        if (this._main.eventData.limitedQuantityStock > 0)
            this._infoStockQuantityTxt.text = '\u6b8b\u308a' + this._main.eventData.limitedQuantityStock + '\u500b\n ';
        else if (this._spQuantityIconView && this._spQuantityIconView.isSpc != 1) {
            this._spQuantityIconView.isSpc = 1;
            this._spQuantityIconView.isEnd = true;
            this._spQuantityIconView.updateIconData();
            this._infoStockQuantityTxt.text = '';
            this.removeFromParent(this._infoStockQuantityTxt);
            if (!this._main.userData.hasLimitedTermIncentive)
                this.setJoinSpecialChallenge('quantity', 1)
        }
    if (this._main.specialChallengeExist) {
        if (this._main.userData.hasLimitedTermIncentive && !this._spTermIconView.isGet) {
            if (this._spTermIconView.isSpc == 0)
                this._spTermIconView.isSpc = 2;
            this._spTermIconView.isGet = true;
            this._spTermIconView.updateIconData();
            this.setJoinSpecialChallenge('term', 2)
        }
        if (this._main.userData.hasLimitedQuantityIncentive && !this._spQuantityIconView.isGet) {
            if (this._spQuantityIconView.isSpc == 0)
                this._spQuantityIconView.isSpc = 2;
            this._spQuantityIconView.isGet = true;
            this._spQuantityIconView.updateIconData();
            this.setJoinSpecialChallenge('quantity', 2)
        }
        if (this._setTermStatus == -1)
            this.setJoinSpecialChallenge('term', 0);
        if (this._setQuantityStatus == -1)
            this.setJoinSpecialChallenge('quantity', 0)
    }
    this._fontNumberManager.makeNumber('totalScore', this._main.totalPoint)
}
;
pigg.puzzle.view.MypageView.prototype._rankStepSwitchBtn;
pigg.puzzle.view.MypageView.prototype.setRankingBtn = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnAction('down', 5)
    };
    var __localFn1__ = function(e) {
        self.btnAction('down', 4)
    };
    var __localFn2__ = function(e) {
        self.btnAction('out', 4)
    };
    var __localFn3__ = function(e) {
        self.btnAction('click', 4);
        if (!self._isInitRanking) {
            self._main.showApiLoading();
            self._main.initRanking('mypage')
        } else
            self.switchStepRanking()
    };
    if (!this._main.existRanking) {
        this._playBtnsTilemap.addTile(this._remmyTile = new openfl.display.Tile(this.RECT_BTN_REMMY));
        this._remmyTile.originX = 152;
        this._remmyTile.originY = 135;
        this._remmyTile.x = 477 + 152;
        this._remmyTile.y = 103 + 135;
        this._rankStepSwitchBtn = new openfl.display.Sprite;
        this._rankStepSwitchBtn.graphics.beginFill(16711680, 0);
        this._rankStepSwitchBtn.graphics.drawRect(0, 0, 145, 144);
        this._rankStepSwitchBtn.graphics.endFill();
        this._rankStepSwitchBtn.x = 493;
        this._rankStepSwitchBtn.y = 94;
        this._playBtnsContainer.addChild(this._rankStepSwitchBtn);
        this._rankStepSwitchBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
        return
    }
    if (this._rankingBtnTile == null) {
        this._playBtnsTilemap.addTile(this._rankingBtnTile = new TileBase(this.RECT_BTN_RANKING));
        this._rankingBtnTile.x = 449 + 195;
        this._rankingBtnTile.y = 55 + 192;
        this._rankingBtnTile.originX = 195;
        this._rankingBtnTile.originY = 192;
        this._rankStepSwitchBtn = new openfl.display.Sprite;
        this._rankStepSwitchBtn.graphics.beginFill(16711680, 0);
        this._rankStepSwitchBtn.graphics.drawRect(0, 0, 145, 144);
        this._rankStepSwitchBtn.graphics.endFill();
        this._rankStepSwitchBtn.x = 493;
        this._rankStepSwitchBtn.y = 94;
        this._playBtnsContainer.addChild(this._rankStepSwitchBtn);
        this._rankStepSwitchBtn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn1__);
        this._rankStepSwitchBtn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, __localFn2__);
        this._rankStepSwitchBtn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn3__);
        this._playBtnsTilemap.addTile(this._stepBtnTile = new TileBase(this.RECT_BTN_STEP));
        this._stepBtnTile.originX = 76;
        this._stepBtnTile.originY = 23;
        this._stepBtnTile.x = 556;
        this._stepBtnTile.y = 197;
        this._stepBtnTile.visible = false
    }
}
;
pigg.puzzle.view.MypageView.prototype.showImageView = function() {
    if (this._imageViewContainer == null)
        this.initImageView();
    else {
        this._imageViewBlack.alpha = 0;
        com.greensock.TweenMax.to(this._imageViewBlack, .2, {
            alpha: 1
        });
        this._imageView.scaleX = this._imageView.scaleY = .7;
        com.greensock.TweenMax.to(this._imageView, .4, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        this._container.addChild(this._imageViewContainer)
    }
}
;
pigg.puzzle.view.MypageView.prototype.initImageView = function() {
    this._isWaitShowImageView = true;
    this._main.showApiLoading();
    var innerView = new openfl.display.Sprite;
    var thumbUrl;
    this._imageViewContainer = new openfl.display.Sprite;
    this._imageView = new openfl.display.Sprite;
    this._imageViewBlack = this.makeBackBlack();
    this._imageViewContainer.addChild(this._imageViewBlack);
    this._imageViewContainer.addChild(this._imageView);
    this._imageViewBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideImageView, this, 'hideImageView'));
    this._imageView.addChild(innerView);
    var imgTileset = this._main.mypagePartsTileset.clone();
    imgTileset.addRect(new openfl.geom.Rectangle(0,837,566,50));
    imgTileset.addRect(new openfl.geom.Rectangle(0,888,566,123));
    imgTileset.addRect(new openfl.geom.Rectangle(0,888,566,1));
    var imgTilemap = new openfl.display.Tilemap(566,673,imgTileset);
    var tlTop;
    var tlBottom;
    var tlCenter;
    imgTilemap.addTile(tlTop = new TileBase(0));
    imgTilemap.addTile(tlBottom = new TileBase(1));
    imgTilemap.addTile(tlCenter = new TileBase(2));
    tlBottom.y = 550;
    tlCenter.y = 50;
    tlCenter.scaleY = 500;
    innerView.addChild(imgTilemap);
    innerView.x = -(pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2);
    innerView.y = -(pigg.puzzle.view.CommonView.MYPAGE_HEIGHT / 2);
    this._imageView.x = 37 + pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
    this._imageView.y = 90 + pigg.puzzle.view.CommonView.MYPAGE_HEIGHT / 2;
    this._imageViewPng = new openfl.display.Sprite;
    innerView.addChild(this._imageViewPng);
    this._imageViewPng.x = 36;
    this._imageViewPng.y = 54;
    innerView.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.linkBtnCL, this, 'linkBtnCL'));
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/incentive_' + this._main.eventData.eventCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/incentive_' + this._main.eventData.eventCode + '.png';
    this._main.loadDataManager.loadPng(thumbUrl, 'imageView', org.apache.royale.utils.Language.closure(this.onLoadPng, this, 'onLoadPng'), this._imageViewPng);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideImageView, this, 'hideImageView'));
    closeBtn.x = 516;
    closeBtn.y = 7;
    innerView.addChild(closeBtn)
}
;
pigg.puzzle.view.MypageView.prototype.linkBtnCL = function(e) {
    this.traceLog('linkBtnCL::', this.mouseX, this.mouseY);
    if (this.mouseX > 380 && this.mouseX < 580 && this.mouseY > 710 && this.mouseY < 750)
        openfl.net.navigateToURL(new openfl.net.URLRequest(this._main.eventData.detailURL), '_blank')
}
;
pigg.puzzle.view.MypageView.prototype.hideImageView = function(e) {
    var self = this;
    e = typeof e !== 'undefined' ? e : null;
    var __localFn0__ = function() {
        self.removeFromParent(self._imageViewContainer);
        self._isShowOverView = -1
    };
    com.greensock.TweenMax.killTweensOf(this._imageView);
    com.greensock.TweenMax.to(this._imageViewBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._imageView, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.MypageView.prototype.mypageViewMD = function(e) {
    if (this._isShowOverView != -1)
        return;
    this.md();
    if (this._isShowOutOfTerm) {
        this.traceLog('mypageViewMD::', e.currentTarget.mouseX, e.currentTarget.mouseY);
        this._outoftermBalloon.scaleX = this._outoftermBalloon.scaleY = .5;
        this._outoftermBalloon.rotation = Math.random() * 90 - 45;
        com.greensock.TweenMax.killTweensOf(this._outoftermBalloon);
        com.greensock.TweenMax.to(this._outoftermBalloon, 1, {
            rotation: 0,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        if (e.currentTarget.mouseX > 98 && e.currentTarget.mouseX < 544 && e.currentTarget.mouseY > 734 && e.currentTarget.mouseY < 810)
            openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_BLOG), '_self');
        return
    }
    if (this._currentDispMode == 'step')
        if (this._main.isJoinSpecialChallenge == -1)
            if (!this._main.isEventComplete) {
                if (this.mouseX > 383 && this.mouseX < 530 && this.mouseY > 529 && this.mouseY < 677) {
                    this.traceLog('\u3069\u3046\u3076\u3064\u30bf\u30c3\u30d7');
                    this._main.spineAnimal.playAction('joy', 1);
                    return
                }
            } else {
                if (this.mouseX > 40 && this.mouseX < 610 && this.mouseY > 360 && this.mouseY < 650) {
                    this.traceLog('\u30db\u30fc\u3068\u304a\u3081\u3067\u3068\u3046');
                    this._main.spineHukurouQuarter.playAction('joy', 1);
                    this._allStepClearTxtTile.scaleX = this._allStepClearTxtTile.scaleY = .7;
                    com.greensock.TweenMax.killTweensOf(this._allStepClearTxtTile);
                    com.greensock.TweenMax.to(this._allStepClearTxtTile, .5, {
                        scaleX: 1,
                        scaleY: 1,
                        ease: com.greensock.easing.Elastic.easeOut.config(1.5, .4)
                    });
                    return
                }
            }
        else
            ;
}
;
pigg.puzzle.view.MypageView.prototype.mypageViewCL = function(e) {
    if (this._isShowOverView != -1)
        return;
    if (this._isShowOutOfTerm)
        return;
    if (this.mouseX > 422 && this.mouseX < 622 && this.mouseY > 173 && this.mouseY < 238) {
        this.btnAction('click', 0);
        this.showImageView();
        this._isShowOverView = 0;
        return
    } else if (this.mouseX > 46 && this.mouseX < 585 && this.mouseY > 42 && this.mouseY < 222) {
        openfl.net.navigateToURL(new openfl.net.URLRequest(this._main.eventData.detailURL), '_blank');
        return
    } else if (this.mouseX > 153 && this.mouseX < 483 && this.mouseY > 706 && this.mouseY < 828) {
        this.traceLog('\u30d7\u30ec\u30a4\u30dc\u30bf\u30f3');
        this.btnAction('click', 1);
        if (AsData.gameWindow && !AsData.gameWindow.closed)
            AsData.gameWindow.close();
        AsData.gameWindow = window.open(pigg.puzzle.data.CommonData.URL_PUZZLE_GAME, '_piggPuzzleGame');
        window.blur();
        AsData.gameWindow.focus();
        return
    } else if (this.mouseX > 15 && this.mouseX < 132 && this.mouseY > 590 && this.mouseY < 707) {
        this.traceLog('\u30a4\u30d9\u30f3\u30c8\u30dc\u30bf\u30f3', this._currentRankingMode);
        this.btnAction('click', 2);
        if (this._currentDispMode == 'rank')
            this._main.showRankingIncentiveView(this._currentRankingMode);
        else if (this._currentDispMode == 'step')
            this._main.showEventView();
        return
    } else if (this.mouseX > 15 && this.mouseX < 132 && this.mouseY > 709 && this.mouseY < 828) {
        this.traceLog('\u30e1\u30cb\u30e5\u30fc\u30dc\u30bf\u30f3');
        this.btnAction('click', 3);
        this._main.showMenu();
        return
    }
    if (this._currentDispMode == 'step')
        if (this._main.isJoinSpecialChallenge == -1) {
            if (this.mouseX > 286 && this.mouseX < 510 && this.mouseY > 243 && this.mouseY < 350) {
                if (this._main.specialChallengeExist) {
                    this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30bf\u30c3\u30d7');
                    this._main.showEventView(0);
                    return
                }
            } else if (this.mouseX > 510 && this.mouseX < 628 && this.mouseY > 243 && this.mouseY < 350)
                if (this._main.specialChallengeExist) {
                    this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30bf\u30c3\u30d7');
                    this._main.showEventView(1);
                    return
                }
            if (!this._main.isEventComplete)
                if (this.mouseX > 184 && this.mouseX < 438 && this.mouseY > 351 && this.mouseY < 595) {
                    this.traceLog('main\u30a4\u30f3\u30bb\u30f3\u30bf\u30c3\u30d7');
                    this.btnDownAction(this._mainIncentiveContainer);
                    this._main.showEventView();
                    return
                }
        } else if (this.mouseX > 135 && this.mouseX < 520 && this.mouseY > 400 && this.mouseY < 520) {
            this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30bf\u30c3\u30d7');
            this._main.showEventView(0);
            return
        } else {
            if (this.mouseX > 135 && this.mouseX < 520 && this.mouseY > 520 && this.mouseY < 640) {
                this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30bf\u30c3\u30d7');
                this._main.showEventView(1);
                return
            }
        }
    else if (this._currentDispMode == 'rank') {
        if (this.mouseX > 502 && this.mouseX < 640 && this.mouseY > 330 && this.mouseY < 370) {
            this.traceLog('\u4e0a\u4f4d\u3092\u898b\u308b');
            this._main.showTopRankingView(this._currentRankingMode);
            return
        } else if (this.mouseX > 100 && this.mouseX < 540 && this.mouseY > 400 && this.mouseY < 520) {
            this.traceLog('\u73fe\u5728\u306e\u3054\u307b\u3046\u3073\u8a73\u7d30');
            if (this._currentRankingMode == 'score')
                this._main.showRankingIncentiveView('score', this._main.currentScoreAward);
            else if (this._currentRankingMode == 'winning_streak')
                this._main.showRankingIncentiveView('winning_streak', this._main.currentWinningAward);
            return
        } else if (this.mouseX > 160 && this.mouseX < 500 && this.mouseY > 550 && this.mouseY < 650) {
            this.traceLog('\u6b21\u306e\u3054\u307b\u3046\u3073\u8a73\u7d30');
            if (this._currentRankingMode == 'score' && this._main.currentScoreAward < 8)
                this._main.showRankingIncentiveView('score', this._main.currentScoreAward + 1);
            else if (this._currentRankingMode == 'winning_streak' && this._main.currentWinningAward < 8)
                this._main.showRankingIncentiveView('winning_streak', this._main.currentWinningAward + 1);
            return
        }
        if (this._currentRankingMode == 'score') {
            if (this.mouseX > 320 && this.mouseX < 640 && this.mouseY > 250 && this.mouseY < 318)
                this.switchRankingType()
        } else if (this._currentRankingMode == 'winning_streak')
            if (this.mouseX > 0 && this.mouseX < 320 && this.mouseY > 250 && this.mouseY < 318)
                this.switchRankingType()
    }
}
;
pigg.puzzle.view.MypageView.prototype.btnAction = function(action, btnType) {
    this.traceLog('btnAction::', action, btnType);
    if (action == 'down')
        if (btnType == 0)
            com.greensock.TweenMax.to(this._imageBtnTile, .6, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1.15,
                scaleY: 1.15
            });
        else if (btnType == 1)
            com.greensock.TweenMax.to(this._playBtnTile, .6, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1.1,
                scaleY: 1.1
            });
        else if (btnType == 2)
            com.greensock.TweenMax.to(this._eventBtnTile, .6, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1.2,
                scaleY: 1.2
            });
        else if (btnType == 3)
            com.greensock.TweenMax.to(this._menuBtnTile, .6, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1.2,
                scaleY: 1.2
            });
        else if (btnType == 4)
            if (this._currentDispMode == 'step')
                com.greensock.TweenMax.to(this._rankingBtnTile, .1, {
                    ease: com.greensock.easing.Cubic.easeOut,
                    scaleX: 1.1,
                    scaleY: 1.1
                });
            else
                com.greensock.TweenMax.to(this._stepBtnTile, .1, {
                    ease: com.greensock.easing.Cubic.easeOut,
                    scaleX: 1.1,
                    scaleY: 1.1
                });
        else {
            if (btnType == 5) {
                com.greensock.TweenMax.killTweensOf(this._remmyTile);
                this._remmyTile.scaleX = this._remmyTile.scaleY = .8;
                this._remmyTile.rotation = Math.random() * 30 - 15;
                com.greensock.TweenMax.to(this._remmyTile, .75, {
                    rotation: 0,
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut
                })
            }
        }
    else if (action == 'out')
        if (btnType == 0)
            com.greensock.TweenMax.to(this._imageBtnTile, .1, {
                ease: com.greensock.easing.Cubic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 1)
            com.greensock.TweenMax.to(this._playBtnTile, .1, {
                ease: com.greensock.easing.Cubic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 2)
            com.greensock.TweenMax.to(this._eventBtnTile, .1, {
                ease: com.greensock.easing.Cubic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 3)
            com.greensock.TweenMax.to(this._menuBtnTile, .1, {
                ease: com.greensock.easing.Cubic.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else {
            if (btnType == 4)
                if (this._currentDispMode == 'step')
                    com.greensock.TweenMax.to(this._rankingBtnTile, .1, {
                        ease: com.greensock.easing.Cubic.easeOut,
                        scaleX: 1,
                        scaleY: 1
                    });
                else
                    com.greensock.TweenMax.to(this._stepBtnTile, .1, {
                        ease: com.greensock.easing.Cubic.easeOut,
                        scaleX: 1,
                        scaleY: 1
                    })
        }
    else if (action == 'click')
        if (btnType == 0)
            com.greensock.TweenMax.to(this._imageBtnTile, .3, {
                ease: com.greensock.easing.Back.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 1)
            com.greensock.TweenMax.to(this._playBtnTile, .3, {
                ease: com.greensock.easing.Back.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 2)
            com.greensock.TweenMax.to(this._eventBtnTile, .3, {
                ease: com.greensock.easing.Back.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 3)
            com.greensock.TweenMax.to(this._menuBtnTile, .3, {
                ease: com.greensock.easing.Back.easeOut,
                scaleX: 1,
                scaleY: 1
            });
        else if (btnType == 4)
            if (this._currentDispMode == 'step')
                com.greensock.TweenMax.to(this._rankingBtnTile, .3, {
                    ease: com.greensock.easing.Back.easeOut,
                    scaleX: 1,
                    scaleY: 1
                });
            else
                com.greensock.TweenMax.to(this._stepBtnTile, .3, {
                    ease: com.greensock.easing.Back.easeOut,
                    scaleX: 1,
                    scaleY: 1
                })
}
;
pigg.puzzle.view.MypageView.prototype._outoftermBalloon;
pigg.puzzle.view.MypageView.prototype._isShowOutOfTerm;
pigg.puzzle.view.MypageView.prototype.showOutOfTerm = function() {
    this._main.showApiLoading();
    this.traceLog('showOutOfTerm');
    var tileset = new openfl.display.Tileset(null);
    this._loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_MYPAGE_OUTOFTERM), 'outofterm', org.apache.royale.utils.Language.closure(this.loadOutOfTerm, this, 'loadOutOfTerm'), tileset);
    var tilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,0,pigg.puzzle.view.CommonView.MYPAGE_WIDTH,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT))));
    tilemap.addTile(this._outoftermBalloon = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,pigg.puzzle.view.CommonView.MYPAGE_HEIGHT + 1,198,116))));
    this._outoftermBalloon.originX = 147;
    this._outoftermBalloon.originY = 108;
    this._outoftermBalloon.x = 89 + 147;
    this._outoftermBalloon.y = 214 + 108;
    this._outoftermBalloon.scaleX = this._outoftermBalloon.scaleY = 1E-4;
    this._container.addChild(tilemap)
}
;
pigg.puzzle.view.MypageView.prototype.loadOutOfTerm = function(code, bmd, tileset) {
    tileset.bitmapData = bmd;
    com.greensock.TweenMax.to(this._outoftermBalloon, 1, {
        delay: .5,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this._main.hideApiLoading();
    this._isShowOutOfTerm = true
}
;
pigg.puzzle.view.MypageView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MypageView',
        qName: 'pigg.puzzle.view.MypageView',
        kind: 'class'
    }]
};
pigg.puzzle.view.MypageView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MypageView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.manager.LoadDataManager',
                            optional: false
                        }]
                    }
                },
                'ready': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }]
                    }
                },
                'showTutotiralIncentive': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'showPlayButton': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'closeMD': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: false
                        }]
                    }
                },
                'initTop': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'initRankingContent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                },
                'updateEventBtn': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'switchStepRanking': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'switchRankingType': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'updateInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'hideImageView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: true
                        }]
                    }
                },
                'showOutOfTerm': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView'
                },
                'loadOutOfTerm': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Tileset',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.flash.FlashTextureLoader = function(bitmaps) {
    this.bitmapDatas = {};
    if (org.apache.royale.utils.Language.is(bitmaps, openfl.display.BitmapData)) {
        this.singleBitmapData = org.apache.royale.utils.Language.as(bitmaps, openfl.display.BitmapData, true);
        return
    }
    if (org.apache.royale.utils.Language.is(bitmaps, openfl.display.Bitmap)) {
        this.singleBitmapData = org.apache.royale.utils.Language.as(bitmaps, openfl.display.Bitmap, true).bitmapData;
        return
    }
    for (var path in bitmaps) {
        var object = bitmaps[path];
        var bitmapData;
        if (org.apache.royale.utils.Language.is(object, openfl.display.BitmapData))
            bitmapData = org.apache.royale.utils.Language.as(object, openfl.display.BitmapData, true);
        else if (org.apache.royale.utils.Language.is(object, openfl.display.Bitmap))
            bitmapData = org.apache.royale.utils.Language.as(object, openfl.display.Bitmap, true).bitmapData;
        else
            throw new openfl.errors.ArgumentError('Object for path "' + path + '" must be a Bitmap or BitmapData: ' + object);
        this.bitmapDatas[path] = bitmapData
    }
}
;
goog.exportSymbol('spine.flash.FlashTextureLoader', spine.flash.FlashTextureLoader);
spine.flash.FlashTextureLoader.prototype.bitmapDatas;
spine.flash.FlashTextureLoader.prototype.singleBitmapData;
spine.flash.FlashTextureLoader.prototype.loadPage = function(page, path) {
    var bitmapData = this.singleBitmapData || this.bitmapDatas[path];
    if (!bitmapData)
        throw new openfl.errors.ArgumentError('BitmapData not found with name: ' + path);
    page.rendererObject = bitmapData;
    page.width = bitmapData.width;
    page.height = bitmapData.height
}
;
spine.flash.FlashTextureLoader.prototype.loadRegion = function(region) {}
;
spine.flash.FlashTextureLoader.prototype.unloadPage = function(page) {
    org.apache.royale.utils.Language.as(page.rendererObject, openfl.display.BitmapData, true).dispose()
}
;
spine.flash.FlashTextureLoader.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'FlashTextureLoader',
        qName: 'spine.flash.FlashTextureLoader',
        kind: 'class'
    }],
    interfaces: [spine.atlas.TextureLoader]
};
spine.flash.FlashTextureLoader.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'bitmapDatas': {
                    type: 'Object'
                },
                'singleBitmapData': {
                    type: 'openfl.display.BitmapData'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'FlashTextureLoader': {
                    type: '',
                    declaredBy: 'spine.flash.FlashTextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }]
                    }
                },
                'loadPage': {
                    type: 'void',
                    declaredBy: 'spine.flash.FlashTextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasPage',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'loadRegion': {
                    type: 'void',
                    declaredBy: 'spine.flash.FlashTextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasRegion',
                            optional: false
                        }]
                    }
                },
                'unloadPage': {
                    type: 'void',
                    declaredBy: 'spine.flash.FlashTextureLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.AtlasPage',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.TutorialGameView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.GRID = [[], [[[5, 3], [4, 4], [5, 4], [5, 5]], [[5, 4], [5, 5], [6, 4], [7, 4]]], [[[5, 2], [5, 3], [5, 4], [5, 5], [4, 4]], [[5, 5], [6, 5], [6, 6], [6, 7]], [[6, 4], [4, 5], [5, 5], [6, 5], [7, 5]], [[6, 4], [6, 5], [7, 4], [8, 4]]], [[[1, 2], [2, 2], [3, 2], [4, 2], [3, 3], [3, 4]], [[3, 4], [3, 5], [2, 5], [1, 5]], [[6, 2], [7, 2], [8, 2], [7, 1], [7, 3], [7, 4]], [[7, 4], [7, 5], [8, 5], [9, 5]]], [[[3, 2], [4, 2]], [[6, 4], [6, 5]]], [[[3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [5, 3]], [[4, 4], [5, 4]]]];
    this.GRID_THEME = [[[4, 2], [7, 2], [3, 3], [6, 3], [5, 4], [7, 4], [4, 5], [5, 5], [3, 6], [7, 6]], [[4, 3], [6, 3], [5, 4], [4, 5], [6, 5]], [[4, 3], [6, 3], [5, 4], [4, 5], [6, 5]], [[4, 3], [5, 3], [6, 3], [4, 4], [5, 4], [6, 4], [4, 5], [5, 5], [6, 5]], [[5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7]], [[3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6]]];
    this.GRID_2ND = [[[2, 3], [3, 3], [4, 3], [6, 3], [7, 3], [8, 3], [2, 4], [3, 4], [5, 4], [7, 4], [8, 4], [2, 5], [3, 5], [4, 5], [6, 5], [7, 5], [8, 5]], [[4, 2], [5, 2], [6, 2], [3, 3], [5, 3], [7, 3], [3, 4], [4, 4], [6, 4], [7, 4], [3, 5], [5, 5], [7, 5], [4, 6], [5, 6], [6, 6]], [[3, 4], [5, 4], [7, 4]], [[3, 4], [5, 4], [7, 4]]];
    this.POINTER = [[], [[4, 4, 0], [5, 4, 2]], [[4, 4, 0], [5, 5, 0], [6, 4, 2], [6, 4, 2]], [[3, 2, 0], [3, 4, 2], [7, 1, 2], [7, 4, 2]], [[3, 2, 0], [6, 4, 2]], [[5, 3, 2], [4, 4, 0]]];
    this.MESSAGE = [[], ['\u30b0\u30df\u3092\u30e8\u30b3\u306b\u52d5\u304b\u3057\u3066\n3\u3064\u305d\u308d\u3048\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u30ca\u30a4\u30b9\uff01\n\u3000', '\u4eca\u5ea6\u306f\u30bf\u30c6\u306b\u52d5\u304b\u3057\u3066\n3\u3064\u305d\u308d\u3048\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u3058\u3087\u3046\u305a\u30fc\uff01\n\u3000', '\u79fb\u52d5\u56de\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\uff01\n\u3000'], ['\u30b0\u30df\u3092\u30e8\u30b3\u306b\u52d5\u304b\u3057\u3066\n4\u3064\u305d\u308d\u3048\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u30e8\u30b3\u306e\u77e2\u5370\u30b0\u30df\u304c\n\u3067\u304d\u305f\u3088\uff01\n\u3000', '\u30de\u30c3\u30c1\u3057\u3066\u30e8\u30b3\u4e00\u5217\u3092\n\u6d88\u3057\u3061\u3083\u304a\u3046\uff01\n\u3000', '', '\u4eca\u5ea6\u306f\u30bf\u30c6\u306b\u52d5\u304b\u3057\u3066\n4\u3064\u305d\u308d\u3048\u3088\u3046\uff01\n\u3000', '\u30bf\u30c6\u306e\u77e2\u5370\u30b0\u30df\u304c\n\u5b8c\u6210\uff01\n\u3000', '\u30de\u30c3\u30c1\u3057\u3066\u30bf\u30c6\u4e00\u5217\u3092\n\u6d88\u3057\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u79fb\u52d5\u56de\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\uff01\n\u3000'], ['\u30b0\u30df\u3092\u30e8\u30b3\u306b\u52d5\u304b\u3057\u3066\nL\u5b57\u306b\u305d\u308d\u3048\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u3068\u3052\u3068\u3052\u30b0\u30df\u304c\n\u3067\u304d\u305f\u3088\uff01\n\u3000', '\u30de\u30c3\u30c1\u3057\u3066\u5e83\u3044\u7bc4\u56f2\u3092\n\u6d88\u3057\u3066\u307f\u3088\u3046\uff01\n\u3000', '', '\u4eca\u5ea6\u306fT\u5b57\u306b\n\u305d\u308d\u3048\u3066\u307f\u3066\u306d\uff01\n\u3000', '\u3068\u3052\u3068\u3052\u30b0\u30df\u306e\n\u5b8c\u6210\uff01\n\u3000', '\u30de\u30c3\u30c1\u3057\u3066\u305f\u304f\u3055\u3093\n\u6d88\u3057\u3061\u3083\u304a\u3046\uff01\n\u3000', '\u79fb\u52d5\u56de\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\uff01\n\u3000'], ['\u77e2\u5370\u30b0\u30df\u3069\u3046\u3057\u3092\n\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u30bf\u30c6\u30e8\u30b3\n\u3044\u3063\u307a\u3093\u306b\u6d88\u3057\u3066\u307f\u3088\u3046\uff01\n\u3000', '', '\u4eca\u5ea6\u306f\u77e2\u5370\u30b0\u30df\u3068\n\u3068\u3052\u3068\u3052\u30b0\u30df\u3092\n\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u30b9\u30da\u30b7\u30e3\u30eb\u30b0\u30df\u3092\u304b\u3051\n\u3042\u308f\u305b\u308b\u3068\u52b9\u679c\u30d0\u30c4\u30b0\u30f3\uff01\n\u3000', '\u79fb\u52d5\u56de\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\uff01\n\u3000'], ['\u30b0\u30df\u3092\u30bf\u30c6\u306b\u52d5\u304b\u3057\u3066\n5\u3064\u305d\u308d\u3048\u3066\u307f\u3088\u3046\uff01\n\u3000', '\u306a\u3093\u3068\uff01\n\u30ec\u30a4\u30f3\u30dc\u30fc\u30b0\u30df\u304c\u5b8c\u6210\uff01\n\u3000', '\u7d44\u307f\u5408\u308f\u305b\u305f\u30b0\u30df\u304c\n\u305c\u3093\u3076\u6d88\u3048\u3061\u3083\u3046\u3088\uff01\n\u3000', '\u3072\u3083\u301c\uff01\n\u3000', '\u79fb\u52d5\u56de\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n\u52d5\u304b\u3057\u3066\u307f\u3066\u306d\uff01\n\u3000']];
    this.MESSAGE_TUTORIAL_END = ['\u304a\u3064\u304b\u308c\u3055\u307e\u3067\u3057\u305f\uff01\n\u30d1\u30ba\u30eb\u306e\u904a\u3073\u65b9\u306f\n\u5927\u4f53\u3053\u3093\u306a\u611f\u3058\u3060\u3088\u266a\n\u3000', '\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u3089\n\u30e1\u30cb\u30e5\u30fc\u306e\u3010\u904a\u3073\u65b9\u3011\u3067\n\u78ba\u8a8d\u3057\u3066\u306d\uff01\n\u3000', '\u305d\u3057\u3066\u306a\u3093\u3068\n\u30b0\u30df\u30dd\u30a4\u30f3\u30c8\u304c\u500d\u5897\u3059\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u30dd\u30fc\u30b7\u30e7\u30f3\u3068\n\u3000', '\u30d7\u30ec\u30a4\u4e2d\u306b\u5f79\u7acb\u3064\n\u30db\u30fc\u306e\u304a\u305f\u3059\u3051\u30a2\u30a4\u30c6\u30e0\u304c\n\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\u266a\n\u3000', '\u4e0a\u624b\u306b\u4f7f\u3063\u3066\n\u30b2\u30fc\u30e0\u3092\u6709\u5229\u306b\u9032\u3081\u3066\u306d\uff01\n\u3000', '\u305d\u308c\u3058\u3083\u3042\u3001\n\u3069\u3046\u3076\u3064\u305f\u3061\u306e\u3044\u308d\u3093\u306a\n\u304a\u306d\u304c\u3044\u306b\u7b54\u3048\u3066\n\u3000', '\u30b0\u30df\u30dd\u30a4\u30f3\u30c8\u3092\n\u305f\u301c\u304f\u3055\u3093GET\u3057\u3088\u3046\u266a\n\u3000'];
    this.MESSAGE_THEME = ['\u304a\u984c\u306e\u30b0\u30df\u3092\n\u30de\u30c3\u30c1\u3057\u3066\u96c6\u3081\u3088\u3046\uff01\n\u3000', '\u30c4\u30bf\u306f\u4e2d\u306b\u5165\u3063\u3066\u308b\u30b0\u30df\u3092\n\u30de\u30c3\u30c1\u3055\u305b\u308b\u3068\n\u58ca\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\uff01\n\u3000', '\u306f\u3061\u307f\u3064\u306e\u3042\u308b\u5834\u6240\u306e\n\u30b0\u30df\u3092\u30de\u30c3\u30c1\u3055\u305b\u3066\n\u96c6\u3081\u3088\u3046\uff01\n\u3000', '\u8272\u306e\u6fc3\u3044\u306f\u3061\u307f\u3064\u306f\n2\u56de\u30de\u30c3\u30c1\u3055\u305b\u3066\n\u96c6\u3081\u3088\u3046\uff01\n\u3000', '\u306f\u3061\u306e\u5de3\u3092\n\u4e00\u756a\u4e0b\u307e\u3067\u843d\u3068\u305d\u3046\uff01\n\u3000', '\u304d\u308a\u304b\u3076\u306f\u3068\u306a\u308a\u3042\u3063\u305f\n\u30b0\u30df\u3092\u30de\u30c3\u30c1\u3055\u305b\u308b\u3068\n\u58ca\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\uff01\n\u3000', '\u8349\u306e\u4e0b\u306b\u30de\u30b7\u30e5\u30de\u30ed\u3046\u3055\u304e\u304c\n\u96a0\u308c\u3066\u3044\u308b\u3088\uff01\u30b0\u30df\u3092\n\u30de\u30c3\u30c1\u3057\u3066\u63a2\u3057\u3060\u305d\u3046\uff01\n\u3000'];
    this.MESSAGE_2ND = ['\u307e\u3064\u307c\u3063\u304f\u308a\u306f\u3068\u306a\u308a\u3042\u3063\u305f\n\u30b0\u30df\u3092\u30de\u30c3\u30c1\u3055\u305b\u308b\u3068\n\u58ca\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\uff01\n\u3000', '\u3068\u306a\u308a\u3042\u3063\u305f\u30b0\u30df\u3092\n\u30de\u30c3\u30c1\u3055\u305b\u3066\n\u82b1\u3092\u96c6\u3081\u3088\u3046\uff01\n\u3000', '\u91d1\u3068\u9280\u306e\u3069\u3093\u3050\u308a\u306b\u306f\u30b0\u30df\u30dd\u30a4\u30f3\u30c8\u304c\u305f\u304f\u3055\u3093\uff01\u3068\u306a\u308a\u306e\u30b0\u30df\u3092\u30de\u30c3\u30c1\u3057\u3066\u58ca\u3057\u3066\u306d\uff01\n\u3000', '\u30b0\u30df\u3092\u52d5\u304b\u3059\u524d\u306b\n\u30dd\u30fc\u30b7\u30e7\u30f3\u304c\n\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\uff01\n\u3000'];
    this.MESSAGE_ALL_STEP_CLEAR1 = ['\u304a\u3081\u3067\u3068\u3046\u301c\u266a\n\u3059\u3079\u3066\u306eSTEP\u3092\n\u30af\u30ea\u30a2\u3057\u305f\u3088\uff01\n ', '\u3069\u3046\u3076\u3064\u305f\u3061\u306e\u304a\u306d\u304c\u3044\u306b\n\u305f\u304f\u3055\u3093\u5fdc\u3048\u3066\u304f\u308c\u3066\n\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\uff01\n\u3000', 'STEP\u306f\u304a\u308f\u308a\u3060\u3051\u3069\n\u30d1\u30ba\u30eb\u306f\u307e\u3060\u307e\u3060\n\u904a\u3079\u308b\u3088\uff01\n ', '\u305f\u304f\u3055\u3093\u904a\u3093\u3067\n\u3082\u3063\u3068\u3082\u3063\u3068\n\u4e0a\u624b\u306b\u306a\u3063\u3061\u3083\u304a\u3046\u266a\n\u3000', '\u305d\u308c\u3067\u306f\u3001\u6b21\u306e\u30a4\u30d9\u30f3\u30c8\u3082\n\u697d\u3057\u307f\u306b\u5f85\u3063\u3066\u3044\u3066\u306d\u266a\n\u3000'];
    this.MESSAGE_ALL_STEP_CLEAR2 = ['\u304a\u3081\u3067\u3068\u3046\u301c\u266a\n\u3059\u3079\u3066\u306eSTEP\u3092\n\u30af\u30ea\u30a2\u3057\u305f\u3088\uff01\n ', '\u3069\u3046\u3076\u3064\u305f\u3061\u306e\u304a\u306d\u304c\u3044\u306b\n\u305f\u304f\u3055\u3093\u5fdc\u3048\u3066\u304f\u308c\u3066\n\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\uff01\n\u3000', 'STEP\u306f\u304a\u308f\u308a\u3060\u3051\u3069\n\u30d1\u30ba\u30eb\u306f\u307e\u3060\u307e\u3060\n\u904a\u3079\u308b\u3088\uff01\n ', '\u6b21\u306f\u30e9\u30f3\u30ad\u30f3\u30b0\u3067\n\u4e0a\u4f4d\u3092\u76ee\u6307\u3057\u3061\u3083\u304a\u3046\uff01\n\u3000', '\u305f\u304f\u3055\u3093\u904a\u3093\u3067\n\u7d20\u6575\u306a\u30a2\u30a4\u30c6\u30e0\u3092GET\u3057\u3066\u306d\uff01\n\u3000'];
    this.MESSAGE_ALL_STEP_CLEAR3 = ['\u304a\u3081\u3067\u3068\u3046\u301c\u266a\n\u3059\u3079\u3066\u306eSTEP\u3092\n\u30af\u30ea\u30a2\u3057\u305f\u3088\uff01\n ', '\u3069\u3046\u3076\u3064\u305f\u3061\u306e\u304a\u306d\u304c\u3044\u306b\n\u305f\u304f\u3055\u3093\u5fdc\u3048\u3066\u304f\u308c\u3066\n\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\uff01\n\u3000', '\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u3092\n\u30af\u30ea\u30a2\u3059\u308b\u3068\u3055\u3089\u306b\u8c6a\u83ef\u306a\n\u30a2\u30a4\u30c6\u30e0\u304c\u3082\u3089\u3048\u308b\u3088\uff01\n ', '\u305c\u3072\u3001\u53c2\u52a0\u3057\u3066\n\u30a2\u30a4\u30c6\u30e0GET\u3057\u3066\u306d\uff01\n\u3000'];
    this.MESSAGE_ALL_STEP_CLEAR4 = ['\u304a\u3081\u3067\u3068\u3046\u301c\u266a\n\u3059\u3079\u3066\u306eSTEP\u3092\n\u30af\u30ea\u30a2\u3057\u305f\u3088\uff01\n ', '\u3069\u3046\u3076\u3064\u305f\u3061\u306e\u304a\u306d\u304c\u3044\u306b\n\u305f\u304f\u3055\u3093\u5fdc\u3048\u3066\u304f\u308c\u3066\n\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\uff01\n\u3000', '\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u3092\n\u30af\u30ea\u30a2\u3059\u308b\u3068\u3055\u3089\u306b\u8c6a\u83ef\u306a\n\u30a2\u30a4\u30c6\u30e0\u304c\u3082\u3089\u3048\u308b\u3088\uff01\n ', '\u30e9\u30f3\u30ad\u30f3\u30b0\u3067\u3082\u4e0a\u4f4d\u3092\u76ee\u6307\u3057\u3066\n\u30a2\u30a4\u30c6\u30e0GET\u3057\u3066\u306d\uff01\n\u3000'];
    this.MESSAGE_SPC_CLEAR1 = ['\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\n\u30af\u30ea\u30a2\uff01\uff01\n\u304a\u3081\u3067\u3068\u3046\u301c\uff01\n ', '\u30c1\u30e3\u30ec\u30f3\u30b8\u306f\u304a\u308f\u308a\u3060\u3051\u3069\n\u30d1\u30ba\u30eb\u306f\u307e\u3060\u307e\u3060\n\u904a\u3079\u308b\u3088\uff01\n\u3000', '\u305f\u304f\u3055\u3093\u904a\u3093\u3067\n\u3082\u3063\u3068\u3082\u3063\u3068\n\u4e0a\u624b\u306b\u306a\u3063\u3061\u3083\u304a\u3046\u266a\n ', '\u305d\u308c\u3067\u306f\u3001\u6b21\u306e\u30a4\u30d9\u30f3\u30c8\u3082\n\u697d\u3057\u307f\u306b\u5f85\u3063\u3066\u3044\u3066\u306d\u266a\n\u3000'];
    this.MESSAGE_SPC_CLEAR2 = ['\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\n\u30af\u30ea\u30a2\uff01\uff01\n\u304a\u3081\u3067\u3068\u3046\u301c\uff01\n ', '\u30c1\u30e3\u30ec\u30f3\u30b8\u306f\u304a\u308f\u308a\u3060\u3051\u3069\n\u30d1\u30ba\u30eb\u306f\u307e\u3060\u307e\u3060\n\u904a\u3079\u308b\u3088\uff01\n\u3000', '\u6b21\u306f\u30e9\u30f3\u30ad\u30f3\u30b0\u3067\n\u4e0a\u4f4d\u3092\u76ee\u6307\u3057\u3061\u3083\u304a\u3046\uff01\n ', '\u305f\u304f\u3055\u3093\u904a\u3093\u3067\n\u7d20\u6575\u306a\u30a2\u30a4\u30c6\u30e0\u3092GET\u3057\u3066\u306d\uff01\n\u3000'];
    this._allStepClearMessage = [];
    this.traceLog('TutorialGameView')
}
;
goog.inherits(pigg.puzzle.view.TutorialGameView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.TutorialGameView', pigg.puzzle.view.TutorialGameView);
pigg.puzzle.view.TutorialGameView.prototype._main;
pigg.puzzle.view.TutorialGameView.prototype._container;
pigg.puzzle.view.TutorialGameView.prototype._backBlackContainer;
pigg.puzzle.view.TutorialGameView.prototype._black;
pigg.puzzle.view.TutorialGameView.prototype._blackEmpty;
pigg.puzzle.view.TutorialGameView.prototype._balloonContainer;
pigg.puzzle.view.TutorialGameView.prototype._balloon;
pigg.puzzle.view.TutorialGameView.prototype._messageTxt;
pigg.puzzle.view.TutorialGameView.prototype._hukurouContainer;
pigg.puzzle.view.TutorialGameView.prototype._hukurou;
pigg.puzzle.view.TutorialGameView.prototype._isShow;
pigg.puzzle.view.TutorialGameView.prototype._pointer;
pigg.puzzle.view.TutorialGameView.prototype._pointerTileset;
pigg.puzzle.view.TutorialGameView.prototype._pointerTilemap;
pigg.puzzle.view.TutorialGameView.prototype._tutorialTileset;
pigg.puzzle.view.TutorialGameView.prototype._isInit = false;
pigg.puzzle.view.TutorialGameView.prototype._currentGameTutorial = -1;
pigg.puzzle.view.TutorialGameView.prototype._balloonBgSide;
pigg.puzzle.view.TutorialGameView.prototype._balloonBgTop;
pigg.puzzle.view.TutorialGameView.prototype._messageContainer;
pigg.puzzle.view.TutorialGameView.prototype._nextBtnSpr;
pigg.puzzle.view.TutorialGameView.prototype._currentBalloonNum = 0;
pigg.puzzle.view.TutorialGameView.prototype._tutorialEndPostion;
pigg.puzzle.view.TutorialGameView.prototype._tutorialEndCheatItem;
pigg.puzzle.view.TutorialGameView.prototype._tutorialEndTilemap;
pigg.puzzle.view.TutorialGameView.prototype._skipBtnSpr;
pigg.puzzle.view.TutorialGameView.prototype._spineHukurouObj;
pigg.puzzle.view.TutorialGameView.prototype._hasTutorialEnd;
pigg.puzzle.view.TutorialGameView.prototype._joinRankingPanel;
pigg.puzzle.view.TutorialGameView.prototype._joinRankingContainer;
pigg.puzzle.view.TutorialGameView.prototype.GRID;
pigg.puzzle.view.TutorialGameView.prototype.GRID_THEME;
pigg.puzzle.view.TutorialGameView.prototype.GRID_2ND;
pigg.puzzle.view.TutorialGameView.prototype.POINTER;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_TUTORIAL_END;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_THEME;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_2ND;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_ALL_STEP_CLEAR1;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_ALL_STEP_CLEAR2;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_ALL_STEP_CLEAR3;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_ALL_STEP_CLEAR4;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_SPC_CLEAR1;
pigg.puzzle.view.TutorialGameView.prototype.MESSAGE_SPC_CLEAR2;
pigg.puzzle.view.TutorialGameView.prototype.clean = function() {}
;
pigg.puzzle.view.TutorialGameView.prototype.init = function(main) {
    var self = this;
    var __localFn0__ = function() {
        self.btnDownAction(self._nextBtnSpr)
    };
    this._isInit = true;
    this._main = main;
    this.visible = false;
    this._container = new openfl.display.Sprite;
    this.addChild(this._container);
    this._tutorialTileset = this._main.gamePartsTileset.clone();
    this._backBlackContainer = new openfl.display.Sprite;
    this._container.addChild(this._backBlackContainer);
    this._balloon = new openfl.display.Sprite;
    this._balloonContainer = new openfl.display.Sprite;
    this._messageContainer = new openfl.display.Sprite;
    this._messageContainer.y = -60;
    this._messageTxt = this.makeTextField(24, 6172954, openfl.text.TextFormatAlign.CENTER);
    this._messageTxt.wordWrap = true;
    this._messageTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    this._messageTxt.width = 320;
    this._messageTxt.x = 40;
    this._messageTxt.y = 20;
    this._balloonBgSide = new openfl.display.Sprite;
    this._balloon.addChild(this._balloonBgSide);
    var tl;
    var bgTIlemap = new openfl.display.Tilemap(400,200,this._tutorialTileset);
    this._balloonBgSide.addChild(bgTIlemap);
    bgTIlemap.addTile(new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(860,1426,46,142))));
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(907,1426,25,142))));
    tl.x = 344;
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(907,1426,1,142))));
    tl.x = 46;
    tl.scaleX = 298;
    this._balloonBgSide.y = -60;
    bgTIlemap = new openfl.display.Tilemap(400,200,this._tutorialTileset);
    this._balloonBgTop = new openfl.display.Sprite;
    this._balloonBgTop.addChild(bgTIlemap);
    this._balloon.addChild(this._balloonBgTop);
    bgTIlemap.addTile(new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(759,1426,32,164))));
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(827,1426,32,164))));
    tl.x = 306;
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(794,1426,33,164))));
    tl.x = 152;
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(792,1426,1,164))));
    tl.x = 32;
    tl.scaleX = 120;
    bgTIlemap.addTile(tl = new openfl.display.Tile(this._tutorialTileset.addRect(new openfl.geom.Rectangle(792,1426,1,164))));
    tl.x = 185;
    tl.scaleX = 121;
    this._balloonBgTop.y = -160;
    this._balloonBgTop.x = -150;
    this._balloon.x = 240;
    this._balloon.y = 810;
    this._messageContainer.addChild(this._messageTxt);
    this._balloon.addChild(this._messageContainer);
    this._balloonContainer.addChild(this._balloon);
    this._container.addChild(this._balloonContainer);
    this._hukurouContainer = new openfl.display.Sprite;
    this._spineHukurouObj = this._main.spineHukurouFront.clone();
    this._main.addSpine(this._spineHukurouObj, this._hukurouContainer);
    this._container.addChild(this._hukurouContainer);
    this._hukurouContainer.x = 100;
    this._hukurouContainer.y = 880;
    this._hukurouContainer.scaleX = this._hukurouContainer.scaleY = 1.1;
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
        this._pointerTileset = this._main.gamePieceTileset.clone();
        this._pointerTileset.addRect(new openfl.geom.Rectangle(384,256,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
        this._pointerTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT,this._pointerTileset);
        this._pointer = new TileBase;
        this._pointerTilemap.addTile(this._pointer);
        this._container.addChild(this._pointerTilemap);
        this._pointerTilemap.x = -34 + pigg.puzzle.view.CommonView.BALL_SIZE / 2;
        this._pointerTilemap.y = 158 + pigg.puzzle.view.CommonView.BALL_SIZE / 2;
        this._pointer.visible = false
    }
    this._nextBtnSpr = new openfl.display.Sprite;
    var tilemap = this.makeBtnBg(this._main);
    this._nextBtnSpr.addChild(tilemap);
    tilemap.addTile(tl = new openfl.display.Tile(tilemap.tileset.addRect(new openfl.geom.Rectangle(607,722,62,29))));
    tl.x = 119;
    tl.y = 35;
    tilemap.x = -150;
    tilemap.y = -50;
    this._nextBtnSpr.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
    this._nextBtnSpr.y = 700;
    this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    this._nextBtnSpr.scaleX = this._nextBtnSpr.scaleY = 0;
    this._nextBtnSpr.visible = false;
    this._container.addChild(this._nextBtnSpr);
    this._skipBtnSpr = new openfl.display.Sprite;
    var tileset = this._main.commonPartsTileset.clone();
    tilemap = new openfl.display.Tilemap(150,45,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(827,152,150,45))));
    tilemap.x = -75;
    tilemap.y = -22;
    this._skipBtnSpr.addChild(tilemap);
    this._skipBtnSpr.x = 554;
    this._skipBtnSpr.y = 866;
    this._skipBtnSpr.visible = false;
    this._container.addChild(this._skipBtnSpr)
}
;
pigg.puzzle.view.TutorialGameView.prototype.show = function() {
    this.visible = true;
    this._isShow = true
}
;
pigg.puzzle.view.TutorialGameView.prototype.hide = function(end, showIncentive) {
    end = typeof end !== 'undefined' ? end : false;
    showIncentive = typeof showIncentive !== 'undefined' ? showIncentive : -1;
    this.hideBlack();
    this.visible = false;
    this._isShow = false;
    this.traceLog('hide::_spineHukurouObj.parent::', this._spineHukurouObj.parent);
    if (this._spineHukurouObj.parent == this._hukurouContainer)
        this._spineHukurouObj.stopAction();
    this._skipBtnSpr.visible = false;
    this._nextBtnSpr.visible = false;
    this._main.isShowGameTutorial = false;
    if (this._tutorialEndPostion)
        this._tutorialEndPostion = null;
    if (this._tutorialEndCheatItem)
        this._tutorialEndCheatItem = null;
    if (this._tutorialEndTilemap) {
        this.removeFromParent(this._tutorialEndTilemap);
        this._tutorialEndTilemap = null
    }
    if (end)
        if (this._hasTutorialEnd) {
            this._main.gotoNextStepIncentiveMap();
            this._hasTutorialEnd = false
        } else if (showIncentive != -1 && showIncentive != 2)
            this._main.showStepClearIncentivePanel(showIncentive);
        else if (showIncentive == 2)
            this.showJoinRankingPanel();
        else
            this._main.loadDataManager.getBoardData()
}
;
pigg.puzzle.view.TutorialGameView.prototype.showJoinRankingPanel = function() {
    this.traceLog('showJoinRankingPanel');
    this._joinRankingContainer = new openfl.display.Sprite;
    this._joinRankingContainer.x = 0;
    this._joinRankingContainer.y = -30;
    this._joinRankingPanel = new openfl.display.Sprite;
    this._joinRankingContainer.addChild(this._joinRankingPanel);
    this._container.addChild(this._joinRankingContainer);
    var inner = new openfl.display.Sprite;
    this._joinRankingPanel.addChild(inner);
    this._joinRankingPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._joinRankingPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    inner.x = -582 / 2;
    inner.y = -688 / 2;
    var tileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(pigg.puzzle.data.CommonData.URL_JOIN_RANKING_PANEL, 'joinRankingPanel', org.apache.royale.utils.Language.closure(this.onLoadJoinRanknig, this, 'onLoadJoinRanknig'), tileset);
    tileset.addRect(new openfl.geom.Rectangle(0,0,582,689));
    var tilemap = new openfl.display.Tilemap(582,689,tileset);
    tilemap.addTile(new openfl.display.Tile);
    inner.addChild(tilemap);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideJoinRankingPanel, this, 'hideJoinRankingPanel'));
    inner.addChild(closeBtn);
    closeBtn.x = 524;
    closeBtn.y = 14;
    this._joinRankingPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.joinRankingMD, this, 'joinRankingMD'));
    this._main.showApiLoading();
    this._joinRankingPanel.visible = false;
    this.show()
}
;
pigg.puzzle.view.TutorialGameView.prototype.onLoadJoinRanknig = function(code, bmd, tileset) {
    this.traceLog('onLoadJoinRanknig');
    tileset.bitmapData = bmd;
    this._main.hideApiLoading();
    this._joinRankingPanel.visible = true;
    this._joinRankingPanel.scaleX = this._joinRankingPanel.scaleY = .5;
    com.greensock.TweenMax.to(this._joinRankingPanel, .6, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.TutorialGameView.prototype.joinRankingMD = function(e) {
    this.traceLog('joinRankingMD::', e.currentTarget.mouseX, e.currentTarget.mouseY);
    if (e.currentTarget.mouseX > 60 && e.currentTarget.mouseX < 260 && e.currentTarget.mouseY > 270 && e.currentTarget.mouseY < 320)
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_ABOUT_RANKING), '_blank')
}
;
pigg.puzzle.view.TutorialGameView.prototype.hideJoinRankingPanel = function() {
    var self = this;
    var __localFn0__ = function() {
        self.removeFromParent(self._joinRankingContainer);
        self._joinRankingContainer = null;
        self._joinRankingPanel = null;
        self._main.loadDataManager.getBoardData()
    };
    this.traceLog('hideJoinRankingPanel');
    com.greensock.TweenMax.to(this._joinRankingPanel, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.TutorialGameView.prototype.showGameTutorial = function(pageNum, balloonNum, showBlack) {
    this._main.isShowGameTutorial = true;
    this._balloonBgTop.visible = false;
    this._balloonBgSide.visible = true;
    this.traceLog('showGameTutorial::', pageNum, balloonNum, showBlack, this._main.userTutorialStatus, pigg.puzzle.view.CommonView.TUTORIAL_CLEAR);
    if (this._currentGameTutorial != this._main.userTutorialStatus) {
        this._isInit = true;
        this._currentGameTutorial = this._main.userTutorialStatus
    }
    this.hidePointer();
    if (showBlack) {
        this.makeTutotialBlack(this.GRID[this._main.userTutorialStatus][pageNum]);
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
            this.showPointer(this.POINTER[this._main.userTutorialStatus][pageNum]);
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        })
    } else
        this.hideBlack();
    this._messageTxt.text = org.apache.royale.utils.Language.string(this.MESSAGE[this._main.userTutorialStatus][balloonNum]);
    this.traceLog('MESSAGE :: ', this.MESSAGE[this._main.userTutorialStatus][balloonNum]);
    this.traceLog('_messageTxt.textHeight::', this._messageTxt.textHeight, this._messageTxt.numLines);
    this.adjusttxtPosY();
    com.greensock.TweenMax.killTweensOf(this._balloon);
    if (this._isInit) {
        this._balloon.scaleX = this._balloon.scaleY = 0;
        this._hukurouContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH + 100;
        this._hukurouContainer.y = -100;
        com.greensock.TweenMax.killTweensOf(this._hukurouContainer);
        com.greensock.TweenMax.to(this._hukurouContainer, 1.2, {
            x: 120,
            y: 820,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: 1,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        this._spineHukurouObj.playAction('fly_joy', 0, true)
    } else if (this.MESSAGE[this._main.userTutorialStatus][balloonNum] != '') {
        this._balloon.scaleX = this._balloon.scaleY = 0;
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .3,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    } else
        com.greensock.TweenMax.to(this._balloon, .4, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn
        });
    this._isInit = false
}
;
pigg.puzzle.view.TutorialGameView.prototype.adjusttxtPosY = function() {
    if (this._messageTxt.numLines == 2)
        this._messageTxt.y = 42;
    else if (this._messageTxt.numLines == 3)
        this._messageTxt.y = 30;
    else if (this._messageTxt.numLines == 4)
        this._messageTxt.y = 18
}
;
pigg.puzzle.view.TutorialGameView.prototype.hideGameTutorial = function(end, showIncentive) {
    end = typeof end !== 'undefined' ? end : false;
    showIncentive = typeof showIncentive !== 'undefined' ? showIncentive : -1;
    com.greensock.TweenMax.to(this._hukurouContainer, 1.2, {
        x: -280,
        y: -300,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: org.apache.royale.utils.Language.closure(this.hide, this, 'hide'),
        onCompleteParams: [end, showIncentive]
    });
    com.greensock.TweenMax.to(this._balloon, .4, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeIn
    });
    com.greensock.TweenMax.to(this._backBlackContainer, .2, {
        alpha: 0
    });
    if (end) {
        com.greensock.TweenMax.to(this._nextBtnSpr, .4, {
            delay: .2,
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(this._skipBtnSpr, .4, {
            delay: .2,
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn
        });
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.tutorialEndNext, this, 'tutorialEndNext'));
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.btnDownFunc, this, 'btnDownFunc'));
        this._skipBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.tutorialEndSkip, this, 'tutorialEndSkip'));
        if (this._tutorialEndPostion.visible)
            com.greensock.TweenMax.to(this._tutorialEndPostion, .4, {
                alpha: 0,
                y: 50,
                ease: com.greensock.easing.Cubic.easeOut
            });
        if (this._tutorialEndCheatItem.visible)
            com.greensock.TweenMax.to(this._tutorialEndCheatItem, .4, {
                alpha: 0,
                y: 50,
                ease: com.greensock.easing.Cubic.easeOut
            })
    }
}
;
pigg.puzzle.view.TutorialGameView.prototype.btnDownFunc = function(spr) {
    this.btnDownAction(this._nextBtnSpr)
}
;
pigg.puzzle.view.TutorialGameView.prototype.showGameTutorialEnd = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0;
    this._currentBalloonNum = balloonNum;
    if (balloonNum != 7)
        this._balloon.scaleX = this._balloon.scaleY = 0;
    com.greensock.TweenMax.killTweensOf(this._balloon);
    if (balloonNum == 0) {
        this.makeTutotialBlack();
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        });
        this._balloonBgTop.visible = true;
        this._balloonBgSide.visible = false;
        this._balloon.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2 - 20;
        this._balloon.y = 260;
        this._messageContainer.x = -180;
        this._messageContainer.y = -160;
        this._nextBtnSpr.visible = true;
        this._nextBtnSpr.scaleX = this._nextBtnSpr.scaleY = 0;
        this._skipBtnSpr.visible = true;
        this._skipBtnSpr.scaleX = this._skipBtnSpr.scaleY = 0;
        this._hukurouContainer.scaleX = this._hukurouContainer.scaleY = 1.2;
        this._hukurouContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        this._hukurouContainer.y = -100;
        com.greensock.TweenMax.to(this._hukurouContainer, 1.2, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH / 2,
            y: 400,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: 1.2,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(this._nextBtnSpr, .6, {
            delay: 1.5,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._skipBtnSpr, .6, {
            delay: 1.5,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Cubic.easeOut
        });
        this._spineHukurouObj.playAction('fly_joy', 0, true);
        this._skipBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.tutorialEndSkip, this, 'tutorialEndSkip'));
        this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.tutorialEndNext, this, 'tutorialEndNext'));
        this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.btnDownFunc, this, 'btnDownFunc'));
        var tileset = this._main.gamePartsTileset.clone();
        this._tutorialEndTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,300,tileset);
        this._tutorialEndTilemap.addTile(this._tutorialEndPostion = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(805,178,82,100))));
        this._tutorialEndTilemap.addTile(this._tutorialEndCheatItem = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(641,290,103,104))));
        this._tutorialEndPostion.x = 100;
        this._tutorialEndPostion.y = 100;
        this._tutorialEndPostion.originX = 41;
        this._tutorialEndPostion.originY = 50;
        this._tutorialEndPostion.visible = false;
        this._tutorialEndCheatItem.x = 400;
        this._tutorialEndCheatItem.y = 100;
        this._tutorialEndCheatItem.originX = 52;
        this._tutorialEndCheatItem.originY = 52;
        this._tutorialEndCheatItem.visible = false;
        this._tutorialEndTilemap.y = 430;
        this._tutorialEndTilemap.x = 60;
        this._container.addChild(this._tutorialEndTilemap)
    } else if (balloonNum == 5) {
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .1,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(this._tutorialEndPostion, .4, {
            alpha: 0,
            y: 40,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._tutorialEndCheatItem, .4, {
            alpha: 0,
            y: 40,
            ease: com.greensock.easing.Cubic.easeOut
        })
    } else if (balloonNum == 7) {
        this.hideGameTutorial(true);
        return
    } else {
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .1,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        if (balloonNum == 2) {
            this._tutorialEndPostion.visible = true;
            this._tutorialEndPostion.scaleX = this._tutorialEndPostion.scaleY = 0;
            com.greensock.TweenMax.to(this._tutorialEndPostion, 1, {
                delay: .2,
                scaleX: 1.4,
                scaleY: 1.4,
                ease: com.greensock.easing.Elastic.easeOut
            })
        } else if (balloonNum == 3) {
            this._tutorialEndCheatItem.visible = true;
            this._tutorialEndCheatItem.scaleX = this._tutorialEndCheatItem.scaleY = 0;
            com.greensock.TweenMax.to(this._tutorialEndCheatItem, 1, {
                delay: .2,
                scaleX: 1.3,
                scaleY: 1.3,
                ease: com.greensock.easing.Elastic.easeOut
            })
        }
    }
    this._messageTxt.text = org.apache.royale.utils.Language.string(this.MESSAGE_TUTORIAL_END[balloonNum]);
    this.adjusttxtPosY()
}
;
pigg.puzzle.view.TutorialGameView.prototype.tutorialEndNext = function() {
    this._currentBalloonNum++;
    this.showGameTutorialEnd(this._currentBalloonNum)
}
;
pigg.puzzle.view.TutorialGameView.prototype.tutorialEndSkip = function() {
    this.hideGameTutorial(true)
}
;
pigg.puzzle.view.TutorialGameView.prototype.makeTutotialBlack = function(grid, blank) {
    grid = typeof grid !== 'undefined' ? grid : null;
    blank = typeof blank !== 'undefined' ? blank : 0;
    this.traceLog('makeTutotialBlack::', grid, blank);
    var cnt = 0
      , len = 0;
    if (this._black == null) {
        this._black = new openfl.display.Sprite;
        this._blackEmpty = new openfl.display.Sprite;
        this._backBlackContainer.addChild(this._black);
        this._backBlackContainer.addChild(this._blackEmpty);
        this._backBlackContainer.filters = [new openfl.filters.ColorMatrixFilter([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 1, 1, 0])];
        this._black.graphics.clear();
        this._black.graphics.beginFill(0, .5);
        this._black.graphics.drawRect(0, 0, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
        this._black.graphics.endFill();
        this._blackEmpty.x = -34;
        this._blackEmpty.y = 158
    }
    this._black.visible = true;
    this._black.alpha = 1;
    this._blackEmpty.graphics.clear();
    if (blank == 1) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawRoundRect(166, -158 + 6, 230, 100, 12, 12);
        this._blackEmpty.graphics.endFill()
    } else if (blank == 2) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawRoundRect(239, 568, 419, 200, 20, 20);
        this._blackEmpty.graphics.endFill()
    } else if (blank == 3) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawCircle(138, -65, 60);
        this._blackEmpty.graphics.endFill()
    }
    if (grid && grid.length > 0) {
        len = grid.length;
        for (cnt = 0; cnt < len; cnt++) {
            this._blackEmpty.graphics.beginFill(65280, 1);
            this._blackEmpty.graphics.drawRoundRect(grid[cnt][0] * pigg.puzzle.view.CommonView.BALL_SIZE - 6, grid[cnt][1] * pigg.puzzle.view.CommonView.BALL_SIZE - 6, pigg.puzzle.view.CommonView.BALL_SIZE + 12, pigg.puzzle.view.CommonView.BALL_SIZE + 12, 12, 12);
            this._blackEmpty.graphics.endFill();
            this.traceLog('\u7a74::', grid[cnt][0], grid[cnt][1])
        }
    }
    this._backBlackContainer.visible = true;
    this._backBlackContainer.alpha = 0
}
;
pigg.puzzle.view.TutorialGameView.prototype.hideBlack = function() {
    this._backBlackContainer.visible = false
}
;
pigg.puzzle.view.TutorialGameView.prototype.showPointer = function(data) {
    var mx = Number(data[0]);
    var my = Number(data[1]);
    var dir = Number(data[2]);
    if (this._pointer == null)
        return;
    this._pointer.visible = true;
    this._pointer.x = mx * pigg.puzzle.view.CommonView.BALL_SIZE;
    this._pointer.y = my * pigg.puzzle.view.CommonView.BALL_SIZE;
    this.movePointer(this._pointer.x, this._pointer.y, dir)
}
;
pigg.puzzle.view.TutorialGameView.prototype.hidePointer = function() {
    if (this._pointer == null)
        return;
    this._pointer.visible = false;
    com.greensock.TweenMax.killTweensOf(this._pointer)
}
;
pigg.puzzle.view.TutorialGameView.prototype.movePointer = function(bx, by, dir) {
    var self = this;
    dir = typeof dir !== 'undefined' ? dir : 0;
    var __localFn0__ = function() {
        com.greensock.TweenMax.to(self._pointer, 1, {
            onComplete: org.apache.royale.utils.Language.closure(self.movePointer, self, 'movePointer'),
            onCompleteParams: [baseX, baseY, direct]
        })
    };
    var __localFn1__ = function() {
        com.greensock.TweenMax.to(self._pointer, 1, {
            onComplete: org.apache.royale.utils.Language.closure(self.movePointer, self, 'movePointer'),
            onCompleteParams: [baseX, baseY, direct]
        })
    };
    var __localFn2__ = function() {
        com.greensock.TweenMax.to(self._pointer, 1, {
            onComplete: org.apache.royale.utils.Language.closure(self.movePointer, self, 'movePointer'),
            onCompleteParams: [baseX, baseY, direct]
        })
    };
    var __localFn3__ = function() {
        com.greensock.TweenMax.to(self._pointer, 1, {
            onComplete: org.apache.royale.utils.Language.closure(self.movePointer, self, 'movePointer'),
            onCompleteParams: [baseX, baseY, direct]
        })
    };
    var baseX = bx;
    var baseY = by;
    this._pointer.x = baseX;
    this._pointer.y = baseY;
    var direct = dir;
    if (dir == 0)
        com.greensock.TweenMax.to(this._pointer, 1, {
            delay: .5,
            x: baseX + pigg.puzzle.view.CommonView.BALL_SIZE,
            onComplete: __localFn0__
        });
    else if (dir == 1)
        com.greensock.TweenMax.to(this._pointer, 1, {
            delay: .5,
            x: baseX - pigg.puzzle.view.CommonView.BALL_SIZE,
            onComplete: __localFn1__
        });
    else if (dir == 2)
        com.greensock.TweenMax.to(this._pointer, 1, {
            delay: .5,
            y: baseY + pigg.puzzle.view.CommonView.BALL_SIZE,
            onComplete: __localFn2__
        });
    else if (dir == 3)
        com.greensock.TweenMax.to(this._pointer, 1, {
            delay: .5,
            y: baseY - pigg.puzzle.view.CommonView.BALL_SIZE,
            onComplete: __localFn3__
        })
}
;
pigg.puzzle.view.TutorialGameView.prototype.showThemeTutorial = function(balloonNum) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0;
    if (this._main.userTutorialStatus == 0)
        return;
    this._main.isShowGameTutorial = true;
    this._balloonBgTop.visible = false;
    this._balloonBgSide.visible = true;
    this.traceLog('showThemeTutorial', this._main.userTutorialStatus, pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT, this._main.userTutorialStatus2nd);
    this._balloon.scaleX = this._balloon.scaleY = 0;
    this._hukurouContainer.x = 0;
    this._hukurouContainer.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT + 200;
    if (this._main.userTutorialStatus2nd == 3) {
        this._balloon.x = 240;
        this._balloon.y = 490;
        com.greensock.TweenMax.to(this._hukurouContainer, .8, {
            x: 120,
            y: 520,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    } else {
        com.greensock.TweenMax.to(this._hukurouContainer, .8, {
            x: 120,
            y: 820,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        this._balloon.x = 240;
        this._balloon.y = 810
    }
    this._spineHukurouObj.playAction('fly_joy', 0, true);
    this._messageContainer.y = -60;
    this._messageContainer.x = 0;
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u8868\u793a', this._main.userTutorialStatus % 2);
        if (this._main.userTutorialStatus % 2 == 0)
            this.makeTutotialBlack(this.GRID_THEME[this._main.userTutorialStatus - 6], 1);
        else
            this.makeTutotialBlack(this.GRID_THEME[this._main.userTutorialStatus - 6]);
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        });
        this._messageTxt.text = org.apache.royale.utils.Language.string(this.MESSAGE_THEME[this._main.userTutorialStatus - 6]);
        this.traceLog('MESSAGE :: ', this.MESSAGE_THEME[this._main.userTutorialStatus - 6])
    } else if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT && this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR)
        this._messageTxt.text = org.apache.royale.utils.Language.string(this.MESSAGE_THEME[this._main.userTutorialStatus - 6]);
    else if (this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND) {
        if (this._main.userTutorialStatus2nd == 1)
            this.makeTutotialBlack(this.GRID_2ND[this._main.userTutorialStatus2nd], 1);
        else if (this._main.userTutorialStatus2nd == 3)
            this.makeTutotialBlack([], 2);
        else
            this.makeTutotialBlack(this.GRID_2ND[this._main.userTutorialStatus2nd]);
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        });
        this._messageTxt.text = org.apache.royale.utils.Language.string(this.MESSAGE_2ND[this._main.userTutorialStatus2nd]);
        this.traceLog('MESSAGE_2ND :: ', this.MESSAGE_2ND[this._main.userTutorialStatus2nd]);
        this.traceLog('\u30c1\u30e5\u30fc\u30c82nd\u8868\u793a')
    } else if (this._main.userTutorialStatusTemp < 3 && this._main.existMission) {
        this._main.userTutorialStatusTemp = 3;
        this._main.loadDataManager.setUserStatus(this._main.userTutorialStatus + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus);
        this._messageTxt.text = '\u661f\u3092\u3042\u3064\u3081\u3066\uff01\n ';
        this.makeTutotialBlack([], 3);
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        });
        this._balloon.x = 240;
        this._balloon.y = 270;
        com.greensock.TweenMax.to(this._hukurouContainer, .8, {
            x: 120,
            y: 300,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    } else {
        this.hideGameTutorial();
        return
    }
    this.adjusttxtPosY();
    com.greensock.TweenMax.to(this, 4, {
        onComplete: org.apache.royale.utils.Language.closure(this.hideGameTutorial, this, 'hideGameTutorial')
    })
}
;
pigg.puzzle.view.TutorialGameView.prototype.checkAllStepClearType = function(spc) {
    spc = typeof spc !== 'undefined' ? spc : false;
    this.traceLog('checkAllStepClearType::', this._main.isJoinSpecialChallenge, this._main.existRanking);
    if (spc)
        if (!this._main.existRanking)
            this._allStepClearMessage = this.MESSAGE_SPC_CLEAR1;
        else {
            if (this._main.existRanking)
                this._allStepClearMessage = this.MESSAGE_SPC_CLEAR2
        }
    else if (this._main.isJoinSpecialChallenge == -1 && !this._main.existRanking)
        this._allStepClearMessage = this.MESSAGE_ALL_STEP_CLEAR1;
    else if (this._main.isJoinSpecialChallenge == -1 && this._main.existRanking)
        this._allStepClearMessage = this.MESSAGE_ALL_STEP_CLEAR2;
    else if (this._main.isJoinSpecialChallenge != -1 && !this._main.existRanking)
        this._allStepClearMessage = this.MESSAGE_ALL_STEP_CLEAR3;
    else if (this._main.isJoinSpecialChallenge != -1 && this._main.existRanking)
        this._allStepClearMessage = this.MESSAGE_ALL_STEP_CLEAR4
}
;
pigg.puzzle.view.TutorialGameView.prototype._allStepClearMessage;
pigg.puzzle.view.TutorialGameView.prototype._allStepClearType = 0;
pigg.puzzle.view.TutorialGameView.prototype._endSpc = false;
pigg.puzzle.view.TutorialGameView.prototype.showAllStepClear = function(balloonNum, spc) {
    balloonNum = typeof balloonNum !== 'undefined' ? balloonNum : 0;
    spc = typeof spc !== 'undefined' ? spc : false;
    this.show();
    var special = -1;
    if (balloonNum == 0) {
        this.checkAllStepClearType(spc);
        this._endSpc = spc
    }
    this._balloon.scaleX = this._balloon.scaleY = 0;
    this._currentBalloonNum = balloonNum;
    com.greensock.TweenMax.killTweensOf(this._balloon);
    if (balloonNum == 0) {
        this.makeTutotialBlack();
        com.greensock.TweenMax.to(this._backBlackContainer, .2, {
            alpha: 1
        });
        this._balloonBgTop.visible = true;
        this._balloonBgSide.visible = false;
        this._balloon.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2 - 20;
        this._balloon.y = 260;
        this._messageContainer.x = -180;
        this._messageContainer.y = -160;
        this._nextBtnSpr.visible = true;
        this._nextBtnSpr.scaleX = this._nextBtnSpr.scaleY = 0;
        this._skipBtnSpr.visible = true;
        this._skipBtnSpr.scaleX = this._skipBtnSpr.scaleY = 0;
        this._hukurouContainer.scaleX = this._hukurouContainer.scaleY = 1.2;
        this._hukurouContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        this._hukurouContainer.y = -100;
        com.greensock.TweenMax.to(this._hukurouContainer, 1.2, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH / 2,
            y: 400,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: 1.2,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(this._nextBtnSpr, .6, {
            delay: 1.5,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(this._skipBtnSpr, .6, {
            delay: 1.5,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Cubic.easeOut
        });
        this._spineHukurouObj.playAction('fly_joy', 0, true);
        this._skipBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.allStepClearSkip, this, 'allStepClearSkip'));
        this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.allStepClearNext, this, 'allStepClearNext'));
        this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.btnDownFunc, this, 'btnDownFunc'));
        var tileset = this._main.gamePartsTileset.clone();
        this._tutorialEndTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,300,tileset);
        this._tutorialEndTilemap.addTile(this._tutorialEndPostion = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(805,178,82,100))));
        this._tutorialEndTilemap.addTile(this._tutorialEndCheatItem = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(641,290,103,104))));
        this._tutorialEndPostion.x = 100;
        this._tutorialEndPostion.y = 100;
        this._tutorialEndPostion.originX = 41;
        this._tutorialEndPostion.originY = 50;
        this._tutorialEndPostion.visible = false;
        this._tutorialEndCheatItem.x = 400;
        this._tutorialEndCheatItem.y = 100;
        this._tutorialEndCheatItem.originX = 52;
        this._tutorialEndCheatItem.originY = 52;
        this._tutorialEndCheatItem.visible = false;
        this._tutorialEndTilemap.y = 430;
        this._tutorialEndTilemap.x = 60;
        this._container.addChild(this._tutorialEndTilemap)
    } else if (balloonNum == this._allStepClearMessage.length) {
        if (this._endSpc)
            special = -1;
        else if (this._main.userData.hasLimitedTermIncentive)
            special = 0;
        else if (this._main.userData.hasLimitedQuantityIncentive)
            special = 1;
        else if (this._main.existRanking)
            special = 2;
        this.hideGameTutorial(true, special);
        return
    } else
        com.greensock.TweenMax.to(this._balloon, .8, {
            delay: .1,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        });
    this._messageTxt.text = org.apache.royale.utils.Language.string(this._allStepClearMessage[balloonNum]);
    this.adjusttxtPosY()
}
;
pigg.puzzle.view.TutorialGameView.prototype.allStepClearNext = function() {
    this._currentBalloonNum++;
    this.showAllStepClear(this._currentBalloonNum)
}
;
pigg.puzzle.view.TutorialGameView.prototype.allStepClearSkip = function() {
    var special = 0;
    if (this._endSpc)
        special = -1;
    else if (this._main.userData.hasLimitedTermIncentive)
        special = 0;
    else if (this._main.userData.hasLimitedQuantityIncentive)
        special = 1;
    else if (this._main.existRanking)
        special = 2;
    this.hideGameTutorial(true, special)
}
;
pigg.puzzle.view.TutorialGameView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.TutorialGameView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
pigg.puzzle.view.TutorialGameView.prototype.get__hasTutorialEnd = function() {
    return this._hasTutorialEnd
}
;
pigg.puzzle.view.TutorialGameView.prototype.set__hasTutorialEnd = function(value) {
    this._hasTutorialEnd = value
}
;
Object.defineProperties(pigg.puzzle.view.TutorialGameView.prototype, {
    isShow: {
        get: pigg.puzzle.view.TutorialGameView.prototype.get__isShow,
        set: pigg.puzzle.view.TutorialGameView.prototype.set__isShow
    },
    hasTutorialEnd: {
        get: pigg.puzzle.view.TutorialGameView.prototype.get__hasTutorialEnd,
        set: pigg.puzzle.view.TutorialGameView.prototype.set__hasTutorialEnd
    }
});
pigg.puzzle.view.TutorialGameView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TutorialGameView',
        qName: 'pigg.puzzle.view.TutorialGameView',
        kind: 'class'
    }]
};
pigg.puzzle.view.TutorialGameView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView'
                },
                'hasTutorialEnd': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView'
                }
            }
        },
        methods: function() {
            return {
                'TutorialGameView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onLoadJoinRanknig': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Tileset',
                            optional: false
                        }]
                    }
                },
                'showGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'hideGameTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showGameTutorialEnd': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showThemeTutorial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'showAllStepClear': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialGameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas.AtlasRegion = function() {}
;
goog.exportSymbol('spine.atlas.AtlasRegion', spine.atlas.AtlasRegion);
spine.atlas.AtlasRegion.prototype.page;
spine.atlas.AtlasRegion.prototype.name;
spine.atlas.AtlasRegion.prototype.x = 0;
spine.atlas.AtlasRegion.prototype.y = 0;
spine.atlas.AtlasRegion.prototype.width = 0;
spine.atlas.AtlasRegion.prototype.height = 0;
spine.atlas.AtlasRegion.prototype.u;
spine.atlas.AtlasRegion.prototype.v;
spine.atlas.AtlasRegion.prototype.u2;
spine.atlas.AtlasRegion.prototype.v2;
spine.atlas.AtlasRegion.prototype.offsetX;
spine.atlas.AtlasRegion.prototype.offsetY;
spine.atlas.AtlasRegion.prototype.originalWidth = 0;
spine.atlas.AtlasRegion.prototype.originalHeight = 0;
spine.atlas.AtlasRegion.prototype.index = 0;
spine.atlas.AtlasRegion.prototype.rotate;
spine.atlas.AtlasRegion.prototype.splits;
spine.atlas.AtlasRegion.prototype.pads;
spine.atlas.AtlasRegion.prototype.rendererObject;
spine.atlas.AtlasRegion.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AtlasRegion',
        qName: 'spine.atlas.AtlasRegion',
        kind: 'class'
    }]
};
spine.atlas.AtlasRegion.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'page': {
                    type: 'spine.atlas.AtlasPage'
                },
                'name': {
                    type: 'String'
                },
                'x': {
                    type: 'int'
                },
                'y': {
                    type: 'int'
                },
                'width': {
                    type: 'int'
                },
                'height': {
                    type: 'int'
                },
                'u': {
                    type: 'Number'
                },
                'v': {
                    type: 'Number'
                },
                'u2': {
                    type: 'Number'
                },
                'v2': {
                    type: 'Number'
                },
                'offsetX': {
                    type: 'Number'
                },
                'offsetY': {
                    type: 'Number'
                },
                'originalWidth': {
                    type: 'int'
                },
                'originalHeight': {
                    type: 'int'
                },
                'index': {
                    type: 'int'
                },
                'rotate': {
                    type: 'Boolean'
                },
                'splits': {
                    type: 'Vector.\x3cint\x3e'
                },
                'pads': {
                    type: 'Vector.\x3cint\x3e'
                },
                'rendererObject': {
                    type: 'Object'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AtlasRegion': {
                    type: '',
                    declaredBy: 'spine.atlas.AtlasRegion'
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleUserRankingData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleUserRankingData', pigg.data.puzzle.PuzzleUserRankingData);
pigg.data.puzzle.PuzzleUserRankingData.prototype._status;
pigg.data.puzzle.PuzzleUserRankingData.prototype._hasRanking;
pigg.data.puzzle.PuzzleUserRankingData.prototype._rankingStatus;
pigg.data.puzzle.PuzzleUserRankingData.prototype._isAggregated;
pigg.data.puzzle.PuzzleUserRankingData.prototype.readData = function(data) {
    var rankingType = org.apache.royale.utils.Language.string(data['rankingTypeCode']);
    var userData = data['user'];
    if (userData == null) {
        this._hasRanking = false;
        return
    }
    this._hasRanking = true;
    var cnt = 0;
    if (this._hasRanking) {
        var rankingSize = 0;
        if (this._rankingStatus == null)
            this._rankingStatus = new pigg.data.puzzle.PuzzleRankingUserData;
        this._rankingStatus.userCode = org.apache.royale.utils.Language.string(data['user']['userCode']);
        this._rankingStatus.piggCode = org.apache.royale.utils.Language.string(data['user']['piggCode']);
        if (data['user']['status'] == 'NOT_ENTRY') {
            this._isAggregated = false;
            return
        }
        this._isAggregated = true;
        if (rankingType == 'score') {
            this._rankingStatus.pointRank = Number(data['user']['rank']);
            this._rankingStatus.pointPrevRank = Number(data['user']['prevRank']);
            this._rankingStatus.pointAwardName = org.apache.royale.utils.Language.string(data['user']['awardTypeCode']);
            this._rankingStatus.pointValue = Number(data['user']['value']);
            this._rankingStatus.pointAwardIndex = this._rankingStatus.awardIndex(this._rankingStatus.pointAwardName)
        } else if (rankingType == 'winning_streak') {
            this._rankingStatus.winningRank = Number(data['user']['rank']);
            this._rankingStatus.winningPrevRank = Number(data['user']['prevRank']);
            this._rankingStatus.winningAwardName = org.apache.royale.utils.Language.string(data['user']['awardTypeCode']);
            this._rankingStatus.winningValue = Number(data['user']['value']);
            this._rankingStatus.winningAwardIndex = this._rankingStatus.awardIndex(this._rankingStatus.winningAwardName)
        }
    }
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.get__hasRanking = function() {
    return this._hasRanking
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.set__hasRanking = function(v) {
    this._hasRanking = v
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.get__isAggregated = function() {
    return this._isAggregated
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.set__isAggregated = function(v) {
    this._isAggregated = v
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.get__rankingStatus = function() {
    return this._rankingStatus
}
;
pigg.data.puzzle.PuzzleUserRankingData.prototype.set__rankingStatus = function(v) {
    this._rankingStatus = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleUserRankingData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleUserRankingData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleUserRankingData.prototype.set__status
    },
    hasRanking: {
        get: pigg.data.puzzle.PuzzleUserRankingData.prototype.get__hasRanking,
        set: pigg.data.puzzle.PuzzleUserRankingData.prototype.set__hasRanking
    },
    isAggregated: {
        get: pigg.data.puzzle.PuzzleUserRankingData.prototype.get__isAggregated,
        set: pigg.data.puzzle.PuzzleUserRankingData.prototype.set__isAggregated
    },
    rankingStatus: {
        get: pigg.data.puzzle.PuzzleUserRankingData.prototype.get__rankingStatus,
        set: pigg.data.puzzle.PuzzleUserRankingData.prototype.set__rankingStatus
    }
});
pigg.data.puzzle.PuzzleUserRankingData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleUserRankingData',
        qName: 'pigg.data.puzzle.PuzzleUserRankingData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleUserRankingData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData'
                },
                'hasRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData'
                },
                'isAggregated': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData'
                },
                'rankingStatus': {
                    type: 'pigg.data.puzzle.PuzzleRankingUserData',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleUserRankingData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserRankingData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.EventTimeline = function(frameCount) {
    this.frames = org.apache.royale.utils.Language.Vector(frameCount, 'Number');
    this.events = org.apache.royale.utils.Language.Vector(frameCount, 'Event')
}
;
goog.exportSymbol('spine.animation.EventTimeline', spine.animation.EventTimeline);
spine.animation.EventTimeline.prototype.frames;
spine.animation.EventTimeline.prototype.events;
spine.animation.EventTimeline.prototype.getPropertyId = function() {
    return spine.animation.TimelineType.event.ordinal << 24
}
;
spine.animation.EventTimeline.prototype.setFrame = function(frameIndex, event) {
    this.frames[frameIndex] = event.time;
    this.events[frameIndex] = event
}
;
spine.animation.EventTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    if (!firedEvents)
        return;
    if (lastTime > time) {
        this.apply(skeleton, lastTime, 2147483648, firedEvents, alpha, pose, direction);
        lastTime = -1
    } else if (lastTime >= this.frames[org.apache.royale.utils.Language._int(this.frameCount - 1)])
        return;
    if (time < this.frames[0])
        return;
    var frame = 0;
    if (lastTime < this.frames[0])
        frame = 0;
    else {
        frame = spine.animation.Animation.binarySearch1(this.frames, lastTime);
        var frameTime = Number(this.frames[frame]);
        while (frame > 0) {
            if (this.frames[org.apache.royale.utils.Language._int(frame - 1)] != frameTime)
                break;
            frame--
        }
    }
    for (; frame < this.frameCount && time >= this.frames[frame]; frame++)
        firedEvents[firedEvents.length] = this.events[frame]
}
;
spine.animation.EventTimeline.prototype.get__frameCount = function() {
    return this.frames.length
}
;
Object.defineProperties(spine.animation.EventTimeline.prototype, {
    frameCount: {
        get: spine.animation.EventTimeline.prototype.get__frameCount
    }
});
spine.animation.EventTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'EventTimeline',
        qName: 'spine.animation.EventTimeline',
        kind: 'class'
    }],
    interfaces: [spine.animation.Timeline]
};
spine.animation.EventTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'events': {
                    type: 'Vector.\x3cspine.Event\x3e'
                }
            }
        },
        accessors: function() {
            return {
                'frameCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.animation.EventTimeline'
                }
            }
        },
        methods: function() {
            return {
                'EventTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.EventTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.EventTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Event',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.SearchSlantManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._checkTargetMapInfo = [];
    this._stackMoveTween = [];
    this._initYposArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._addCheckTargetMapInfo = []
}
;
goog.inherits(pigg.puzzle.manager.SearchSlantManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.SearchSlantManager', pigg.puzzle.manager.SearchSlantManager);
pigg.puzzle.manager.SearchSlantManager.prototype._main;
pigg.puzzle.manager.SearchSlantManager.prototype._gameView;
pigg.puzzle.manager.SearchSlantManager.prototype._checkTargetMapInfo;
pigg.puzzle.manager.SearchSlantManager.prototype._stackMoveTween;
pigg.puzzle.manager.SearchSlantManager.prototype._searchVoidUpdateCount = 0;
pigg.puzzle.manager.SearchSlantManager.prototype._initYposArray;
pigg.puzzle.manager.SearchSlantManager.prototype._addCheckTargetMapInfo;
pigg.puzzle.manager.SearchSlantManager.prototype._existWarpVoid = false;
pigg.puzzle.manager.SearchSlantManager.prototype._onetimeWarpSearch = false;
pigg.puzzle.manager.SearchSlantManager.prototype._isEndWarpSearchVoid = false;
pigg.puzzle.manager.SearchSlantManager.prototype.clean = function() {
    this._main = null;
    this._gameView = null;
    this._checkTargetMapInfo = null
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.init = function(main, gameView) {
    this._main = main;
    this._gameView = gameView
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.checkPresetGrid = function(update, addCheck) {
    var self = this;
    update = typeof update !== 'undefined' ? update : false;
    addCheck = typeof addCheck !== 'undefined' ? addCheck : false;
    var __localFn0__ = function() {
        for (cnt = 0; cnt < len; cnt++)
            self.setMoveTween(self._stackMoveTween[cnt])
    };
    var __localFn1__ = function() {
        for (cnt = 0; cnt < len; cnt++)
            self.setMoveTween(self._stackMoveTween[cnt])
    };
    var cnt = 0
      , len = 0
      , cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt2 = 0
      , len2 = 0;
    if (!addCheck)
        this._checkTargetMapInfo = [];
    var oldWarpSearch = false;
    var existCheck = false;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var addSucces = false;
    oldWarpSearch = this._existWarpVoid;
    this._isEndWarpSearchVoid = false;
    if (!this._onetimeWarpSearch) {
        this.traceLog('\u521d\u56de\u306e\u307f\u691c\u7d22');
        if (this._gameView.warpGridCount > 0) {
            len = this._gameView.warpGridCount;
            for (cnt = 0; cnt < len; cnt++) {
                if (this._gameView.warpOutVec[cnt].num != -1 || this._gameView.warpOutVec[cnt].isFix || !this._gameView.warpOutVec[cnt].isMovable)
                    continue;
                if (this._gameView.warpInVec[cnt].num == -1)
                    continue;
                this._gameView.warpInVec[cnt].checkVoidD = false;
                existCheck = this.checkExistPreset(this._gameView.warpInVec[cnt].mx, this._gameView.warpInVec[cnt].my);
                if (!this._gameView.warpInVec[cnt].isStackCheckVoid || !existCheck) {
                    this.traceLog('\u672c\u5f53\u306b\u5165\u3063\u3066\u308b\u304b', cnt, this._gameView.warpInVec[cnt].mx, this._gameView.warpInVec[cnt].my);
                    if (!addCheck)
                        this._checkTargetMapInfo.push([this._gameView.warpInVec[cnt].mx, this._gameView.warpInVec[cnt].my]);
                    else
                        this._addCheckTargetMapInfo.push([this._gameView.warpInVec[cnt].mx, this._gameView.warpInVec[cnt].my]);
                    this._gameView.warpInVec[cnt].isStackCheckVoid = true
                }
            }
        }
        if (this._checkTargetMapInfo.length > 0) {
            this._existWarpVoid = true;
            this.traceLog('\u521d\u56de\u306b\u30ef\u30fc\u30d7\u30a2\u30a6\u30c8\u306b\u7a7a\u767d\u304c\u5b58\u5728\u3059\u308b::', this._existWarpVoid)
        }
        this._onetimeWarpSearch = true
    }
    if (this._existWarpVoid && oldWarpSearch && this._checkTargetMapInfo.length == 0 && this._addCheckTargetMapInfo.length == 0) {
        this.traceLog('\u30ef\u30fc\u30d7\u691c\u7d22\u7d42\u4e86or\u306a\u3057');
        this._isEndWarpSearchVoid = true;
        this._checkTargetMapInfo = []
    } else if (!this._existWarpVoid)
        this._checkTargetMapInfo = [];
    this.traceLog('\u30ef\u30fc\u30d7\u306b\u3088\u308b\u5148\u884c\u691c\u7d22\u5224\u5b9a::_checkTargetMapInfo', this._checkTargetMapInfo);
    this.traceLog('\u30ef\u30fc\u30d7\u306b\u3088\u308b\u5148\u884c\u691c\u7d22\u5224\u5b9a::_addCheckTargetMapInfo', this._addCheckTargetMapInfo);
    if (!this._existWarpVoid && this._checkTargetMapInfo.length == 0 && this._addCheckTargetMapInfo.length == 0)
        for (cntY = lenY - 1; cntY >= 0; cntY--)
            for (cntX = 0; cntX < lenX; cntX++) {
                if (this._gameView.map[cntX][cntY].num != -1 || this._gameView.map[cntX][cntY].isFix || !this._gameView.map[cntX][cntY].isMovable)
                    continue;
                this.traceLog('checkPresetGrid::\u7a7a\u767d::', cntX, cntY);
                if (this._gameView.map[cntX][cntY].isWarpOut != -1) {
                    if (this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].num == -1)
                        continue;
                    this.traceLog('checkPresetGrid::isWarpOut\u304c\u7a7a in\u3092\u691c\u7d22\u5bfe\u8c61\u306b\u5165\u308c\u308b::', cntX, cntY, this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].mx, this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].my);
                    this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].checkVoidD = false;
                    existCheck = this.checkExistPreset(this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].mx, this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].my);
                    if (!this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].isStackCheckVoid || !existCheck) {
                        this._checkTargetMapInfo.push([this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].mx, this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].my]);
                        this._gameView.warpInVec[this._gameView.map[cntX][cntY].isWarpOut].isStackCheckVoid = true
                    }
                    continue
                }
                if (cntY == 0)
                    continue;
                if (cntY % 2 == 0) {
                    if (cntX > 0)
                        if (this._gameView.map[cntX - 1][cntY - 1].num != -1 && this._gameView.map[cntX - 1][cntY - 1].mc && !this._gameView.map[cntX - 1][cntY - 1].isFix && this._gameView.map[cntX - 1][cntY - 1].isMovable) {
                            this._gameView.map[cntX - 1][cntY - 1].checkVoidR = false;
                            existCheck = this.checkExistPreset(cntX - 1, cntY - 1);
                            if (!existCheck) {
                                this._checkTargetMapInfo.push([cntX - 1, cntY - 1]);
                                this._gameView.map[cntX - 1][cntY - 1].isStackCheckVoid = true
                            }
                        }
                    if (cntX < lenX - 1)
                        if (this._gameView.map[cntX + 1][cntY - 1].num != -1 && this._gameView.map[cntX + 1][cntY - 1].mc && !this._gameView.map[cntX + 1][cntY - 1].isFix && this._gameView.map[cntX + 1][cntY - 1].isMovable) {
                            this._gameView.map[cntX + 1][cntY - 1].checkVoidL = false;
                            existCheck = this.checkExistPreset(cntX + 1, cntY - 1);
                            if (!existCheck) {
                                this._checkTargetMapInfo.push([cntX + 1, cntY - 1]);
                                this._gameView.map[cntX + 1][cntY - 1].isStackCheckVoid = true
                            }
                        }
                } else {
                    if (cntX < lenX - 1)
                        if (this._gameView.map[cntX + 1][cntY - 1].num != -1 && this._gameView.map[cntX + 1][cntY - 1].mc && !this._gameView.map[cntX + 1][cntY - 1].isFix && this._gameView.map[cntX + 1][cntY - 1].isMovable) {
                            this._gameView.map[cntX + 1][cntY - 1].checkVoidL = false;
                            existCheck = this.checkExistPreset(cntX + 1, cntY - 1);
                            if (!existCheck) {
                                this._checkTargetMapInfo.push([cntX + 1, cntY - 1]);
                                this._gameView.map[cntX + 1][cntY - 1].isStackCheckVoid = true
                            }
                        }
                    if (cntX > 0)
                        if (this._gameView.map[cntX - 1][cntY - 1].num != -1 && this._gameView.map[cntX - 1][cntY - 1].mc && !this._gameView.map[cntX - 1][cntY - 1].isFix && this._gameView.map[cntX - 1][cntY - 1].isMovable) {
                            this._gameView.map[cntX - 1][cntY - 1].checkVoidR = false;
                            existCheck = this.checkExistPreset(cntX - 1, cntY - 1);
                            if (!existCheck) {
                                this._checkTargetMapInfo.push([cntX - 1, cntY - 1]);
                                this._gameView.map[cntX - 1][cntY - 1].isStackCheckVoid = true
                            }
                        }
                }
            }
    this.traceLog('\u691c\u7d22\u7d50\u679c::_isEndWarpSearchVoid::', this._isEndWarpSearchVoid);
    this.traceLog('\u691c\u7d22\u7d50\u679c::_existWarpVoid::', this._existWarpVoid);
    this.traceLog('\u691c\u7d22\u7d50\u679c::_checkTargetMapInfo', this._checkTargetMapInfo);
    this.traceLog('\u691c\u7d22\u7d50\u679c::_addCheckTargetMapInfo', this._addCheckTargetMapInfo);
    if (this._isEndWarpSearchVoid) {
        this.traceLog('\u30ef\u30fc\u30d7\u691c\u7d22\u7d42\u4e86', this._stackMoveTween.length);
        if (this._stackMoveTween.length > 0) {
            len = this._stackMoveTween.length;
            com.greensock.TweenMax.to(this, .001, {
                onComplete: __localFn0__
            })
        } else {
            this._gameView.isFlush = false;
            this.traceLog('checkPresetGrid::_gameView.allBallsDisplay');
            this._gameView.allBallsDisplay()
        }
        return
    }
    if (addCheck) {
        if (this._addCheckTargetMapInfo.length > 0) {
            len = this._addCheckTargetMapInfo.length;
            for (cnt = 0; cnt < len; cnt++) {
                addSucces = false;
                len2 = this._checkTargetMapInfo.length;
                for (cnt2 = 0; cnt2 < len2; cnt2++)
                    if (this._checkTargetMapInfo[cnt2][1] <= this._addCheckTargetMapInfo[cnt][1]) {
                        this._checkTargetMapInfo.splice(cnt2, 0, this._addCheckTargetMapInfo[cnt]);
                        addSucces = true;
                        break
                    }
                if (!addSucces)
                    this._checkTargetMapInfo.push(this._addCheckTargetMapInfo[cnt])
            }
        }
        this._addCheckTargetMapInfo = [];
        return
    }
    if (this._checkTargetMapInfo.length == 0) {
        this.traceLog('\u3053\u3053\u3067move\u958b\u59cb::', this._stackMoveTween.length);
        if (this._stackMoveTween.length > 0) {
            len = this._stackMoveTween.length;
            com.greensock.TweenMax.to(this, 1E-4, {
                onComplete: __localFn1__
            })
        } else {
            this._gameView.isFlush = false;
            this.traceLog('checkPresetGrid::_gameView.allBallsDisplay');
            this._gameView.allBallsDisplay()
        }
    } else if (update)
        this.searchVoid()
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.checkExistPreset = function(tx, ty) {
    var cnt = 0
      , len = 0;
    len = this._checkTargetMapInfo.length;
    for (cnt = 0; cnt < len; cnt++)
        if (this._checkTargetMapInfo[cnt][0] == tx && this._checkTargetMapInfo[cnt][1] == ty) {
            this.traceLog('\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u306e\u3067\u30b9\u30ad\u30c3\u30d7');
            return true
        }
    return false
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.initVoidStatus = function() {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    this._initYposArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            this._gameView.map[cntX][cntY].checkVoidR = true;
            this._gameView.map[cntX][cntY].checkVoidL = true;
            this._gameView.map[cntX][cntY].checkVoidD = true;
            this._gameView.map[cntX][cntY].isStackCheckVoid = false;
            this._gameView.map[cntX][cntY].stackMoveArray = [];
            this._gameView.map[cntX][cntY].isStackTweenMove = false;
            this._gameView.map[cntX][cntY].fromWarp = -1
        }
    this._existWarpVoid = false;
    this._onetimeWarpSearch = false;
    this._searchVoidUpdateCount = 0;
    this._stackMoveTween = []
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.searchVoid = function() {
    this._gameView.allBallsStyle();
    var cnt = 0
      , len = 0;
    var baseMapInfo;
    var searchMapInfo;
    var targetMapInfo;
    var checkCount = 0;
    var moveArray = [];
    var initYpos = 0;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var twnX = 0, twnY = 0, tDlay;
    var downCount = 0;
    var addPosX = 1;
    var addPosY = 1;
    var checkR;
    var checkL;
    var checkX = 0
      , checkY = 0;
    var checkSide = false;
    var sideMapInfo;
    var onEmpty;
    var onEmptyPoint = 0;
    var tt = false;
    var ball;
    var voidCount = 0;
    var bx = 0
      , by = 0;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var addfy = false;
    var cx = 0
      , cy = 0;
    var doubleSideCheck = 0;
    var addOrder = -1;
    var addAcorn = -1;
    var hasMission = -1;
    var isFixInit = false;
    var tempThroughLevel = 0;
    var diffWarpX;
    var diffWarpY;
    cx = 2;
    cy = 4;
    var checkLoop = 0;
    var isLoop;
    while (this._checkTargetMapInfo.length > 0) {
        len = this._checkTargetMapInfo.length;
        this.traceLog('checkX::', len, this._checkTargetMapInfo);
        for (cnt = 0; cnt < len; cnt++) {
            checkLoop = 0;
            isLoop = false;
            checkSide = false;
            isFixInit = false;
            while (!checkSide) {
                checkLoop++;
                this.traceLog('checkLoop::', checkLoop);
                if (checkLoop > 100) {
                    this.traceLog('\u30eb\u30fc\u30d7\u304c\u8d8a\u3048\u305f\u306e\u3067\u629c\u3051\u308b');
                    isLoop = true;
                    break
                }
                checkX = Number(this._checkTargetMapInfo[cnt][0]);
                checkY = Number(this._checkTargetMapInfo[cnt][1]);
                baseMapInfo = this._gameView.map[checkX][checkY];
                if (baseMapInfo.num == -1) {
                    this._initYposArray[checkX] = 0;
                    this._checkTargetMapInfo.splice(cnt, 1);
                    checkSide = true;
                    baseMapInfo.stackMoveArray = [];
                    if (this._stackMoveTween.indexOf(baseMapInfo) != -1)
                        this._stackMoveTween.splice(this._stackMoveTween.indexOf(baseMapInfo), 1);
                    baseMapInfo.isStackTweenMove = false;
                    continue
                }
                if (baseMapInfo.isWarpIn == -1)
                    if ((this._gameView.map[baseMapInfo.mx][baseMapInfo.my + 1].isFix || !this._gameView.map[baseMapInfo.mx][baseMapInfo.my + 1].isMovable) && !isFixInit) {
                        this._initYposArray[checkX] = 0;
                        isFixInit = true
                    }
                if (baseMapInfo.isWarpIn != -1) {
                    targetMapInfo = this._gameView.map[this._gameView.warpOutVec[baseMapInfo.isWarpIn].mx][this._gameView.warpOutVec[baseMapInfo.isWarpIn].my];
                    moveArray = [];
                    addPosX = 0;
                    addPosY = 0;
                    targetMapInfo.fromWarp = baseMapInfo.isWarpIn;
                    moveArray.push(['down', this._initYposArray[checkX] + 1, 0, 0])
                } else {
                    if (!baseMapInfo.checkVoidL && !baseMapInfo.checkVoidR)
                        if (this._initYposArray[checkX] % 2 == 0)
                            addPosX = -1;
                        else
                            addPosX = 1;
                    else if (!baseMapInfo.checkVoidL)
                        addPosX = -1;
                    else if (!baseMapInfo.checkVoidR)
                        addPosX = 1;
                    else {
                        this._checkTargetMapInfo.splice(cnt, 1);
                        checkSide = true;
                        break
                    }
                    targetMapInfo = this._gameView.map[baseMapInfo.mx + addPosX][baseMapInfo.my + 1];
                    moveArray = [];
                    if (this._initYposArray[checkX] > 0)
                        moveArray.push(['down', this._initYposArray[checkX], 0, 0]);
                    moveArray.push(['slant', addPosX, 0, 0])
                }
                tt = false;
                doubleSideCheck = 0;
                while (tt == false) {
                    doubleSideCheck = 0;
                    if (targetMapInfo.my + 1 >= pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y) {
                        tt = true;
                        break
                    }
                    if (targetMapInfo.mx + 1 > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X) {
                        tt = true;
                        break
                    }
                    if (targetMapInfo.mx - 1 < -1) {
                        tt = true;
                        break
                    }
                    targetMapInfo = this._gameView.map[targetMapInfo.mx][targetMapInfo.my + 1];
                    if (targetMapInfo.num == -1 && !targetMapInfo.isFix && targetMapInfo.isMovable) {
                        if (moveArray.length == 0 || moveArray[moveArray.length - 1][0] != 'down')
                            moveArray.push(['down', 1, 0, 0]);
                        else
                            moveArray[moveArray.length - 1][1]++;
                        continue
                    } else {
                        bx = targetMapInfo.mx;
                        by = targetMapInfo.my;
                        if (this._existWarpVoid) {
                            targetMapInfo = this._gameView.map[targetMapInfo.mx][targetMapInfo.my - 1];
                            tt = true;
                            break
                        }
                        if (targetMapInfo.mx + 1 < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X) {
                            targetMapInfo = this._gameView.map[bx + 1][targetMapInfo.my];
                            if (targetMapInfo.num == -1 && !targetMapInfo.isFix && targetMapInfo.isMovable) {
                                if (moveArray.length == 0 || moveArray[moveArray.length - 1][0] != 'slant' || moveArray[moveArray.length - 1][0] == 'slant' && moveArray[moveArray.length - 1][1] < 0)
                                    moveArray.push(['slant', 1, 0, 0]);
                                else
                                    moveArray[moveArray.length - 1][1] += 1;
                                continue
                            } else
                                doubleSideCheck++
                        } else
                            doubleSideCheck++;
                        targetMapInfo = this._gameView.map[bx][by];
                        if (targetMapInfo.mx - 1 >= 0) {
                            targetMapInfo = this._gameView.map[bx - 1][targetMapInfo.my];
                            if (targetMapInfo.num == -1 && !targetMapInfo.isFix && targetMapInfo.isMovable) {
                                if (moveArray.length == 0 || moveArray[moveArray.length - 1][0] != 'slant' || moveArray[moveArray.length - 1][0] == 'slant' && moveArray[moveArray.length - 1][1] > 0)
                                    moveArray.push(['slant', -1, 0, 0]);
                                else
                                    moveArray[moveArray.length - 1][1] += -1;
                                continue
                            } else
                                doubleSideCheck++
                        } else
                            doubleSideCheck++;
                        targetMapInfo = this._gameView.map[bx][by];
                        if (doubleSideCheck == 2) {
                            targetMapInfo = this._gameView.map[targetMapInfo.mx][targetMapInfo.my - 1];
                            tt = true;
                            break
                        }
                        targetMapInfo = this._gameView.map[bx][by - 1]
                    }
                    tt = true
                }
                this.traceLog('targetMapInfo:::AAAAA', targetMapInfo.mx, targetMapInfo.my);
                targetMapInfo.num = baseMapInfo.num;
                targetMapInfo.crushType = baseMapInfo.crushType;
                targetMapInfo.isOrder = baseMapInfo.isOrder;
                targetMapInfo.isAcorn = baseMapInfo.isAcorn;
                targetMapInfo.hasMission = baseMapInfo.hasMission;
                targetMapInfo.crushMission = baseMapInfo.crushMission;
                targetMapInfo.mc.changeBallType(targetMapInfo.num, targetMapInfo.isOrder, targetMapInfo.hasMission);
                targetMapInfo.mc.changeCrushType(targetMapInfo.crushType);
                diffWarpY = 0;
                diffWarpX = 0;
                targetMapInfo.mc.x = baseMapInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
                if (baseMapInfo.isWarpIn != -1 && targetMapInfo.fromWarp == -1) {
                    targetMapInfo.fromWarp = baseMapInfo.isWarpIn;
                    if (baseMapInfo.stackMoveArray.length > 1 || baseMapInfo.stackMoveArray.length > 0 && baseMapInfo.stackMoveArray[0][0] == 'slant')
                        while (baseMapInfo.stackMoveArray.length > 0) {
                            if (baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1][0] == 'down')
                                diffWarpY -= baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1][1] * pigg.puzzle.view.CommonView.BALL_SIZE;
                            else if (baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1][0] == 'slant') {
                                diffWarpX -= baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1][1] * pigg.puzzle.view.CommonView.BALL_SIZE;
                                diffWarpY -= Math.abs(baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1][1]) * pigg.puzzle.view.CommonView.BALL_SIZE
                            }
                            moveArray.unshift(baseMapInfo.stackMoveArray[baseMapInfo.stackMoveArray.length - 1]);
                            baseMapInfo.stackMoveArray.pop()
                        }
                    baseMapInfo.stackMoveArray = []
                }
                if (baseMapInfo.fromWarp != -1) {
                    targetMapInfo.fromWarp = baseMapInfo.fromWarp;
                    diffWarpY = (this._gameView.warpOutVec[baseMapInfo.fromWarp].my + this._gameView.warpInVec[baseMapInfo.fromWarp].my + 1) * pigg.puzzle.view.CommonView.BALL_SIZE;
                    targetMapInfo.mc.x = this._gameView.warpInVec[baseMapInfo.fromWarp].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS
                }
                targetMapInfo.mc.x += diffWarpX;
                targetMapInfo.mc.y = baseMapInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS - this._initYposArray[checkX] * pigg.puzzle.view.CommonView.BALL_SIZE + diffWarpY;
                targetMapInfo.mc.visible = true;
                if (moveArray[0][0] == 'down') {
                    moveArray[0][2] = this._initYposArray[checkX];
                    moveArray[0][3] = .1 * this._searchVoidUpdateCount
                }
                targetMapInfo.stackMoveArray = moveArray.concat();
                if (baseMapInfo.mc.y - targetMapInfo.mc.y != 0 && targetMapInfo.fromWarp == -1) {
                    this.traceLog('addFallYYY::::', targetMapInfo.mx, targetMapInfo.my);
                    targetMapInfo.addFallY++;
                    targetMapInfo.mc.y -= Math.abs(baseMapInfo.mc.y - targetMapInfo.mc.y);
                    targetMapInfo.stackMoveArray.unshift(['down', 1, 0, 0])
                }
                if (!targetMapInfo.isStackTweenMove && !targetMapInfo.isFix && targetMapInfo.isMovable) {
                    targetMapInfo.isStackTweenMove = true;
                    this._stackMoveTween.push(targetMapInfo)
                }
                addfy = false;
                onEmpty = false;
                tempThroughLevel = 0;
                for (cntY = baseMapInfo.my; cntY >= this._gameView.mapSizeMinYArray[checkX]; cntY--) {
                    baseMapInfo = this._gameView.map[checkX][cntY];
                    if (baseMapInfo.isWarpOut != -1) {
                        baseMapInfo.isCheckVoid = false;
                        baseMapInfo.num = -1;
                        baseMapInfo.crushType = 0;
                        baseMapInfo.mc.changeCrushType(0);
                        baseMapInfo.mc.changeBallType(baseMapInfo.num);
                        baseMapInfo.isOrder = -1;
                        baseMapInfo.isAcorn = -1;
                        baseMapInfo.hasMission = -1;
                        baseMapInfo.crushMission = -1;
                        baseMapInfo.stackMoveArray = [];
                        baseMapInfo.isStackTweenMove = false;
                        baseMapInfo.addFallVoid = 0;
                        if (this._stackMoveTween.indexOf(baseMapInfo) != -1)
                            this._stackMoveTween.splice(this._stackMoveTween.indexOf(baseMapInfo), 1);
                        onEmpty = true;
                        onEmptyPoint = baseMapInfo.my;
                        tempThroughLevel = 0;
                        continue
                    }
                    if (cntY == this._gameView.mapSizeMinYArray[checkX])
                        continue;
                    if (!this._gameView.map[checkX][cntY - 1].isThroughVoid && (this._gameView.map[checkX][cntY - 1].isFix || !this._gameView.map[checkX][cntY - 1].isMovable)) {
                        baseMapInfo.isCheckVoid = false;
                        baseMapInfo.num = -1;
                        baseMapInfo.crushType = 0;
                        baseMapInfo.mc.changeCrushType(0);
                        baseMapInfo.mc.changeBallType(baseMapInfo.num);
                        baseMapInfo.isOrder = -1;
                        baseMapInfo.isAcorn = -1;
                        baseMapInfo.hasMission = -1;
                        baseMapInfo.crushMission = -1;
                        baseMapInfo.stackMoveArray = [];
                        baseMapInfo.isStackTweenMove = false;
                        baseMapInfo.addFallVoid = 0;
                        if (this._stackMoveTween.indexOf(baseMapInfo) != -1)
                            this._stackMoveTween.splice(this._stackMoveTween.indexOf(baseMapInfo), 1);
                        onEmpty = true;
                        onEmptyPoint = baseMapInfo.my - 1;
                        tempThroughLevel = 0;
                        break
                    }
                    tempThroughLevel = Number(this._gameView.map[checkX][cntY - 1].isThroughVoidLevel);
                    cntY -= Number(this._gameView.map[checkX][cntY - 1].isThroughVoidLevel);
                    baseMapInfo.isCheckVoid = true;
                    baseMapInfo.num = Number(this._gameView.map[checkX][cntY - 1].num);
                    baseMapInfo.crushType = Number(this._gameView.map[checkX][cntY - 1].crushType);
                    baseMapInfo.isOrder = Number(this._gameView.map[checkX][cntY - 1].isOrder);
                    baseMapInfo.isAcorn = Number(this._gameView.map[checkX][cntY - 1].isAcorn);
                    baseMapInfo.hasMission = Number(this._gameView.map[checkX][cntY - 1].hasMission);
                    baseMapInfo.crushMission = Number(this._gameView.map[checkX][cntY - 1].crushMission);
                    baseMapInfo.mc.changeBallType(baseMapInfo.num, baseMapInfo.isOrder, baseMapInfo.hasMission);
                    baseMapInfo.mc.changeCrushType(baseMapInfo.crushType);
                    baseMapInfo.mc.visible = true;
                    baseMapInfo.addFallVoid = Number(this._gameView.map[checkX][cntY - 1].addFallVoid + tempThroughLevel);
                    diffWarpY = 0;
                    if (this._gameView.map[checkX][cntY - 1].fromWarp != -1) {
                        baseMapInfo.fromWarp = Number(this._gameView.map[checkX][cntY - 1].fromWarp);
                        baseMapInfo.mc.x = this._gameView.warpInVec[baseMapInfo.fromWarp].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
                        diffWarpY = (this._gameView.warpOutVec[baseMapInfo.fromWarp].my + this._gameView.warpInVec[baseMapInfo.fromWarp].my + 1) * pigg.puzzle.view.CommonView.BALL_SIZE
                    } else {
                        this.traceLog('\u3044\u3063\u3053\u4e0a\u306e\u3092\u683c\u7d0d\u3059\u308b::fromWarp \x3d\x3d\x3d -1', baseMapInfo.mx, baseMapInfo.my, baseMapInfo.addFallVoid);
                        baseMapInfo.fromWarp = -1;
                        baseMapInfo.mc.x = baseMapInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS
                    }
                    baseMapInfo.mc.y = (baseMapInfo.my - (1 + baseMapInfo.addFallVoid)) * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS - this._initYposArray[checkX] * pigg.puzzle.view.CommonView.BALL_SIZE + diffWarpY;
                    if (baseMapInfo.stackMoveArray.length == 0)
                        baseMapInfo.stackMoveArray.unshift(['down', 1 + baseMapInfo.addFallVoid, 0, 0]);
                    if (!this._gameView.map[checkX][cntY - 1].isThroughVoid && this._gameView.map[checkX][cntY - 1].num == -1) {
                        onEmpty = true;
                        this._gameView.map[checkX][cntY - 1].stackMoveArray = [];
                        this._gameView.map[checkX][cntY - 1].isStackTweenMove = false;
                        if (this._stackMoveTween.indexOf(this._gameView.map[checkX][cntY - 1]) != -1)
                            this._stackMoveTween.splice(this._stackMoveTween.indexOf(this._gameView.map[checkX][cntY - 1]), 1);
                        continue
                    }
                }
                if (!onEmpty) {
                    hasMission = -1;
                    addOrder = this._gameView.checkAddOrderObject();
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].num = this._gameView.normalBallTypeArray[org.apache.royale.utils.Language._int(Math.random() * this._gameView.normalBallTypeArray.length)];
                    if (addOrder == -1) {
                        addAcorn = this._gameView.checkAddAcornObject();
                        if (addAcorn == -1) {
                            this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].ballType = this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].num;
                            if (this._main.existMission)
                                hasMission = this._gameView.checkAddMissionPiece()
                        } else {
                            this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].num = 12 + addAcorn;
                            this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].ballType = 12 + addAcorn
                        }
                    } else {
                        this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].num = 10;
                        this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].ballType = 10
                    }
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].isCheckVoid = true;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].isOrder = addOrder;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].isAcorn = addAcorn;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].hasMission = hasMission;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].crushMission = hasMission;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].mc.init();
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].mc.changeBallType(this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].num, addOrder, hasMission);
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].mc.changeCrushType(0);
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].crushType = 0;
                    if (addAcorn == -1)
                        this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].ballCrushType = 0;
                    else
                        this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].ballCrushType = 12 + addAcorn;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].mc.y = -1 * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS - this._initYposArray[checkX] * pigg.puzzle.view.CommonView.BALL_SIZE + this._gameView.mapSizeMinYArray[checkX] * pigg.puzzle.view.CommonView.BALL_SIZE;
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].stackMoveArray = [];
                    this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]].isStackTweenMove = false;
                    if (this._stackMoveTween.indexOf(this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]]) != -1)
                        this._stackMoveTween.splice(this._stackMoveTween.indexOf(this._gameView.map[checkX][this._gameView.mapSizeMinYArray[checkX]]), 1)
                }
                if (checkY != this._gameView.mapSizeMinYArray[checkX] && (this._gameView.map[checkX][checkY - 1].isFix || !this._gameView.map[checkX][checkY - 1].isMovable)) {
                    if (this._gameView.map[checkX][checkY - 1].isThroughVoid)
                        this._initYposArray[checkX]++
                } else if (checkY > this._gameView.mapSizeMinYArray[checkX] + 1 && (this._gameView.map[checkX][checkY - 2].isFix || !this._gameView.map[checkX][checkY - 2].isMovable))
                    ;
                else
                    this._initYposArray[checkX]++;
                baseMapInfo = this._gameView.map[checkX][checkY];
                if (baseMapInfo.isWarpIn == -1) {
                    targetMapInfo = this._gameView.map[checkX + addPosX][checkY + 1];
                    if (!baseMapInfo.checkVoidR && targetMapInfo.num != -1 && addPosX == 1)
                        baseMapInfo.checkVoidR = true;
                    if (!baseMapInfo.checkVoidL && targetMapInfo.num != -1 && addPosX == -1)
                        baseMapInfo.checkVoidL = true;
                    if (targetMapInfo.mx + addPosX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X && targetMapInfo.mx + addPosX >= 0) {
                        sideMapInfo = this._gameView.map[targetMapInfo.mx + addPosX][checkY];
                        if (sideMapInfo)
                            if (addPosX == 1 && !sideMapInfo.checkVoidL)
                                sideMapInfo.checkVoidL = true;
                            else if (addPosX == -1 && !sideMapInfo.checkVoidR)
                                sideMapInfo.checkVoidR = true
                    }
                } else {
                    targetMapInfo = this._gameView.map[this._gameView.warpOutVec[baseMapInfo.isWarpIn].mx][this._gameView.warpOutVec[baseMapInfo.isWarpIn].my];
                    if (!baseMapInfo.checkVoidD && targetMapInfo.num != -1)
                        baseMapInfo.checkVoidD = true
                }
                if (baseMapInfo.checkVoidR && baseMapInfo.checkVoidL && baseMapInfo.checkVoidD) {
                    this._checkTargetMapInfo.splice(cnt, 1);
                    checkSide = true;
                    if (baseMapInfo.num != -1) {
                        for (cntY = checkY; cntY >= this._gameView.mapSizeMinYArray[checkX]; cntY--) {
                            baseMapInfo = this._gameView.map[checkX][cntY];
                            if (baseMapInfo.num == -1) {
                                baseMapInfo.isStackTweenMove = false;
                                baseMapInfo.stackMoveArray = [];
                                if (this._stackMoveTween.indexOf(baseMapInfo) != -1)
                                    this._stackMoveTween.splice(this._stackMoveTween.indexOf(baseMapInfo), 1);
                                baseMapInfo.isStackTweenMove = false;
                                continue
                            }
                            if (baseMapInfo.isFix)
                                continue;
                            if (!baseMapInfo.isMovable)
                                continue;
                            if (!baseMapInfo.isCheckVoid)
                                continue;
                            if (this._initYposArray[checkX] == 0)
                                baseMapInfo.stackMoveArray[0] = ['down', 1, 1, downCount * .01 + .1 * this._searchVoidUpdateCount];
                            else
                                baseMapInfo.stackMoveArray[0] = ['down', this._initYposArray[checkX] + baseMapInfo.addFallVoid, this._initYposArray[checkX] + baseMapInfo.addFallVoid, downCount * .01 + .1 * this._searchVoidUpdateCount];
                            if (!baseMapInfo.isStackTweenMove) {
                                baseMapInfo.isStackTweenMove = true;
                                this._stackMoveTween.push(baseMapInfo)
                            }
                            downCount++
                        }
                        downCount = 0
                    } else {
                        baseMapInfo.stackMoveArray = [];
                        if (this._stackMoveTween.indexOf(baseMapInfo) != -1)
                            this._stackMoveTween.splice(this._stackMoveTween.indexOf(baseMapInfo), 1);
                        baseMapInfo.isStackTweenMove = false
                    }
                } else if (baseMapInfo.num == -1) {
                    this._checkTargetMapInfo.splice(cnt, 1);
                    checkSide = true
                }
                if (onEmpty)
                    voidCount++
            }
            if (isLoop) {
                this.traceLog('\u30eb\u30fc\u30d7\u304c\u8d8a\u3048\u305f\u306e\u3067\u629c\u3051\u308b2');
                break
            }
            if (checkSide) {
                this.checkPresetGrid(false, true);
                if (this._isEndWarpSearchVoid)
                    return;
                break
            }
        }
        if (isLoop) {
            this.traceLog('\u30eb\u30fc\u30d7\u304c\u8d8a\u3048\u305f\u306e\u3067\u629c\u3051\u308b3');
            break
        }
    }
    if (isLoop) {
        this._gameView.forceResetGame();
        return
    }
    this._searchVoidUpdateCount++;
    this.checkPresetGrid(true)
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.updateMoveArray = function(mInfo) {
    var twnX = 0, twnY = 0, tDlay;
    var tmcy = 0;
    mInfo.stackMoveArray.shift();
    if (mInfo.stackMoveArray.length == 0) {
        this._stackMoveTween.splice(this._stackMoveTween.indexOf(mInfo), 1);
        if (this._stackMoveTween.length == 0)
            if (this._isEndWarpSearchVoid)
                com.greensock.TweenMax.to(mInfo, .08, {
                    onComplete: org.apache.royale.utils.Language.closure(this._gameView.allBallsDisplay, this._gameView, 'allBallsDisplay')
                });
            else
                com.greensock.TweenMax.to(mInfo, .2, {
                    onComplete: org.apache.royale.utils.Language.closure(this._gameView.allBallsDisplay, this._gameView, 'allBallsDisplay')
                });
        com.greensock.TweenMax.killTweensOf(mInfo.mc);
        if (this._gameView.existWarpGrid) {
            mInfo.mc.rotation = Math.random() * 50 - 25;
            if (mInfo.mc.rotation < 0 && mInfo.mc.rotation > -15)
                mInfo.mc.rotation = -15;
            else if (mInfo.mc.rotation > 0 && mInfo.mc.rotation < 15)
                mInfo.mc.rotation = 15;
            mInfo.mc.setOrigin();
            com.greensock.TweenMax.to(mInfo.mc, .6, {
                rotation: 0,
                originX: 0,
                originY: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1, .5)
            });
            if (mInfo.my < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && this._gameView.map[mInfo.mx][mInfo.my + 1] && this._gameView.map[mInfo.mx][mInfo.my + 1].num != -1 && this._gameView.map[mInfo.mx][mInfo.my + 1].isVoid != -1 && !com.greensock.TweenMax.isTweening(this._gameView.map[mInfo.mx][mInfo.my + 1].mc)) {
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = Math.random() * 30 - 15;
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.scaleY = 1;
                tmcy = Number(this._gameView.map[mInfo.mx][mInfo.my + 1].mc.y);
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.y += 5;
                if (this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation < 0 && this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation > -15)
                    this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = -10;
                else if (this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation > 0 && this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation < 15)
                    this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = 10;
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.setOrigin();
                com.greensock.TweenMax.to(this._gameView.map[mInfo.mx][mInfo.my + 1].mc, .3, {
                    rotation: 0,
                    scaleY: 1,
                    y: tmcy,
                    originX: 0,
                    originY: 0,
                    ease: com.greensock.easing.Cubic.easeOut
                })
            }
        } else {
            mInfo.mc.rotation = Math.random() * 50 - 25;
            if (mInfo.mc.rotation < 0 && mInfo.mc.rotation > -15)
                mInfo.mc.rotation = -15;
            else if (mInfo.mc.rotation > 0 && mInfo.mc.rotation < 15)
                mInfo.mc.rotation = 15;
            mInfo.mc.setOrigin();
            com.greensock.TweenMax.to(mInfo.mc, .6, {
                rotation: 0,
                originX: 0,
                originY: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1, .5)
            });
            if (mInfo.my < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && this._gameView.map[mInfo.mx][mInfo.my + 1] && this._gameView.map[mInfo.mx][mInfo.my + 1].num != -1 && this._gameView.map[mInfo.mx][mInfo.my + 1].isVoid != -1 && !com.greensock.TweenMax.isTweening(this._gameView.map[mInfo.mx][mInfo.my + 1].mc)) {
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = Math.random() * 30 - 15;
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.scaleY = 1;
                tmcy = Number(this._gameView.map[mInfo.mx][mInfo.my + 1].mc.y);
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.y += 5;
                if (this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation < 0 && this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation > -15)
                    this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = -10;
                else if (this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation > 0 && this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation < 15)
                    this._gameView.map[mInfo.mx][mInfo.my + 1].mc.rotation = 10;
                this._gameView.map[mInfo.mx][mInfo.my + 1].mc.setOrigin();
                com.greensock.TweenMax.to(this._gameView.map[mInfo.mx][mInfo.my + 1].mc, .3, {
                    rotation: 0,
                    scaleY: 1,
                    y: tmcy,
                    originX: 0,
                    originY: 0,
                    ease: com.greensock.easing.Cubic.easeOut
                })
            }
        }
        this._main.playSE(pigg.puzzle.data.CommonData.SE_FALL);
        return
    }
    this.setMoveTween(mInfo)
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.setMoveTween = function(mInfo) {
    var twnX = 0, twnY = 0, tDlay;
    if (mInfo.mc == null)
        return;
    if (mInfo.stackMoveArray == null)
        return;
    if (mInfo.stackMoveArray.length == 0)
        return;
    var type = org.apache.royale.utils.Language.string(mInfo.stackMoveArray[0][0]);
    var amount = Math.abs(mInfo.stackMoveArray[0][1]);
    var initPos = Number(mInfo.stackMoveArray[0][2]);
    var addDelay = Number(mInfo.stackMoveArray[0][3]);
    var easing = [com.greensock.easing.Sine.easeIn, com.greensock.easing.Linear.easeNone];
    var diffAmount = 0;
    if (type == 'down') {
        twnX = 0;
        if (!this._gameView.existWarpGrid)
            if (amount > 10) {
                this.traceLog('\u7701\u7565\u3057\u305fminfo::amount::', amount);
                diffAmount = amount - 10;
                amount = 10;
                initPos += diffAmount;
                addDelay += diffAmount * .02;
                mInfo.mc.y += diffAmount * pigg.puzzle.view.CommonView.BALL_SIZE;
                this.traceLog('\u7701\u7565\u3057\u305fminfo::', mInfo.mx, mInfo.my, diffAmount)
            }
        twnY = pigg.puzzle.view.CommonView.BALL_SIZE * amount;
        if (mInfo.stackMoveArray.length == 1)
            tDlay = .16;
        else
            tDlay = .18;
        if (this._gameView.existWarpGrid)
            com.greensock.TweenMax.to(mInfo.mc, (.5 + amount * .6) * tDlay, {
                delay: initPos * .07 + addDelay,
                x: mInfo.mc.x + twnX,
                y: mInfo.mc.y + twnY,
                ease: com.greensock.easing.Power1.easeIn,
                onComplete: org.apache.royale.utils.Language.closure(this.updateMoveArray, this, 'updateMoveArray'),
                onCompleteParams: [mInfo],
                onUpdate: org.apache.royale.utils.Language.closure(this.updateMoveTween, this, 'updateMoveTween'),
                onUpdateParams: [mInfo]
            });
        else
            com.greensock.TweenMax.to(mInfo.mc, (.5 + amount * .6) * tDlay, {
                delay: initPos * .07 + addDelay,
                rotation: 0,
                x: mInfo.mc.x + twnX,
                y: mInfo.mc.y + twnY,
                ease: com.greensock.easing.Power1.easeIn,
                onComplete: org.apache.royale.utils.Language.closure(this.updateMoveArray, this, 'updateMoveArray'),
                onCompleteParams: [mInfo],
                onUpdate: org.apache.royale.utils.Language.closure(this.updateMoveTween, this, 'updateMoveTween'),
                onUpdateParams: [mInfo]
            })
    } else if (type == 'slant') {
        twnX = pigg.puzzle.view.CommonView.BALL_SIZE * mInfo.stackMoveArray[0][1];
        twnY = pigg.puzzle.view.CommonView.BALL_SIZE * amount;
        if (mInfo.stackMoveArray.length == 1)
            tDlay = .28;
        else
            tDlay = .18;
        if (this._gameView.existWarpGrid)
            com.greensock.TweenMax.to(mInfo.mc, (.5 + amount * .5) * tDlay, {
                delay: initPos * .05 + addDelay,
                x: mInfo.mc.x + twnX,
                y: mInfo.mc.y + twnY,
                ease: com.greensock.easing.Power1.easeIn,
                onComplete: org.apache.royale.utils.Language.closure(this.updateMoveArray, this, 'updateMoveArray'),
                onCompleteParams: [mInfo],
                onUpdate: org.apache.royale.utils.Language.closure(this.updateMoveTween, this, 'updateMoveTween'),
                onUpdateParams: [mInfo]
            });
        else
            com.greensock.TweenMax.to(mInfo.mc, (.5 + amount * .7) * tDlay, {
                delay: initPos * .05 + addDelay,
                x: mInfo.mc.x + twnX,
                rotation: mInfo.stackMoveArray[0][1] * 5,
                y: mInfo.mc.y + twnY,
                ease: com.greensock.easing.Power1.easeIn,
                onComplete: org.apache.royale.utils.Language.closure(this.updateMoveArray, this, 'updateMoveArray'),
                onCompleteParams: [mInfo],
                onUpdate: org.apache.royale.utils.Language.closure(this.updateMoveTween, this, 'updateMoveTween'),
                onUpdateParams: [mInfo]
            })
    }
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.updateMoveTween = function(mInfo) {
    var twmv;
    var toX = 0
      , toY = 0;
    var diffX = 0
      , diffY = 0;
    if (mInfo.fromWarp != -1)
        if (mInfo.mc.x == this._gameView.warpInVec[mInfo.fromWarp].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS && mInfo.mc.y - pigg.puzzle.view.CommonView.BALL_SIZE >= this._gameView.warpInVec[mInfo.fromWarp].my * pigg.puzzle.view.CommonView.BALL_SIZE + 12) {
            this.traceLog('\u30ef\u30fc\u30d7\u30a4\u30f3\u3092\u8d85\u3048\u305f', mInfo.mx, mInfo.my, mInfo.stackMoveArray);
            toX = org.apache.royale.utils.Language._int(com.greensock.TweenMax.getTweensOf(mInfo.mc)[0].vars.x);
            toY = org.apache.royale.utils.Language._int(com.greensock.TweenMax.getTweensOf(mInfo.mc)[0].vars.y);
            diffX = (this._gameView.warpInVec[mInfo.fromWarp].mx - this._gameView.warpOutVec[mInfo.fromWarp].mx) * pigg.puzzle.view.CommonView.BALL_SIZE;
            diffY = (this._gameView.warpInVec[mInfo.fromWarp].my - this._gameView.warpOutVec[mInfo.fromWarp].my) * pigg.puzzle.view.CommonView.BALL_SIZE;
            if (mInfo.mc.x == com.greensock.TweenMax.getTweensOf(mInfo.mc)[0].vars.x && mInfo.mc.y == com.greensock.TweenMax.getTweensOf(mInfo.mc)[0].vars.y)
                this.traceLog('\u308a\u305f\u30fc\u3093', mInfo.mx, mInfo.my);
            mInfo.mc.x = this._gameView.warpOutVec[mInfo.fromWarp].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
            mInfo.mc.y = this._gameView.warpOutVec[mInfo.fromWarp].my * pigg.puzzle.view.CommonView.BALL_SIZE;
            com.greensock.TweenMax.getTweensOf(mInfo.mc)[0].updateTo({
                x: toX - diffX,
                y: toY - diffY - pigg.puzzle.view.CommonView.BALL_SIZE
            }, false);
            mInfo.fromWarp = -1
        }
}
;
pigg.puzzle.manager.SearchSlantManager.prototype.get__isEndWarpSearchVoid = function() {
    return this._isEndWarpSearchVoid
}
;
Object.defineProperties(pigg.puzzle.manager.SearchSlantManager.prototype, {
    isEndWarpSearchVoid: {
        get: pigg.puzzle.manager.SearchSlantManager.prototype.get__isEndWarpSearchVoid
    }
});
pigg.puzzle.manager.SearchSlantManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SearchSlantManager',
        qName: 'pigg.puzzle.manager.SearchSlantManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.SearchSlantManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isEndWarpSearchVoid': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager'
                }
            }
        },
        methods: function() {
            return {
                'SearchSlantManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.view.GameView',
                            optional: false
                        }]
                    }
                },
                'checkPresetGrid': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'initVoidStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.SearchSlantManager'
                }
            }
        }
    }
}
;
comm.adobe.serialization.json.JSON = function() {}
;
goog.exportSymbol('comm.adobe.serialization.json.JSON', comm.adobe.serialization.json.JSON);
comm.adobe.serialization.json.JSON.encode = function(o) {
    return ''
}
;
comm.adobe.serialization.json.JSON.decode = function(s, strict) {
    strict = typeof strict !== 'undefined' ? strict : true;
    return (new comm.adobe.serialization.json.JSONDecoder(s,strict)).getValue()
}
;
comm.adobe.serialization.json.JSON.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSON',
        qName: 'comm.adobe.serialization.json.JSON',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSON.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                '|encode': {
                    type: 'String',
                    declaredBy: 'comm.adobe.serialization.json.JSON',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }]
                    }
                },
                '|decode': {
                    type: '*',
                    declaredBy: 'comm.adobe.serialization.json.JSON',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.AttachmentLoader = function() {}
;
goog.exportSymbol('spine.attachments.AttachmentLoader', spine.attachments.AttachmentLoader);
spine.attachments.AttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {}
;
spine.attachments.AttachmentLoader.prototype.newMeshAttachment = function(skin, name, path) {}
;
spine.attachments.AttachmentLoader.prototype.newBoundingBoxAttachment = function(skin, name) {}
;
spine.attachments.AttachmentLoader.prototype.newPathAttachment = function(skin, name) {}
;
spine.attachments.AttachmentLoader.prototype.newPointAttachment = function(skin, name) {}
;
spine.attachments.AttachmentLoader.prototype.newClippingAttachment = function(skin, name) {}
;
spine.attachments.AttachmentLoader.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AttachmentLoader',
        qName: 'spine.attachments.AttachmentLoader',
        kind: 'interface'
    }]
};
spine.attachments.AttachmentLoader.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'newRegionAttachment': {
                    type: 'spine.attachments.RegionAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newMeshAttachment': {
                    type: 'spine.attachments.MeshAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newBoundingBoxAttachment': {
                    type: 'spine.attachments.BoundingBoxAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newPathAttachment': {
                    type: 'spine.attachments.PathAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newPointAttachment': {
                    type: 'spine.attachments.PointAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newClippingAttachment': {
                    type: 'spine.attachments.ClippingAttachment',
                    declaredBy: 'spine.attachments.AttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.AtlasAttachmentLoader = function(atlas) {
    if (atlas == null)
        throw new openfl.errors.ArgumentError('atlas cannot be null.');
    this.atlas = atlas
}
;
goog.exportSymbol('spine.attachments.AtlasAttachmentLoader', spine.attachments.AtlasAttachmentLoader);
spine.attachments.AtlasAttachmentLoader.prototype.atlas;
spine.attachments.AtlasAttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {
    var region = this.atlas.findRegion(path);
    if (region == null)
        throw new Error('Region not found in atlas: ' + path + ' (region attachment: ' + name + ')');
    var attachment = new spine.attachments.RegionAttachment(name);
    attachment.rendererObject = region;
    var scaleX = region.page.width / spine.attachments.AtlasAttachmentLoader.nextPOT(region.page.width);
    var scaleY = region.page.height / spine.attachments.AtlasAttachmentLoader.nextPOT(region.page.height);
    attachment.setUVs(region.u * scaleX, region.v * scaleY, region.u2 * scaleX, region.v2 * scaleY, region.rotate);
    attachment.regionOffsetX = region.offsetX;
    attachment.regionOffsetY = region.offsetY;
    attachment.regionWidth = region.width;
    attachment.regionHeight = region.height;
    attachment.regionOriginalWidth = region.originalWidth;
    attachment.regionOriginalHeight = region.originalHeight;
    return attachment
}
;
spine.attachments.AtlasAttachmentLoader.prototype.newMeshAttachment = function(skin, name, path) {
    var region = this.atlas.findRegion(path);
    if (region == null)
        throw new Error('Region not found in atlas: ' + path + ' (mesh attachment: ' + name + ')');
    var attachment = new spine.attachments.MeshAttachment(name);
    attachment.rendererObject = region;
    var scaleX = region.page.width / spine.attachments.AtlasAttachmentLoader.nextPOT(region.page.width);
    var scaleY = region.page.height / spine.attachments.AtlasAttachmentLoader.nextPOT(region.page.height);
    attachment.regionU = region.u * scaleX;
    attachment.regionV = region.v * scaleY;
    attachment.regionU2 = region.u2 * scaleX;
    attachment.regionV2 = region.v2 * scaleY;
    attachment.regionRotate = region.rotate;
    attachment.regionOffsetX = region.offsetX;
    attachment.regionOffsetY = region.offsetY;
    attachment.regionWidth = region.width;
    attachment.regionHeight = region.height;
    attachment.regionOriginalWidth = region.originalWidth;
    attachment.regionOriginalHeight = region.originalHeight;
    return attachment
}
;
spine.attachments.AtlasAttachmentLoader.prototype.newBoundingBoxAttachment = function(skin, name) {
    return new spine.attachments.BoundingBoxAttachment(name)
}
;
spine.attachments.AtlasAttachmentLoader.prototype.newPathAttachment = function(skin, name) {
    return new spine.attachments.PathAttachment(name)
}
;
spine.attachments.AtlasAttachmentLoader.prototype.newPointAttachment = function(skin, name) {
    return new spine.attachments.PointAttachment(name)
}
;
spine.attachments.AtlasAttachmentLoader.prototype.newClippingAttachment = function(skin, name) {
    return new spine.attachments.ClippingAttachment(name)
}
;
spine.attachments.AtlasAttachmentLoader.nextPOT = function(value) {
    value--;
    value |= value >> 1;
    value |= value >> 2;
    value |= value >> 4;
    value |= value >> 8;
    value |= value >> 16;
    return value + 1
}
;
spine.attachments.AtlasAttachmentLoader.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AtlasAttachmentLoader',
        qName: 'spine.attachments.AtlasAttachmentLoader',
        kind: 'class'
    }],
    interfaces: [spine.attachments.AttachmentLoader]
};
spine.attachments.AtlasAttachmentLoader.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AtlasAttachmentLoader': {
                    type: '',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.atlas.Atlas',
                            optional: false
                        }]
                    }
                },
                'newRegionAttachment': {
                    type: 'spine.attachments.RegionAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newMeshAttachment': {
                    type: 'spine.attachments.MeshAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newBoundingBoxAttachment': {
                    type: 'spine.attachments.BoundingBoxAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newPathAttachment': {
                    type: 'spine.attachments.PathAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newPointAttachment': {
                    type: 'spine.attachments.PointAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'newClippingAttachment': {
                    type: 'spine.attachments.ClippingAttachment',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skin',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                '|nextPOT': {
                    type: 'int',
                    declaredBy: 'spine.attachments.AtlasAttachmentLoader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.UserRankingView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._awardRect = [];
    this.RECT_CURRENT_AWARD_BG = [];
    this.RECT_NEXT_AWARD_BG = [];
    this.RECT_NEXT_AWARD_ANIMAL = [];
    this.RECT_RANKING_GAUGE = [];
    this.traceLog('UserRankingView')
}
;
goog.inherits(pigg.puzzle.view.UserRankingView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.UserRankingView', pigg.puzzle.view.UserRankingView);
pigg.puzzle.view.UserRankingView.prototype._main;
pigg.puzzle.view.UserRankingView.prototype._container;
pigg.puzzle.view.UserRankingView.prototype._isShow;
pigg.puzzle.view.UserRankingView.prototype._numberFontManager;
pigg.puzzle.view.UserRankingView.prototype._rankInfoContainer;
pigg.puzzle.view.UserRankingView.prototype._pointRankInfoContainer;
pigg.puzzle.view.UserRankingView.prototype._pointRankIncentiveContainer;
pigg.puzzle.view.UserRankingView.prototype._lastUpdateTimeTxt;
pigg.puzzle.view.UserRankingView.prototype._pointRankTxts;
pigg.puzzle.view.UserRankingView.prototype._pointRankAwardTilemap;
pigg.puzzle.view.UserRankingView.prototype._pointRankAwardTile;
pigg.puzzle.view.UserRankingView.prototype._winningRankInfoContainer;
pigg.puzzle.view.UserRankingView.prototype._winningRankIncentiveContainer;
pigg.puzzle.view.UserRankingView.prototype._winningRankTxts;
pigg.puzzle.view.UserRankingView.prototype._winningRankAwardTilemap;
pigg.puzzle.view.UserRankingView.prototype._winningRankAwardTile;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentPrize;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentPrizeIcon;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentPrizeBg;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentPrizeKurai;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentPrizeAnimalContainer;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrize;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrizeIcon;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrizeBg;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrizeAnimal;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrizeAto;
pigg.puzzle.view.UserRankingView.prototype._pointNextPrizePointIcon;
pigg.puzzle.view.UserRankingView.prototype._pointHighest;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentPrize;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentPrizeIcon;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentPrizeBg;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentPrizeKurai;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentPrizeAnimalContainer;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrize;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrizeIcon;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrizeBg;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrizeAnimal;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrizeSaikou;
pigg.puzzle.view.UserRankingView.prototype._winningNextPrizeRensyo;
pigg.puzzle.view.UserRankingView.prototype._winningHighest;
pigg.puzzle.view.UserRankingView.prototype._incentiveDetailContainer;
pigg.puzzle.view.UserRankingView.prototype._incentiveDetailScrollView;
pigg.puzzle.view.UserRankingView.prototype._incentiveDetailScrollContainer;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentIncentiveDetail;
pigg.puzzle.view.UserRankingView.prototype._pointNextIncentiveDetail;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentIncentiveDetail;
pigg.puzzle.view.UserRankingView.prototype._winningNextIncentiveDetail;
pigg.puzzle.view.UserRankingView.prototype._incentiveDetailTitle;
pigg.puzzle.view.UserRankingView.prototype._pointCurrentIncentiveRank = -1;
pigg.puzzle.view.UserRankingView.prototype._pointNextIncentiveRank = -1;
pigg.puzzle.view.UserRankingView.prototype._winningCurrentIncentiveRank = -1;
pigg.puzzle.view.UserRankingView.prototype._winningNextIncentiveRank = -1;
pigg.puzzle.view.UserRankingView.prototype._currentRankType = -1;
pigg.puzzle.view.UserRankingView.prototype._rankingTileset;
pigg.puzzle.view.UserRankingView.prototype._awardRect;
pigg.puzzle.view.UserRankingView.prototype._loadCnt = 0;
pigg.puzzle.view.UserRankingView.prototype._isLoaded;
pigg.puzzle.view.UserRankingView.prototype._userRankingData;
pigg.puzzle.view.UserRankingView.prototype._currentScoreAward = -1;
pigg.puzzle.view.UserRankingView.prototype._currentWinningAward = -1;
pigg.puzzle.view.UserRankingView.prototype._lastUpdateTimeContainer;
pigg.puzzle.view.UserRankingView.prototype._rankingScoreGaugeContainer;
pigg.puzzle.view.UserRankingView.prototype._rankingScoreGaugeTile;
pigg.puzzle.view.UserRankingView.prototype._rankingWinningGaugeContainer;
pigg.puzzle.view.UserRankingView.prototype._rankingWinningGaugeTile;
pigg.puzzle.view.UserRankingView.prototype._rankingGaugeUserIconContainer;
pigg.puzzle.view.UserRankingView.prototype._piggCode = '';
pigg.puzzle.view.UserRankingView.prototype._viewType = '';
pigg.puzzle.view.UserRankingView.prototype.RECT_CURRENT_AWARD_BG;
pigg.puzzle.view.UserRankingView.prototype.RECT_NEXT_AWARD_BG;
pigg.puzzle.view.UserRankingView.prototype.RECT_NEXT_AWARD_ANIMAL;
pigg.puzzle.view.UserRankingView.prototype.RECT_RANKING_GAUGE;
pigg.puzzle.view.UserRankingView.prototype.RECT_NO_JOIN_BG = 0;
pigg.puzzle.view.UserRankingView.prototype.RECT_NO_JOIN_SCORE_BEAR = 0;
pigg.puzzle.view.UserRankingView.prototype.RECT_NO_JOIN_WINNING_BEAR = 0;
pigg.puzzle.view.UserRankingView.prototype.RECT_HIGHEST_AWARD = 0;
pigg.puzzle.view.UserRankingView.prototype.RECT_NEXT_AWARD_INCENTIVE_BG = 0;
pigg.puzzle.view.UserRankingView.prototype._userRankingStatus = -1;
pigg.puzzle.view.UserRankingView.prototype.clean = function() {}
;
pigg.puzzle.view.UserRankingView.prototype.init = function(main, viewType) {
    this._main = main;
    this._viewType = viewType;
    this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
    this._numberFontManager.init(this._main);
    this.visible = false;
    this._container = new openfl.display.Sprite;
    this.addChild(this._container);
    this._rankInfoContainer = new openfl.display.Sprite;
    this._rankingTileset = this._main.rankingPartsTileset.clone();
    var cnt = 0
      , len = 0;
    len = 8;
    for (cnt = 0; cnt < len; cnt++) {
        this.RECT_CURRENT_AWARD_BG.push(this._rankingTileset.addRect(new openfl.geom.Rectangle(1,1 + 121 * cnt,426,120)));
        this.RECT_NEXT_AWARD_BG.push(this._rankingTileset.addRect(new openfl.geom.Rectangle(1090,361 + 41 * cnt,179,40)));
        this.RECT_NEXT_AWARD_ANIMAL.push(this._rankingTileset.addRect(new openfl.geom.Rectangle(1018,361 + 72 * cnt,69,72)));
        if (this._viewType == 'mypage')
            this.RECT_RANKING_GAUGE.push(this._rankingTileset.addRect(new openfl.geom.Rectangle(1069 + 33 * cnt,1,32,358)))
    }
    this.RECT_NO_JOIN_BG = this._rankingTileset.addRect(new openfl.geom.Rectangle(429,266,580,326));
    this.RECT_NO_JOIN_SCORE_BEAR = this._rankingTileset.addRect(new openfl.geom.Rectangle(915,596,101,184));
    this.RECT_NO_JOIN_WINNING_BEAR = this._rankingTileset.addRect(new openfl.geom.Rectangle(915,792,101,184));
    this.RECT_HIGHEST_AWARD = this._rankingTileset.addRect(new openfl.geom.Rectangle(429,849,343,100));
    this.RECT_NEXT_AWARD_INCENTIVE_BG = this._rankingTileset.addRect(new openfl.geom.Rectangle(774,849,121,123));
    this._container.addChild(this._rankInfoContainer);
    this._pointRankInfoContainer = new openfl.display.Sprite;
    this._rankInfoContainer.addChild(this._pointRankInfoContainer);
    this._winningRankInfoContainer = new openfl.display.Sprite;
    this._rankInfoContainer.addChild(this._winningRankInfoContainer);
    if (this._viewType == 'mypage') {
        this._pointRankInfoContainer.y = 318;
        this._winningRankInfoContainer.y = 318
    } else {
        this._pointRankInfoContainer.x = -93;
        this._pointRankInfoContainer.y = 36;
        this._winningRankInfoContainer.x = -93;
        this._winningRankInfoContainer.y = 36
    }
    this._pointRankInfoContainer.visible = false;
    this._winningRankInfoContainer.visible = false
}
;
pigg.puzzle.view.UserRankingView.prototype.onLoadRankingPng = function(code, bmd) {
    this._rankingTileset.bitmapData = bmd
}
;
pigg.puzzle.view.UserRankingView.prototype.setUserRankInfo = function(data, rankTypeCode) {
    var self = this;
    var __localFn0__ = function() {
        self._main.showRankingIncentiveView('score', self._currentScoreAward)
    };
    var __localFn1__ = function() {
        self._main.showRankingIncentiveView('score', self._currentScoreAward + 1)
    };
    var __localFn2__ = function() {
        self._main.showRankingIncentiveView('winning_streak', self._currentWinningAward)
    };
    var __localFn3__ = function() {
        self._main.showRankingIncentiveView('winning_streak', self._currentWinningAward + 1)
    };
    this.traceLog('setUserRankInfo', rankTypeCode);
    this._userRankingData = data;
    var targetContaienr;
    targetContaienr = new openfl.display.Sprite;
    var currentAward = 0;
    var nextRankPoint = 0;
    var thumbUrl;
    var dummyShadow;
    var tilemap;
    var tl;
    var dig = 0;
    this.traceLog('data.hasRanking::', data.hasRanking);
    this.traceLog('data.isAggregated::', data.isAggregated);
    if (this._lastUpdateTimeContainer == null) {
        this._lastUpdateTimeContainer = new openfl.display.Sprite;
        this._rankInfoContainer.addChild(this._lastUpdateTimeContainer);
        this._lastUpdateTimeTxt = this.makeTextField(16, 16729748);
        this._lastUpdateTimeTxt.x = 155;
        this._lastUpdateTimeTxt.y = -9;
        this._lastUpdateTimeTxt.height = 30;
        if (AsData.ua > 1)
            this._lastUpdateTimeTxt.y += 4;
        this._lastUpdateTimeContainer.addChild(this._lastUpdateTimeTxt);
        tilemap = new openfl.display.Tilemap(150,20,this._rankingTileset);
        this._lastUpdateTimeContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1092,768,147,16))));
        if (this._viewType == 'mypage') {
            this._lastUpdateTimeContainer.x = 181;
            this._lastUpdateTimeContainer.y = 679
        } else {
            this._lastUpdateTimeContainer.x = 84;
            this._lastUpdateTimeContainer.y = 393
        }
    }
    if (rankTypeCode == 'score')
        this.updateLastTime(new Date(this._main.eventData.pointRankingLastUpdateTime));
    else if (rankTypeCode == 'winning_streak')
        this.updateLastTime(new Date(this._main.eventData.pointRankingLastUpdateTime));
    if (!this._main.isEventComplete) {
        this.traceLog('\u672a\u53c2\u52a0');
        if (this._userRankingStatus == -1) {
            this._userRankingStatus = 0;
            this.setNoJoinDisp()
        }
        return
    } else if (!data.isAggregated) {
        if (this._userRankingStatus != 1) {
            this._userRankingStatus = 1;
            this.setNowAggregate()
        }
        this.traceLog('\u96c6\u8a08\u4e2d');
        return
    }
    if (this._userRankingStatus == 0)
        this.removeNoJoinDisp();
    if (this._userRankingStatus == 1)
        this.removeNowAggregate();
    if (this._piggCode == '')
        this._piggCode = data.rankingStatus.piggCode;
    this.traceLog('\u53c2\u52a0\u4e2d');
    this._userRankingStatus = 2;
    var update = false;
    var initShow = false;
    if (rankTypeCode == 'score') {
        currentAward = data.rankingStatus.pointAwardIndex;
        this.traceLog('currentAward::_currentScoreAward::pointAwardIndex::', currentAward, this._currentScoreAward);
        if (currentAward == this._currentScoreAward) {
            this.updateRankingInfo('score', currentAward, data);
            return
        }
        if (this._currentScoreAward != -1)
            update = true;
        this._currentScoreAward = currentAward;
        this._main.currentScoreAward = this._currentScoreAward;
        this.traceLog('AWARD\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u306e\u3067UPDATE::SCORE');
        this._main.setAnimationAnimal(currentAward - 1, 1, this._pointCurrentPrizeAnimalContainer);
        this._main.addSpine(this._main.spineAnimalRankingScore, this._pointCurrentPrizeAnimalContainer);
        if (this._pointRankTxts == null) {
            this._pointRankTxts = new openfl.display.Sprite;
            this._pointRankTxts.mouseChildren = false;
            this._pointRankTxts.mouseEnabled = false;
            this._numberFontManager.makeFontInfo('pointRank', 200, 60, this._pointRankTxts, 16777215, 8994560, 100, 20, 7.5, 'CENTER', false, true);
            this._numberFontManager.makeFontInfo('pointToNext', 300, 80, this._pointRankTxts, 16609792, 16777215, 150, 20, 5.2, 'CENTER', false, true);
            this._numberFontManager.getFontInfo('pointRank').tilemap.x = 236;
            this._numberFontManager.getFontInfo('pointRank').tilemap.y = 94;
            this._numberFontManager.getFontInfo('pointToNext').tilemap.x = 240;
            this._numberFontManager.getFontInfo('pointToNext').tilemap.y = 216;
            this._pointCurrentPrize = new openfl.display.Sprite;
            this._pointNextPrize = new openfl.display.Sprite;
            this._pointRankInfoContainer.addChild(this._pointCurrentPrize);
            this._pointRankInfoContainer.addChild(this._pointNextPrize);
            tilemap = new openfl.display.Tilemap(430,160,this._rankingTileset);
            this._pointCurrentPrize.addChild(tilemap);
            tilemap.addTile(this._pointCurrentPrizeBg = new TileBase(this.RECT_CURRENT_AWARD_BG[0]));
            this._pointCurrentPrizeBg.y = 36;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1181,795,135,21))));
            tl.x = 147;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1090,868,86,28))));
            tl.x = 322;
            tl.y = 28;
            tilemap.addTile(this._pointCurrentPrizeKurai = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1288,818,27,26))));
            this._pointCurrentPrizeKurai.x = 230;
            this._pointCurrentPrizeKurai.y = 67;
            this._pointCurrentPrize.addEventListener(openfl.events.MouseEvent.CLICK, __localFn0__);
            tilemap = new openfl.display.Tilemap(430,140,this._rankingTileset);
            this._pointNextPrize.addChild(tilemap);
            tilemap.addTile(this._pointNextPrizeBg = new TileBase(this.RECT_NEXT_AWARD_BG[0]));
            this._pointNextPrizeBg.x = 64;
            this._pointNextPrizeBg.y = 81;
            tilemap.addTile(this._pointNextPrizeAnimal = new TileBase(this.RECT_NEXT_AWARD_ANIMAL[0]));
            this._pointNextPrizeAnimal.y = 53;
            this._pointNextPrizeAnimal.x = -4;
            tilemap.addTile(this._pointNextPrizeAto = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1089,848,38,19))));
            this._pointNextPrizeAto.x = 78;
            this._pointNextPrizeAto.y = 25;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1128,849,71,18))));
            tl.x = 119;
            tl.y = 57;
            tilemap.addTile(this._pointNextPrizePointIcon = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1259,818,27,27))));
            this._pointNextPrizePointIcon.x = 123;
            this._pointNextPrizePointIcon.y = 18;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(774,849,121,123))));
            tl.x = 248;
            tl.y = 7;
            this._pointCurrentPrize.x = 107;
            this._pointCurrentPrize.y = 59;
            this._pointCurrentPrizeIcon = new pigg.puzzle.view.IconView(this._main);
            this._pointCurrentPrizeIcon.hasBg = false;
            this._pointCurrentPrizeIcon.isRankMain = 0;
            this._pointCurrentPrizeIcon.x = 315;
            this._pointCurrentPrizeIcon.y = 45;
            this._pointCurrentPrizeIcon.init();
            this._pointCurrentPrize.addChild(this._pointCurrentPrizeIcon);
            this._pointNextPrize.x = 137;
            this._pointNextPrize.y = 215;
            this._pointNextPrizeIcon = new pigg.puzzle.view.IconView(this._main);
            this._pointNextPrizeIcon.hasBg = false;
            this._pointNextPrizeIcon.isRankMain = 1;
            this._pointNextPrizeIcon.init();
            this._pointNextPrizeIcon.x = 256;
            this._pointNextPrizeIcon.y = 18;
            this._pointNextPrize.addChild(this._pointNextPrizeIcon);
            this._pointNextPrize.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
            this._pointRankInfoContainer.addChild(this._pointRankTxts);
            this._pointCurrentPrizeAnimalContainer = new openfl.display.Sprite;
            this._main.addSpine(this._main.spineAnimalRankingScore, this._pointCurrentPrizeAnimalContainer);
            this._pointCurrentPrize.addChild(this._pointCurrentPrizeAnimalContainer);
            this._pointCurrentPrizeAnimalContainer.scaleX = this._pointCurrentPrizeAnimalContainer.scaleY = .4;
            this._pointCurrentPrizeAnimalContainer.x = 70;
            this._pointCurrentPrizeAnimalContainer.y = 110;
            this._pointHighest = new openfl.display.Tilemap(343,100,this._rankingTileset);
            this._pointHighest.addTile(new openfl.display.Tile(this.RECT_HIGHEST_AWARD));
            this._pointHighest.x = 149;
            this._pointHighest.y = 235;
            if (this._viewType == 'mypage')
                this.makeRankingGauge('score')
        }
        if (this._viewType == 'mypage')
            this.updateGauge('score', currentAward);
        if (this._pointCurrentPrizeBg.id != this.RECT_CURRENT_AWARD_BG[currentAward - 1]) {
            this._pointCurrentPrizeBg.updateId(this.RECT_CURRENT_AWARD_BG[currentAward - 1]);
            this._pointCurrentPrizeBg.parent.setTileIndex(this._pointCurrentPrizeBg, 0)
        }
        if (currentAward != 8) {
            if (this._pointNextPrizeBg.id != this.RECT_NEXT_AWARD_BG[currentAward]) {
                this._pointNextPrizeBg.updateId(this.RECT_NEXT_AWARD_BG[currentAward]);
                this._pointNextPrizeBg.parent.setTileIndex(this._pointNextPrizeBg, 0)
            }
            if (this._pointNextPrizeAnimal.id != this.RECT_NEXT_AWARD_ANIMAL[currentAward])
                this._pointNextPrizeAnimal.updateId(this.RECT_NEXT_AWARD_ANIMAL[currentAward])
        } else
            this.traceLog('\u6700\u9ad8\u4f4d');
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemType, this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemCode, 135);
        this.traceLog('\u7d2f\u8a08\u73fe\u5728\u306e\u30a2\u30a4\u30c6\u30e0::', this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemName);
        if (this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive.length > 1)
            this._pointCurrentPrizeIcon.isPlus = true;
        this._pointCurrentPrizeIcon.quantity = Number(this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemQuantity);
        this._main.loadDataManager.loadPng(thumbUrl, this._main.eventData.pointRankingData[currentAward - 1].rankingIncentive[0].itemCode, org.apache.royale.utils.Language.closure(this._pointCurrentPrizeIcon.setIconData, this._pointCurrentPrizeIcon, 'setIconData'));
        if (currentAward != 8) {
            this.traceLog('\u7d2f\u8a08\u6b21\u306e\u30a2\u30a4\u30c6\u30e0::', this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemName);
            if (this._main.isLocal)
                thumbUrl = '/assets/puzzle/local/' + this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemCode + '.png';
            else
                thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemType, this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemCode, 135);
            if (this._main.eventData.pointRankingData[currentAward].rankingIncentive.length > 1)
                this._pointNextPrizeIcon.isPlus = true;
            this._pointNextPrizeIcon.quantity = Number(this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemQuantity);
            this._main.loadDataManager.loadPng(thumbUrl, this._main.eventData.pointRankingData[currentAward].rankingIncentive[0].itemCode, org.apache.royale.utils.Language.closure(this._pointNextPrizeIcon.setIconData, this._pointNextPrizeIcon, 'setIconData'));
            this._pointNextPrize.visible = true;
            if (this._pointHighest.parent)
                this.removeFromParent(this._pointHighest)
        } else {
            if (this._pointHighest.parent == null)
                this._pointRankInfoContainer.addChild(this._pointHighest);
            this._pointNextPrize.visible = false
        }
        this.updateRankingInfo('score', currentAward, data)
    } else if (rankTypeCode == 'winning_streak') {
        currentAward = data.rankingStatus.winningAwardIndex;
        if (currentAward == this._currentWinningAward) {
            this.updateRankingInfo('winning_streak', currentAward, data);
            return
        }
        this._currentWinningAward = currentAward;
        this._main.currentWinningAward = this._currentWinningAward;
        this.traceLog('\u5909\u5316\u304c\u3042\u3063\u305f\u306e\u3067UPDATE::WINNING');
        this._main.setAnimationAnimal(currentAward - 1, 2, this._winningCurrentPrizeAnimalContainer);
        if (this._winningRankTxts == null) {
            this._winningRankTxts = new openfl.display.Sprite;
            this._winningRankTxts.mouseChildren = false;
            this._winningRankTxts.mouseEnabled = false;
            this._numberFontManager.makeFontInfo('winningRank', 200, 60, this._winningRankTxts, 16777215, 8994560, 100, 20, 7.5, 'CENTER', false, true);
            this._numberFontManager.makeFontInfo('winningToNext', 300, 80, this._winningRankTxts, 7846656, 16777215, 150, 20, 5.2, 'CENTER', false, true);
            this._numberFontManager.makeFontInfo('winningCurrentMax', 200, 60, this._winningRankTxts, 7846656, 16777215, 150, 20, 6, 'RIGHT', false, true);
            this._numberFontManager.getFontInfo('winningRank').tilemap.x = 236;
            this._numberFontManager.getFontInfo('winningRank').tilemap.y = 94;
            this._numberFontManager.getFontInfo('winningToNext').tilemap.x = 225;
            this._numberFontManager.getFontInfo('winningToNext').tilemap.y = 216;
            this._numberFontManager.getFontInfo('winningCurrentMax').tilemap.x = 198;
            this._numberFontManager.getFontInfo('winningCurrentMax').tilemap.y = 35;
            this._winningCurrentPrize = new openfl.display.Sprite;
            this._winningNextPrize = new openfl.display.Sprite;
            this._winningRankInfoContainer.addChild(this._winningCurrentPrize);
            this._winningRankInfoContainer.addChild(this._winningNextPrize);
            tilemap = new openfl.display.Tilemap(180,60,this._rankingTileset);
            this._winningCurrentPrize.addChild(tilemap);
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1090,795,90,21))));
            tilemap.x = 117;
            tilemap.y = -32;
            tl.x = 52;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1089,817,116,30))));
            tl.x = 61;
            tl.y = 29;
            tilemap = new openfl.display.Tilemap(430,160,this._rankingTileset);
            this._winningCurrentPrize.addChild(tilemap);
            tilemap.addTile(this._winningCurrentPrizeBg = new TileBase(this.RECT_CURRENT_AWARD_BG[0]));
            this._winningCurrentPrizeBg.y = 36;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1090,868,86,28))));
            tl.x = 322;
            tl.y = 28;
            tilemap.addTile(this._winningCurrentPrizeKurai = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1288,818,27,26))));
            this._winningCurrentPrizeKurai.x = 230;
            this._winningCurrentPrizeKurai.y = 67;
            tilemap = new openfl.display.Tilemap(430,140,this._rankingTileset);
            this._winningNextPrize.addChild(tilemap);
            tilemap.addTile(this._winningNextPrizeBg = new TileBase(this.RECT_NEXT_AWARD_BG[0]));
            this._winningNextPrizeBg.x = 64;
            this._winningNextPrizeBg.y = 81;
            tilemap.addTile(this._winningNextPrizeAnimal = new TileBase(this.RECT_NEXT_AWARD_ANIMAL[0]));
            this._winningNextPrizeAnimal.y = 53;
            this._winningNextPrizeAnimal.x = -4;
            tilemap.addTile(this._winningNextPrizeSaikou = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1202,848,83,21))));
            this._winningNextPrizeSaikou.x = 78;
            this._winningNextPrizeSaikou.y = 25;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1128,849,71,18))));
            tl.x = 119;
            tl.y = 57;
            tilemap.addTile(this._winningNextPrizeRensyo = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1206,817,52,30))));
            this._winningNextPrizeRensyo.x = 123;
            this._winningNextPrizeRensyo.y = 20;
            tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(774,849,121,123))));
            tl.x = 248;
            tl.y = 7;
            this._winningCurrentPrize.x = 107;
            this._winningCurrentPrize.y = 59;
            this._winningCurrentPrizeIcon = new pigg.puzzle.view.IconView(this._main);
            this._winningCurrentPrizeIcon.hasBg = false;
            this._winningCurrentPrizeIcon.isRankMain = 0;
            this._winningCurrentPrizeIcon.x = 315;
            this._winningCurrentPrizeIcon.y = 45;
            this._winningCurrentPrizeIcon.init();
            this._winningCurrentPrize.addChild(this._winningCurrentPrizeIcon);
            this._winningCurrentPrize.addEventListener(openfl.events.MouseEvent.CLICK, __localFn2__);
            this._winningNextPrize.x = 137;
            this._winningNextPrize.y = 215;
            this._winningNextPrizeIcon = new pigg.puzzle.view.IconView(this._main);
            this._winningNextPrizeIcon.hasBg = false;
            this._winningNextPrizeIcon.isRankMain = 1;
            this._winningNextPrizeIcon.init();
            this._winningNextPrizeIcon.x = 256;
            this._winningNextPrizeIcon.y = 18;
            this._winningNextPrize.addChild(this._winningNextPrizeIcon);
            this._winningNextPrize.addEventListener(openfl.events.MouseEvent.CLICK, __localFn3__);
            initShow = true;
            this._winningRankInfoContainer.addChild(this._winningRankTxts);
            this._winningCurrentPrizeAnimalContainer = new openfl.display.Sprite;
            this._main.addSpine(this._main.spineAnimalRankingWinning, this._winningCurrentPrizeAnimalContainer);
            this._winningCurrentPrize.addChild(this._winningCurrentPrizeAnimalContainer);
            this._winningCurrentPrizeAnimalContainer.scaleX = this._winningCurrentPrizeAnimalContainer.scaleY = .4;
            this._winningCurrentPrizeAnimalContainer.x = 70;
            this._winningCurrentPrizeAnimalContainer.y = 110;
            this._winningHighest = new openfl.display.Tilemap(343,100,this._rankingTileset);
            this._winningHighest.addTile(new openfl.display.Tile(this.RECT_HIGHEST_AWARD));
            this._winningHighest.x = 149;
            this._winningHighest.y = 235;
            if (this._viewType == 'mypage')
                this.makeRankingGauge('winning_streak')
        }
        if (this._viewType == 'mypage')
            this.updateGauge('winning_streak', currentAward);
        if (this._main.isLocal)
            thumbUrl = '/assets/puzzle/local/' + this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemCode + '.png';
        else
            thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemType, this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemCode, 135);
        this.traceLog('\u9023\u52dd\u73fe\u5728\u306e\u30a2\u30a4\u30c6\u30e0::', this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemName);
        if (this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive.length > 1)
            this._winningCurrentPrizeIcon.isPlus = true;
        this._winningCurrentPrizeIcon.quantity = Number(this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemQuantity);
        this._main.loadDataManager.loadPng(thumbUrl, this._main.eventData.winningRankingData[currentAward - 1].rankingIncentive[0].itemCode, org.apache.royale.utils.Language.closure(this._winningCurrentPrizeIcon.setIconData, this._winningCurrentPrizeIcon, 'setIconData'));
        if (this._winningCurrentPrizeBg.id != this.RECT_CURRENT_AWARD_BG[currentAward - 1]) {
            this._winningCurrentPrizeBg.updateId(this.RECT_CURRENT_AWARD_BG[currentAward - 1]);
            this._winningCurrentPrizeBg.parent.setTileIndex(this._winningCurrentPrizeBg, 0)
        }
        if (currentAward != 8) {
            if (this._winningNextPrizeBg.id != this.RECT_NEXT_AWARD_BG[currentAward]) {
                this._winningNextPrizeBg.updateId(this.RECT_NEXT_AWARD_BG[currentAward]);
                this._winningNextPrizeBg.parent.setTileIndex(this._winningNextPrizeBg, 0)
            }
            if (this._winningNextPrizeAnimal.id != this.RECT_NEXT_AWARD_ANIMAL[currentAward])
                this._winningNextPrizeAnimal.updateId(this.RECT_NEXT_AWARD_ANIMAL[currentAward]);
            this._winningNextPrize.visible = true;
            if (this._winningHighest.parent)
                this.removeFromParent(this._winningHighest)
        } else {
            this._winningNextPrize.visible = false;
            if (this._winningHighest.parent == null)
                this._winningRankInfoContainer.addChild(this._winningHighest)
        }
        this._numberFontManager.makeNumber('winningRank', data.rankingStatus.winningRank);
        if (currentAward != 8) {
            this.traceLog('\u9023\u52dd\u6b21\u306e\u30a2\u30a4\u30c6\u30e0::', this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemName);
            if (this._main.isLocal)
                thumbUrl = '/assets/puzzle/local/' + this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemCode + '.png';
            else
                thumbUrl = this.addLocation(this._main) + this.makeItemPath(this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemType, this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemCode, 135);
            if (this._main.eventData.winningRankingData[currentAward].rankingIncentive.length > 1)
                this._winningNextPrizeIcon.isPlus = true;
            this._winningNextPrizeIcon.quantity = Number(this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemQuantity);
            this._main.loadDataManager.loadPng(thumbUrl, this._main.eventData.winningRankingData[currentAward].rankingIncentive[0].itemCode, org.apache.royale.utils.Language.closure(this._winningNextPrizeIcon.setIconData, this._winningNextPrizeIcon, 'setIconData'));
            this._winningNextPrizeIcon.visible = true
        }
        this.updateRankingInfo('winning_streak', currentAward, data);
        if (initShow)
            this.show()
    }
    this._loadCnt++;
    if (this._loadCnt == 2) {
        this._isLoaded = true;
        this.switchRankType(0)
    }
}
;
pigg.puzzle.view.UserRankingView.prototype.updateRankingInfo = function(rankType, currentAward, data) {
    var dig;
    var nextRankPoint = 0;
    if (rankType == 'score') {
        this._numberFontManager.makeNumber('pointRank', data.rankingStatus.pointRank);
        dig = this.getDigit(data.rankingStatus.pointRank);
        this._pointCurrentPrizeKurai.x = 230 + 12 * (dig - 1);
        if (currentAward != 8) {
            nextRankPoint = this._main.eventData.pointRankingData[currentAward].lowestValue - this._main.userData.eventPoint;
            if (nextRankPoint < 0)
                nextRankPoint = 10;
            this._numberFontManager.makeNumber('pointToNext', nextRankPoint);
            dig = this.getDigit(nextRankPoint);
            this._pointNextPrizeAto.x = 78 - 9 * (dig - 2);
            this._pointNextPrizePointIcon.x = 123 - 9 * (dig - 2)
        } else
            this._numberFontManager.removeNumber('pointToNext');
        this._main.spineAnimalRankingScore.playAction('joy', 1)
    } else if (rankType == 'winning_streak') {
        this._numberFontManager.makeNumber('winningCurrentMax', data.rankingStatus.winningValue);
        this._numberFontManager.makeNumber('winningRank', data.rankingStatus.winningRank);
        dig = this.getDigit(data.rankingStatus.winningRank);
        this._winningCurrentPrizeKurai.x = 230 + 11 * (dig - 1);
        if (currentAward != 8) {
            nextRankPoint = Number(this._main.eventData.winningRankingData[currentAward].lowestValue);
            if (nextRankPoint < 0)
                nextRankPoint = 1;
            this._numberFontManager.makeNumber('winningToNext', nextRankPoint);
            dig = this.getDigit(nextRankPoint);
            this._winningNextPrizeSaikou.x = 61 - 9 * (dig - 1);
            this._winningNextPrizeRensyo.x = 185 + 9 * (dig - 1)
        } else
            this._numberFontManager.removeNumber('winningToNext')
    }
}
;
pigg.puzzle.view.UserRankingView.prototype.updateLastTime = function(updateDate) {
    var hours;
    var minutes;
    var getHours = updateDate.getHours();
    var getMinutes = updateDate.getMinutes();
    if (getHours < 10)
        hours = '0' + getHours;
    else
        hours = String(getHours);
    if (getMinutes < 10)
        minutes = '0' + getMinutes;
    else
        minutes = String(getMinutes);
    this._lastUpdateTimeTxt.text = updateDate.getMonth() + 1 + '\u6708' + updateDate.getDate() + '\u65e5' + hours + ':' + minutes;
    this.traceLog('_lastUpdateTimeTxt.text :: ', this._lastUpdateTimeTxt.text)
}
;
pigg.puzzle.view.UserRankingView.prototype.makeRankingGauge = function(rankType) {
    var tilemap;
    var tl;
    if (rankType == 'score') {
        this._rankingScoreGaugeContainer = new openfl.display.Sprite;
        this._pointRankInfoContainer.addChild(this._rankingScoreGaugeContainer);
        tilemap = new openfl.display.Tilemap(50,400,this._rankingTileset);
        this._rankingScoreGaugeContainer.addChild(tilemap);
        tilemap.addTile(new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1025,267,42,48))));
        tilemap.addTile(this._rankingScoreGaugeTile = new TileBase(this.RECT_RANKING_GAUGE[0]));
        this._rankingScoreGaugeTile.x = 5;
        this._rankingScoreGaugeTile.y = 33;
        this._rankingScoreGaugeContainer.x = 558;
        this._rankingScoreGaugeContainer.y = 49
    } else if (rankType == 'winning_streak') {
        this._rankingWinningGaugeContainer = new openfl.display.Sprite;
        this._winningRankInfoContainer.addChild(this._rankingWinningGaugeContainer);
        tilemap = new openfl.display.Tilemap(50,400,this._rankingTileset);
        this._rankingWinningGaugeContainer.addChild(tilemap);
        tilemap.addTile(new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1025,267,42,48))));
        tilemap.addTile(this._rankingWinningGaugeTile = new TileBase(this.RECT_RANKING_GAUGE[0]));
        this._rankingWinningGaugeTile.x = 5;
        this._rankingWinningGaugeTile.y = 33;
        this._rankingWinningGaugeContainer.x = 558;
        this._rankingWinningGaugeContainer.y = 49
    }
    if (this._rankingGaugeUserIconContainer == null) {
        this._rankingGaugeUserIconContainer = new openfl.display.Sprite;
        this._rankInfoContainer.addChild(this._rankingGaugeUserIconContainer);
        tilemap = new openfl.display.Tilemap(74,74,this._rankingTileset);
        this._rankingGaugeUserIconContainer.addChild(tilemap);
        tilemap.x = -37;
        tilemap.y = -37;
        tilemap.addTile(new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1271,360,74,74))));
        this._rankingGaugeUserIconContainer.x = 542 + 37;
        this._rankingGaugeUserIconContainer.y = 706;
        if (this._main.isLocal)
            this._main.loadDataManager.loadPng(pigg.puzzle.data.CommonData.URL_USER_THUMB_API_LOCAL + this._piggCode + '/image/pigg_code?part\x3dface\x26scale\x3d104\x26frame\x3dtrue\x26background\x3dtrue\x26shadow\x3dfalse', 'facePng', org.apache.royale.utils.Language.closure(this.onLoadFace, this, 'onLoadFace'));
        else
            this._main.loadDataManager.loadPng(pigg.puzzle.data.CommonData.URL_USER_THUMB_API + this._piggCode + '?scale\x3d104\x26frame\x3dtrue\x26background\x3dtrue\x26shadow\x3dfalse', 'facePng', org.apache.royale.utils.Language.closure(this.onLoadFace, this, 'onLoadFace'))
    }
}
;
pigg.puzzle.view.UserRankingView.prototype.onLoadFace = function(code, bmd) {
    this.traceLog('onLoadFace');
    var tileset = new openfl.display.Tileset(bmd);
    var tilemap = new openfl.display.Tilemap(104,104,tileset);
    tilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,0,104,104))));
    tilemap.scaleX = tilemap.scaleY = .69;
    tilemap.x = -36;
    tilemap.y = -38;
    this._rankingGaugeUserIconContainer.addChild(tilemap)
}
;
pigg.puzzle.view.UserRankingView.prototype.updateGauge = function(rankType, award) {
    this.traceLog('updateGauge::', rankType, award);
    if (rankType == 'score')
        this._rankingScoreGaugeTile.updateId(this.RECT_RANKING_GAUGE[award - 1]);
    else if (rankType == 'winning_streak')
        this._rankingWinningGaugeTile.updateId(this.RECT_RANKING_GAUGE[award - 1])
}
;
pigg.puzzle.view.UserRankingView.prototype._noJoinContainer;
pigg.puzzle.view.UserRankingView.prototype._noJoinBearTile;
pigg.puzzle.view.UserRankingView.prototype.setNoJoinDisp = function() {
    this.traceLog('setNoJoinDisp');
    var tilemap;
    var tl;
    this._noJoinContainer = new openfl.display.Sprite;
    this._container.addChild(this._noJoinContainer);
    if (this._viewType == 'mypage') {
        tilemap = new openfl.display.Tilemap(640,330,this._rankingTileset);
        this._noJoinContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this.RECT_NO_JOIN_BG));
        tilemap.addTile(this._noJoinBearTile = new TileBase(this.RECT_NO_JOIN_SCORE_BEAR));
        this._noJoinBearTile.originX = 50;
        this._noJoinBearTile.originY = 92;
        this._noJoinBearTile.x = 236 + 72;
        this._noJoinBearTile.y = 90 + 54;
        this._noJoinContainer.x = 30;
        this._noJoinContainer.y = 386
    } else {
        tilemap = new openfl.display.Tilemap(640,330,this._rankingTileset);
        this._noJoinContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(514,266,416,50))));
        tl.scaleX = tl.scaleY = .92;
        tl.x = 24;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(510,317,422,34))));
        tl.y = 50;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1746,0,422,184))));
        tl.y = 98;
        tilemap.addTile(this._noJoinBearTile = new TileBase(this.RECT_NO_JOIN_SCORE_BEAR));
        this._noJoinBearTile.originX = 50;
        this._noJoinBearTile.originY = 92;
        this._noJoinBearTile.x = 156 + 50;
        this._noJoinBearTile.y = 86 + 92;
        this._noJoinBearTile.scaleX = this._noJoinBearTile.scaleY = .86;
        this._noJoinContainer.x = 14;
        this._noJoinContainer.y = 110
    }
    this.show()
}
;
pigg.puzzle.view.UserRankingView.prototype.removeNoJoinDisp = function() {
    this._noJoinBearTile = null;
    this.removeFromParent(this._noJoinContainer);
    this._noJoinContainer = null
}
;
pigg.puzzle.view.UserRankingView.prototype._nowAggrigateContainer;
pigg.puzzle.view.UserRankingView.prototype.setNowAggregate = function() {
    this.traceLog('setNowAggregate');
    this._nowAggrigateContainer = new openfl.display.Sprite;
    this._container.addChild(this._nowAggrigateContainer);
    var tl;
    var tilemap;
    if (this._viewType == 'mypage') {
        tilemap = new openfl.display.Tilemap(480,250,this._rankingTileset);
        this._nowAggrigateContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,593,378,69))));
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(428,663,260,153))));
        tl.x = 10;
        tl.y = 97;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(688,662,225,108))));
        tl.x = 256;
        tl.y = 117;
        this._nowAggrigateContainer.x = 135;
        this._nowAggrigateContainer.y = 393
    } else if (this._viewType == 'event') {
        tilemap = new openfl.display.Tilemap(480,300,this._rankingTileset);
        this._nowAggrigateContainer.addChild(tilemap);
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(1361,532,265,72))));
        tl.x = 97;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(494,632,247,30))));
        tl.x = 107;
        tl.y = 78;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(532,663,156,153))));
        tl.x = 70;
        tl.y = 130;
        tl.scaleX = tl.scaleY = .9;
        tilemap.addTile(tl = new openfl.display.Tile(this._rankingTileset.addRect(new openfl.geom.Rectangle(688,662,225,108))));
        tl.x = 205;
        tl.y = 147;
        tl.scaleX = tl.scaleY = .9;
        this._nowAggrigateContainer.x = 0;
        this._nowAggrigateContainer.y = 100
    }
    this.show()
}
;
pigg.puzzle.view.UserRankingView.prototype.removeNowAggregate = function() {
    this.traceLog('removeNowAggregate');
    this.removeFromParent(this._nowAggrigateContainer);
    this._nowAggrigateContainer = null
}
;
pigg.puzzle.view.UserRankingView.prototype.show = function(animation) {
    animation = typeof animation !== 'undefined' ? animation : true;
    this.visible = true;
    this._isShow = true;
    if (this._currentRankType == -1)
        this.switchRankType(0);
    this._rankInfoContainer.visible = true;
    this._main.addSpine(this._main.spineAnimalRankingScore, this._pointCurrentPrizeAnimalContainer);
    this._main.addSpine(this._main.spineAnimalRankingWinning, this._winningCurrentPrizeAnimalContainer);
    if (this._userRankingStatus == 0) {
        com.greensock.TweenMax.killTweensOf(this._noJoinBearTile);
        this._noJoinBearTile.scaleX = this._noJoinBearTile.scaleY = .5;
        if (this._viewType == 'mypage')
            com.greensock.TweenMax.to(this._noJoinBearTile, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            });
        else
            com.greensock.TweenMax.to(this._noJoinBearTile, 1, {
                scaleX: .86,
                scaleY: .86,
                ease: com.greensock.easing.Elastic.easeOut
            })
    } else if (this._userRankingStatus == 2) {
        if (this._currentRankType == 0) {
            if (animation)
                if (this._main.spineAnimalRankingScore)
                    this._main.spineAnimalRankingScore.playAction('joy', 1);
            if (this._main.spineAnimalRankingWinning)
                this._main.spineAnimalRankingWinning.stopAction()
        } else {
            if (animation)
                if (this._main.spineAnimalRankingWinning)
                    this._main.spineAnimalRankingWinning.playAction('joy', 1);
            if (this._main.spineAnimalRankingScore)
                this._main.spineAnimalRankingScore.stopAction()
        }
        if (this._rankingGaugeUserIconContainer) {
            com.greensock.TweenMax.killTweensOf(this._rankingGaugeUserIconContainer);
            this._rankingGaugeUserIconContainer.scaleX = this._rankingGaugeUserIconContainer.scaleY = 0;
            com.greensock.TweenMax.to(this._rankingGaugeUserIconContainer, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            })
        }
    }
}
;
pigg.puzzle.view.UserRankingView.prototype.hide = function(e) {
    e = typeof e !== 'undefined' ? e : null;
    this.visible = false;
    this._isShow = false
}
;
pigg.puzzle.view.UserRankingView.prototype.switchRankType = function(rankType) {
    this.traceLog('\u3053\u3053\u3067\u3084\u308b::switchRankType::', this._currentRankType, rankType, this._userRankingStatus);
    if (this._currentRankType == rankType) {
        this.traceLog('\u3053\u3053\u3067return::switchRankType::', this._currentRankType, rankType);
        return
    }
    this._currentRankType = rankType;
    if (this._main.checkUpdateRanking())
        this._main.updateRankingData();
    this.traceLog('switchRankType::\u5207\u308a\u66ff\u3048', this._main.appType, this._main.userData.hasRanking, this._currentScoreAward, this._currentWinningAward);
    if (rankType == 0) {
        this._winningRankInfoContainer.visible = false;
        this._pointRankInfoContainer.visible = true;
        if (this._userRankingStatus == 0)
            this._noJoinBearTile.updateId(this.RECT_NO_JOIN_SCORE_BEAR);
        if (this._main.spineAnimalRankingScore)
            this._main.spineAnimalRankingScore.playAction('joy', 1);
        if (this._main.spineAnimalRankingWinning)
            this._main.spineAnimalRankingWinning.stopAction();
        if (this._viewType == 'mypage' && this._main.userData.hasRanking && this._userRankingStatus == 2) {
            this._rankingGaugeUserIconContainer.y = 705 - (this._currentScoreAward - 1) * 36;
            com.greensock.TweenMax.killTweensOf(this._rankingGaugeUserIconContainer);
            this._rankingGaugeUserIconContainer.scaleX = this._rankingGaugeUserIconContainer.scaleY = 0;
            com.greensock.TweenMax.to(this._rankingGaugeUserIconContainer, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            })
        }
    } else {
        this._winningRankInfoContainer.visible = true;
        this._pointRankInfoContainer.visible = false;
        if (this._userRankingStatus == 0)
            this._noJoinBearTile.updateId(this.RECT_NO_JOIN_WINNING_BEAR);
        if (this._main.spineAnimalRankingWinning)
            this._main.spineAnimalRankingWinning.playAction('joy', 1);
        if (this._main.spineAnimalRankingScore)
            this._main.spineAnimalRankingScore.stopAction();
        if (this._viewType == 'mypage' && this._main.userData.hasRanking && this._userRankingStatus == 2) {
            this._rankingGaugeUserIconContainer.y = 705 - (this._currentWinningAward - 1) * 36;
            com.greensock.TweenMax.killTweensOf(this._rankingGaugeUserIconContainer);
            this._rankingGaugeUserIconContainer.scaleX = this._rankingGaugeUserIconContainer.scaleY = 0;
            com.greensock.TweenMax.to(this._rankingGaugeUserIconContainer, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            })
        }
    }
    if (this._userRankingStatus == 0) {
        com.greensock.TweenMax.killTweensOf(this._noJoinBearTile);
        this._noJoinBearTile.scaleX = this._noJoinBearTile.scaleY = .5;
        if (this._viewType == 'mypage')
            com.greensock.TweenMax.to(this._noJoinBearTile, 1, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut
            });
        else
            com.greensock.TweenMax.to(this._noJoinBearTile, 1, {
                scaleX: .86,
                scaleY: .86,
                ease: com.greensock.easing.Elastic.easeOut
            })
    }
}
;
pigg.puzzle.view.UserRankingView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.UserRankingView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
Object.defineProperties(pigg.puzzle.view.UserRankingView.prototype, {
    isShow: {
        get: pigg.puzzle.view.UserRankingView.prototype.get__isShow,
        set: pigg.puzzle.view.UserRankingView.prototype.set__isShow
    }
});
pigg.puzzle.view.UserRankingView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'UserRankingView',
        qName: 'pigg.puzzle.view.UserRankingView',
        kind: 'class'
    }]
};
pigg.puzzle.view.UserRankingView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.UserRankingView'
                }
            }
        },
        methods: function() {
            return {
                'UserRankingView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.UserRankingView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onLoadRankingPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'setUserRankInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleUserRankingData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.events.MouseEvent',
                            optional: true
                        }]
                    }
                },
                'switchRankType': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.UserRankingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.EventQueue = function(animationState) {
    this.objects = org.apache.royale.utils.Language.Vector();
    this.animationState = animationState
}
;
goog.exportSymbol('spine.animation.EventQueue', spine.animation.EventQueue);
spine.animation.EventQueue.prototype.objects;
spine.animation.EventQueue.prototype.animationState;
spine.animation.EventQueue.prototype.drainDisabled;
spine.animation.EventQueue.prototype.start = function(entry) {
    this.objects.push(spine.animation.EventType.start);
    this.objects.push(entry);
    this.animationState.animationsChanged = true
}
;
spine.animation.EventQueue.prototype.interrupt = function(entry) {
    this.objects.push(spine.animation.EventType.interrupt);
    this.objects.push(entry)
}
;
spine.animation.EventQueue.prototype.end = function(entry) {
    this.objects.push(spine.animation.EventType.end);
    this.objects.push(entry);
    this.animationState.animationsChanged = true
}
;
spine.animation.EventQueue.prototype.dispose = function(entry) {
    this.objects.push(spine.animation.EventType.dispose);
    this.objects.push(entry)
}
;
spine.animation.EventQueue.prototype.complete = function(entry) {
    this.objects.push(spine.animation.EventType.complete);
    this.objects.push(entry)
}
;
spine.animation.EventQueue.prototype.event = function(entry, event) {
    this.objects.push(spine.animation.EventType.event);
    this.objects.push(entry);
    this.objects.push(event)
}
;
spine.animation.EventQueue.prototype.drain = function() {
    if (this.drainDisabled)
        return;
    this.drainDisabled = true;
    var objects = this.objects;
    for (var i = 0; i < objects.length; i += 2) {
        var type = org.apache.royale.utils.Language.as(objects[i], spine.animation.EventType, true);
        var entry = org.apache.royale.utils.Language.as(objects[i + 1], spine.animation.TrackEntry, true);
        switch (type) {
        case spine.animation.EventType.start:
            entry.onStart.invoke(entry);
            this.animationState.onStart.invoke(entry);
            break;
        case spine.animation.EventType.interrupt:
            entry.onInterrupt.invoke(entry);
            this.animationState.onInterrupt.invoke(entry);
            break;
        case spine.animation.EventType.end:
            entry.onEnd.invoke(entry);
            this.animationState.onEnd.invoke(entry);
        case spine.animation.EventType.dispose:
            entry.onDispose.invoke(entry);
            this.animationState.onDispose.invoke(entry);
            this.animationState.trackEntryPool.free(entry);
            break;
        case spine.animation.EventType.complete:
            entry.onComplete.invoke(entry);
            this.animationState.onComplete.invoke(entry);
            break;
        case spine.animation.EventType.event:
            var event = spine.Event(objects[i++ + 2]);
            entry.onEvent.invoke(entry, event);
            this.animationState.onEvent.invoke(entry, event);
            break
        }
    }
    this.clear();
    this.drainDisabled = false
}
;
spine.animation.EventQueue.prototype.clear = function() {
    this.objects.length = 0
}
;
spine.animation.EventQueue.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'EventQueue',
        qName: 'spine.animation.EventQueue',
        kind: 'class'
    }]
};
spine.animation.EventQueue.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'drainDisabled': {
                    type: 'Boolean'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'EventQueue': {
                    type: '',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.AnimationState',
                            optional: false
                        }]
                    }
                },
                'start': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'interrupt': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'end': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'dispose': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'complete': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }]
                    }
                },
                'event': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.TrackEntry',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Event',
                            optional: false
                        }]
                    }
                },
                'drain': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue'
                },
                'clear': {
                    type: 'void',
                    declaredBy: 'spine.animation.EventQueue'
                }
            }
        }
    }
}
;
pigg.puzzle.view.GameView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._map = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    this._applyMap = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    this._memoryMap = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    this._hasMarshmallowArray = [];
    this._applyMarshmallowArray = [];
    this._memoryMarshmallowArray = [];
    this._mapSizeMinYArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._typeArray = [0, 1, 2, 3, 4, 5];
    this._normalBallTypeArray = [0, 1, 2, 3, 4, 5];
    this._typeBrightFilterLevel = [100, 100, 80, 70, 80, 100];
    this._addScoreColorMap = [16751020, 5945586, 9558879, 16431433, 7393248, 10722298];
    this._adjstObjPos = pigg.puzzle.view.CommonView.BALL_SIZE / 2;
    this._checkTargetMapInfo = [];
    this._stackMoveTween = [];
    this._initYposArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._addCheckTargetMapInfo = [];
    this._removeLineArray = [];
    this._removeActionArray = [];
    this._tweenResultClearPoint = [];
    this._orderArray = [[0, 0], [0, 0]];
    this._totalOrderCount = [0, 0];
    this._currentOrderCount = [0, 0];
    this._currentOrderDisplayCount = [0, 0];
    this._appearOrderCount = [0, 0];
    this._afterOrderCount = [0, 0];
    this._preOrderCount = [0, 0];
    this._correctPieceArray = [[1, 0, 0, 0], [2, 0, 0, 0], [3, 0, 0, 0]];
    this.tempBallArray = [];
    this._gameMaterialPos = new openfl.geom.Point(0,0);
    this._currentMaterialViewX = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X;
    this._currentMaterialViewY = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y;
    this.SELECT_POTION_RECT = [];
    this.SELECT_POTION_TILE = [];
    this.SELECT_POTION_PLUS_TILE = [];
    this._selectPotionTiles = [];
    this._selectPotionTxtStr = ['selectPotion3', 'selectPotion5', 'selectPotion10', 'selectPotion20'];
    this._throughScorePotionBaseX = [0, 94, 94 * 2, 94 * 3, 94 * 4];
    this.testSpr = new openfl.display.Sprite;
    this._descriptionCheatItemTxtArr = ['\u5165\u308c\u66ff\u3048\u308b\u3088\uff01\n\u30b0\u30df\u3092\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u301c', '\u3072\u3068\u3064\u6d88\u3059\u3088\uff01\n\u30b0\u30df\u3092\u30bf\u30c3\u30d7\u3057\u3066\u301c', '\u3084\u3058\u308b\u3057\u30b0\u30df\u306b\u5909\u3048\u308b\u3088\uff01\n\u30b0\u30df\u3092\u30b9\u30e9\u30a4\u30c9\u3057\u3066\u301c'];
    this._cheatFocusArray = [];
    this.RECT_CRUSH_PIECE = [];
    this.RECT_CRUSH_ARROW_V_U = [];
    this.RECT_CRUSH_ARROW_V_D = [];
    this.RECT_CRUSH_ARROW_H_L = [];
    this.RECT_CRUSH_ARROW_H_R = [];
    this.RECT_CRUSH_TOGETOGE = [];
    this.RECT_ADD_EFFECT_ARROW_V = [];
    this.RECT_ADD_EFFECT_ARROW_H = [];
    this._textformat = new openfl.text.TextFormat('Rounded Mplus 1c',20,2236962);
    this._scoreFontStr = [];
    this._themeCheckArray = [];
    this.HEADER_POTION_THMUB_RECT = [];
    this.HEADER_THEME_TXT_RECT = [];
    this._menuCheatItemContainers = [];
    this.RECT_STEP_BTN = [];
    this._menuCheatItemBtnTile = [];
    this._menuCheatItemPlusTile = [];
    this._menuCheatItemLockTile = [];
    this._menuCheatItemCloseTile = [];
    this._menuCheatItemBtnTilemaps = [];
    this._menuCheatItemTxtStr = ['cheat_switch', 'cheat_erase', 'cheat_arraw'];
    this.RECT_GAME_TELOP_THEME = [];
    this.RECT_GAME_TELOP_RESULT = [];
    this.RECT_GAME_TELOP_FINISH = [];
    this.traceLog('GameView')
}
;
goog.inherits(pigg.puzzle.view.GameView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.GameView', pigg.puzzle.view.GameView);
pigg.puzzle.view.GameView.prototype._main;
pigg.puzzle.view.GameView.prototype._mappingView;
pigg.puzzle.view.GameView.prototype._mappingContainer;
pigg.puzzle.view.GameView.prototype._typeCount = 20;
pigg.puzzle.view.GameView.prototype._normalPieceTypeCount = 6;
pigg.puzzle.view.GameView.prototype._pieceCountType = 6;
pigg.puzzle.view.GameView.prototype._map;
pigg.puzzle.view.GameView.prototype._applyMap;
pigg.puzzle.view.GameView.prototype._memoryMap;
pigg.puzzle.view.GameView.prototype._matchGroupeSetCrushVec;
pigg.puzzle.view.GameView.prototype._hasMarshmallowArray;
pigg.puzzle.view.GameView.prototype._applyMarshmallowArray;
pigg.puzzle.view.GameView.prototype._memoryMarshmallowArray;
pigg.puzzle.view.GameView.prototype._mapSizeMinYArray;
pigg.puzzle.view.GameView.prototype._typeArray;
pigg.puzzle.view.GameView.prototype._normalBallTypeArray;
pigg.puzzle.view.GameView.prototype._emptyBalls;
pigg.puzzle.view.GameView.prototype._addScoreVec;
pigg.puzzle.view.GameView.prototype._isFlush = false;
pigg.puzzle.view.GameView.prototype._isAuto = 0;
pigg.puzzle.view.GameView.prototype._typeBrightFilterLevel;
pigg.puzzle.view.GameView.prototype._mouseDownPosX;
pigg.puzzle.view.GameView.prototype._mouseDownPosY;
pigg.puzzle.view.GameView.prototype._mouseDownInfo;
pigg.puzzle.view.GameView.prototype._itemTargetInfo;
pigg.puzzle.view.GameView.prototype._itemBaseInfo;
pigg.puzzle.view.GameView.prototype._switching = false;
pigg.puzzle.view.GameView.prototype._switchBaseMapInfo;
pigg.puzzle.view.GameView.prototype._switchTargetMapInfo;
pigg.puzzle.view.GameView.prototype._switchTargetDirection;
pigg.puzzle.view.GameView.prototype._isObjClick = false;
pigg.puzzle.view.GameView.prototype._currentGameScore = 0;
pigg.puzzle.view.GameView.prototype._currentDisplayScore = 0;
pigg.puzzle.view.GameView.prototype._comboCount = 0;
pigg.puzzle.view.GameView.prototype._comboPrevCount = 0;
pigg.puzzle.view.GameView.prototype._addScoreColorMap;
pigg.puzzle.view.GameView.prototype._currentMissionIndex = 0;
pigg.puzzle.view.GameView.prototype._missionLength = 0;
pigg.puzzle.view.GameView.prototype._fallTime = .08;
pigg.puzzle.view.GameView.prototype._fallAddTime = .08;
pigg.puzzle.view.GameView.prototype._fallDelayTime = .02;
pigg.puzzle.view.GameView.prototype._fallAllAddDelay = 0;
pigg.puzzle.view.GameView.prototype._fallAllBaseDelay = .08;
pigg.puzzle.view.GameView.prototype._stackRemoveVec;
pigg.puzzle.view.GameView.prototype._stackChangeTypeVec;
pigg.puzzle.view.GameView.prototype._stackQuakeVec;
pigg.puzzle.view.GameView.prototype._stackAutoQuakeVec;
pigg.puzzle.view.GameView.prototype._stackFilterVec;
pigg.puzzle.view.GameView.prototype._typeMapVec;
pigg.puzzle.view.GameView.prototype._normalPieceMapVec;
pigg.puzzle.view.GameView.prototype._adjstObjPos;
pigg.puzzle.view.GameView.prototype._orderArrowObjcs;
pigg.puzzle.view.GameView.prototype._checkTargetMapInfo;
pigg.puzzle.view.GameView.prototype._stackMoveTween;
pigg.puzzle.view.GameView.prototype._searchVoidUpdateCount = 0;
pigg.puzzle.view.GameView.prototype._initYposArray;
pigg.puzzle.view.GameView.prototype._isStartAction = false;
pigg.puzzle.view.GameView.prototype._addCheckTargetMapInfo;
pigg.puzzle.view.GameView.prototype._removeBallCount = 0;
pigg.puzzle.view.GameView.prototype._removeLineArray;
pigg.puzzle.view.GameView.prototype._removeLineCount = 0;
pigg.puzzle.view.GameView.prototype._removeActionArray;
pigg.puzzle.view.GameView.prototype._removeActionCount = 0;
pigg.puzzle.view.GameView.prototype._clearMoveTimes = 0;
pigg.puzzle.view.GameView.prototype._currentMoveTimes = 0;
pigg.puzzle.view.GameView.prototype._isGameCleared = false;
pigg.puzzle.view.GameView.prototype._currentUseItemType = -1;
pigg.puzzle.view.GameView.prototype._isItemGridClick = false;
pigg.puzzle.view.GameView.prototype._isItemAppear = false;
pigg.puzzle.view.GameView.prototype._itemMouseOverObj;
pigg.puzzle.view.GameView.prototype._gameMaterialContainer;
pigg.puzzle.view.GameView.prototype._gameEffectContainer;
pigg.puzzle.view.GameView.prototype._gameInfoContainer;
pigg.puzzle.view.GameView.prototype._gameInfoTempCheatItemContainer;
pigg.puzzle.view.GameView.prototype._gameTelopContainer;
pigg.puzzle.view.GameView.prototype._gameTelopAnimalContainer;
pigg.puzzle.view.GameView.prototype._menuContainer;
pigg.puzzle.view.GameView.prototype._menuTopContainer;
pigg.puzzle.view.GameView.prototype._menuBottomContainer;
pigg.puzzle.view.GameView.prototype._pieceContainer;
pigg.puzzle.view.GameView.prototype._wiredContainer;
pigg.puzzle.view.GameView.prototype._jellyContainer;
pigg.puzzle.view.GameView.prototype._marshmallowContainer;
pigg.puzzle.view.GameView.prototype._warpObjContainer;
pigg.puzzle.view.GameView.prototype._gameMaterialMask;
pigg.puzzle.view.GameView.prototype._gamePieceMask;
pigg.puzzle.view.GameView.prototype._gameMouseMask;
pigg.puzzle.view.GameView.prototype._gameBgBlurMask;
pigg.puzzle.view.GameView.prototype._gameEffectMask;
pigg.puzzle.view.GameView.prototype._menuEffectContainer;
pigg.puzzle.view.GameView.prototype._gameBgType = -1;
pigg.puzzle.view.GameView.prototype._bgTilemap;
pigg.puzzle.view.GameView.prototype._bgTileset;
pigg.puzzle.view.GameView.prototype._oldMouseX = 0;
pigg.puzzle.view.GameView.prototype._oldMouseY = 0;
pigg.puzzle.view.GameView.prototype._diffMouse = 0;
pigg.puzzle.view.GameView.prototype._gameMenuScoreCount;
pigg.puzzle.view.GameView.prototype._gameMenuMoveTimesCount;
pigg.puzzle.view.GameView.prototype._potionPanel;
pigg.puzzle.view.GameView.prototype._gameMenuItemContainer;
pigg.puzzle.view.GameView.prototype._gameMenuThemeContainer;
pigg.puzzle.view.GameView.prototype._jellyCount;
pigg.puzzle.view.GameView.prototype._correctPieceCount;
pigg.puzzle.view.GameView.prototype._correctPieceCountObj;
pigg.puzzle.view.GameView.prototype._marshmallowCount;
pigg.puzzle.view.GameView.prototype._goalScoreCount;
pigg.puzzle.view.GameView.prototype._orderCount;
pigg.puzzle.view.GameView.prototype._effectContainer;
pigg.puzzle.view.GameView.prototype._addScoreContainer;
pigg.puzzle.view.GameView.prototype._gameTelop;
pigg.puzzle.view.GameView.prototype._gamePraise;
pigg.puzzle.view.GameView.prototype._gameBG;
pigg.puzzle.view.GameView.prototype._gameBoard;
pigg.puzzle.view.GameView.prototype._gameBoardBitmap;
pigg.puzzle.view.GameView.prototype._gameBoardBlurMaskBitmap;
pigg.puzzle.view.GameView.prototype._gameBoardItemMaskBitmap;
pigg.puzzle.view.GameView.prototype._gameBoardItemCover;
pigg.puzzle.view.GameView.prototype._gameBoardItemCoverInner;
pigg.puzzle.view.GameView.prototype._gameMenuSettingBtn;
pigg.puzzle.view.GameView.prototype._tweenResultClearPoint;
pigg.puzzle.view.GameView.prototype._gameBoardItemMaskSpr;
pigg.puzzle.view.GameView.prototype._shuffleTryCount = 0;
pigg.puzzle.view.GameView.prototype._shufflePieceCount = 0;
pigg.puzzle.view.GameView.prototype._isMouseEnable = true;
pigg.puzzle.view.GameView.prototype._isShuffle = false;
pigg.puzzle.view.GameView.prototype._totalJellyCount = 0;
pigg.puzzle.view.GameView.prototype._currentJellyCount = 0;
pigg.puzzle.view.GameView.prototype._currentJellyDisplayCount = 0;
pigg.puzzle.view.GameView.prototype._orderArray;
pigg.puzzle.view.GameView.prototype._totalOrderCount;
pigg.puzzle.view.GameView.prototype._currentOrderCount;
pigg.puzzle.view.GameView.prototype._currentOrderDisplayCount;
pigg.puzzle.view.GameView.prototype._appearOrderCount;
pigg.puzzle.view.GameView.prototype._afterOrderCount;
pigg.puzzle.view.GameView.prototype._preOrderCount;
pigg.puzzle.view.GameView.prototype._totalMarshmallowCount = 0;
pigg.puzzle.view.GameView.prototype._currentMarshmallowCount = 0;
pigg.puzzle.view.GameView.prototype._currentMarshmallowDisplayCount = 0;
pigg.puzzle.view.GameView.prototype._totalFlowerCount = 0;
pigg.puzzle.view.GameView.prototype._currentFlowerCount = 0;
pigg.puzzle.view.GameView.prototype._currentFlowerDisplayCount = 0;
pigg.puzzle.view.GameView.prototype._currentThroughFlower = 0;
pigg.puzzle.view.GameView.prototype._correctPieceArray;
pigg.puzzle.view.GameView.prototype._goalScore = 0;
pigg.puzzle.view.GameView.prototype._keepClearBonusScore = 0;
pigg.puzzle.view.GameView.prototype._boardBackGroundManager;
pigg.puzzle.view.GameView.prototype._assistManager;
pigg.puzzle.view.GameView.prototype._matchGroupeManager;
pigg.puzzle.view.GameView.prototype._throughObjectManager;
pigg.puzzle.view.GameView.prototype._searchSlantManager;
pigg.puzzle.view.GameView.prototype._menuResultManager;
pigg.puzzle.view.GameView.prototype._gamePanelAnimalType = 1;
pigg.puzzle.view.GameView.prototype._confirmBackBlack;
pigg.puzzle.view.GameView.prototype._currentMouseOver;
pigg.puzzle.view.GameView.prototype._pointerHand;
pigg.puzzle.view.GameView.prototype._cheatItemBtnContainer;
pigg.puzzle.view.GameView.prototype._cheatItemObjcts;
pigg.puzzle.view.GameView.prototype._tweenObjects;
pigg.puzzle.view.GameView.prototype._isTweenPause = false;
pigg.puzzle.view.GameView.prototype._isObjMouseDown = false;
pigg.puzzle.view.GameView.prototype._bonusSpecialCount = 0;
pigg.puzzle.view.GameView.prototype._bonusSpecialCountDelay = 0;
pigg.puzzle.view.GameView.prototype._isAutoQuake = false;
pigg.puzzle.view.GameView.prototype.addEmptyBall;
pigg.puzzle.view.GameView.prototype.tempBallArray;
pigg.puzzle.view.GameView.prototype.autoCreateCount = 0;
pigg.puzzle.view.GameView.prototype._fallMotionCount = 0;
pigg.puzzle.view.GameView.prototype._additionalPoint = 0;
pigg.puzzle.view.GameView.prototype._isWaitClear = false;
pigg.puzzle.view.GameView.prototype._asCoin = 0;
pigg.puzzle.view.GameView.prototype._continuePrice = 0;
pigg.puzzle.view.GameView.prototype._continueAddTimes = 0;
pigg.puzzle.view.GameView.prototype._checkOrderTimes = 0;
pigg.puzzle.view.GameView.prototype._changeArrowType = 0;
pigg.puzzle.view.GameView.prototype._isUseCheatItem = -1;
pigg.puzzle.view.GameView.prototype._isSendingProgress = false;
pigg.puzzle.view.GameView.prototype._isSendingProgressClear = false;
pigg.puzzle.view.GameView.prototype._isSendingFailed = false;
pigg.puzzle.view.GameView.prototype._isSendingGiveUp = false;
pigg.puzzle.view.GameView.prototype._sendMakeSpecialCount;
pigg.puzzle.view.GameView.prototype._playTutorialPage = 0;
pigg.puzzle.view.GameView.prototype._playTutorialBalloon = 0;
pigg.puzzle.view.GameView.prototype._telopEndtype = 0;
pigg.puzzle.view.GameView.prototype._firstLoadCheatThumb = false;
pigg.puzzle.view.GameView.prototype._prevItemType = 0;
pigg.puzzle.view.GameView.prototype._showMouseDisble = false;
pigg.puzzle.view.GameView.prototype._cancelTutorial = false;
pigg.puzzle.view.GameView.prototype._bgmTweenSpr;
pigg.puzzle.view.GameView.prototype._winningPoint = 0;
pigg.puzzle.view.GameView.prototype._itemContainerAppear = false;
pigg.puzzle.view.GameView.prototype._continueAddDispCount = 0;
pigg.puzzle.view.GameView.prototype._isSetObject = false;
pigg.puzzle.view.GameView.prototype._comboPraiseAnimalMask;
pigg.puzzle.view.GameView.prototype._isShowComboPraise;
pigg.puzzle.view.GameView.prototype._disableCheckMatch = false;
pigg.puzzle.view.GameView.prototype._isShow;
pigg.puzzle.view.GameView.prototype._winningPointLimit = 0;
pigg.puzzle.view.GameView.prototype._isGetLimitedTerm = false;
pigg.puzzle.view.GameView.prototype._isGetLimitedQuantity = false;
pigg.puzzle.view.GameView.prototype._progressData;
pigg.puzzle.view.GameView.prototype._warpOutVec;
pigg.puzzle.view.GameView.prototype._warpInVec;
pigg.puzzle.view.GameView.prototype._warpGridCount = 0;
pigg.puzzle.view.GameView.prototype._existWarpGrid = false;
pigg.puzzle.view.GameView.prototype._acornTypeNum = 4;
pigg.puzzle.view.GameView.prototype._acornVec;
pigg.puzzle.view.GameView.prototype._acornPieceRatio;
pigg.puzzle.view.GameView.prototype._acornPieceLimit;
pigg.puzzle.view.GameView.prototype._acornPiecePreAdd;
pigg.puzzle.view.GameView.prototype._acornPieceBufferLimit;
pigg.puzzle.view.GameView.prototype._acornPieceBufferCurrent;
pigg.puzzle.view.GameView.prototype._flowerCount;
pigg.puzzle.view.GameView.prototype._existWarpVoid = false;
pigg.puzzle.view.GameView.prototype._isEndWarpSearchVoid = false;
pigg.puzzle.view.GameView.prototype._onetimeWarpSearch = false;
pigg.puzzle.view.GameView.prototype._selectPotionContainer;
pigg.puzzle.view.GameView.prototype._selectPotionPanel;
pigg.puzzle.view.GameView.prototype._selectPotionObjects;
pigg.puzzle.view.GameView.prototype._existSelectPotion = false;
pigg.puzzle.view.GameView.prototype._missionPieceMinInterval = 3;
pigg.puzzle.view.GameView.prototype._missionPieceBufferCount = 0;
pigg.puzzle.view.GameView.prototype._missionPieceRatio = 50;
pigg.puzzle.view.GameView.prototype._missionPieceTotalLimit = 10;
pigg.puzzle.view.GameView.prototype._missionPieceTotalCount = 0;
pigg.puzzle.view.GameView.prototype._missionPieceDispLimit = 3;
pigg.puzzle.view.GameView.prototype._missionPieceDispCount = 0;
pigg.puzzle.view.GameView.prototype._currentMissionPieceCount = 0;
pigg.puzzle.view.GameView.prototype._currentMissionPieceDisplayCount = 0;
pigg.puzzle.view.GameView.prototype._currentThroughMissionPiece = 0;
pigg.puzzle.view.GameView.prototype._missionPanel;
pigg.puzzle.view.GameView.prototype._waitDisplayMissionPanel = false;
pigg.puzzle.view.GameView.prototype._additionaMissionlPoint = 0;
pigg.puzzle.view.GameView.prototype._loadMissopnPieceCount = 0;
pigg.puzzle.view.GameView.prototype._isSendUseScoreItem = -1;
pigg.puzzle.view.GameView.prototype._gameMaterialScale = 1;
pigg.puzzle.view.GameView.prototype._gameMaterialPos;
pigg.puzzle.view.GameView.prototype._makeScoreManager;
pigg.puzzle.view.GameView.prototype._numberFontManager;
pigg.puzzle.view.GameView.prototype._moveTimesContainer;
pigg.puzzle.view.GameView.prototype._gameMenuScoreContainer;
pigg.puzzle.view.GameView.prototype._currentMaterialViewX;
pigg.puzzle.view.GameView.prototype._currentMaterialViewY;
pigg.puzzle.view.GameView.prototype._gameTelopTilemap;
pigg.puzzle.view.GameView.prototype._gameTelopTileset;
pigg.puzzle.view.GameView.prototype._gameTelopTile;
pigg.puzzle.view.GameView.prototype._gameTelopHoContainer;
pigg.puzzle.view.GameView.prototype.pieceMaskCover;
pigg.puzzle.view.GameView.prototype._comboPraiseContainer;
pigg.puzzle.view.GameView.prototype._comboPraiseAnimalContainer;
pigg.puzzle.view.GameView.prototype._comboPraiseTxts;
pigg.puzzle.view.GameView.prototype._praiseAnimal;
pigg.puzzle.view.GameView.prototype._telopAnimal;
pigg.puzzle.view.GameView.prototype._thisView;
pigg.puzzle.view.GameView.prototype._bgBackBlack;
pigg.puzzle.view.GameView.prototype._isShowTheme;
pigg.puzzle.view.GameView.prototype._isSendingUseCheatItem;
pigg.puzzle.view.GameView.prototype.clean = function() {}
;
pigg.puzzle.view.GameView.prototype.init = function(main, mapping) {
    var len = 0
      , cnt = 0
      , cnt2 = 0
      , len2 = 0;
    this._main = main;
    this._thisView = this;
    if (this._main.debugType == 'local')
        this._progressData = new pigg.data.puzzle.PuzzleProgressData;
    this.initPieceTile();
    this._mappingView = mapping;
    this._mappingContainer = this._mappingView.mappingContainer;
    this._mappingView.gameView = this;
    this._addScoreVec = org.apache.royale.utils.Language.Vector();
    this._applyMap = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    this._typeMapVec = org.apache.royale.utils.Language.Vector();
    this._normalPieceMapVec = org.apache.royale.utils.Language.Vector();
    len = 6;
    for (cnt = 0; cnt < len; cnt++)
        this._typeMapVec[cnt] = org.apache.royale.utils.Language.Vector();
    this.initMemoryMap();
    this.initApplyMap();
    this._boardBackGroundManager = new pigg.puzzle.manager.BoardBackGroundManager;
    this._assistManager = new pigg.puzzle.manager.AssistManager;
    this._assistManager.init(this._main);
    this._assistManager.gameView = this;
    this._matchGroupeManager = new pigg.puzzle.manager.MatchGroupingManager;
    this._matchGroupeManager.init(this);
    this.traceLog('gameView::init:::');
    this._gameMaterialContainer = new openfl.display.Sprite;
    this._gameEffectContainer = new openfl.display.Sprite;
    this._gameInfoContainer = new openfl.display.Sprite;
    this._pieceContainer = new openfl.display.Sprite;
    this._wiredContainer = new openfl.display.Sprite;
    this._jellyContainer = new openfl.display.Sprite;
    this._marshmallowContainer = new openfl.display.Sprite;
    this._warpObjContainer = new openfl.display.Sprite;
    this._effectContainer = new openfl.display.Sprite;
    this._addScoreContainer = new openfl.display.Sprite;
    this._gameEffectContainer.mouseChildren = false;
    this._gameEffectContainer.mouseEnabled = false;
    this._gameBG = new openfl.display.Sprite;
    this._gameBoard = new openfl.display.Sprite;
    this.addChild(this._gameBG);
    this._bgBackBlack = this.makeBackBlack();
    this.addChild(this._bgBackBlack);
    this._bgBackBlack.visible = false;
    this._gameMaterialContainer.addChild(this._gameBoard);
    this.addChild(this._gameMaterialContainer);
    this.addChild(this._gameEffectContainer);
    this.addChild(this._gameInfoContainer);
    this._menuContainer = new openfl.display.Sprite;
    this._gameInfoContainer.addChild(this._menuContainer);
    this._menuTopContainer = new openfl.display.Sprite;
    this._menuBottomContainer = new openfl.display.Sprite;
    this._menuEventBtnContainer = new openfl.display.Sprite;
    this._menuBottomContainer.y = pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y;
    this._menuContainer.addChild(this._menuBottomContainer);
    this._menuContainer.addChild(this._menuEventBtnContainer);
    this._menuContainer.addChild(this._menuTopContainer);
    this._gameMaterialContainer.addChild(this._marshmallowContainer);
    this._gameMaterialContainer.addChild(this._jellyContainer);
    this._gameMaterialContainer.addChild(this._pieceContainer);
    this._gameMaterialContainer.addChild(this._wiredContainer);
    this._gameMaterialContainer.addChild(this._warpObjContainer);
    this._gameEffectContainer.addChild(this._effectContainer);
    this._gameEffectContainer.addChild(this._addScoreContainer);
    this._gameEffectContainer.x = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X;
    this._gameEffectContainer.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y;
    this._gameMaterialContainer.x = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X;
    this._gameMaterialContainer.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y;
    this._wiredContainer.mouseChildren = false;
    this._wiredContainer.mouseEnabled = false;
    this._warpObjContainer.mouseChildren = false;
    this._warpObjContainer.mouseEnabled = false;
    this._gameMaterialMask = new openfl.display.Sprite;
    this._gameMaterialMask.graphics.beginFill(0, 1);
    this._gameMaterialMask.graphics.drawRect(-8, -8, pigg.puzzle.view.CommonView.BALL_SIZE * pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X + 16, pigg.puzzle.view.CommonView.BALL_SIZE * pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y + 16);
    this._gameMaterialMask.graphics.endFill();
    this._gameMaterialMask.x = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X;
    this._gameMaterialMask.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y;
    this._gamePieceMask = new openfl.display.Sprite;
    this._gamePieceMask.visible = false;
    this._gamePieceMask.scaleX = this._gamePieceMask.scaleY = 0;
    this._gamePieceMask.name = 'MASK';
    this.addChild(this._gamePieceMask);
    this._gameEffectMask = new openfl.display.Sprite;
    this.makeBaseMask(this._gameEffectMask);
    this._numberFontManager = new pigg.puzzle.manager.NumberFontManager;
    this._numberFontManager.init(this._main);
    this._selectPotionPanel = new openfl.display.Sprite;
    this.initMenuPanel();
    this._menuEffectContainer = new openfl.display.Sprite;
    this._menuContainer.addChild(this._menuEffectContainer);
    this.initGameTelop();
    this._tweenObjects = org.apache.royale.utils.Language.Vector();
    this._sendMakeSpecialCount = [0, 0, 0];
    this._bgmTweenSpr = new openfl.display.Sprite;
    this.traceLog('\u9023\u52dd\u4e0a\u9650::', this._winningPointLimit);
    this._acornPieceRatio = org.apache.royale.utils.Language.Vector(4, 'int');
    this._acornPieceLimit = org.apache.royale.utils.Language.Vector(4, 'int');
    this._acornPiecePreAdd = org.apache.royale.utils.Language.Vector(4, 'int');
    this._acornPieceBufferLimit = org.apache.royale.utils.Language.Vector(4, 'int');
    this._acornPieceBufferCurrent = org.apache.royale.utils.Language.Vector(4, 'int');
    this._throughObjectManager = new pigg.puzzle.manager.ThroughObjectManager;
    this._throughObjectManager.init(this._main, this, this._gameMaterialContainer, this._gameMenuThemeContainer, this._menuEffectContainer, this._themeContainer);
    this._searchSlantManager = new pigg.puzzle.manager.SearchSlantManager;
    this._searchSlantManager.init(this._main, this);
    this._menuResultManager = new pigg.puzzle.manager.MenuResultManager;
    this._menuResultManager.init(this._main, this, this._gameInfoContainer);
    this._makeScoreManager = new pigg.puzzle.manager.MakeScoreManager;
    this._makeScoreManager.init(this._main, this, this._addScoreContainer, this._throughObjectManager.throughTilemap);
    if (this.pieceMaskCover == null) {
        this.pieceMaskCover = new openfl.display.Sprite;
        this.pieceMaskCover.graphics.beginFill(16711680, 0);
        this.pieceMaskCover.graphics.drawRect(0, 0, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
        this.pieceMaskCover.graphics.endFill()
    }
    if (this._gameBoardItemCover == null) {
        this._gameBoardItemCover = new openfl.display.Sprite;
        this._gameBoardItemCoverInner = new openfl.display.Sprite;
        this._gameBoardItemCover.addChild(this._gameBoardItemCoverInner);
        this._gameBoardItemCoverInner.filters = [new openfl.filters.ColorMatrixFilter([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, -2, 1, 1, 0])];
        this._gameBoardItemCover.visible = false;
        var shape = new openfl.display.Shape;
        shape.graphics.beginFill(0, 1);
        shape.graphics.drawRect(0, 0, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
        shape.graphics.endFill();
        this._gameBoardItemCoverInner.addChild(shape);
        this._gameInfoContainer.addChild(this._gameBoardItemCover);
        this._gameInfoTempCheatItemContainer = new openfl.display.Sprite;
        this._gameInfoTempCheatItemContainer.y = pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y;
        this._gameInfoContainer.addChild(this._gameInfoTempCheatItemContainer)
    }
    this.initItemHukurou();
    this.setObject();
    var lightness = .3;
    this._grayCT = new openfl.geom.ColorTransform;
    this._grayCT.redMultiplier = .95 - lightness;
    this._grayCT.greenMultiplier = .95 - lightness;
    this._grayCT.blueMultiplier = .95 - lightness;
    this._grayCT.redOffset = 255 * lightness;
    this._grayCT.greenOffset = 255 * lightness;
    this._grayCT.blueOffset = 255 * lightness
}
;
pigg.puzzle.view.GameView.prototype.hide = function() {
    this.traceLog('gameView::hide')
}
;
pigg.puzzle.view.GameView.prototype.initPotionStatus = function() {
    this.traceLog('initPotionStatus', this._main.userData.isScoreItemUsing, this._main.userData.equippedScoreItemCategory);
    if (!this._main.userData.isScoreItemUsing && this._main.userData.equippedScoreItemCategory == '') {
        this.traceLog('initPotionStatus::\u521d\u671f\u5316');
        this._main.userData.isScoreItemUsing = false;
        this._main.userData.boardUsingPuzzleScoreItemMagnification = 0;
        this._main.userData.boardUsingPuzzleScoreItemCategory = '';
        this._main.currentUsePotion = -1
    }
}
;
pigg.puzzle.view.GameView.prototype.show = function(animation) {
    var self = this;
    animation = typeof animation !== 'undefined' ? animation : true;
    var __localFn0__ = function() {
        self._bgBackBlack.visible = false
    };
    var __localFn1__ = function() {
        self._main.refreshScoreItem();
        self._existSelectPotion = true;
        self.updateSelectPotion();
        self.showSelectPotion(true);
        self.traceLog('\u9032\u3081\u3066\u306a\u3044\u306e\u3067\u8ffd\u3044\u30dd\u30fc\u30b7\u30e7\u30f3\u8868\u793a')
    };
    var __localFn2__ = function() {
        self.showGameTelop(1)
    };
    this._main.isShowGame = true;
    this.traceLog('show:::_isShow \x3d true;');
    this.x = 0;
    if (this._bgBackBlack.visible && this._bgBackBlack.alpha == 1)
        com.greensock.TweenMax.to(this._bgBackBlack, .2, {
            alpha: 0,
            onComplete: __localFn0__
        });
    this.initPotionStatus();
    this._selectPotionPanel.visible = false;
    if (this._progressData)
        this._progressData.isStepClear = false;
    this._missionPieceMinInterval = this._main.eventData.missionPieceMinInterval;
    this._missionPieceRatio = this._main.eventData.missionPieceRatio;
    this._missionPieceTotalLimit = this._main.eventData.missionPieceTotalLimit;
    this._missionPieceDispLimit = this._main.eventData.missionPieceDispLimit;
    this.traceLog('gameView:init::\u6b21\u306e\u3084\u3064\u304c\u51fa\u3066\u304f\u308b\u307e\u3067\u306e\u6700\u5c0f\u624b\u6570::', this._missionPieceMinInterval);
    this.traceLog('gameView:init::\u51fa\u73fe\u983b\u5ea6::', this._missionPieceRatio);
    this.traceLog('gameView:init::\u3072\u3068\u3064\u306e\u9762\u306b\u51fa\u3066\u304f\u308b\u6700\u5927\u500b\u6570::', this._missionPieceTotalLimit);
    this.traceLog('gameView:init::\u76e4\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u6700\u5927\u500b\u6570::', this._missionPieceDispLimit);
    this.hideGameTelop();
    this._menuResultManager.hidePanel();
    this._isShow = true;
    this._disableCheckMatch = false;
    this._existSelectPotion = false;
    this._comboCount = 0;
    this._comboPrevCount = 0;
    this._itemContainerAppear = false;
    this._cancelTutorial = false;
    this._showMouseDisble = true;
    this.visible = true;
    this._itemTargetInfo = null;
    this._isAuto = 0;
    this.visible = true;
    this.hideComboPraise();
    this.traceLog('\u521d\u671f\u5024:::', this._removeActionCount);
    this.traceLog('\u521d\u671f\u5024:::', this._removeActionArray.length);
    this.traceLog('\u521d\u671f\u5024::::', this._fallMotionCount, this._removeLineCount, this._removeActionCount);
    this._removeActionCount = 0;
    this._gameEffectContainer.visible = true;
    this._menuContainer.visible = true;
    this._gameMaterialContainer.visible = true;
    this.setPotionPanel();
    var cnt = 0
      , len = 0;
    if (this._emptyBalls && this._emptyBalls.length > 0) {
        len = this._emptyBalls.length;
        for (cnt = 0; cnt < len; cnt++) {
            this.removeFromParent(this._emptyBalls[cnt]);
            this._emptyBalls[cnt] = null
        }
        this._emptyBalls = null
    }
    this.endMovetimesAlert();
    this._menuResultManager.totalMissionPieceDisplayCount = this._main.totalMissionPieceCount;
    this.traceLog('\u30b9\u30bf\u30fc\u30c8\u6642\u306b\u73fe\u72b6\u306e\u30df\u30c3\u30b7\u30e7\u30f3\u30dd\u30a4\u30f3\u30c8\u53cd\u6620', this._menuResultManager.totalMissionPieceDisplayCount, this._main.existMission);
    if (this._main.existMission) {
        this._missionPanel.visible = true;
        this._numberFontManager.makeNumber('missionCount', this._currentMissionPieceDisplayCount)
    } else
        this._missionPanel.visible = false;
    if (!animation) {
        this._menuEventBtnContainer.y = 738;
        this._disableCheckMatch = true;
        this.traceLog('\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306a\u3057', this._isGameCleared);
        this._menuTopContainer.y = 0;
        this._menuBottomContainer.y = pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y;
        this._gameMaterialContainer.x = this._currentMaterialViewX;
        this._gameMaterialContainer.y = this._currentMaterialViewY;
        this._main.sceneCurrent = pigg.puzzle.view.CommonView.SCENE_GAME;
        this._assistManager.setAssistTimer(true);
        this.setCheatItem();
        this._mappingView.loadGame(this._main.userData.boardData);
        this.updateTimes(false, false, true);
        this.checkGameResult(true);
        this._itemContainerAppear = true;
        this._main.playSoundBGM(pigg.puzzle.data.CommonData.BGM_GAME_LOOP);
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u6642\u3000\u9014\u4e2d\u30ed\u30fc\u30c9\u306b\u306f\u5fc5\u305a\u5192\u982d\u306b\u51fa\u3059');
            this.checkShowTutorial()
        }
        this._isMouseEnable = true;
        this._showMouseDisble = false;
        if (!this._main.userData.isScoreItemUsing && !this._main.isBoardMoved && this._main.userData.boardRemainingMoveCount == this._clearMoveTimes && this._main.userTutorialStatus2nd >= pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1 && this._main.enableScoreItem && this._main.userData.equippedScoreItemCategory == '')
            com.greensock.TweenMax.to(this._selectPotionPanel, .5, {
                onComplete: __localFn1__
            });
        if (this._existWarpGrid)
            this.startWarpAnime(true);
        return
    }
    if (this._main.userTutorialStatus2nd >= pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1 && this._main.enableScoreItem && this._main.userData.equippedScoreItemCategory == '' && !this._main.userData.isScoreItemUsing) {
        this._main.refreshScoreItem();
        this._main.userData.boardUsingPuzzleScoreItemMagnification = 0;
        this._main.currentUsePotion = -1;
        this._existSelectPotion = true;
        this.updateSelectPotion()
    } else {
        this._selectPotionPanel.visible = false;
        this._existSelectPotion = false
    }
    this.traceLog('_existSelectPotion::', this._existSelectPotion);
    this._isTweenPause = false;
    this._currentMoveTimes = 0;
    com.greensock.TweenMax.killTweensOf(this._menuTopContainer);
    com.greensock.TweenMax.killTweensOf(this._menuBottomContainer);
    com.greensock.TweenMax.killTweensOf(this._gameMaterialContainer);
    this._menuTopContainer.y = -200;
    com.greensock.TweenMax.to(this._menuTopContainer, .3, {
        delay: .1,
        y: 0,
        ease: com.greensock.easing.Expo.easeOut
    });
    this._menuBottomContainer.y = pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y + 200;
    com.greensock.TweenMax.to(this._menuBottomContainer, .3, {
        delay: .1,
        y: pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y,
        ease: com.greensock.easing.Expo.easeOut
    });
    this._gameMaterialContainer.x = this._currentMaterialViewX + 640;
    com.greensock.TweenMax.to(this._gameMaterialContainer, .5, {
        delay: .1,
        x: this._currentMaterialViewX,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn2__
    });
    if (this._existSelectPotion)
        com.greensock.TweenMax.to(this._selectPotionPanel, .8, {
            y: 0,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.showSelectPotion, this, 'showSelectPotion')
        });
    this._main.sceneCurrent = pigg.puzzle.view.CommonView.SCENE_GAME;
    this.setCheatItem();
    this.allBallsDisplay();
    this._isMouseEnable = true;
    this._main.playSoundBGM(pigg.puzzle.data.CommonData.BGM_GAME_INTRO, 0);
    com.greensock.TweenMax.to(this._bgmTweenSpr, 3.35, {
        onComplete: org.apache.royale.utils.Language.closure(this._main.playSoundBGM, this._main, 'playSoundBGM'),
        onCompleteParams: [pigg.puzzle.data.CommonData.BGM_GAME_LOOP]
    })
}
;
pigg.puzzle.view.GameView.prototype._isMoveTimesAlert;
pigg.puzzle.view.GameView.prototype.startMovetimesAlert = function(init) {
    var self = this;
    init = typeof init !== 'undefined' ? init : false;
    var __localFn0__ = function() {
        if (!self._main.isLowSpecMode)
            com.greensock.TweenMax.to(self._headerMoveTimesAlertTile, .5, {
                alpha: 0,
                scaleX: 1.4,
                scaleY: 1.4,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(self.startMovetimesAlert, self, 'startMovetimesAlert')
            });
        else
            com.greensock.TweenMax.to(self._headerMoveTimesAlertTile, .5, {
                alpha: 0,
                scaleX: 1.4,
                scaleY: 1.4,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(self.endMovetimesAlert, self, 'endMovetimesAlert')
            })
    };
    if (this._isAuto != 0)
        return;
    if (this._isGameCleared)
        return;
    if (init && this._isMoveTimesAlert)
        return;
    this._isMoveTimesAlert = true;
    if (init)
        this._headerTilemap.addTile(this._headerMoveTimesAlertTile);
    this._headerMoveTimesAlertTile.alpha = 0;
    this._headerMoveTimesAlertTile.scaleX = this._headerMoveTimesAlertTile.scaleY = 1;
    com.greensock.TweenMax.to(this._headerMoveTimesAlertTile, .2, {
        delay: .1 * (this._clearMoveTimes - this._currentMoveTimes),
        alpha: .7,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.GameView.prototype.endMovetimesAlert = function() {
    this._isMoveTimesAlert = false;
    com.greensock.TweenMax.killTweensOf(this._headerMoveTimesAlertTile);
    this.removeTile(this._headerMoveTimesAlertTile)
}
;
pigg.puzzle.view.GameView.prototype.showSelectPotion = function(short) {
    short = typeof short !== 'undefined' ? short : false;
    this.traceLog('showSelectPotion', this._selectPotionPanel);
    if (this._selectPotionPanel == null)
        return;
    this._selectPotionPanel.x = 215;
    this._selectPotionPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT + 40;
    this._selectPotionPanel.mouseChildren = true;
    this._selectPotionPanel.mouseEnabled = true;
    this._selectPotionPanel.visible = true;
    if (!short)
        com.greensock.TweenMax.to(this._selectPotionPanel, .8, {
            delay: 1,
            y: pigg.puzzle.view.CommonView.STAGE_HEIGHT - 170,
            ease: com.greensock.easing.Cubic.easeOut
        });
    else
        com.greensock.TweenMax.to(this._selectPotionPanel, .8, {
            y: pigg.puzzle.view.CommonView.STAGE_HEIGHT - 170,
            ease: com.greensock.easing.Cubic.easeOut
        });
    this._isSendUseScoreItem = -1
}
;
pigg.puzzle.view.GameView.prototype.fixShowSelectPostion = function() {}
;
pigg.puzzle.view.GameView.prototype.closeSelectPotionMD = function(e) {
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_CANCEL);
    com.greensock.TweenMax.to(this._selectPotionCloseTile, .1, {
        ease: com.greensock.easing.Cubic.easeOut,
        scaleX: 2,
        scaleY: 2
    })
}
;
pigg.puzzle.view.GameView.prototype.closeSelectPotionMOU = function(e) {
    com.greensock.TweenMax.to(this._selectPotionCloseTile, .1, {
        ease: com.greensock.easing.Cubic.easeOut,
        scaleX: 1,
        scaleY: 1
    })
}
;
pigg.puzzle.view.GameView.prototype.hideSelectPotion = function(e) {
    e = typeof e !== 'undefined' ? e : null;
    this.traceLog('hideSelectPotion::_selectPotionPanel', this._selectPotionPanel);
    if (this._selectPotionPanel == null)
        return;
    if (e) {
        this._selectPotionCloseTile.scaleX = this._selectPotionCloseTile.scaleY = 2;
        com.greensock.TweenMax.to(this._selectPotionCloseTile, .3, {
            ease: com.greensock.easing.Back.easeOut,
            scaleX: 1,
            scaleY: 1
        })
    }
    this._selectPotionPanel.mouseChildren = false;
    this._selectPotionPanel.mouseEnabled = false;
    com.greensock.TweenMax.to(this._selectPotionPanel, .3, {
        y: pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Sine.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeSelectPotion, this, 'removeSelectPotion')
    })
}
;
pigg.puzzle.view.GameView.prototype.removeSelectPotion = function() {
    if (this._selectPotionPanel == null)
        return;
    this._selectPotionPanel.visible = false
}
;
pigg.puzzle.view.GameView.prototype.stgMM = function(e) {}
;
pigg.puzzle.view.GameView.prototype.stackTweenObj = function(targetArray, reset) {
    reset = typeof reset !== 'undefined' ? reset : false;
    return;
    if (reset) {
        this._tweenObjects = org.apache.royale.utils.Language.Vector();
        this.traceLog('stackTweenObj::\u521d\u671f\u5316::');
        return
    }
    var cnt = 0
      , len = 0;
    len = targetArray.length;
    for (cnt = 0; cnt < len; cnt++) {
        if (this._tweenObjects == null)
            return;
        if (this._tweenObjects.indexOf(targetArray[cnt]) != -1)
            continue;
        this._tweenObjects.push(targetArray[cnt])
    }
}
;
pigg.puzzle.view.GameView.prototype.pauseTweenObj = function(type) {
    this.traceLog('GameView::::pauseTweenObj::', this._isTweenPause, type, this._tweenObjects.length);
    var tArray;
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    tArray = com.greensock.TweenMax.getTweensOf(this._bgmTweenSpr);
    len = tArray.length;
    for (cnt = 0; cnt < len; cnt++)
        if (this._isTweenPause)
            tArray[cnt].pause();
    if (this._isTweenPause == type)
        return;
    this._isTweenPause = type;
    if (this._tweenObjects == null)
        return;
    len = this._tweenObjects.length;
    for (cnt = 0; cnt < len; cnt++) {
        tArray = com.greensock.TweenMax.getTweensOf(this._tweenObjects[cnt]);
        if (tArray && tArray.length > 0) {
            len2 = tArray.length;
            for (cnt2 = 0; cnt2 < len2; cnt2++)
                if (this._isTweenPause)
                    tArray[cnt2].pause();
                else
                    tArray[cnt2].resume()
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.killTweenObj = function() {
    var cnt = 0
      , len = 0;
    com.greensock.TweenMax.killTweensOf(this._bgmTweenSpr);
    if (this._tweenObjects == null)
        return;
    len = this._tweenObjects.length;
    var tArray;
    for (cnt = 0; cnt < len; cnt++)
        com.greensock.TweenMax.killTweensOf(this._tweenObjects[cnt])
}
;
pigg.puzzle.view.GameView.prototype.setCheatItem = function() {
    this.traceLog('setCheatItem::', this._main.cheatItemCount, this._main.userTutorialStatus, pigg.puzzle.view.CommonView.ENABLE_CHEATITEM_TUTORIAL_STEP);
    var cnt = 0
      , len = 0;
    len = 3;
    for (cnt = 0; cnt < len; cnt++) {
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.ENABLE_CHEATITEM_TUTORIAL_STEP) {
            if (this._menuCheatItemLockTile[cnt] == null) {
                this._menuCheatItemLockTile.push(new TileBase(7));
                this._menuCheatItemLockTile[cnt].x = 96;
                this._menuCheatItemLockTile[cnt].y = 29
            }
            this._menuCheatItemBtnTile[cnt].updateId(cnt + 3);
            this._menuCheatItemBtnTilemaps[cnt].addTile(this._menuCheatItemLockTile[cnt])
        } else {
            if (this._menuCheatItemLockTile[cnt]) {
                this._menuCheatItemBtnTilemaps[cnt].removeTile(this._menuCheatItemLockTile[cnt]);
                this._menuCheatItemBtnTile[cnt].updateId(cnt)
            }
            if (this._main.cheatItemCount[cnt] > 0) {
                this._menuCheatItemBtnTilemaps[cnt].removeTile(this._menuCheatItemPlusTile[cnt]);
                this._menuCheatItemBtnTile[cnt].colorTransform = null
            } else {
                this._menuCheatItemBtnTilemaps[cnt].addTile(this._menuCheatItemPlusTile[cnt]);
                this._menuCheatItemBtnTile[cnt].colorTransform = this._grayCT
            }
        }
        if (this._main.cheatItemCount[cnt] > 0)
            this._numberFontManager.makeNumber(this._menuCheatItemTxtStr[cnt], this._main.cheatItemCount[cnt]);
        else
            this._numberFontManager.removeNumber(this._menuCheatItemTxtStr[cnt])
    }
}
;
pigg.puzzle.view.GameView.prototype.updateCheatItem = function() {
    var cnt = 0
      , len = 0;
    len = 3;
    for (cnt = 0; cnt < len; cnt++)
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.ENABLE_CHEATITEM_TUTORIAL_STEP) {
            if (this._menuCheatItemLockTile[cnt] == null) {
                this._menuCheatItemLockTile.push(new TileBase(7));
                this._menuCheatItemLockTile[cnt].x = 96;
                this._menuCheatItemLockTile[cnt].y = 29
            }
            this._menuCheatItemBtnTile[cnt].updateId(cnt + 3);
            this._menuCheatItemBtnTilemaps[cnt].addTile(this._menuCheatItemLockTile[cnt])
        } else {
            if (this._menuCheatItemLockTile[cnt]) {
                this._menuCheatItemBtnTilemaps[cnt].removeTile(this._menuCheatItemLockTile[cnt]);
                this._menuCheatItemBtnTile[cnt].updateId(cnt)
            }
            if (this._main.cheatItemCount[cnt] > 0) {
                this._menuCheatItemBtnTilemaps[cnt].removeTile(this._menuCheatItemPlusTile[cnt]);
                this._numberFontManager.makeNumber(this._menuCheatItemTxtStr[cnt], this._main.cheatItemCount[cnt]);
                this._menuCheatItemBtnTile[cnt].colorTransform = null
            } else {
                this._menuCheatItemBtnTilemaps[cnt].addTile(this._menuCheatItemPlusTile[cnt]);
                this._numberFontManager.removeNumber(this._menuCheatItemTxtStr[cnt]);
                this._menuCheatItemBtnTile[cnt].colorTransform = this._grayCT
            }
        }
}
;
pigg.puzzle.view.GameView.prototype.removeCheatItem = function() {}
;
pigg.puzzle.view.GameView.prototype.setPotionPanel = function() {
    this.traceLog('setPotionPanel::', this._main.currentUsePotion);
    if (this._main.currentUsePotion == -1) {
        this._numberFontManager.removeNumber('gamePointScore');
        this.updateHeaderScoreType(false)
    } else {
        this._numberFontManager.makeNumber('gamePointScore', 0);
        this.updateHeaderScoreType(true)
    }
}
;
pigg.puzzle.view.GameView.prototype._selectPotionTileset;
pigg.puzzle.view.GameView.prototype.SELECT_POTION_RECT;
pigg.puzzle.view.GameView.prototype.SELECT_POTION_TILE;
pigg.puzzle.view.GameView.prototype.SELECT_POTION_PLUS_TILE;
pigg.puzzle.view.GameView.prototype._grayCT;
pigg.puzzle.view.GameView.prototype._selectPotionTilemap;
pigg.puzzle.view.GameView.prototype._selectPotionTiles;
pigg.puzzle.view.GameView.prototype._selectPotionCloseTile;
pigg.puzzle.view.GameView.prototype._selectPotionTxtStr;
pigg.puzzle.view.GameView.prototype.makeSelectPotionItem = function() {
    var cnt = 0
      , len = 0;
    if (this._selectPotionContainer == null) {
        this._selectPotionContainer = new openfl.display.Sprite;
        this._selectPotionTileset = this._main.gamePartsTileset.clone();
        this._selectPotionTileset.addRect(new openfl.geom.Rectangle(640,870,400,170));
        var SELECT_POTION_PLUS_RECT = this._selectPotionTileset.addRect(new openfl.geom.Rectangle(901,74,40,40));
        var SELECT_POTION_CLOSE_RECT = this._selectPotionTileset.addRect(new openfl.geom.Rectangle(1003,0,44,44));
        this._selectPotionTilemap = new openfl.display.Tilemap(400,255,this._selectPotionTileset);
        var txtContainer = new openfl.display.Sprite;
        this._selectPotionTilemap.addTile(new TileBase);
        this._selectPotionContainer.addChild(this._selectPotionTilemap);
        this._selectPotionContainer.addChild(txtContainer);
        len = 4;
        var tile;
        var spr = new openfl.display.Sprite;
        for (cnt = 0; cnt < len; cnt++) {
            this.SELECT_POTION_RECT.push(this._selectPotionTileset.addRect(new openfl.geom.Rectangle(640 + cnt * 82,178,82,100)));
            tile = new TileBase(this.SELECT_POTION_RECT[cnt]);
            this._selectPotionTilemap.addTile(tile);
            tile.x = cnt * 94 + 18 + 82 / 2;
            tile.y = 48 + 100 / 2;
            tile.originX = 82 / 2;
            tile.originY = 100 / 2;
            this.SELECT_POTION_TILE.push(tile);
            tile = new TileBase(SELECT_POTION_PLUS_RECT);
            tile.x = cnt * 94 + 18 + 82 / 2 + 6;
            tile.y = 48;
            this.SELECT_POTION_PLUS_TILE.push(tile)
        }
        txtContainer.x = 24;
        txtContainer.y = 122;
        this._numberFontManager.makeFontInfo('selectPotion3', 100, 60, txtContainer, 6434068, 16777215, 36 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion5', 200, 60, txtContainer, 6434068, 16777215, 130 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion10', 300, 60, txtContainer, 6434068, 16777215, 224 * 2, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeFontInfo('selectPotion20', 400, 60, txtContainer, 6434068, 16777215, 318 * 2, 10, 5, 'CENTER', true, true);
        this._selectPotionPanel.addChild(this._selectPotionContainer);
        this._menuContainer.addChild(this._selectPotionPanel);
        this._menuContainer.swapChildren(this._selectPotionPanel, this._menuEffectContainer);
        var closeTilemap = new openfl.display.Tilemap(44 * 2,44 * 2,this._selectPotionTileset);
        this._selectPotionCloseTile = new TileBase(SELECT_POTION_CLOSE_RECT);
        this._selectPotionCloseTile.originX = 22;
        this._selectPotionCloseTile.originY = 22;
        this._selectPotionCloseTile.x = 22 * 2;
        this._selectPotionCloseTile.y = 22 * 2;
        closeTilemap.y = -15 - 22;
        closeTilemap.x = 400 - 34 - 22;
        closeTilemap.addTile(this._selectPotionCloseTile);
        this._selectPotionContainer.addChild(closeTilemap);
        var btn = new openfl.display.Sprite;
        btn.graphics.beginFill(16711680, 0);
        btn.graphics.drawCircle(0, 0, 30);
        btn.graphics.endFill();
        btn.x = 388;
        btn.y = 6;
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.closeSelectPotionMD, this, 'closeSelectPotionMD'));
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(this.closeSelectPotionMOU, this, 'closeSelectPotionMOU'));
        btn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideSelectPotion, this, 'hideSelectPotion'));
        this._selectPotionPanel.addChild(btn);
        this._selectPotionPanel.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.selectPotionMD, this, 'selectPotionMD'));
        this._selectPotionPanel.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.selectPotionCL, this, 'selectPotionCL'))
    }
    this.traceLog('_main.potionItemCount::', this._main.potionItemCount[0], this._main.potionItemCount[1], this._main.potionItemCount[2], this._main.potionItemCount[3]);
    len = this._main.potionItemCount.length;
    for (cnt = 0; cnt < len; cnt++)
        if (this._main.potionItemCount[cnt] == 0) {
            this.SELECT_POTION_TILE[cnt].colorTransform = this._grayCT;
            this._selectPotionTilemap.addTile(this.SELECT_POTION_PLUS_TILE[cnt]);
            this._numberFontManager.removeNumber(this._selectPotionTxtStr[cnt])
        } else {
            this.SELECT_POTION_TILE[cnt].colorTransform = null;
            this._selectPotionTilemap.removeTile(this.SELECT_POTION_PLUS_TILE[cnt]);
            this._numberFontManager.makeNumber(this._selectPotionTxtStr[cnt], this._main.potionItemCount[cnt])
        }
}
;
pigg.puzzle.view.GameView.prototype.selectPotionCL = function() {
    this.traceLog('selectPotionMD::', this.mouseX, this.mouseY, this._isSendUseScoreItem, this._main.potionItemCount);
    if (this._isSendUseScoreItem != -1)
        return;
    if (this.mouseY < 780)
        return;
    if (this.mouseX > 230 && this.mouseX < 320) {
        this.traceLog('3\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        if (this._main.potionItemCount[0] == 0)
            this._main.showAlertItemShortage();
        else {
            this._isSendUseScoreItem = 0;
            this._main.loadDataManager.useScoreItem(pigg.puzzle.view.CommonView.SCORE_ITEM_3)
        }
    } else if (this.mouseX > 320 && this.mouseX < 415) {
        this.traceLog('5\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        if (this._main.potionItemCount[1] == 0)
            this._main.showAlertItemShortage();
        else {
            this._isSendUseScoreItem = 1;
            this._main.loadDataManager.useScoreItem(pigg.puzzle.view.CommonView.SCORE_ITEM_5)
        }
    } else if (this.mouseX > 415 && this.mouseX < 510) {
        this.traceLog('10\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        if (this._main.potionItemCount[2] == 0)
            this._main.showAlertItemShortage();
        else {
            this._isSendUseScoreItem = 2;
            this._main.loadDataManager.useScoreItem(pigg.puzzle.view.CommonView.SCORE_ITEM_10)
        }
    } else if (this.mouseX > 510 && this.mouseX < 605) {
        this.traceLog('20\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        if (this._main.potionItemCount[3] == 0)
            this._main.showAlertItemShortage();
        else {
            this._isSendUseScoreItem = 3;
            this._main.loadDataManager.useScoreItem(pigg.puzzle.view.CommonView.SCORE_ITEM_20)
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.selectPotionMD = function() {
    if (this._isSendUseScoreItem != -1)
        return;
    if (this.mouseY < 780)
        return;
    var index = 0;
    if (this.mouseX > 230 && this.mouseX < 320) {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        this.traceLog('3\u500d\u30dd\u30fc\u30b7\u30e7\u30f3');
        index = 0
    } else if (this.mouseX > 320 && this.mouseX < 415) {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        this.traceLog('5\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        index = 1
    } else if (this.mouseX > 415 && this.mouseX < 510) {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        this.traceLog('10\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        index = 2
    } else if (this.mouseX > 510 && this.mouseX < 605) {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        this.traceLog('20\u500d\u30dd\u30fc\u30b7\u30e7\u30f3\u4f7f\u3046');
        index = 3
    }
    com.greensock.TweenMax.killTweensOf(this.SELECT_POTION_TILE[index]);
    this.SELECT_POTION_TILE[index].scaleX = this.SELECT_POTION_TILE[index].scaleY = 1.2;
    com.greensock.TweenMax.to(this.SELECT_POTION_TILE[index], .6, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1, .4)
    })
}
;
pigg.puzzle.view.GameView.prototype.updateSelectPotion = function(remove) {
    remove = typeof remove !== 'undefined' ? remove : false;
    this.traceLog('updateSelectPotion', this._main.enableScoreItem, this._existSelectPotion);
    if (!this._main.enableScoreItem)
        return;
    if (!this._existSelectPotion)
        return;
    if (!remove)
        this.makeSelectPotionItem()
}
;
pigg.puzzle.view.GameView.prototype.onUseScoreItem = function(status) {
    this.traceLog('onUseScoreItem::', this._isSendUseScoreItem);
    if (status == 'SUCCESS') {
        this._main.userData.isScoreItemUsing = true;
        this.updateSelectPotion(true);
        this.hideSelectPotion();
        if (this._isSendUseScoreItem == 0)
            this._main.userData.boardUsingPuzzleScoreItemMagnification = 3;
        else if (this._isSendUseScoreItem == 1)
            this._main.userData.boardUsingPuzzleScoreItemMagnification = 5;
        else if (this._isSendUseScoreItem == 2)
            this._main.userData.boardUsingPuzzleScoreItemMagnification = 10;
        else if (this._isSendUseScoreItem == 3)
            this._main.userData.boardUsingPuzzleScoreItemMagnification = 20;
        this._main.currentUsePotion = this._isSendUseScoreItem;
        this.throughSelectPotion(this._isSendUseScoreItem);
        if (this._main.potionItemCount[this._main.currentUsePotion] > 0)
            this._main.potionItemCount[this._main.currentUsePotion]--
    }
    this._isSendUseScoreItem = -1
}
;
pigg.puzzle.view.GameView.prototype._throughScorePotionBaseX;
pigg.puzzle.view.GameView.prototype.throughSelectPotion = function(scoreType) {
    this.traceLog('throughSelectPotion');
    this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THROUGH_SELECT_POTION, null, null, scoreType, this._throughScorePotionBaseX[scoreType] + 240, 790)
}
;
pigg.puzzle.view.GameView.prototype._selectPotionEffectTilemap;
pigg.puzzle.view.GameView.prototype.removeThroughSelectPotion = function() {
    var self = this;
    var __localFn0__ = function() {
        self._selectPotionEffectTilemap.removeTiles()
    };
    this.traceLog('removeThroughSelectPotion::\u30dd\u30fc\u30b7\u30e7\u30f3through\u7d42\u4e86');
    if (this._selectPotionEffectTilemap == null) {
        this._selectPotionEffectTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,200,this._headerTileset);
        this._menuTopContainer.addChild(this._selectPotionEffectTilemap)
    }
    this._main.playSE(pigg.puzzle.data.CommonData.SE_USE_POTION);
    var lightness = .3;
    var ct = new openfl.geom.ColorTransform;
    ct.redMultiplier = 0;
    ct.greenMultiplier = 0;
    ct.blueMultiplier = 0;
    ct.redOffset = 255;
    ct.greenOffset = 255;
    ct.blueOffset = 255;
    var tl = new TileBase(2);
    tl.x = 381 + 259;
    tl.originX = 259;
    tl.colorTransform = ct;
    this._selectPotionEffectTilemap.addTile(tl);
    com.greensock.TweenMax.to(tl, .5, {
        ease: com.greensock.easing.Cubic.easeOut,
        scaleX: 1.5,
        scaleY: 1.5,
        alpha: 0,
        onComplete: __localFn0__
    });
    this.setPotionPanel()
}
;
pigg.puzzle.view.GameView.prototype.setGameTheme = function(boardBaseData, isLoad) {
    boardBaseData = typeof boardBaseData !== 'undefined' ? boardBaseData : '';
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    this.traceLog('setGameTheme', boardBaseData, isLoad);
    if (boardBaseData == null)
        return;
    if (boardBaseData == '')
        return;
    this.applyImportTheme(boardBaseData.split('_'));
    this._applyMap = this._mappingView.mappingMap;
    if (!isLoad)
        this.setObject(true, true)
}
;
pigg.puzzle.view.GameView.prototype.hideTileGummy = function() {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    lenX = lenY = 9;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++)
            this._map[cntX][cntY].mc.visible = false
}
;
pigg.puzzle.view.GameView.prototype.setLoadStatus = function(loadStr, existMissionArr) {
    existMissionArr = typeof existMissionArr !== 'undefined' ? existMissionArr : false;
    this.traceLog('setLoadStatus::', this._clearMoveTimes, this._currentMoveTimes, this._main.userData.boardRemainingMoveCount);
    this._numberFontManager.makeNumber('moveTimes', this._main.userData.boardRemainingMoveCount);
    this._numberFontManager.makeNumber('gameScore', this._currentGameScore);
    this.adjustPointIcon();
    var addIndex = 0;
    if (this._main.existMission) {
        this._currentMissionPieceDisplayCount = this._currentMissionPieceCount;
        this._missionPieceTotalCount = this._currentMissionPieceCount + this._loadMissopnPieceCount;
        if (this._currentMissionPieceCount >= this._main.eventData.missionPieceTotalLimit)
            this._numberFontManager.makeNumber('missionCount', this._currentMissionPieceDisplayCount, 1);
        else
            this._numberFontManager.makeNumber('missionCount', this._currentMissionPieceDisplayCount)
    }
    if (this._main.userData.boardUsingPuzzleScoreItemCategory != null && this._main.userData.boardUsingPuzzleScoreItemCategory != '')
        this._numberFontManager.makeNumber('gamePotionScore', this._currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification);
    else if (this._main.userData.boardUsingPuzzleScoreItemMagnification > 0)
        this._numberFontManager.makeNumber('gamePotionScore', this._currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification);
    if (existMissionArr)
        addIndex = 1;
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_PIECE) {
        this._correctPieceArray[0][2] = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._correctPieceArray[1][2] = org.apache.royale.utils.Language._int(loadStr[4 + addIndex]);
        this._correctPieceArray[2][2] = org.apache.royale.utils.Language._int(loadStr[5 + addIndex]);
        this._correctPieceArray[0][3] = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._correctPieceArray[1][3] = org.apache.royale.utils.Language._int(loadStr[4 + addIndex]);
        this._correctPieceArray[2][3] = org.apache.royale.utils.Language._int(loadStr[5 + addIndex]);
        this.checkCorrectPiece(null, -1)
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER) {
        this._currentOrderCount[0] = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._currentOrderCount[1] = org.apache.royale.utils.Language._int(loadStr[4 + addIndex]);
        this._afterOrderCount[0] = this._totalOrderCount[0] - (this._currentOrderCount[0] + this._appearOrderCount[0]);
        this._afterOrderCount[1] = this._totalOrderCount[1] - (this._currentOrderCount[1] + this._appearOrderCount[1]);
        this._currentOrderDisplayCount[0] = this._currentOrderCount[0];
        this._currentOrderDisplayCount[1] = this._currentOrderCount[1];
        this._numberFontManager.makeNumber('gameThemeScore1', this._totalOrderCount[0] - this._currentOrderCount[0]);
        if (this._totalOrderCount[1] > 0)
            this._numberFontManager.makeNumber('gameThemeScore2', this._totalOrderCount[1] - this._currentOrderCount[1])
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE) {
        this.traceLog('setLoadStatus:::', this._goalScore, this._currentDisplayScore, this._currentGameScore);
        this._currentDisplayScore = this._currentGameScore;
        if (this._goalScore - this._currentDisplayScore > 0)
            this._numberFontManager.makeNumber('gameThemeScore1', this._goalScore - this._currentDisplayScore);
        else {
            this._numberFontManager.removeNumber('gameThemeScore1');
            this._themeCheckArray[0].visible = true
        }
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
        this._currentMarshmallowCount = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._currentMarshmallowDisplayCount = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._numberFontManager.makeNumber('gameThemeScore1', this._totalMarshmallowCount - this._currentMarshmallowCount)
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        this._currentFlowerCount = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._currentFlowerDisplayCount = org.apache.royale.utils.Language._int(loadStr[3 + addIndex]);
        this._numberFontManager.makeNumber('gameThemeScore1', this._currentFlowerCount)
    }
    this.checkLoadProgress()
}
;
pigg.puzzle.view.GameView.prototype.searchOrderSetGrid = function() {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var posY = 0;
    var arr = [];
    var oderCount = 0;
    var mInfo;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    while (this._preOrderCount[0] + this._preOrderCount[1] > arr.length) {
        for (cntX = 0; cntX < lenX; cntX++)
            if (this._applyMap[cntX][posY].mappingType == 1 && this._applyMap[cntX][posY].hasWired == 0 && this._applyMap[cntX][posY].isWarpOut == -1)
                arr.push([cntX, posY]);
        posY++
    }
    while (this._preOrderCount[0] > 0) {
        oderCount = org.apache.royale.utils.Language._int(Math.random() * arr.length);
        this._applyMap[arr[oderCount][0]][arr[oderCount][1]].mappingType = 10;
        this._applyMap[arr[oderCount][0]][arr[oderCount][1]].isOrder = 0;
        arr.splice(oderCount, 1);
        this._preOrderCount[0]--;
        this._appearOrderCount[0]++
    }
    while (this._preOrderCount[1] > 0) {
        oderCount = org.apache.royale.utils.Language._int(Math.random() * arr.length);
        this._applyMap[arr[oderCount][0]][arr[oderCount][1]].mappingType = 10;
        this._applyMap[arr[oderCount][0]][arr[oderCount][1]].isOrder = 1;
        arr.splice(oderCount, 1);
        this._preOrderCount[1]--;
        this._appearOrderCount[1]++
    }
}
;
pigg.puzzle.view.GameView.prototype.setObject = function(isRefresh, isMapping, isLoad) {
    isRefresh = typeof isRefresh !== 'undefined' ? isRefresh : false;
    isMapping = typeof isMapping !== 'undefined' ? isMapping : false;
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    this.traceLog('setObject::', isRefresh, isMapping, isMapping);
    this._mapSizeMinYArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._isStartAction = true;
    this._isFlush = false;
    this._isSetObject = true;
    this._mouseDownInfo = null;
    this._isObjMouseDown = false;
    this._isShuffle = false;
    var mInfo;
    var len = 0
      , cnt = 0;
    var bombCount = 0;
    var stripeCount = 0;
    var borderCount = 0;
    var wrappingCount = 0;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt2 = 0
      , len2 = 0;
    var leftMapInfo, leftMapInfo2;
    var upperMapInfo, upperMapInfo2;
    var addThroughVoidLevel = 0;
    var mc;
    var type = 0;
    this._checkOrderTimes = 0;
    this._totalJellyCount = 0;
    this._currentJellyCount = 0;
    this._currentJellyDisplayCount = 0;
    this._currentOrderCount = [0, 0];
    this._appearOrderCount = [0, 0];
    this._currentOrderDisplayCount = [0, 0];
    this._totalMarshmallowCount = 0;
    this._currentMarshmallowCount = 0;
    this._currentMarshmallowDisplayCount = 0;
    this._totalFlowerCount = 0;
    this._currentFlowerCount = 0;
    this._currentFlowerDisplayCount = 0;
    this._missionPieceBufferCount = 0;
    this._missionPieceTotalCount = 0;
    this._missionPieceDispCount = 0;
    this._orderArrowObjcs = [];
    if (this._main.currentThemeType != -1)
        this.setThemePanel();
    this._typeMapVec = org.apache.royale.utils.Language.Vector();
    this._normalPieceMapVec = org.apache.royale.utils.Language.Vector();
    this._typeCount = this._pieceCountType;
    this._normalPieceTypeCount = this._pieceCountType;
    this._normalBallTypeArray = this.makeTypeArray();
    this._assistManager.typeCount = this._typeCount;
    len = 6;
    this._hasMarshmallowArray = [];
    for (cnt = 0; cnt < len; cnt++)
        this._typeMapVec[cnt] = org.apache.royale.utils.Language.Vector();
    this._stackRemoveVec = org.apache.royale.utils.Language.Vector();
    this._stackQuakeVec = org.apache.royale.utils.Language.Vector();
    this._stackFilterVec = org.apache.royale.utils.Language.Vector();
    this._stackAutoQuakeVec = org.apache.royale.utils.Language.Vector();
    this._warpOutVec = org.apache.royale.utils.Language.Vector(10, 'MapInfo');
    this._warpInVec = org.apache.royale.utils.Language.Vector(10, 'MapInfo');
    this._warpGridCount = 0;
    this._existWarpGrid = false;
    this._acornVec = org.apache.royale.utils.Language.Vector(this._acornTypeNum, 'Vector.\x3cMapInfo\x3e');
    this._acornPiecePreAdd = org.apache.royale.utils.Language.Vector(this._acornTypeNum, 'int');
    this._acornPieceBufferLimit = [0, 3, 5, 0].slice();
    this._acornPieceBufferCurrent = org.apache.royale.utils.Language.Vector(this._acornTypeNum, 'int');
    var checkSideVoidL = -1;
    var checkSideVoidR = -1;
    if (!isRefresh) {
        this.traceLog('setObj::\u521d\u671f');
        this.makeTilePiece();
        this.initCrushTile();
        for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++) {
            this._map[cntX] = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y, 'MapInfo');
            this._applyMap[cntX] = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y, 'MapInfo');
            for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
                this._applyMap[cntX][cntY] = new pigg.puzzle.data.MapInfo;
                this._map[cntX][cntY] = new pigg.puzzle.data.MapInfo;
                mInfo = this._map[cntX][cntY];
                mc = new TileGummy;
                mInfo.mc = mc;
                mInfo.mx = cntX;
                mInfo.my = cntY;
                mc.x = cntX * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                mc.y = cntY * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                this._tilemap.addTile(mc);
                this.mapInfoInit(mInfo);
                this._typeArray = this.makeTypeArray();
                if (cntX > 1) {
                    leftMapInfo = this._map[cntX - 1][cntY];
                    leftMapInfo2 = this._map[cntX - 2][cntY];
                    if (leftMapInfo.num == leftMapInfo2.num)
                        this._typeArray.splice(this._typeArray.indexOf(leftMapInfo.num), 1)
                }
                if (cntY > 1) {
                    upperMapInfo = this._map[cntX][cntY - 1];
                    upperMapInfo2 = this._map[cntX][cntY - 2];
                    if (upperMapInfo.num == upperMapInfo2.num)
                        this._typeArray.splice(this._typeArray.indexOf(upperMapInfo.num), 1)
                }
                type = Number(this._typeArray[org.apache.royale.utils.Language._int(Math.random() * this._typeArray.length)]);
                mInfo.num = type;
                mInfo.ballType = type;
                mc.changeBallType(type);
                this._typeMapVec[type].push(mInfo);
                this._normalPieceMapVec.push(mInfo)
            }
        }
        this.resizeGameMaterialContainer();
        this.makeGameBoard(isLoad);
        return
    } else {
        this.traceLog('setObj::\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5');
        this.hideTileGummy();
        bombCount = 0;
        for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++) {
            addThroughVoidLevel = 0;
            for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
                mInfo = this._map[cntX][cntY];
                mInfo.mx = cntX;
                mInfo.my = cntY;
                mInfo.mc.x = cntX * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                mInfo.mc.y = cntY * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                this.mapInfoInit(mInfo);
                mInfo.mc.visible = true;
                mInfo.isMovable = true;
                mInfo.isFixVoid = false;
                mInfo.isFix = false;
                mInfo.isVoid = false;
                mInfo.isThroughVoid = false;
                mInfo.isThroughVoidLevel = 0;
                mInfo.isThroughOrder = false;
                mInfo.mc.isFixVoid = false;
                mInfo.mc.isIcing = false;
                mInfo.isOrder = -1;
                mInfo.isAcorn = -1;
                mInfo.isIcing = false;
                mInfo.iceLevel = 0;
                mInfo.hasJelly = 0;
                mInfo.hasWired = 0;
                mInfo.hasMarshmallow = -1;
                mInfo.hasMarshmallowType = 0;
                mInfo.assistFocusMapInfo = [[], [], [], []];
                mInfo.assistLevel = [0, 0, 0, 0];
                mInfo.testAssistMax = [-1, -1];
                mInfo.shuffleLeave = false;
                mInfo.isSetCrushRemove = false;
                mInfo.matchGroupeIndex = -1;
                mInfo.isCheckedWired = false;
                mInfo.isMakeByBomb = false;
                mInfo.ballType = -1;
                mInfo.isWarpIn = -1;
                mInfo.isWarpOut = -1;
                mInfo.warpIndex = -1;
                mInfo.hasMission = -1;
                mInfo.crushMission = -1;
                if (mInfo.orderArrow) {
                    this.removeTile(mInfo.orderArrow);
                    mInfo.orderArrow = null
                }
                if (mInfo.warpArrow)
                    this.removeTile(mInfo.warpArrow);
                mInfo.mc.init();
                if (mInfo.marshmallowObjct) {
                    this.removeTile(mInfo.marshmallowObjct);
                    mInfo.marshmallowObjct = null
                }
                this._typeArray = this.makeTypeArray();
                if (cntX > 1) {
                    leftMapInfo = this._map[cntX - 1][cntY];
                    leftMapInfo2 = this._map[cntX - 2][cntY];
                    if (leftMapInfo.num == leftMapInfo2.num)
                        this._typeArray.splice(this._typeArray.indexOf(leftMapInfo.num), 1)
                }
                if (cntY > 1) {
                    upperMapInfo = this._map[cntX][cntY - 1];
                    upperMapInfo2 = this._map[cntX][cntY - 2];
                    if (upperMapInfo.num == upperMapInfo2.num)
                        this._typeArray.splice(this._typeArray.indexOf(upperMapInfo.num), 1)
                }
                if (this._applyMap[cntX][cntY].warpIndex != -1)
                    if (this._applyMap[cntX][cntY].warpIndex >= 10) {
                        mInfo.isWarpOut = this._applyMap[cntX][cntY].warpIndex - 10;
                        this._warpOutVec[mInfo.isWarpOut] = mInfo
                    } else {
                        mInfo.isWarpIn = Number(this._applyMap[cntX][cntY].warpIndex);
                        this._warpInVec[mInfo.isWarpIn] = mInfo;
                        this._warpGridCount++;
                        this._existWarpGrid = true
                    }
                if (mInfo.isWarpIn != -1 || mInfo.isWarpOut != -1) {
                    if (mInfo.warpArrow == null)
                        mInfo.warpArrow = new TileBase(this.WARP_RECT[0]);
                    this._wiredTilemap.addTile(mInfo.warpArrow);
                    mInfo.warpArrow.x = mInfo.mc.x;
                    if (mInfo.isWarpIn != -1) {
                        mInfo.warpArrow.updateId(this.WARP_RECT[1]);
                        mInfo.warpArrow.y = mInfo.mc.y + 20
                    } else {
                        mInfo.warpArrow.updateId(this.WARP_RECT[0]);
                        mInfo.warpArrow.y = mInfo.mc.y - 18
                    }
                }
                if (cntY == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && mInfo.isWarpIn == -1 && this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER && this._applyMap[cntX][cntY].mappingType != 0 && this._applyMap[cntX][cntY].mappingType != 9 && this._applyMap[cntX][cntY].mappingType != 8) {
                    this.traceLog('\u304a\u3057\u308a\u306b\u3084\u3058\u308b\u3057\u3064\u3051\u308b::B::', cntY);
                    if (mInfo.orderArrow == null)
                        mInfo.orderArrow = new TileBase(this.ORDER_ARROW_RECT);
                    this._jellyTilemap.addTile(mInfo.orderArrow);
                    mInfo.orderArrow.x = mInfo.mc.x;
                    mInfo.orderArrow.y = mInfo.mc.y + pigg.puzzle.view.CommonView.BALL_SIZE;
                    this._orderArrowObjcs.push(mInfo)
                }
                if (this._applyMap[cntX][cntY].mappingType != 0 && this._applyMap[cntX][cntY].mappingType != 9) {
                    if (checkSideVoidL == -1)
                        checkSideVoidL = cntX;
                    if (checkSideVoidR < cntX)
                        checkSideVoidR = cntX
                }
                if (isMapping && this._applyMap[cntX][cntY].mappingType != 1) {
                    if (this._applyMap[cntX][cntY].mappingType == 8)
                        addThroughVoidLevel++;
                    else
                        addThroughVoidLevel = 0;
                    if (this._applyMap[cntX][cntY].mappingType == 0 || this._applyMap[cntX][cntY].mappingType == 9) {
                        mInfo.isMovable = false;
                        mInfo.isFixVoid = true;
                        mInfo.isFix = true;
                        mInfo.isVoid = true;
                        mInfo.num = -1;
                        type = -1;
                        mInfo.mc.isFixVoid = true;
                        mInfo.mc.visible = false;
                        if (this._applyMap[cntX][cntY].mappingType == 9) {
                            this.traceLog('\u3084\u3058\u308b\u3057\u3064\u3051\u308b::', cntX, cntY);
                            mInfo.isThroughOrder = true;
                            if (mInfo.orderArrow == null)
                                mInfo.orderArrow = new TileBase(this.ORDER_ARROW_RECT);
                            this._jellyTilemap.addTile(mInfo.orderArrow);
                            mInfo.orderArrow.x = mInfo.mc.x;
                            mInfo.orderArrow.y = mInfo.mc.y + pigg.puzzle.view.CommonView.BALL_SIZE;
                            if (cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1 && (this._applyMap[cntX + 1][cntY].mappingType != 0 && this._applyMap[cntX + 1][cntY].mappingType != 9)) {
                                if (cntX == 0 || cntX > 0 && (this._applyMap[cntX - 1][cntY].mappingType == 0 || this._applyMap[cntX - 1][cntY].mappingType == 9))
                                    mInfo.orderArrow.x = mInfo.mc.x - 4
                            } else if (cntX > 0 && (this._applyMap[cntX - 1][cntY].mappingType != 0 && this._applyMap[cntX - 1][cntY].mappingType != 9))
                                if (cntX == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1 || cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1 && (this._applyMap[cntX + 1][cntY].mappingType == 0 || this._applyMap[cntX + 1][cntY].mappingType == 9))
                                    mInfo.orderArrow.x = mInfo.mc.x + 4;
                            mInfo.orderArrow.y = mInfo.mc.y;
                            this._orderArrowObjcs.push(mInfo)
                        }
                    } else if (this._applyMap[cntX][cntY].mappingType == 8) {
                        mInfo.isMovable = false;
                        mInfo.isFix = true;
                        mInfo.isVoid = true;
                        mInfo.isThroughVoid = true;
                        mInfo.isThroughVoidLevel = addThroughVoidLevel;
                        mInfo.num = -1;
                        type = -1;
                        mInfo.mc.isFixVoid = true;
                        mInfo.mc.visible = false;
                        if (cntY == 0 || cntY == this._mapSizeMinYArray[cntX])
                            this._mapSizeMinYArray[cntX]++;
                        this.traceLog('\u901a\u904evoid::\u30ec\u30d9\u30eb::', cntX, this._mapSizeMinYArray[cntX])
                    }
                    if (isLoad)
                        continue;
                    if (this._applyMap[cntX][cntY].mappingType == 6) {
                        mInfo.isMovable = false;
                        mInfo.isFix = true;
                        mInfo.iceLevel = 1;
                        mInfo.isIcing = true;
                        mInfo.num = -1;
                        mInfo.ballCrushType = 20;
                        type = 20
                    } else if (this._applyMap[cntX][cntY].mappingType == 7) {
                        mInfo.isMovable = false;
                        mInfo.isFix = true;
                        mInfo.iceLevel = 2;
                        mInfo.isIcing = true;
                        mInfo.num = -1;
                        mInfo.ballCrushType = 21;
                        type = 21
                    } else if (this._applyMap[cntX][cntY].mappingType == 2) {
                        if (this._applyMap[cntX][cntY].mappingPieceType == 0)
                            type = Number(this._typeArray[org.apache.royale.utils.Language._int(Math.random() * this._typeArray.length)]);
                        else
                            type = this._applyMap[cntX][cntY].mappingPieceType - 1;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        this.setCrushType(mInfo, 1, 1)
                    } else if (this._applyMap[cntX][cntY].mappingType == 3) {
                        if (this._applyMap[cntX][cntY].mappingPieceType == 0)
                            type = Number(this._typeArray[org.apache.royale.utils.Language._int(Math.random() * this._typeArray.length)]);
                        else
                            type = this._applyMap[cntX][cntY].mappingPieceType - 1;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        this.setCrushType(mInfo, 2, 1)
                    } else if (this._applyMap[cntX][cntY].mappingType == 4) {
                        if (this._applyMap[cntX][cntY].mappingPieceType == 0)
                            type = Number(this._typeArray[org.apache.royale.utils.Language._int(Math.random() * this._typeArray.length)]);
                        else
                            type = this._applyMap[cntX][cntY].mappingPieceType - 1;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        this.setCrushType(mInfo, 3, 1)
                    } else if (this._applyMap[cntX][cntY].mappingType == 5) {
                        type = 6;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.ballCrushType = type;
                        this.setCrushType(mInfo, 4, 1);
                        mInfo.num = 6
                    } else if (this._applyMap[cntX][cntY].mappingType == 10) {
                        type = 10;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.num = 10;
                        mInfo.isOrder = Number(this._applyMap[cntX][cntY].isOrder);
                        mInfo.ballCrushType = 10;
                        this._applyMap[cntX][cntY].mappingType = 1;
                        this._applyMap[cntX][cntY].isOrder = -1
                    } else if (this._applyMap[cntX][cntY].mappingType == 12) {
                        type = 12;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.num = 12;
                        mInfo.isAcorn = 0;
                        mInfo.ballCrushType = 12;
                        if (this._acornVec[0] == null)
                            this._acornVec[0] = org.apache.royale.utils.Language.Vector();
                        this._acornVec[0].push(mInfo)
                    } else if (this._applyMap[cntX][cntY].mappingType == 13) {
                        type = 13;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.num = 13;
                        mInfo.isAcorn = 1;
                        mInfo.ballCrushType = 13;
                        if (this._acornVec[1] == null)
                            this._acornVec[1] = org.apache.royale.utils.Language.Vector();
                        this._acornVec[1].push(mInfo)
                    } else if (this._applyMap[cntX][cntY].mappingType == 14) {
                        type = 14;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.num = 14;
                        mInfo.isAcorn = 2;
                        mInfo.ballCrushType = 14;
                        if (this._acornVec[2] == null)
                            this._acornVec[2] = org.apache.royale.utils.Language.Vector();
                        this._acornVec[2].push(mInfo)
                    } else if (this._applyMap[cntX][cntY].mappingType == 15) {
                        type = 15;
                        mInfo.num = type;
                        mInfo.ballType = type;
                        mInfo.num = 15;
                        mInfo.isAcorn = 3;
                        mInfo.ballCrushType = 15;
                        if (this._acornVec[3] == null)
                            this._acornVec[3] = org.apache.royale.utils.Language.Vector();
                        this._acornVec[3].push(mInfo)
                    } else {
                        mInfo.num = -1;
                        type = 99;
                        mInfo.ballType = -1
                    }
                } else {
                    addThroughVoidLevel = 0;
                    if (this._applyMap[cntX][cntY].mappingPieceType == 0)
                        type = Number(this._typeArray[org.apache.royale.utils.Language._int(Math.random() * this._typeArray.length)]);
                    else
                        type = this._applyMap[cntX][cntY].mappingPieceType - 1;
                    this.setCrushType(mInfo, 0, 1);
                    mInfo.num = type;
                    mInfo.ballType = type
                }
                mInfo.mc.changeBallType(type, mInfo.isOrder, mInfo.hasMission);
                if (isMapping) {
                    mInfo.hasJelly = Number(this._applyMap[cntX][cntY].hasJelly);
                    mInfo.hasWired = Number(this._applyMap[cntX][cntY].hasWired);
                    if (mInfo.hasJelly > 0) {
                        if (mInfo.jellyObjct == null) {
                            mInfo.jellyObjct = new TileBase(this.HONEY_RECT[mInfo.hasJelly - 1]);
                            mInfo.jellyObjct.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                            mInfo.jellyObjct.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
                        }
                        this._jellyTilemap.addTile(mInfo.jellyObjct);
                        if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY) {
                            mInfo.jellyObjct.updateId(this.HONEY_RECT[mInfo.hasJelly - 1]);
                            mInfo.jellyObjct.scaleX = mInfo.jellyObjct.scaleY = 1.1
                        } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
                            mInfo.jellyObjct.updateId(this.BEARHIDE_RECT[mInfo.hasJelly - 1]);
                            mInfo.jellyObjct.scaleX = mInfo.jellyObjct.scaleY = 1.14
                        }
                        mInfo.jellyObjct.setOrigin();
                        this._totalJellyCount++
                    } else if (mInfo.jellyObjct)
                        this.removeTile(mInfo.jellyObjct);
                    if (mInfo.hasWired > 0) {
                        if (mInfo.wiredObjct == null) {
                            mInfo.wiredObjct = new TileBase(this.WIRE_RECT);
                            mInfo.wiredObjct.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                            mInfo.wiredObjct.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
                        }
                        this._wiredTilemap.addTile(mInfo.wiredObjct);
                        mInfo.isMovable = false
                    } else if (mInfo.wiredObjct)
                        this.removeTile(mInfo.wiredObjct)
                }
                if (type >= 0 && type < this._typeMapVec.length) {
                    this._typeMapVec[type].push(mInfo);
                    this._normalPieceMapVec.push(mInfo)
                }
            }
        }
        if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
            this.traceLog('setObj:(_applyMarshmallowArray)::', this._applyMarshmallowArray.length);
            if (this._applyMarshmallowArray && this._applyMarshmallowArray.length > 0) {
                this._totalMarshmallowCount = this._applyMarshmallowArray.length;
                if (!isLoad) {
                    len = this._applyMarshmallowArray.length;
                    for (cnt = 0; cnt < len; cnt++) {
                        this.traceLog('_applyMarshmallowArray[cnt]::::', this._applyMarshmallowArray[cnt].mx, this._applyMarshmallowArray[cnt].my);
                        mInfo = this._map[this._applyMarshmallowArray[cnt].mx][this._applyMarshmallowArray[cnt].my];
                        mInfo.hasMarshmallowType = Number(this._applyMarshmallowArray[cnt].hasMarshmallowType);
                        this.setHasMarshmallow(mInfo, mInfo.hasMarshmallowType, cnt)
                    }
                }
            }
        }
        if (!isLoad)
            this._missionPieceBufferCount = this._missionPieceMinInterval
    }
    this.traceLog('\u691c\u51fa\u7d50\u679c::checkSideVoid::', checkSideVoidL, checkSideVoidR);
    var sideVoidSize = checkSideVoidL + (10 - checkSideVoidR);
    this._assistManager.resetMoveAssistPiece();
    this.initDisplayStatus();
    this.removeBall();
    this._assistManager.checkMatchConnect();
    this.resizeGameMaterialContainer(sideVoidSize, checkSideVoidL, checkSideVoidR);
    this.makeGameBoard(isLoad);
    this._currentThroughFlower = 0;
    this._currentMissionPieceCount = 0;
    this._currentMissionPieceDisplayCount = 0;
    this._additionaMissionlPoint = 0;
    var saveStr = this._mappingView.saveGame();
    this._main.saveBoardData = saveStr;
    this._isSetObject = false;
    if (!isLoad)
        this._main.showInfoTheme()
}
;
pigg.puzzle.view.GameView.prototype.resizeGameMaterialContainer = function(sideVoidSize, checkSideVoidL, checkSideVoidR) {
    sideVoidSize = typeof sideVoidSize !== 'undefined' ? sideVoidSize : 0;
    checkSideVoidL = typeof checkSideVoidL !== 'undefined' ? checkSideVoidL : 0;
    checkSideVoidR = typeof checkSideVoidR !== 'undefined' ? checkSideVoidR : 0;
    this.traceLog('_gameMaterialContainer.x::', this._gameMaterialContainer.x, sideVoidSize, checkSideVoidL, checkSideVoidR);
    this.traceLog('sideVoidSize::', sideVoidSize);
    if (sideVoidSize == 0)
        this._gameMaterialScale = .89;
    else if (sideVoidSize == 1)
        this._gameMaterialScale = .98;
    else if (sideVoidSize >= 2)
        this._gameMaterialScale = 1;
    var outLineSize = 8 * this._gameMaterialScale;
    this._gameMaterialContainer.scaleX = this._gameMaterialContainer.scaleY = this._gameMaterialScale;
    this._gameMaterialContainer.x = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X - checkSideVoidL * (pigg.puzzle.view.CommonView.BALL_SIZE * this._gameMaterialScale);
    this._gameMaterialContainer.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y - sideVoidSize * 30;
    if (sideVoidSize >= 3) {
        this._gameMaterialContainer.x += (sideVoidSize - 2) / 2 * (pigg.puzzle.view.CommonView.BALL_SIZE * this._gameMaterialScale);
        this._gameMaterialContainer.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y - 2 * 30
    } else if (sideVoidSize == 0) {
        this._gameMaterialContainer.x -= (2 - sideVoidSize) * 12;
        this._gameMaterialContainer.y -= (2 - sideVoidSize) * 14
    } else if (sideVoidSize == 1) {
        this._gameMaterialContainer.x -= 24;
        this._gameMaterialContainer.y -= 28
    }
    this._gameEffectContainer.scaleX = this._gameEffectContainer.scaleY = this._gameMaterialScale;
    this._gameEffectContainer.x = this._gameMaterialContainer.x;
    this._gameEffectContainer.y = this._gameMaterialContainer.y;
    this.traceLog('_gameMaterialContainer::width::', this._gameMaterialContainer.width);
    this.traceLog('_pieceContainer::width::', this._pieceContainer.width);
    this.traceLog('this::width::', this.width);
    this._crushTilemap.height = 900 / this._gameMaterialScale;
    this._crushTilemap.y = -this._gameEffectContainer.y / this._gameMaterialScale;
    this._currentMaterialViewX = this._gameMaterialContainer.x;
    this._currentMaterialViewY = this._gameMaterialContainer.y;
    this.traceLog('resizeGameMaterialContainer::X::Y::', this._currentMaterialViewX, this._currentMaterialViewY)
}
;
pigg.puzzle.view.GameView.prototype.testSpr;
pigg.puzzle.view.GameView.prototype.forceResetGame = function(animation) {
    animation = typeof animation !== 'undefined' ? animation : true
}
;
pigg.puzzle.view.GameView.prototype.startShuffle = function() {
    this._assistManager.startShuffle()
}
;
pigg.puzzle.view.GameView.prototype.startWarpAnime = function(play) {
    play = typeof play !== 'undefined' ? play : false
}
;
pigg.puzzle.view.GameView.prototype.startOrderArrowAnime = function(play) {
    play = typeof play !== 'undefined' ? play : false
}
;
pigg.puzzle.view.GameView.prototype.applyMemoryObj = function() {
    var mInfo;
    var len = 0
      , cnt = 0;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt2 = 0
      , len2 = 0;
    var movable = false;
    var type = 0;
    this._isSetObject = true;
    this._typeMapVec = org.apache.royale.utils.Language.Vector();
    this._loadMissopnPieceCount = 0;
    len = 6;
    this.traceLog('applyMemoryObj::', this._typeCount);
    for (cnt = 0; cnt < len; cnt++)
        this._typeMapVec[cnt] = org.apache.royale.utils.Language.Vector();
    this._appearOrderCount = [0, 0];
    this._currentJellyCount = 0;
    this._currentJellyDisplayCount = 0;
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._map[cntX][cntY];
            if (!mInfo.isFixVoid && !mInfo.isThroughVoid) {
                mInfo.isMovable = true;
                mInfo.isFix = false;
                mInfo.mc.isIcing = false;
                mInfo.isIcing = false;
                mInfo.iceLevel = 0;
                mInfo.hasJelly = 0;
                mInfo.hasWired = 0;
                mInfo.hasMarshmallow = -1;
                mInfo.hasMarshmallowType = 0;
                mInfo.assistFocusMapInfo = [[], [], [], []];
                mInfo.assistLevel = [0, 0, 0, 0];
                mInfo.testAssistMax = [-1, -1];
                mInfo.shuffleLeave = false;
                mInfo.isSetCrushRemove = false;
                mInfo.isOrder = -1;
                mInfo.isAcorn = -1;
                mInfo.ballCrushType = 0;
                if (mInfo.marshmallowObjct) {
                    this.removeTile(mInfo.marshmallowObjct);
                    mInfo.marshmallowObjct = null
                }
            }
            if (this._map[cntX][cntY].isVoid) {
                this.traceLog('map - 1', cntX, cntY, this._memoryMap[cntX][cntY].mappingType);
                if (this._memoryMap[cntX][cntY].mappingType != 99) {
                    this.traceLog('\u304a\u304b\u3057\u3044 ::', cntX, cntY);
                    this._memoryMap[cntX][cntY].mappingType = 99
                }
            }
            if (this._memoryMap[cntX][cntY].mappingType != 1)
                if (this._memoryMap[cntX][cntY].mappingType == 6) {
                    mInfo.isMovable = false;
                    mInfo.isFix = true;
                    mInfo.iceLevel = 1;
                    mInfo.isIcing = true;
                    mInfo.num = -1;
                    mInfo.ballCrushType = 20;
                    type = 20
                } else if (this._memoryMap[cntX][cntY].mappingType == 7) {
                    mInfo.isMovable = false;
                    mInfo.isFix = true;
                    mInfo.iceLevel = 2;
                    mInfo.isIcing = true;
                    mInfo.num = -1;
                    mInfo.ballCrushType = 21;
                    type = 21
                } else if (this._memoryMap[cntX][cntY].mappingType == 2) {
                    type = Number(this._memoryMap[cntX][cntY].mappingPieceType);
                    mInfo.num = type;
                    mInfo.ballType = type;
                    this.setCrushType(mInfo, 1, 1)
                } else if (this._memoryMap[cntX][cntY].mappingType == 3) {
                    type = Number(this._memoryMap[cntX][cntY].mappingPieceType);
                    mInfo.num = type;
                    mInfo.ballType = type;
                    this.setCrushType(mInfo, 2, 1)
                } else if (this._memoryMap[cntX][cntY].mappingType == 4) {
                    type = Number(this._memoryMap[cntX][cntY].mappingPieceType);
                    mInfo.num = type;
                    mInfo.ballType = type;
                    this.setCrushType(mInfo, 3, 1)
                } else if (this._memoryMap[cntX][cntY].mappingType == 5) {
                    type = 6;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    this.setCrushType(mInfo, 4, 1);
                    mInfo.num = 6
                } else if (this._memoryMap[cntX][cntY].mappingType == 10 || this._memoryMap[cntX][cntY].mappingType == 11) {
                    type = 10;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    mInfo.num = 10;
                    mInfo.isOrder = this._memoryMap[cntX][cntY].mappingType - 10;
                    this._appearOrderCount[mInfo.isOrder]++;
                    this.traceLog('\u73fe\u5728\u8868\u793a\u4e2d\u306e\u30d5\u30eb\u30fc\u30c4', mInfo.isOrder, this._appearOrderCount);
                    this._memoryMap[cntX][cntY].mappingType = 1;
                    this._memoryMap[cntX][cntY].isOrder = -1
                } else if (this._memoryMap[cntX][cntY].mappingType == 12) {
                    type = 12;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    mInfo.num = 12;
                    mInfo.isAcorn = 0;
                    mInfo.ballCrushType = 12;
                    if (this._acornVec[0] == null)
                        this._acornVec[0] = org.apache.royale.utils.Language.Vector();
                    this._acornVec[0].push(mInfo)
                } else if (this._memoryMap[cntX][cntY].mappingType == 13) {
                    type = 13;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    mInfo.num = 13;
                    mInfo.isAcorn = 1;
                    mInfo.ballCrushType = 13;
                    if (this._acornVec[1] == null)
                        this._acornVec[1] = org.apache.royale.utils.Language.Vector();
                    this._acornVec[1].push(mInfo)
                } else if (this._memoryMap[cntX][cntY].mappingType == 14) {
                    type = 14;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    mInfo.num = 14;
                    mInfo.isAcorn = 2;
                    mInfo.ballCrushType = 14;
                    if (this._acornVec[2] == null)
                        this._acornVec[2] = org.apache.royale.utils.Language.Vector();
                    this._acornVec[2].push(mInfo)
                } else if (this._memoryMap[cntX][cntY].mappingType == 15) {
                    type = 15;
                    mInfo.num = type;
                    mInfo.ballType = type;
                    mInfo.num = 15;
                    mInfo.isAcorn = 3;
                    mInfo.ballCrushType = 15;
                    if (this._acornVec[3] == null)
                        this._acornVec[3] = org.apache.royale.utils.Language.Vector();
                    this._acornVec[3].push(mInfo)
                } else {
                    if (this._memoryMap[cntX][cntY].mappingType == 99) {
                        mInfo.num = -1;
                        type = 99;
                        mInfo.ballType = -1;
                        if (!this._map[cntX][cntY].isFix && !this._map[cntX][cntY].isVoid)
                            this._stackRemoveVec.push(mInfo)
                    }
                }
            else {
                type = Number(this._memoryMap[cntX][cntY].mappingPieceType);
                mInfo.num = type;
                mInfo.ballType = type;
                this.setCrushType(mInfo, 0, 1);
                mInfo.hasMission = Number(this._memoryMap[cntX][cntY].hasMission);
                if (mInfo.hasMission != -1) {
                    this._loadMissopnPieceCount++;
                    this.traceLog('_loadMissopnPieceCount::', this._loadMissopnPieceCount)
                }
            }
            mInfo.mc.changeBallType(type, mInfo.isOrder, mInfo.hasMission);
            mInfo.hasJelly = Number(this._memoryMap[cntX][cntY].hasJelly);
            mInfo.hasWired = Number(this._memoryMap[cntX][cntY].hasWired);
            if (mInfo.hasJelly > 0) {
                if (mInfo.jellyObjct == null) {
                    mInfo.jellyObjct = new TileBase(this.HONEY_RECT[mInfo.hasJelly - 1]);
                    mInfo.jellyObjct.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                    mInfo.jellyObjct.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                    this._jellyTilemap.addTile(mInfo.jellyObjct)
                }
                this._currentJellyCount++;
                this._currentJellyDisplayCount++;
                if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY) {
                    mInfo.jellyObjct.updateId(this.HONEY_RECT[mInfo.hasJelly - 1]);
                    mInfo.jellyObjct.scaleX = mInfo.jellyObjct.scaleY = 1.1
                } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
                    mInfo.jellyObjct.updateId(this.BEARHIDE_RECT[mInfo.hasJelly - 1]);
                    mInfo.jellyObjct.scaleX = mInfo.jellyObjct.scaleY = 1.14
                }
                mInfo.jellyObjct.setOrigin()
            } else if (mInfo.jellyObjct)
                this.removeTile(mInfo.jellyObjct);
            if (mInfo.hasWired > 0) {
                if (mInfo.wiredObjct == null) {
                    mInfo.wiredObjct = new TileBase(this.WIRE_RECT);
                    mInfo.wiredObjct.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                    mInfo.wiredObjct.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
                }
                this._wiredTilemap.addTile(mInfo.wiredObjct);
                mInfo.isMovable = false
            } else if (mInfo.wiredObjct)
                this.removeTile(mInfo.wiredObjct);
            if (type >= 0 && type < this._typeMapVec.length) {
                this._typeMapVec[type].push(mInfo);
                this._normalPieceMapVec.push(mInfo)
            }
        }
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY)
        this._numberFontManager.makeNumber('gameThemeScore1', this._currentJellyCount);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
        if (this._memoryMarshmallowArray && this._memoryMarshmallowArray.length > 0) {
            len = this._memoryMarshmallowArray.length;
            for (cnt = 0; cnt < len; cnt++) {
                mInfo = this._map[this._memoryMarshmallowArray[cnt].mx][this._memoryMarshmallowArray[cnt].my];
                mInfo.hasMarshmallowType = Number(this._memoryMarshmallowArray[cnt].hasMarshmallowType);
                this.setHasMarshmallow(mInfo, mInfo.hasMarshmallowType, cnt)
            }
        }
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER)
        this._numberFontManager.makeNumber('gameThemeScore1', this._currentJellyCount);
    this._isSetObject = false
}
;
pigg.puzzle.view.GameView.prototype.checkLoadProgress = function() {
    this.traceLog('checkLoadProgress::', this._correctPieceArray[0][1], this._correctPieceArray[0][2], this._correctPieceArray[1][1], this._correctPieceArray[1][2]);
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_PIECE) {
        if (this._correctPieceArray[0][1] == this._correctPieceArray[0][2]) {
            this._numberFontManager.removeNumber('gameThemeScore1');
            this._themeCheckArray[0].visible = true
        } else {
            this._numberFontManager.makeNumber('gameThemeScore1', this._correctPieceArray[0][1] - this._correctPieceArray[0][2]);
            this._themeCheckArray[0].visible = false
        }
        if (this._correctPieceArray[1][1] > 0)
            if (this._correctPieceArray[1][1] == this._correctPieceArray[1][2]) {
                this._numberFontManager.removeNumber('gameThemeScore2');
                this._themeCheckArray[1].visible = true
            } else {
                this._numberFontManager.makeNumber('gameThemeScore2', this._correctPieceArray[1][1] - this._correctPieceArray[1][2]);
                this._themeCheckArray[1].visible = false
            }
        if (this._correctPieceArray[2][1] > 0)
            if (this._correctPieceArray[2][1] == this._correctPieceArray[2][2]) {
                this._numberFontManager.removeNumber('gameThemeScore3');
                this._themeCheckArray[2].visible = true
            } else {
                this._numberFontManager.makeNumber('gameThemeScore3', this._correctPieceArray[2][1] - this._correctPieceArray[2][2]);
                this._themeCheckArray[2].visible = false
            }
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER) {
        if (this._totalOrderCount[0] <= this._currentOrderDisplayCount[0]) {
            this._numberFontManager.removeNumber('gameThemeScore1');
            this._themeCheckArray[0].visible = true
        } else
            this._numberFontManager.makeNumber('gameThemeScore1', this._totalOrderCount[0] - this._currentOrderDisplayCount[0]);
        this.traceLog('\u3042\u3042\u3042\u3042\uff1a\uff1a', this._totalOrderCount[1]);
        if (this._totalOrderCount[1] > 0)
            if (this._totalOrderCount[1] <= this._currentOrderDisplayCount[1]) {
                this._numberFontManager.removeNumber('gameThemeScore2');
                this._themeCheckArray[1].visible = true
            } else
                this._numberFontManager.makeNumber('gameThemeScore2', this._totalOrderCount[1] - this._currentOrderDisplayCount[1])
    }
}
;
pigg.puzzle.view.GameView.prototype._gameBoardSpr;
pigg.puzzle.view.GameView.prototype.makeGameBoard = function(isLoad) {
    var self = this;
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    var __localFn0__ = function() {
        self.traceLog('\u30d7\u30ea\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7684\u306a\u3084\u3064\u7d42\u4e86', isLoad);
        self._gamePieceMask.visible = false;
        self._gamePieceMask.scaleX = self._gamePieceMask.scaleY = 0;
        self._pieceContainer.mask = null;
        if (!isLoad) {
            self._gameMaterialContainer.visible = false;
            self._gameMaterialContainer.x = posX
        }
        self._throughObjectManager.updateMaterial()
    };
    var outLineSize = 8;
    this.traceLog('makeGameBoard');
    this._gameBoard.cacheAsBitmap = false;
    this._boardBackGroundManager.makeGrid(this._map);
    if (this._gameBoardSpr)
        this.removeFromParent(this._gameBoardSpr);
    this._gameBoardSpr = this._boardBackGroundManager.mainSpr;
    this._gameBoardSpr.x = -outLineSize;
    this._gameBoardSpr.y = -outLineSize;
    this._gameBoard.addChild(this._gameBoardSpr);
    this._gameBoard.cacheAsBitmap = true;
    this._gamePieceMask.cacheAsBitmap = false;
    while (this._gamePieceMask.numChildren > 0)
        this._gamePieceMask.removeChildAt(0);
    this._gamePieceMask.addChild(this._boardBackGroundManager.maskShape);
    this._gamePieceMask.x = pigg.puzzle.view.CommonView.MATERIAL_VIEW_X;
    this._gamePieceMask.y = pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y;
    this._gamePieceMask.cacheAsBitmap = true;
    this.traceLog('\u30d7\u30ea\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7684\u306a\u3084\u3064', isLoad);
    this._gamePieceMask.visible = true;
    this._gamePieceMask.scaleX = this._gamePieceMask.scaleY = this._gameMaterialContainer.scaleX;
    this._gamePieceMask.x = this._gameMaterialContainer.x;
    this._gamePieceMask.y = this._gameMaterialContainer.y;
    this._pieceContainer.mask = this._gamePieceMask;
    this.visible = true;
    this._gameMaterialContainer.visible = true;
    var posX = this._gameMaterialContainer.x;
    if (this._gameBoardItemMaskSpr == null)
        this._gameBoardItemMaskSpr = new openfl.display.Sprite;
    this.removeFromParent(this._gameBoardItemMaskSpr);
    this._gameBoardItemMaskSpr = this._boardBackGroundManager.bgBlurMaskSpr;
    this._gameBoardItemMaskSpr.x = this._gameMaterialContainer.x - outLineSize * this._gameMaterialScale;
    this._gameBoardItemMaskSpr.y = this._gameMaterialContainer.y - outLineSize * this._gameMaterialScale;
    this._gameBoardItemMaskSpr.scaleX = this._gameBoardItemMaskSpr.scaleY = this._gameMaterialScale;
    this._gameBoardItemCoverInner.addChild(this._gameBoardItemMaskSpr);
    if (!isLoad)
        this._gameMaterialContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH;
    com.greensock.TweenMax.to(this._gamePieceMask, 1E-4, {
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.GameView.prototype.makeTypeArray = function() {
    var cnt = 0
      , len = 0;
    var arr = [];
    len = this._typeCount;
    for (cnt = 0; cnt < len; cnt++)
        arr.push(cnt);
    return arr
}
;
pigg.puzzle.view.GameView.prototype.hideGameView = function(animation) {
    var self = this;
    animation = typeof animation !== 'undefined' ? animation : true;
    var __localFn0__ = function() {
        self._gameEffectContainer.visible = false;
        self._gameMaterialContainer.visible = false;
        self._gameMaterialContainer.cacheAsBitmap = false;
        self._menuTopContainer.cacheAsBitmap = false;
        self._menuBottomContainer.cacheAsBitmap = false
    };
    this.traceLog('hideGameView:::_isShow \x3d false;');
    this._isShow = false;
    this._main.isShowGame = false;
    this._gameMaterialContainer.cacheAsBitmap = true;
    this._menuTopContainer.cacheAsBitmap = true;
    this._menuBottomContainer.cacheAsBitmap = true;
    com.greensock.TweenMax.to(this._menuTopContainer, .8, {
        y: -200,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._menuBottomContainer, .8, {
        y: pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y + 200,
        ease: com.greensock.easing.Cubic.easeOut
    });
    com.greensock.TweenMax.to(this._gameMaterialContainer, .5, {
        x: this._currentMaterialViewX - 640,
        ease: com.greensock.easing.Back.easeIn
    })
}
;
pigg.puzzle.view.GameView.prototype.initDisplayStatus = function() {
    this.traceLog('initDisplayStatus');
    this._currentJellyCount = this._totalJellyCount;
    this._currentJellyDisplayCount = this._totalJellyCount;
    this._currentOrderCount = [0, 0];
    this._currentMoveTimes = 0;
    this._currentGameScore = 0;
    this._currentDisplayScore = 0;
    this._currentMarshmallowCount = 0;
    this._currentMarshmallowDisplayCount = 0;
    this._isGameCleared = false;
    this._playTutorialPage = 0;
    this._playTutorialBalloon = 0;
    if (this._main.currentThemeType == -1)
        return;
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_PIECE)
        ;
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY)
        this._numberFontManager.makeNumber('gameThemeScore1', this._currentJellyCount);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER) {
        this._numberFontManager.makeNumber('gameThemeScore1', this._totalOrderCount[0] - this._currentOrderCount[0]);
        if (this._totalOrderCount[1] > 0)
            this._numberFontManager.makeNumber('gameThemeScore2', this._totalOrderCount[1] - this._currentOrderCount[1])
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE)
        ;
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR)
        this._numberFontManager.makeNumber('gameThemeScore1', this._totalMarshmallowCount - this._currentMarshmallowCount);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER)
        this._numberFontManager.makeNumber('gameThemeScore1', this._currentFlowerCount);
    this._numberFontManager.makeNumber('moveTimes', this._clearMoveTimes);
    this._numberFontManager.makeNumber('gameScore', this._currentGameScore);
    this._numberFontManager.makeNumber('gamePointScore', 0);
    this.adjustPointIcon();
    this._themeCheckArray[0].visible = false;
    this._themeCheckArray[1].visible = false;
    this._themeCheckArray[2].visible = false
}
;
pigg.puzzle.view.GameView.prototype.initMemoryMap = function() {
    var cnt = 0
      , len = 0
      , cntY = 0
      , lenY = 0
      , cntX = 0
      , lenX = 0;
    var mInfo;
    this._memoryMap = org.apache.royale.utils.Language.Vector();
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++) {
        this._memoryMap[cntX] = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y, 'MapInfo');
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++)
            this._memoryMap[cntX][cntY] = new pigg.puzzle.data.MapInfo
    }
}
;
pigg.puzzle.view.GameView.prototype.initApplyMap = function() {}
;
pigg.puzzle.view.GameView.prototype.setHasMarshmallow = function(mInfo, type, index) {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    this.traceLog('setHasMarshmallow::', mInfo.hasMarshmallow, mInfo.hasMarshmallowType);
    if (mInfo.hasMarshmallowType == 0)
        return;
    if (mInfo.marshmallowObjct == null) {
        mInfo.marshmallowObjct = new TileBase(this.MARSHMALLOW_RECT[(type - 1) % 3]);
        var ln = -.08;
        var ct = new openfl.geom.ColorTransform;
        ct.redMultiplier = 1 + ln;
        ct.greenMultiplier = 1 + ln;
        ct.blueMultiplier = 1 + ln;
        ct.redOffset = 0;
        ct.greenOffset = 0;
        ct.blueOffset = 0
    } else
        mInfo.marshmallowObjct.updateId(this.MARSHMALLOW_RECT[(type - 1) % 3]);
    mInfo.marshmallowObjct.colorTransform = ct;
    mInfo.marshmallowObjct.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    mInfo.marshmallowObjct.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    this._marshmallowTilemap.addTile(mInfo.marshmallowObjct);
    this._hasMarshmallowArray.push([mInfo, 0]);
    if (type < 4) {
        lenX = mInfo.mx + 1 + (type - 1);
        lenY = mInfo.my + 2 + (type - 1) * 2
    } else {
        lenX = mInfo.mx + 2 + (type - 1 - 3) * 2;
        lenY = mInfo.my + 1 + (type - 1 - 3);
        mInfo.marshmallowObjct.rotation = -90;
        mInfo.marshmallowObjct.y += (type - 1) % 3 * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE
    }
    this.traceLog('setHasMarshmallow::', mInfo.mx, mInfo.my, lenX, lenY);
    for (cntX = mInfo.mx; cntX < lenX; cntX++)
        for (cntY = mInfo.my; cntY < lenY; cntY++)
            if (this._map[cntX][cntY].hasJelly != 0) {
                this._map[cntX][cntY].hasMarshmallow = index;
                this.traceLog('\u30d9\u30a2\u30bb\u30c3\u30c8::', cntX, cntY, index);
                this._hasMarshmallowArray[index][1]++
            }
    this.traceLog('_hasMarshmallowArray::', this._hasMarshmallowArray)
}
;
pigg.puzzle.view.GameView.prototype.applyImportTheme = function(allImpStr, isLoad) {
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    var impStr = [];
    var impPieceStr = [];
    var impJellyStr = [];
    var impWiredStr = [];
    var impMarshmallowStr = [];
    var impWarpStr = [];
    var impRatioStr = [];
    var impThemeStr = [];
    this._mappingView.applyImportTheme(allImpStr);
    this._applyMarshmallowArray = [];
    impStr = allImpStr[0].split(',');
    impPieceStr = allImpStr[1].split(',');
    this.traceLog('impPieceStr::', impPieceStr);
    impJellyStr = allImpStr[2].split(',');
    impWiredStr = allImpStr[3].split(',');
    impMarshmallowStr = allImpStr[4].split(',');
    if (allImpStr.length == 6)
        impThemeStr = allImpStr[5].split(',');
    else if (allImpStr.length == 7) {
        impWarpStr = allImpStr[5].split(',');
        impThemeStr = allImpStr[6].split(',');
        this.traceLog('\u30ef\u30fc\u30d7\u914d\u5217\u30a2\u30ea::', impWarpStr)
    } else if (allImpStr.length == 8) {
        impWarpStr = allImpStr[5].split(',');
        impRatioStr = allImpStr[6].split(',');
        impThemeStr = allImpStr[7].split(',');
        this.traceLog('\u30ef\u30fc\u30d7\u914d\u5217\u30fbRatio\u914d\u5217\u30a2\u30ea::', impWarpStr)
    }
    this._main.currentThemeType = Number(impThemeStr[0]);
    this._main.clearMoveTimes = Number(impThemeStr[1]);
    this._clearMoveTimes = Number(impThemeStr[1]);
    this._pieceCountType = Number(impThemeStr[2]);
    this.traceLog('GameView::applyImportTheme::_clearMoveTimes:::', this._clearMoveTimes);
    if (this._main.currentThemeType == 0) {
        this._correctPieceArray[0][0] = org.apache.royale.utils.Language._int(impThemeStr[3]);
        this._correctPieceArray[0][1] = org.apache.royale.utils.Language._int(impThemeStr[4]);
        this._correctPieceArray[0][2] = org.apache.royale.utils.Language._int(impThemeStr[5]);
        this._correctPieceArray[0][3] = org.apache.royale.utils.Language._int(impThemeStr[5]);
        this._correctPieceArray[1][0] = org.apache.royale.utils.Language._int(impThemeStr[6]);
        this._correctPieceArray[1][1] = org.apache.royale.utils.Language._int(impThemeStr[7]);
        this._correctPieceArray[1][2] = org.apache.royale.utils.Language._int(impThemeStr[8]);
        this._correctPieceArray[1][3] = org.apache.royale.utils.Language._int(impThemeStr[8]);
        this._correctPieceArray[2][0] = org.apache.royale.utils.Language._int(impThemeStr[9]);
        this._correctPieceArray[2][1] = org.apache.royale.utils.Language._int(impThemeStr[10]);
        this._correctPieceArray[2][2] = org.apache.royale.utils.Language._int(impThemeStr[11]);
        this._correctPieceArray[2][3] = org.apache.royale.utils.Language._int(impThemeStr[11])
    } else if (this._main.currentThemeType == 2) {
        this._totalOrderCount[0] = org.apache.royale.utils.Language._int(impThemeStr[3]);
        this._totalOrderCount[1] = org.apache.royale.utils.Language._int(impThemeStr[4]);
        this._preOrderCount[0] = org.apache.royale.utils.Language._int(impThemeStr[5]);
        this._preOrderCount[1] = org.apache.royale.utils.Language._int(impThemeStr[6]);
        this._afterOrderCount[0] = org.apache.royale.utils.Language._int(impThemeStr[7]);
        this._afterOrderCount[1] = org.apache.royale.utils.Language._int(impThemeStr[8])
    } else if (this._main.currentThemeType == 3) {
        this._goalScore = org.apache.royale.utils.Language._int(impThemeStr[3]);
        this.traceLog('applyImportTheme:::::\u76ee\u6a19\u30b9\u30b3\u30a2::', this._goalScore)
    } else if (this._main.currentThemeType == 5) {
        this._totalFlowerCount = org.apache.royale.utils.Language._int(impThemeStr[3]);
        this.traceLog('applyImportTheme:::::\u82b1::', this._totalFlowerCount)
    }
    if (this._main.currentThemeType != -1)
        this._mappingView.changeTheme();
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var cnt = 0;
    var mInfo;
    var existSilver = false;
    var existGold = false;
    this.traceLog('_applyMap::', this._applyMap.length);
    this.traceLog('_applyMap::', this._applyMap[0]);
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._applyMap[cntX][cntY];
            mInfo.mx = cntX;
            mInfo.my = cntY;
            mInfo.mappingType = Number(impStr[cnt]);
            mInfo.mappingPieceType = Number(impPieceStr[cnt]);
            mInfo.hasJelly = Number(impJellyStr[cnt]);
            mInfo.hasWired = Number(impWiredStr[cnt]);
            mInfo.hasMarshmallowType = Number(impMarshmallowStr[cnt]);
            if (impWarpStr.length > 0)
                mInfo.warpIndex = Number(impWarpStr[cnt]);
            if (mInfo.warpArrow)
                this.removeTile(mInfo.warpArrow);
            if (mInfo.mappingType == 1 && mInfo.mappingPieceType != 0)
                ;if (mInfo.marshmallowObjct) {
                this.removeTile(mInfo.marshmallowObjct);
                mInfo.marshmallowObjct = null
            }
            if (mInfo.hasJelly > 0)
                ;if (mInfo.hasWired > 0)
                ;if (mInfo.hasMarshmallowType != 0) {
                this.traceLog('_applyMarshmallowArray::', mInfo.mx, mInfo.my);
                this._applyMarshmallowArray.push(mInfo);
                if (mInfo.marshmallowObjct == null)
                    ;
            }
            if (mInfo.mappingType == 13)
                existSilver = true;
            else if (mInfo.mappingType == 14)
                existGold = true;
            cnt++
        }
    this._main.existThemeSilver = existSilver;
    this._main.existThemeGold = existGold;
    if (impRatioStr.length > 0) {
        var len = 4;
        for (cnt = 0; cnt < len; cnt++) {
            this._acornPieceRatio[cnt] = impRatioStr[cnt * 2];
            this._acornPieceLimit[cnt] = impRatioStr[cnt * 2 + 1]
        }
    } else {
        this._acornPieceRatio = org.apache.royale.utils.Language.Vector(4, 'int');
        this._acornPieceLimit = org.apache.royale.utils.Language.Vector(4, 'int');
        this._acornPiecePreAdd = org.apache.royale.utils.Language.Vector(4, 'int');
        this._acornPieceBufferLimit = org.apache.royale.utils.Language.Vector(4, 'int');
        this._acornPieceBufferCurrent = org.apache.royale.utils.Language.Vector(4, 'int')
    }
}
;
pigg.puzzle.view.GameView.prototype.gameStatusInit = function() {
    this._comboCount = 0;
    if (this._addScoreVec && this._addScoreVec.length > 0)
        while (this._addScoreVec.length == 0) {
            this.removeTile(this._addScoreVec[0]);
            this._addScoreVec[0] = null;
            this._addScoreVec.shift()
        }
}
;
pigg.puzzle.view.GameView.prototype.mapInfoInit = function(mapInfo) {
    mapInfo.crushType = 0;
    mapInfo.checkVertical = 0;
    mapInfo.checkHorizontal = 0;
    mapInfo.ballCrushType = 0;
    mapInfo.mc.init()
}
;
pigg.puzzle.view.GameView.prototype.addScore = function(type, count, isCheck, dispMode) {
    isCheck = typeof isCheck !== 'undefined' ? isCheck : false;
    dispMode = typeof dispMode !== 'undefined' ? dispMode : 0;
    var score = 0;
    if (isCheck) {
        if (count == 2)
            score = pigg.puzzle.view.CommonView.POINT_MATCH_3;
        else if (count == 3)
            score = pigg.puzzle.view.CommonView.POINT_MATCH_4;
        else if (count >= 4)
            score = pigg.puzzle.view.CommonView.POINT_MATCH_5;
        if (this._comboCount < 10)
            score += score * this._comboCount;
        else
            score += score * 10
    } else
        score = count;
    if (isCheck)
        return score;
    if (dispMode != 2) {
        this._currentGameScore += score;
        this._additionalPoint += score
    }
    if (dispMode != 1) {
        this._numberFontManager.makeNumber('gameScore', this._currentGameScore);
        this.adjustPointIcon();
        this.tweenGameScore();
        if (this._main.currentUsePotion != -1)
            this._numberFontManager.makeNumber('gamePotionScore', this._currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification)
    }
    return score
}
;
pigg.puzzle.view.GameView.prototype._tweenGameFlg = false;
pigg.puzzle.view.GameView.prototype.tweenGameScore = function(tweenType) {
    var self = this;
    tweenType = typeof tweenType !== 'undefined' ? tweenType : 0;
    var __localFn0__ = function() {
        self._tweenGameFlg = false
    };
    if (this._main.isLowSpecMode)
        return;
    if (this._tweenGameFlg)
        return;
    if (this._isAuto != 2) {
        this._tweenGameFlg = true;
        com.greensock.TweenMax.to(this, .3, {
            onComplete: __localFn0__
        })
    }
    var scl = .8;
    com.greensock.TweenMax.killTweensOf(this._gameScoreTilemap);
    this._gameScoreTilemap.scaleX = this._gameScoreTilemap.scaleY = scl;
    this._gameScoreTilemap.x = 70 * (1 - scl);
    this._gameScoreTilemap.y = 35 * (1 - scl);
    com.greensock.TweenMax.to(this._gameScoreTilemap, .8, {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.5, .3)
    });
    if (this._main.currentUsePotion == -1)
        return;
    if (this._gamePotionScoreTilemap == null)
        return;
    scl = .8;
    com.greensock.TweenMax.killTweensOf(this._gamePotionScoreTilemap);
    this._gamePotionScoreTilemap.scaleX = this._gamePotionScoreTilemap.scaleY = scl;
    this._gamePotionScoreTilemap.x = 80 * (1 - scl);
    this._gamePotionScoreTilemap.y = 88 * (1 - scl);
    com.greensock.TweenMax.to(this._gamePotionScoreTilemap, .8, {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.5, .3)
    })
}
;
pigg.puzzle.view.GameView.prototype.updateTimes = function(reset, isContinue, onlyDisplay) {
    reset = typeof reset !== 'undefined' ? reset : false;
    isContinue = typeof isContinue !== 'undefined' ? isContinue : false;
    onlyDisplay = typeof onlyDisplay !== 'undefined' ? onlyDisplay : false;
    this.traceLog('updateTimes::', reset, isContinue, onlyDisplay);
    if (onlyDisplay) {
        this.traceLog('updateTimes::onlyDisplay', this._main.userData.boardRemainingMoveCount, this._clearMoveTimes);
        this._currentMoveTimes = this._clearMoveTimes - this._main.userData.boardRemainingMoveCount;
        this._numberFontManager.makeNumber('moveTimes', this._clearMoveTimes - this._currentMoveTimes);
        return
    }
    if (reset) {
        this._currentMoveTimes = 0;
        if (isContinue)
            this._clearMoveTimes = this._continueAddTimes;
        return
    } else
        this._currentMoveTimes++;
    this._numberFontManager.makeNumber('moveTimes', this._clearMoveTimes - this._currentMoveTimes);
    this.tweenGameMoveTimes();
    this.traceLog('updateTimes::_currentMoveTimes::\u624b\u6570\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8', this._currentMoveTimes);
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
        this.checkUpdateTimesTutorial();
    if (!isContinue)
        if (this._clearMoveTimes - this._currentMoveTimes <= 5 && !this._isGameCleared && this._main.userTutorialStatus > pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
            this.startMovetimesAlert(true)
}
;
pigg.puzzle.view.GameView.prototype.tweenGameMoveTimes = function(tweenType) {
    tweenType = typeof tweenType !== 'undefined' ? tweenType : 0;
    if (this._main.isLowSpecMode)
        return;
    var scl = .7;
    com.greensock.TweenMax.killTweensOf(this._gameMoveTimesTilemap);
    this._gameMoveTimesTilemap.scaleX = this._gameMoveTimesTilemap.scaleY = scl;
    this._gameMoveTimesTilemap.x = 50 * (1 - scl);
    this._gameMoveTimesTilemap.y = 35 * (1 - scl);
    com.greensock.TweenMax.to(this._gameMoveTimesTilemap, .8, {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1.5, .3)
    });
    if (tweenType == 1)
        this._themeParticleView.makeContinueMoveTimesParticle()
}
;
pigg.puzzle.view.GameView.prototype.checkShowTutorial = function() {
    this.traceLog('checkShowTutorial::', this._isGameCleared, this._cancelTutorial, this._main.userTutorialStatus, pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT, this._main.userTutorialStatus2nd, pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND, this._main.userTutorialStatusTemp);
    if (this._isGameCleared)
        return;
    if (this._cancelTutorial)
        return;
    if (this._main.userTutorialStatus > pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT && this._main.userTutorialStatus2nd > pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND)
        return;
    if (this._main.userTutorialStatus == 1 || this._main.userTutorialStatus == 5) {
        if (this._currentMoveTimes >= 2) {
            this._cancelTutorial = true;
            return
        }
    } else if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
        if (this._currentMoveTimes >= 4) {
            this._cancelTutorial = true;
            return
        }
    } else
        ;this.traceLog('checkShowTutorial::', this._currentMoveTimes);
    this._playTutorialPage = this._currentMoveTimes;
    this._playTutorialBalloon = this._currentMoveTimes * 2;
    this.traceLog('checkShowTutorial::::', this._main.userTutorialStatus, this._playTutorialPage, this._playTutorialBalloon, this._main.userData.boardRemainingMoveCount, this._clearMoveTimes);
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
        if (this._main.userData.boardRemainingMoveCount == this._clearMoveTimes)
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true);
        else
            this._cancelTutorial = true;
    else if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
        this.traceLog('\u4e00\u624b\u3082\u9032\u3081\u3066\u306a\u304b\u3063\u305f\u3089\u304a\u984c\u8aac\u660e');
        if (this._main.userData.boardRemainingMoveCount == this._clearMoveTimes)
            this._main.showThemeTutorial();
        else
            this._cancelTutorial = true
    } else if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT && this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
        this.traceLog('\u30d9\u30a2\u304c\u306f\u3058\u3081\u3066\u3060\u3063\u305f\u306e\u3067\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u8868\u793a::\u9032\u6357\u3092\u3059\u3059\u3081\u308b');
        if (this._main.userData.boardRemainingMoveCount == this._clearMoveTimes)
            this._main.showThemeTutorial();
        this._main.userTutorialStatus++;
        this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
    } else if (this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1 || this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND && this._main.currentUsePotion == -1) {
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2ND\u3000:: \u4e00\u624b\u3082\u9032\u3081\u3066\u306a\u304b\u3063\u305f\u3089\u304a\u984c\u8aac\u660e', this._main.userTutorialStatus2nd, pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1);
        if (this._main.userData.boardRemainingMoveCount == this._clearMoveTimes)
            this._main.showThemeTutorial();
        else
            this._cancelTutorial = true
    } else if (this._main.userTutorialStatusTemp < 3) {
        this.traceLog('_main.existMission::', this._main.existMission);
        if (this._main.existMission) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30df\u30c3\u30b7\u30e7\u30f3\u3000:: \u4e00\u624b\u3082\u9032\u3081\u3066\u306a\u304b\u3063\u305f\u3089\u304a\u984c\u8aac\u660e', this._main.userTutorialStatusTemp);
            if (this._main.userData.boardRemainingMoveCount == this._clearMoveTimes) {
                this._main.existMissionMessage = true;
                this._main.showThemeTutorial()
            } else
                this._cancelTutorial = true
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.checkUpdateTimesTutorial = function() {
    this.traceLog('checkUpdateTimesTutorial::', this._main.userTutorialStatus, this._playTutorialPage, this._playTutorialBalloon, this._cancelTutorial);
    if (this._isGameCleared)
        return;
    if (this._cancelTutorial)
        return;
    if (this._main.userTutorialStatus == 1)
        if (this._playTutorialPage < 2) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false)
        } else {
            if (this._playTutorialPage == 2)
                this._main.hideGameTutorial()
        }
    else if (this._main.userTutorialStatus == 2)
        if (this._playTutorialPage < 4) {
            if (this._playTutorialBalloon >= 7)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false)
        } else {
            if (this._playTutorialPage == 4)
                this._main.hideGameTutorial()
        }
    else if (this._main.userTutorialStatus == 3)
        if (this._playTutorialPage < 4) {
            if (this._playTutorialBalloon >= 7)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false)
        } else {
            if (this._playTutorialPage == 4)
                this._main.hideGameTutorial()
        }
    else if (this._main.userTutorialStatus == 4)
        if (this._playTutorialPage < 2) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false)
        } else {
            if (this._playTutorialPage == 2)
                this._main.hideGameTutorial()
        }
    else if (this._main.userTutorialStatus == 5)
        if (this._playTutorialPage < 2) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false)
        } else if (this._playTutorialPage == 2)
            this._main.hideGameTutorial()
}
;
pigg.puzzle.view.GameView.prototype.checkOnProgressTutorial = function() {
    this.traceLog('checkOnProgressTutorial:::', this._main.userTutorialStatus, this._playTutorialPage, this._playTutorialBalloon, this._cancelTutorial);
    if (this._isGameCleared)
        return;
    if (this._cancelTutorial)
        return;
    if (this._playTutorialBalloon == 0)
        return;
    if (this._playTutorialBalloon % 2 == 0)
        return;
    if (this._main.userTutorialStatus == 1)
        if (this._playTutorialPage == 0) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialPage++;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true)
        } else {
            if (this._playTutorialPage == 1) {
                if (this._playTutorialBalloon >= 4)
                    return;
                this._playTutorialBalloon++;
                this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false);
                this._playTutorialPage++
            }
        }
    else if (this._main.userTutorialStatus == 2)
        if (this._playTutorialPage < 3) {
            if (this._playTutorialBalloon > 7)
                return;
            this._playTutorialPage++;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true)
        } else {
            if (this._playTutorialPage == 3)
                this._playTutorialPage++
        }
    else if (this._main.userTutorialStatus == 3)
        if (this._playTutorialPage < 3) {
            if (this._playTutorialBalloon > 7)
                return;
            this._playTutorialPage++;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true)
        } else {
            if (this._playTutorialPage == 3)
                this._playTutorialPage++
        }
    else if (this._main.userTutorialStatus == 4)
        if (this._playTutorialPage == 0) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialPage++;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true)
        } else {
            if (this._playTutorialPage == 1) {
                if (this._playTutorialBalloon >= 4)
                    return;
                this._playTutorialBalloon++;
                this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false);
                this._playTutorialPage++
            }
        }
    else if (this._main.userTutorialStatus == 5)
        if (this._playTutorialPage == 0) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialPage++;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, true)
        } else if (this._playTutorialPage == 1) {
            if (this._playTutorialBalloon >= 4)
                return;
            this._playTutorialBalloon++;
            this._main.showGameTutorial(this._playTutorialPage, this._playTutorialBalloon, false);
            this._playTutorialPage++
        }
}
;
pigg.puzzle.view.GameView.prototype.showGameTelop = function(type) {
    var self = this;
    type = typeof type !== 'undefined' ? type : 1;
    var __localFn0__ = function() {
        self.hideGameTelop()
    };
    var __localFn1__ = function() {
        com.greensock.TweenMax.to(self._gameTelopTile, .5, {
            delay: .5,
            scaleX: 3,
            scaleY: 3,
            alpha: 0,
            ease: com.greensock.easing.Expo.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.hideGameTelop, self, 'hideGameTelop')
        })
    };
    var __localFn2__ = function() {};
    var __localFn3__ = function() {
        if (type == 4) {
            self._main.spineAnimal.playAction('sad');
            if (!self._main.isEventComplete)
                self._main.spineHukurouQuarter.playAction('sad')
        } else {
            self._main.spineAnimal.playAction('joy');
            if (!self._main.isEventComplete)
                self._main.spineHukurouQuarter.playAction('joy')
        }
        com.greensock.TweenMax.to(self._gameTelopAnimalContainer, .2, {
            delay: .9,
            x: 840,
            ease: com.greensock.easing.Cubic.easeIn
        })
    };
    var __localFn4__ = function() {
        com.greensock.TweenMax.to(self._gameTelopHoContainer, .2, {
            delay: .9,
            x: -200,
            ease: com.greensock.easing.Cubic.easeIn
        })
    };
    var __localFn5__ = function() {
        var __localFn0__ = function() {
            self.traceLog('TweenMax.to::hideGameTelop');
            self.hideGameTelop(true);
            self.telopEnd()
        };
        com.greensock.TweenMax.to(self._gameTelopTile, .4, {
            delay: 1.1,
            y: -150,
            ease: com.greensock.easing.Back.easeIn,
            onComplete: __localFn0__
        })
    };
    if (this._gameTelopContainer.parent == null)
        this._gameInfoContainer.addChild(this._gameTelopContainer);
    com.greensock.TweenMax.killTweensOf(this._gameTelopTile);
    this._gameTelopTile.x = 0;
    if (type != 6)
        this._gameTelopTile.y = -150;
    this._gameTelopTile.originX = 0;
    this._gameTelopTile.originY = 0;
    this._gameTelopTile.alpha = 1;
    this._gameTelopTile.scaleX = 1;
    this._gameTelopTile.scaleY = 1;
    if (type == 1) {
        this._gameTelopAnimalContainer.x = 840;
        this._main.addSpine(this._main.spineAnimal, this._gameTelopAnimalContainer);
        this._main.spineAnimal.playAction('joy_fix', 1);
        if (!this._main.isEventComplete) {
            this._main.addSpine(this._main.spineHukurouQuarter, this._gameTelopHoContainer);
            this._main.spineHukurouQuarter.playAction('joy_fix', 1)
        }
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_THEME[this._main.currentThemeType])
    } else if (type == 2) {
        this._gameTelopAnimalContainer.x = 840;
        this._main.addSpine(this._main.spineAnimal, this._gameTelopAnimalContainer);
        this._main.spineAnimal.playAction('joy_fix', 1);
        if (!this._main.isEventComplete) {
            this._main.addSpine(this._main.spineHukurouQuarter, this._gameTelopHoContainer);
            this._main.spineHukurouQuarter.playAction('joy_fix', 1)
        }
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_RESULT[0]);
        this._main.playSoundBGM(pigg.puzzle.data.CommonData.BGM_CLEAR_INTRO, 0);
        com.greensock.TweenMax.to(this._bgmTweenSpr, 3.2, {
            onComplete: org.apache.royale.utils.Language.closure(this._main.playSoundBGM, this._main, 'playSoundBGM'),
            onCompleteParams: [pigg.puzzle.data.CommonData.BGM_CLEAR_LOOP]
        })
    } else if (type == 4) {
        this._gameTelopAnimalContainer.x = 840;
        this._main.addSpine(this._main.spineAnimal, this._gameTelopAnimalContainer);
        this._main.spineAnimal.playAction('sad_fix', 1);
        if (!this._main.isEventComplete) {
            this._main.addSpine(this._main.spineHukurouQuarter, this._gameTelopHoContainer);
            this._main.spineHukurouQuarter.playAction('sad_fix', 1)
        }
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_RESULT[1]);
        this._main.playSoundBGM(pigg.puzzle.data.CommonData.BGM_FAILED_INTRO, 0);
        com.greensock.TweenMax.to(this._bgmTweenSpr, 3.3, {
            onComplete: org.apache.royale.utils.Language.closure(this._main.playSoundBGM, this._main, 'playSoundBGM'),
            onCompleteParams: [pigg.puzzle.data.CommonData.BGM_FAILED_LOOP]
        })
    } else if (type == 5) {
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_RESULT[2]);
        com.greensock.TweenMax.to(this._gameTelopTile, .4, {
            y: pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2 - 50,
            ease: com.greensock.easing.Back.easeOut
        })
    } else if (type == 6)
        com.greensock.TweenMax.to(this._gameTelopTile, .4, {
            y: -150,
            ease: com.greensock.easing.Back.easeIn,
            onComplete: __localFn0__
        });
    else if (type == 10) {
        this.showComboPraise(true);
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_FINISH[0]);
        this._gameTelopTile.originX = 450 / 2;
        this._gameTelopTile.originY = 134 / 2;
        this._gameTelopTile.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        this._gameTelopTile.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2 - 25;
        this._gameTelopTile.scaleX = .3;
        this._gameTelopTile.scaleY = .3;
        com.greensock.TweenMax.killTweensOf(this._gameTelopTile);
        com.greensock.TweenMax.to(this._gameTelopTile, .8, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.3, .25),
            onComplete: __localFn1__
        })
    } else if (type == 11) {
        this._gameTelopTile.updateId(this.RECT_GAME_TELOP_FINISH[1]);
        this._gameTelopTile.originX = 450 / 2;
        this._gameTelopTile.originY = 250 / 2;
        this._gameTelopTile.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
        this._gameTelopTile.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2 - 25;
        this._gameTelopTile.scaleX = .3;
        this._gameTelopTile.scaleY = .3;
        com.greensock.TweenMax.killTweensOf(this._gameTelopTile);
        com.greensock.TweenMax.to(this._gameTelopTile, .8, {
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut.config(1.3, .25),
            onComplete: __localFn2__
        })
    }
    if (type <= 4) {
        com.greensock.TweenMax.killTweensOf(this._gameTelopTile);
        com.greensock.TweenMax.to(this._gameTelopAnimalContainer, .2, {
            delay: .3,
            x: 560,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: __localFn3__
        });
        if (!this._main.isEventComplete)
            com.greensock.TweenMax.to(this._gameTelopHoContainer, .2, {
                delay: .3,
                x: 60,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: __localFn4__
            });
        com.greensock.TweenMax.to(this._gameTelopTile, .4, {
            y: pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2 - 50,
            ease: com.greensock.easing.Back.easeOut,
            onComplete: __localFn5__
        })
    }
    this._telopEndtype = type
}
;
pigg.puzzle.view.GameView.prototype.hideGameTelop = function(hideAnimal) {
    hideAnimal = typeof hideAnimal !== 'undefined' ? hideAnimal : false;
    this.traceLog('hideGameTelop');
    this.removeFromParent(this._gameTelopContainer);
    if (hideAnimal) {
        this._main.removeSpine(this._main.spineAnimal, this._gameTelopAnimalContainer);
        this._main.removeSpine(this._main.spineHukurouQuarter, this._gameTelopHoContainer)
    }
}
;
pigg.puzzle.view.GameView.prototype.telopEnd = function() {
    this.traceLog('telopEnd', this._telopEndtype, this._main.userTutorialStatus2nd, pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND, this._main.confStatus);
    if (this._telopEndtype == 1) {
        this._assistManager.setAssistTimer(true, 2);
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_RARE_STAGE_COUNT || this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND - 1 || this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND && !this._main.userData.isScoreItemUsing || this._main.existMission && this._main.userTutorialStatusTemp < 3) {
            this._showMouseDisble = false;
            this.traceLog('telopEnd::checkShowTutorial');
            this.checkShowTutorial()
        } else
            this._showMouseDisble = false;
        this.traceLog('_main.existMissionMessage::', this._main.existMission, this._main.existMissionMessage, this._main.userTutorialStatusTemp);
        if (this._main.existMission && this._main.existMissionMessage)
            ;
    }
}
;
pigg.puzzle.view.GameView.prototype.telopAction = function(code) {}
;
pigg.puzzle.view.GameView.prototype.onGiveUp = function() {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self.traceLog('onGiveUp::2');
            self._menuResultManager.showResultFailedPanel()
        };
        self._menuResultManager.hideConfirmGiveUpPanel();
        self.endMovetimesAlert();
        self.showGameTelop(4);
        self._gameEffectContainer.mouseChildren = false;
        self._gameEffectContainer.mouseEnabled = false;
        self._gameMaterialContainer.mouseChildren = true;
        self._gameMaterialContainer.mouseEnabled = true;
        self.traceLog('onGiveUp::1');
        com.greensock.TweenMax.to(self._gameTelopTile, .4, {
            onComplete: org.apache.royale.utils.Language.closure(self.hideGameView, self, 'hideGameView')
        });
        com.greensock.TweenMax.to(self._gameTelopTilemap, 1.8, {
            onComplete: __localFn0__
        })
    };
    this._isSendingGiveUp = false;
    this.traceLog('onGiveUp');
    this.hideSelectPotion();
    this.removeConfirmBackWhite();
    this.updateKeepClearCount(true);
    com.greensock.TweenMax.to(this._menuResultManager.confirmBlack, .2, {
        alpha: 0
    });
    com.greensock.TweenMax.to(this._menuResultManager.gameResultPanel, .4, {
        y: pigg.puzzle.view.CommonView.STAGE_HEIGHT,
        ease: com.greensock.easing.Cubic.easeOut,
        onComplete: __localFn0__
    });
    if (this._main.userTutorialStatus2nd == 3) {
        this.traceLog('\u6557\u5317::\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2ND\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30d7\u30e9\u30b9\u3059\u308b::', this._main.userTutorialStatus2nd, '\u3092', this._main.userTutorialStatus2nd + 1);
        this._main.userTutorialStatus2nd++;
        this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
    }
}
;
pigg.puzzle.view.GameView.prototype.updateKeepClearCount = function(reset, value) {
    reset = typeof reset !== 'undefined' ? reset : false;
    value = typeof value !== 'undefined' ? value : 0;
    if (reset)
        this._main.keepClearCount = value;
    else
        this._main.keepClearCount++;
    this._keepClearBonusScore = this._main.keepClearCount * 100;
    this.traceLog('\u9023\u52dd\u8a18\u9332', this._main.keepClearCount)
}
;
pigg.puzzle.view.GameView.prototype.onContinue = function(data) {
    this.traceLog('onContinue::', data.status);
    if (data.status == 'INSUFFICIENT_COIN') {
        this.traceLog('onContinue::\u30b3\u30a4\u30f3\u4e0d\u8db3');
        this._menuResultManager.showGameContinueUseCoinShortage()
    } else if (data.status == 'SUCCESS') {
        this.traceLog('onContinue::\u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fc\u6210\u529f');
        this._menuResultManager.hideConfirmGiveUpPanel();
        this._menuResultManager.hideUseCoinConfirm(1);
        this.updateTimes(true, true);
        this._assistManager.checkMatchConnect();
        this.setContinueEffect();
        this.endMovetimesAlert();
        this._main.userData.boardRemainingMoveCount = this._continueAddTimes
    }
}
;
pigg.puzzle.view.GameView.prototype._gameContinueHukurouContainer;
pigg.puzzle.view.GameView.prototype._continueBlack;
pigg.puzzle.view.GameView.prototype._spineContinueHukurou;
pigg.puzzle.view.GameView.prototype.setContinueEffect = function() {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._main.playSE(pigg.puzzle.data.CommonData.SE_HO_VOICE);
            self.traceLog('_throughObjectManager.setThroughObject(THROUGH_MOVETIMES', cnt);
            self._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THROUGH_MOVETIMES, null, null, 0, self._spineContinueHukurou.x, self._spineContinueHukurou.y)
        };
        len = self._continueAddTimes;
        for (cnt = 0; cnt < len; cnt++)
            com.greensock.TweenMax.to(this, .15 * cnt, {
                onComplete: __localFn0__
            })
    };
    var __localFn1__ = function() {
        self.removeFromParent(self._gameItemHukurouContainer)
    };
    var cnt = 0
      , len = 0;
    this._continueAddDispCount = 0;
    this._throughObjectManager.moveTimeDelayCnt = 0;
    if (this._gameContinueHukurouContainer == null) {
        this._spineContinueHukurou = this._main.spineHukurouFront.clone();
        this._gameContinueHukurouContainer = new openfl.display.Sprite;
        this._continueBlack = this.makeBackBlack()
    }
    this._menuContainer.addChild(this._gameContinueHukurouContainer);
    this._main.addSpine(this._spineContinueHukurou, this._gameContinueHukurouContainer);
    com.greensock.TweenMax.to(this._spineContinueHukurou, .35, {
        x: 145,
        y: 80,
        ease: com.greensock.easing.Cubic.easeOut
    });
    this._spineContinueHukurou.playAction('fly_joy', 0, true);
    this._menuContainer.addChild(this._continueBlack);
    this._continueBlack.alpha = 1;
    this._menuContainer.setChildIndex(this._continueBlack, this._menuContainer.getChildIndex(this._menuTopContainer));
    this._menuContainer.swapChildren(this._gameContinueHukurouContainer, this._menuEffectContainer);
    this._spineContinueHukurou.y = 900;
    this._spineContinueHukurou.x = -100;
    this._spineContinueHukurou.scaleX = this._spineContinueHukurou.scaleY = 1.5;
    com.greensock.TweenMax.to(this, .5, {
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._spineContinueHukurou, 2, {
        x: 700,
        y: -200,
        delay: 0,
        ease: com.greensock.easing.SlowMo.ease.config(.5, .7, false),
        onComplete: __localFn1__
    });
    this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_START)
}
;
pigg.puzzle.view.GameView.prototype.setThroughMoveTimes = function(cnt) {}
;
pigg.puzzle.view.GameView.prototype.moveThroughMoveTimes = function(mc, distance, targetObj, cnt) {}
;
pigg.puzzle.view.GameView.prototype.removeThroughMoveTimes = function() {
    this.traceLog('_continueAddDispCount', this._continueAddDispCount);
    this._continueAddDispCount++;
    this._numberFontManager.makeNumber('moveTimes', this._continueAddDispCount);
    this.tweenGameMoveTimes(1);
    if (this._continueAddDispCount == this._continueAddTimes) {
        this.traceLog('\u30de\u30a6\u30b9\u52b9\u679c\u5fa9\u65e7');
        this.removeFromParent(this._gameContinueHukurouContainer);
        this._main.removeSpine(this._spineContinueHukurou, this._gameContinueHukurouContainer);
        this._isMouseEnable = true;
        com.greensock.TweenMax.to(this._continueBlack, .2, {
            alpha: 0,
            onComplete: org.apache.royale.utils.Language.closure(this.removeFromParent, this, 'removeFromParent'),
            onCompleteParams: [this._continueBlack]
        })
    }
    this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
}
;
pigg.puzzle.view.GameView.prototype.removeConfirmBackWhite = function() {
    if (this._confirmBackBlack == null)
        return;
    this.removeFromParent(this._confirmBackBlack);
    this._confirmBackBlack = null
}
;
pigg.puzzle.view.GameView.prototype.startBonusCrush = function() {
    this.traceLog('startBonusCrush');
    this._typeCount = 6;
    this._normalPieceTypeCount = 6;
    this._normalBallTypeArray = this.makeTypeArray();
    this._isAuto = 1;
    this._assistManager.setAssistTimer(false);
    this.showGameTelop(10);
    com.greensock.TweenMax.to(this, 2, {
        onComplete: org.apache.royale.utils.Language.closure(this.autoCrushSpecialPiece, this, 'autoCrushSpecialPiece')
    });
    this._main.playSE(pigg.puzzle.data.CommonData.SE_FINISH)
}
;
pigg.puzzle.view.GameView.prototype.startBonusPoint = function() {
    this.traceLog('startBonusPoint');
    this._comboPrevCount = 0;
    this.hideComboPraise();
    var useItemCategory = '';
    this._bonusSpecialCount = this._clearMoveTimes - this._currentMoveTimes;
    this._bonusSpecialCountDelay = this._bonusSpecialCount;
    if (this._bonusSpecialCount <= 0) {
        this.traceLog('\u6b8b\u624b\u6570\u304c\u7121\u3044\u306e\u3067\u30b2\u30fc\u30e0\u30af\u30ea\u30a2');
        if (this._isUseCheatItem != -1)
            this.sendUseCheatItem(true);
        else {
            this.traceLog('startBonusPoint::sendProgressData');
            this.sendProgressData(true, true)
        }
        return
    }
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BONUS_POINT);
    this.showGameTelop(11);
    com.greensock.TweenMax.to(this._gameTelopTilemap, .5, {
        onComplete: org.apache.royale.utils.Language.closure(this.makeBonusPoint, this, 'makeBonusPoint')
    })
}
;
pigg.puzzle.view.GameView.prototype.showGameClear = function() {
    this.traceLog('showGameClear');
    this.endMovetimesAlert();
    this.showGameTelop(2);
    com.greensock.TweenMax.to(this._gameTelopTilemap, .4, {
        onComplete: org.apache.royale.utils.Language.closure(this.hideGameView, this, 'hideGameView')
    });
    com.greensock.TweenMax.to(this._gameEffectContainer, 2, {
        onComplete: org.apache.royale.utils.Language.closure(this._menuResultManager.showResultClearPanel, this._menuResultManager, 'showResultClearPanel')
    });
    this._gameEffectContainer.mouseChildren = false;
    this._gameEffectContainer.mouseEnabled = false;
    this._gameMaterialContainer.mouseChildren = true;
    this._gameMaterialContainer.mouseEnabled = true;
    this._gamePieceMask.visible = false;
    this._pieceContainer.mask = null;
    this.traceLog('showGameClear:::_main.currentRemainEventStepPoint\x3d\x3d\x3d\u524d ', this._main.totalPoint, this._main.currentRemainEventStepPoint, this._main.currentEventStep);
    this._main.totalPoint += this._currentGameScore;
    this._main.currentRemainEventStepPoint -= this._currentGameScore;
    this.traceLog('showGameClear:::_main.currentRemainEventStepPoint\x3d\x3d\x3d\u5f8c::', this._main.totalPoint, this._main.currentRemainEventStepPoint)
}
;
pigg.puzzle.view.GameView.prototype.gameMenuItemMD = function(e) {}
;
pigg.puzzle.view.GameView.prototype.gameMenuShopMD = function(e) {}
;
pigg.puzzle.view.GameView.prototype.gameMenuSettingConfirmGiveUp = function() {
    this.killTweenObj();
    while (this._effectContainer.numChildren > 0)
        this.removeFromParent(this._effectContainer.getChildAt(0));
    while (this._addScoreContainer.numChildren > 0)
        this.removeFromParent(this._addScoreContainer.getChildAt(0));
    while (this._menuEffectContainer.numChildren > 0)
        this.removeFromParent(this._menuEffectContainer.getChildAt(0))
}
;
pigg.puzzle.view.GameView.prototype.checkTutorialMouseLimitter = function(mInfo) {
    return true
}
;
pigg.puzzle.view.GameView.prototype.checkTutorialAssistLimitter = function() {
    this.traceLog('checkTutorialAssistLimitter:::', this._main.userTutorialStatus, pigg.puzzle.view.CommonView.TUTORIAL_CLEAR, this._playTutorialPage, this._cancelTutorial);
    if (this._cancelTutorial)
        return true;
    if (this._main.userTutorialStatus >= pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
        return true;
    if (this._main.userTutorialStatus == 1) {
        if (this._playTutorialPage >= 2)
            return true
    } else if (this._main.userTutorialStatus == 2) {
        if (this._playTutorialPage >= 4)
            return true
    } else if (this._main.userTutorialStatus == 3) {
        if (this._playTutorialPage >= 4)
            return true
    } else if (this._main.userTutorialStatus == 4) {
        if (this._playTutorialPage >= 2)
            return true
    } else if (this._main.userTutorialStatus == 5)
        if (this._playTutorialPage >= 2)
            return true;
    return false
}
;
pigg.puzzle.view.GameView.prototype.objMU = function(e) {}
;
pigg.puzzle.view.GameView.prototype.objMM = function(e) {}
;
pigg.puzzle.view.GameView.prototype.objMOVR = function(e) {}
;
pigg.puzzle.view.GameView.prototype.objMOUT = function(e) {}
;
pigg.puzzle.view.GameView.prototype.fromMainview = function(id) {}
;
pigg.puzzle.view.GameView.prototype.cheatItemBtnMD = function(e) {
    if (this._isFlush)
        return;
    if (this._isGameCleared)
        return;
    if (!this._isMouseEnable)
        return;
    if (this._itemTargetInfo)
        return;
    if (this._isSendUseScoreItem != -1)
        return;
    if (this._currentUseItemType != -1 && this._currentUseItemType != id)
        return;
    if (this._main.isShowGameTutorial)
        return;
    if (this._isSendingUseCheatItem)
        return;
    var id = Number(e.currentTarget.id);
    com.greensock.TweenMax.to(this._menuCheatItemBtnTile[id], .2, {
        scaleX: 1.4,
        scaleY: 1.4,
        rotation: Math.random() * 90 - 45,
        ease: com.greensock.easing.Elastic.easeOut
    });
    if (this._menuCheatItemLockTile[id])
        com.greensock.TweenMax.to(this._menuCheatItemLockTile[id], .2, {
            scaleX: 1.4,
            scaleY: 1.4,
            rotation: Math.random() * -30,
            ease: com.greensock.easing.Elastic.easeOut
        })
}
;
pigg.puzzle.view.GameView.prototype.cheatItemBtnMOU = function(e) {
    var id = Number(e.currentTarget.id);
    com.greensock.TweenMax.to(this._menuCheatItemBtnTile[id], .7, {
        scaleX: 1,
        scaleY: 1,
        rotation: 0,
        ease: com.greensock.easing.Elastic.easeOut
    });
    if (this._menuCheatItemLockTile[id])
        com.greensock.TweenMax.to(this._menuCheatItemLockTile[id], .7, {
            scaleX: 1,
            scaleY: 1,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        })
}
;
pigg.puzzle.view.GameView.prototype.cheatItemBtnCL = function(e) {
    var id = Number(e.currentTarget.id);
    if (this._isFlush)
        return;
    if (this._isGameCleared)
        return;
    if (!this._isMouseEnable)
        return;
    if (this._itemTargetInfo)
        return;
    if (this._isSendUseScoreItem != -1)
        return;
    if (this._currentUseItemType != -1 && this._currentUseItemType != id)
        return;
    if (this._main.isShowGameTutorial)
        return;
    if (this._isSendingUseCheatItem)
        return;
    this.traceLog('cheatItemBtnMD::', id);
    if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.ENABLE_CHEATITEM_TUTORIAL_STEP) {
        this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30af\u30ea\u30a2\u5f8c\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3088\u8868\u793a');
        com.greensock.TweenMax.killTweensOf(this._menuCheatItemBtnTile[id]);
        com.greensock.TweenMax.killTweensOf(this._menuCheatItemLockTile[id]);
        this._menuCheatItemBtnTile[id].scaleX = this._menuCheatItemBtnTile[id].scaleY = 1.4;
        this._menuCheatItemBtnTile[id].rotation = Math.random() * 90 - 45;
        this._menuCheatItemLockTile[id].scaleX = this._menuCheatItemLockTile[id].scaleY = 1.4;
        this._menuCheatItemLockTile[id].rotation = Math.random() * -30;
        com.greensock.TweenMax.to(this._menuCheatItemBtnTile[id], .7, {
            scaleX: 1,
            scaleY: 1,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(this._menuCheatItemLockTile[id], .7, {
            scaleX: 1,
            scaleY: 1,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        return
    }
    com.greensock.TweenMax.killTweensOf(this._menuCheatItemBtnTile[id]);
    this._menuCheatItemBtnTile[id].scaleX = this._menuCheatItemBtnTile[id].scaleY = 1.4;
    this._menuCheatItemBtnTile[id].rotation = Math.random() * 90 - 45;
    com.greensock.TweenMax.to(this._menuCheatItemBtnTile[id], .7, {
        scaleX: 1,
        scaleY: 1,
        rotation: 0,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this._prevItemType = this._currentUseItemType;
    if (id == 0 && this._currentUseItemType != 0)
        this._currentUseItemType = 0;
    else if (id == 1 && this._currentUseItemType != 1)
        this._currentUseItemType = 1;
    else if (id == 2 && this._currentUseItemType != 2)
        this._currentUseItemType = 2;
    else
        this._currentUseItemType = -1;
    if (this._currentUseItemType == -1) {
        this.cancelUseCheatItem();
        this.setBackGroundCover(false, false);
        this.hideCheatItem();
        this.traceLog('cheatItemBtnMD::\u5e30\u3063\u3066\u3044\u304f\u51e6\u7406');
        this.removeFromParent(this._menuCheatItemContainers[id]);
        this._menuBottomContainer.addChild(this._menuCheatItemContainers[id]);
        this._menuCheatItemBtnTilemaps[id].removeTile(this._menuCheatItemCloseTile[id]);
        this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_START);
        return
    } else if (this._main.cheatItemCount[this._currentUseItemType] == 0) {
        this.traceLog('cheatItemBtnMD::\u30a2\u30a4\u30c6\u30e0\u304c\u8db3\u308a\u306a\u3044\u51e6\u7406');
        this._main.showAlertItemShortage();
        this._currentUseItemType = -1;
        return
    }
    this.traceLog('cheatItemBtnMD::\u5b9f\u884c');
    this.removeFromParent(this._menuCheatItemContainers[id]);
    this._gameInfoTempCheatItemContainer.addChild(this._menuCheatItemContainers[id]);
    this._menuCheatItemBtnTilemaps[id].addTile(this._menuCheatItemCloseTile[id]);
    this._menuCheatItemCloseTile[id].scaleX = this._menuCheatItemCloseTile[id].scaleY = 0;
    com.greensock.TweenMax.to(this._menuCheatItemCloseTile[id], .3, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this.setBackGroundCover();
    this.appearCheatItem();
    this._isItemGridClick = false;
    this._assistManager.setAssistTimer(false);
    this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_START)
}
;
pigg.puzzle.view.GameView.prototype._gameItemHukurouObj;
pigg.puzzle.view.GameView.prototype._gameItemHukurouContainer;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemObj;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemTile;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemTilemap;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemTileset;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemTxt;
pigg.puzzle.view.GameView.prototype._descriptionCheatItemTxtArr;
pigg.puzzle.view.GameView.prototype.initItemHukurou = function() {
    this.traceLog('initItemHukurou');
    if (this._gameItemHukurouContainer == null)
        this._gameItemHukurouContainer = new openfl.display.Sprite;
    if (this._descriptionCheatItemObj == null) {
        this._descriptionCheatItemObj = new openfl.display.Sprite;
        this._gameItemHukurouContainer.addChild(this._descriptionCheatItemObj);
        this._descriptionCheatItemTileset = this._main.gamePartsTileset.clone();
        this._descriptionCheatItemTilemap = new openfl.display.Tilemap(400,300,this._descriptionCheatItemTileset);
        this._descriptionCheatItemTileset.addRect(new openfl.geom.Rectangle(641,509,338,120));
        this._descriptionCheatItemTileset.addRect(new openfl.geom.Rectangle(641,629,338,120));
        this._descriptionCheatItemTileset.addRect(new openfl.geom.Rectangle(641,749,338,120));
        this._descriptionCheatItemTilemap.addTile(this._descriptionCheatItemTile = new TileBase);
        this._descriptionCheatItemTile.originY = 60;
        this._descriptionCheatItemTile.y = 76;
        this._descriptionCheatItemTilemap.x = 250;
        this._descriptionCheatItemObj.addChild(this._descriptionCheatItemTilemap);
        this._descriptionCheatItemTile.visible = false
    }
    this.traceLog('initItemHukurou____');
    if (this._gameItemHukurouObj == null) {
        this._gameItemHukurouObj = this._main.spineHukurouFront;
        this._gameItemHukurouObj.x = 80;
        this._gameItemHukurouObj.y = -200;
        this._gameItemHukurouObj.completeFunc = org.apache.royale.utils.Language.closure(this.onCompleteCheatItemAction, this, 'onCompleteCheatItemAction');
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemErease', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemArrowTate', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemArrowYoko', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemSlide0', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemSlide1', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemSlide2', .2);
        this._gameItemHukurouObj.stateSetMixByName('fly', 'itemSlide3', .2)
    }
    this._gameItemHukurouContainer.mouseChildren = false;
    this._gameItemHukurouContainer.mouseEnabled = false
}
;
pigg.puzzle.view.GameView.prototype.onCompleteCheatItemAction = function(key) {
    this.traceLog('onCompleteCheatItemAction::', key);
    if (key.indexOf('item') == 0) {
        this._gameItemHukurouObj.playAction('fly', 0, true);
        this.hideCheatItem()
    }
}
;
pigg.puzzle.view.GameView.prototype.appearCheatItem = function(type) {
    type = typeof type !== 'undefined' ? type : 0;
    this._main.addSpine(this._gameItemHukurouObj, this._gameItemHukurouContainer);
    com.greensock.TweenMax.to(this._gameItemHukurouObj, .35, {
        x: 145,
        y: 80,
        ease: com.greensock.easing.Cubic.easeOut
    });
    if (this._gameItemHukurouContainer.parent == null)
        this._gameInfoContainer.addChild(this._gameItemHukurouContainer);
    this._gameItemHukurouObj.playAction('fly', 0, true);
    this._descriptionCheatItemTile.visible = true;
    this._descriptionCheatItemTile.updateId(this._currentUseItemType);
    this._descriptionCheatItemTile.scaleX = this._descriptionCheatItemTile.scaleY = 0;
    com.greensock.TweenMax.to(this._descriptionCheatItemTile, .5, {
        delay: .25,
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut.config(1, .5)
    })
}
;
pigg.puzzle.view.GameView.prototype.hideCheatItem = function(type) {
    var self = this;
    type = typeof type !== 'undefined' ? type : 0;
    var __localFn0__ = function() {
        self._gameItemHukurouObj.stopAction()
    };
    if (this._gameItemHukurouObj == null)
        return;
    if (type == 0)
        com.greensock.TweenMax.to(this._gameItemHukurouObj, .3, {
            x: 120 + (Math.random() * 600 - 300),
            y: -160,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn0__
        });
    this.hideCheatItemDescription()
}
;
pigg.puzzle.view.GameView.prototype.hideCheatItemDescription = function() {
    com.greensock.TweenMax.killTweensOf(this._descriptionCheatItemTile);
    com.greensock.TweenMax.to(this._descriptionCheatItemTile, .2, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.GameView.prototype.cheatItemBtnMOVR = function(e) {}
;
pigg.puzzle.view.GameView.prototype.cheatItemBtnMOUT = function(e) {}
;
pigg.puzzle.view.GameView.prototype.setBackGroundCover = function(isSet, tween) {
    var self = this;
    isSet = typeof isSet !== 'undefined' ? isSet : true;
    tween = typeof tween !== 'undefined' ? tween : true;
    var __localFn0__ = function() {
        self.traceLog('a::::', self._gameBoardItemCover.alpha, self._gameBoardItemCoverInner.alpha)
    };
    var __localFn1__ = function() {
        self._gameBoardItemCover.visible = false
    };
    this.traceLog('setBackGroundCover');
    if (isSet) {
        this._gameBoardItemCover.visible = true;
        this._gameBoardItemCover.alpha = .6;
        if (tween) {
            if (this._gameBoardItemCover)
                com.greensock.TweenMax.to(this._gameBoardItemCover, .2, {
                    alpha: 1,
                    ease: com.greensock.easing.Cubic.easeOut,
                    onComplete: __localFn0__
                })
        } else
            this._gameBoardItemCover.alpha = 1;
        this._gameBoardItemCover.mouseChildren = false;
        this._gameBoardItemCover.mouseEnabled = false
    } else {
        if (!tween) {
            if (this._gameBoardItemCover)
                this._gameBoardItemCover.visible = false
        } else if (this._gameBoardItemCover)
            com.greensock.TweenMax.to(this._gameBoardItemCover, .2, {
                alpha: 0,
                ease: com.greensock.easing.Cubic.easeOut,
                onComplete: __localFn1__
            });
        this._gameInfoContainer.mouseChildren = true;
        this._gameInfoContainer.mouseEnabled = true
    }
}
;
pigg.puzzle.view.GameView.prototype.startUseCheatItem = function(type, mode) {
    var self = this;
    mode = typeof mode !== 'undefined' ? mode : -1;
    var __localFn0__ = function() {
        self._gameItemHukurouObj.playAction('itemErease');
        com.greensock.TweenMax.to(self._gameItemHukurouObj, .67, {
            onComplete: org.apache.royale.utils.Language.closure(self.startEraseItem, self, 'startEraseItem')
        })
    };
    var __localFn1__ = function() {
        if (self._changeArrowType == 1)
            self._gameItemHukurouObj.playAction('itemArrowTate');
        else if (self._changeArrowType == 2)
            self._gameItemHukurouObj.playAction('itemArrowYoko');
        com.greensock.TweenMax.to(self._gameItemHukurouObj, .67, {
            onComplete: org.apache.royale.utils.Language.closure(self.startArrowItem, self, 'startArrowItem')
        })
    };
    var __localFn2__ = function() {
        if (self._switchTargetDirection == 'left')
            self._gameItemHukurouObj.playAction('itemSlide0');
        else if (self._switchTargetDirection == 'right')
            self._gameItemHukurouObj.playAction('itemSlide1');
        else if (self._switchTargetDirection == 'up')
            self._gameItemHukurouObj.playAction('itemSlide2');
        else if (self._switchTargetDirection == 'down')
            self._gameItemHukurouObj.playAction('itemSlide3');
        com.greensock.TweenMax.to(self._gameItemHukurouObj, .8, {
            onComplete: org.apache.royale.utils.Language.closure(self.startSwitchItem, self, 'startSwitchItem')
        })
    };
    this.traceLog('startUseCheatItem', type);
    this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.pieceMM, this, 'pieceMM'));
    this.traceLog('startUseCheatItem::', type, mode);
    this._changeArrowType = mode;
    var rnd;
    var tx, ty;
    if (this._menuCheatItemBtnTilemaps[type] && this._menuCheatItemCloseTile[type])
        this._menuCheatItemBtnTilemaps[type].removeTile(this._menuCheatItemCloseTile[type]);
    this.removeFromParent(this._menuCheatItemContainers[type]);
    this._menuBottomContainer.addChild(this._menuCheatItemContainers[type]);
    this._isUseCheatItem = type;
    this.setBackGroundCover(false);
    this.hideCheatItem(1);
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
    this._isItemGridClick = true;
    tx = this._gameMaterialContainer.x + this._mouseDownInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gameMaterialScale + this._adjstObjPos * this._gameMaterialScale;
    ty = this._gameMaterialContainer.y + this._mouseDownInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gameMaterialScale - pigg.puzzle.view.CommonView.BALL_SIZE * this._gameMaterialScale;
    ty -= 64;
    if (this._mouseDownInfo.cheatTargetTile == null) {
        this._mouseDownInfo.cheatTargetTile = new TileBase(this.CHEAT_FOCUS_RECT);
        this._mouseDownInfo.cheatTargetTile.x = this._mouseDownInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
        this._mouseDownInfo.cheatTargetTile.y = this._mouseDownInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
    }
    this._tilemap.addTileAt(this._mouseDownInfo.cheatTargetTile, 0);
    this._cheatFocusArray.push(this._mouseDownInfo.cheatTargetTile);
    this.startCheatFocusEffect();
    if (type == 1)
        com.greensock.TweenMax.to(this._gameItemHukurouObj, .8, {
            x: tx,
            y: ty,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn0__
        });
    else if (type == 2) {
        if (this._changeArrowType == -1) {
            rnd = Math.random();
            if (rnd < .5)
                this._changeArrowType = 1;
            else
                this._changeArrowType = 2
        }
        com.greensock.TweenMax.to(this._gameItemHukurouObj, .8, {
            x: tx,
            y: ty,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn1__
        })
    } else if (type == 0)
        com.greensock.TweenMax.to(this._gameItemHukurouObj, .8, {
            x: tx,
            y: ty,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn2__
        })
}
;
pigg.puzzle.view.GameView.prototype._cheatFocusArray;
pigg.puzzle.view.GameView.prototype.startCheatFocusEffect = function() {
    if (this._cheatFocusArray.length == 0) {
        this.endCheatFocusEffect();
        return
    }
    var cnt = 0
      , len = 0;
    len = this._cheatFocusArray.length;
    for (cnt = 0; cnt < len; cnt++) {
        this._cheatFocusArray[cnt].alpha = .6;
        com.greensock.TweenMax.killTweensOf(this._cheatFocusArray[cnt]);
        com.greensock.TweenMax.to(this._cheatFocusArray[cnt], .25, {
            alpha: .1,
            ease: com.greensock.easing.SlowMo.ease.config(.1, .4, true)
        })
    }
    com.greensock.TweenMax.to(this._cheatFocusArray, .26, {
        onComplete: org.apache.royale.utils.Language.closure(this.startCheatFocusEffect, this, 'startCheatFocusEffect')
    })
}
;
pigg.puzzle.view.GameView.prototype.endCheatFocusEffect = function() {
    while (this._cheatFocusArray.length > 0) {
        com.greensock.TweenMax.killTweensOf(this._cheatFocusArray[0]);
        this.removeTile(this._cheatFocusArray[0]);
        this._cheatFocusArray.shift()
    }
}
;
pigg.puzzle.view.GameView.prototype.startEraseItem = function() {
    this.traceLog('startEraseItem');
    this.y += 10;
    com.greensock.TweenMax.to(this, 1, {
        y: 0,
        ease: com.greensock.easing.Elastic.easeOut
    });
    this.endCheatFocusEffect();
    this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_VOICE);
    this.traceLog('_itemTargetInfo::', this._itemTargetInfo);
    this._itemTargetInfo.addScore = 10;
    this._fallAllAddDelay = .5;
    this.checkAround(this._itemTargetInfo, true);
    this._itemTargetInfo.checkVertical = 1;
    this._itemTargetInfo.isHammer = true;
    this.endUseCheatItem();
    this.decideMatch()
}
;
pigg.puzzle.view.GameView.prototype.startArrowItem = function() {
    this.traceLog('startArrowItem');
    this.createSpecialBall(this._changeArrowType, [this._itemTargetInfo]);
    this.endUseCheatItem();
    this.sendUseCheatItem(false);
    this.endCheatFocusEffect();
    this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_VOICE)
}
;
pigg.puzzle.view.GameView.prototype.startSwitchItem = function() {
    this.traceLog('startSwitchItem');
    this.actSwitchNumber();
    this.endCheatFocusEffect();
    this._main.playSE(pigg.puzzle.data.CommonData.SE_HO_VOICE)
}
;
pigg.puzzle.view.GameView.prototype.removeItemMouseObj = function() {}
;
pigg.puzzle.view.GameView.prototype.endUseCheatItem = function() {
    this.traceLog('endUseCheatItem', this._currentUseItemType, this._prevItemType);
    this.traceLog('_cheatItemObjcts', this._cheatItemObjcts);
    if (this._isUseCheatItem != -1)
        ;
    else
        ;this._currentUseItemType = -1;
    this._prevItemType = -1;
    this._isItemGridClick = false;
    this._itemMouseOverObj = null;
    this._isObjMouseDown = false;
    this._itemTargetInfo = null;
    this._mouseDownInfo = null;
    this._switching = false;
    this.traceLog('endUseCheatItem::Timer\u30b9\u30bf\u30fc\u30c8');
    this._assistManager.setAssistTimer()
}
;
pigg.puzzle.view.GameView.prototype.cancelUseCheatItem = function() {
    this.traceLog('cancelUseCheatItem::', this._currentUseItemType, this._prevItemType);
    this._currentUseItemType = -1;
    this._prevItemType = -1;
    this._isItemGridClick = false;
    this._itemMouseOverObj = null;
    this._isObjMouseDown = false;
    this._itemTargetInfo = null;
    this._mouseDownInfo = null;
    this._switching = false;
    this._gameInfoContainer.mouseChildren = true;
    this._gameInfoContainer.mouseEnabled = true;
    this.traceLog('cancelUseCheatItem::Timer\u30b9\u30bf\u30fc\u30c8');
    this._assistManager.setAssistTimer()
}
;
pigg.puzzle.view.GameView.prototype.createSpecialBall = function(type, targetArray) {
    var self = this;
    var __localFn0__ = function() {
        self.traceLog('\u6642\u9593\u5dee\u3067\u7206\u7834');
        self.checkMatchAll();
        self.endUseCheatItem()
    };
    var cnt = 0
      , len = 0;
    var rndType = 0;
    len = Number(targetArray.length);
    for (cnt = 0; cnt < len; cnt++)
        if (type == 1 || type == 2) {
            if (targetArray[cnt].hasWired > 0 && this._currentUseItemType == -1) {
                targetArray[cnt].checkWired = true;
                this.checkJellyWired(targetArray[cnt])
            }
            if (targetArray[cnt].num == 6) {
                rndType = org.apache.royale.utils.Language._int(Math.random() * this._pieceCountType);
                targetArray[cnt].ballType = rndType;
                targetArray[cnt].num = rndType
            }
            this.setCrushType(targetArray[cnt], type, 1)
        } else if (type == 3) {
            if (targetArray[cnt].hasWired > 0) {
                targetArray[cnt].checkWired = true;
                this.checkJellyWired(targetArray[cnt])
            }
            if (targetArray[cnt].num == 6) {
                rndType = org.apache.royale.utils.Language._int(Math.random() * this._pieceCountType);
                targetArray[cnt].ballType = rndType;
                targetArray[cnt].num = rndType
            }
            targetArray[cnt].isCrush = true;
            this.setCrushType(targetArray[cnt], type, 1)
        } else if (type == 4)
            this.setCrushType(targetArray[cnt], type, 1);
        else if (type == 10)
            com.greensock.TweenMax.to(targetArray[cnt], cnt * .1, {
                onComplete: org.apache.royale.utils.Language.closure(this.autoCreateSpecialBall, this, 'autoCreateSpecialBall'),
                onCompleteParams: [targetArray[cnt], cnt % 2 + 1]
            });
    if (type == 3) {
        this._isFlush = true;
        com.greensock.TweenMax.to(this, 1, {
            onComplete: __localFn0__
        })
    }
}
;
pigg.puzzle.view.GameView.prototype.autoCreateSpecialBall = function(mInfo, type) {
    mInfo.isCrush = true;
    this.setCrushType(mInfo, type, 1);
    this.autoCreateCount++;
    this.updateTimes();
    if (this._bonusSpecialCount == this.autoCreateCount) {
        com.greensock.TweenMax.to(this, .5, {
            onComplete: org.apache.royale.utils.Language.closure(this.autoCrushSpecialPiece, this, 'autoCrushSpecialPiece')
        });
        this.traceLog('autoCreateSpecialBall::\u7d42\u4e86')
    }
}
;
pigg.puzzle.view.GameView.prototype.trySwitchNumber = function(target) {
    this.traceLog('trySwitchNumber::', this._switching);
    this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.pieceMM, this, 'pieceMM'));
    if (this._switching)
        return;
    this._isObjClick = false;
    this._switchTargetDirection = target;
    this._switchBaseMapInfo = this._mouseDownInfo;
    var switchType = 0;
    var baseNum = this._mouseDownInfo.num;
    this.traceLog('trySwitchNumber::baseNum::', baseNum, target);
    if (target == 'left' && this._mouseDownInfo.mx > 0) {
        this._switchTargetMapInfo = this._map[this._mouseDownInfo.mx - 1][this._mouseDownInfo.my];
        if (!this.checkTutorialMouseLimitter(this._switchTargetMapInfo)) {
            this.rejectSwitchNumber();
            return
        }
        switchType = 2
    } else if (target == 'right' && this._mouseDownInfo.mx < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1) {
        this._switchTargetMapInfo = this._map[this._mouseDownInfo.mx + 1][this._mouseDownInfo.my];
        if (!this.checkTutorialMouseLimitter(this._switchTargetMapInfo)) {
            this.rejectSwitchNumber();
            return
        }
        switchType = 2
    } else if (target == 'up' && this._mouseDownInfo.my > 0) {
        this._switchTargetMapInfo = this._map[this._mouseDownInfo.mx][this._mouseDownInfo.my - 1];
        if (!this.checkTutorialMouseLimitter(this._switchTargetMapInfo)) {
            this.rejectSwitchNumber();
            return
        }
        switchType = 1
    } else if (target == 'down' && this._mouseDownInfo.my < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1) {
        this._switchTargetMapInfo = this._map[this._mouseDownInfo.mx][this._mouseDownInfo.my + 1];
        if (!this.checkTutorialMouseLimitter(this._switchTargetMapInfo)) {
            this.rejectSwitchNumber();
            return
        }
        switchType = 1
    } else {
        this.rejectSwitchNumber();
        return
    }
    this.traceLog('trySwitchNumber::baseNum::', this._switchTargetMapInfo.num, this._switchTargetMapInfo.isFix, this._switchTargetMapInfo.isMovable, this._switchTargetMapInfo.hasWired);
    if (this._switchTargetMapInfo.num == -1 || this._switchTargetMapInfo.isFix || !this._switchTargetMapInfo.isMovable || this._switchTargetMapInfo.hasWired > 0) {
        this.rejectSwitchNumber();
        return
    }
    this.traceLog('trySwitchNumber::baseNum::', baseNum);
    this.temporaryChangeStatus(this._mouseDownInfo, this._switchTargetMapInfo, switchType);
    this._isFlush = true;
    this._switching = true;
    if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_SWITCH) {
        if (this._switchTargetMapInfo.cheatTargetTile == null) {
            this._switchTargetMapInfo.cheatTargetTile = new TileBase(this.CHEAT_FOCUS_RECT);
            this._switchTargetMapInfo.cheatTargetTile.x = this._switchTargetMapInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            this._switchTargetMapInfo.cheatTargetTile.y = this._switchTargetMapInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
        }
        this._tilemap.addTileAt(this._switchTargetMapInfo.cheatTargetTile, 0);
        this._cheatFocusArray.push(this._switchTargetMapInfo.cheatTargetTile);
        this.traceLog('_currentUseItemType \x3d\x3d CHEATITEM_TYPE_SWITCH::checkMatchAll');
        this.checkMatchAll(1)
    } else if (this._switchBaseMapInfo.isOrder == -1 && this._switchTargetMapInfo.isOrder == -1 && (this._switchBaseMapInfo.crushType != 4 || this._switchTargetMapInfo.crushType != 4) && (this._switchBaseMapInfo.crushType == 4 && this._switchTargetMapInfo.crushType != 0 || this._switchTargetMapInfo.crushType == 4 && this._switchBaseMapInfo.crushType != 0))
        this.actSwitchNumber(true);
    else if (this._switchBaseMapInfo.isOrder == -1 && this._switchTargetMapInfo.isOrder == -1 && (this._switchBaseMapInfo.crushType != 0 && this._switchTargetMapInfo.crushType != 0 || (this._switchBaseMapInfo.crushType == 4 || this._switchTargetMapInfo.crushType == 4)))
        this.checkCrush(this._switchBaseMapInfo, this._switchTargetMapInfo);
    else
        this.checkMatchAll(1)
}
;
pigg.puzzle.view.GameView.prototype.temporaryChangeStatus = function(baseMapInfo, targetMapInfo, switchType) {
    this.traceLog('temporaryChangeStatus');
    var tmpBaseMapNum = baseMapInfo.num;
    var tmpBaseMapCrushType = baseMapInfo.crushType;
    var tmpBaseMapBallCrushType = baseMapInfo.ballCrushType;
    var tmpBaseMapOrder = baseMapInfo.isOrder;
    var tmpBaseMapAcorn = baseMapInfo.isAcorn;
    var tmpBaseMapMission = baseMapInfo.hasMission;
    if (baseMapInfo.num < this._typeMapVec.length)
        this._typeMapVec[baseMapInfo.num].splice(this._typeMapVec[baseMapInfo.num].indexOf(baseMapInfo), 1);
    if (targetMapInfo.num < this._typeMapVec.length)
        this._typeMapVec[targetMapInfo.num].splice(this._typeMapVec[targetMapInfo.num].indexOf(targetMapInfo), 1);
    baseMapInfo.num = targetMapInfo.num;
    baseMapInfo.ballType = targetMapInfo.num;
    baseMapInfo.crushType = targetMapInfo.crushType;
    baseMapInfo.ballCrushType = targetMapInfo.ballCrushType;
    baseMapInfo.isOrder = targetMapInfo.isOrder;
    baseMapInfo.isAcorn = targetMapInfo.isAcorn;
    baseMapInfo.hasMission = targetMapInfo.hasMission;
    baseMapInfo.crushMission = targetMapInfo.hasMission;
    targetMapInfo.num = tmpBaseMapNum;
    targetMapInfo.ballType = tmpBaseMapNum;
    targetMapInfo.crushType = tmpBaseMapCrushType;
    targetMapInfo.ballCrushType = tmpBaseMapBallCrushType;
    targetMapInfo.isOrder = tmpBaseMapOrder;
    targetMapInfo.isAcorn = tmpBaseMapAcorn;
    targetMapInfo.hasMission = tmpBaseMapMission;
    targetMapInfo.crushMission = tmpBaseMapMission;
    baseMapInfo.isSwitch = switchType;
    targetMapInfo.isSwitch = switchType;
    if (baseMapInfo.num < this._typeMapVec.length)
        this._typeMapVec[baseMapInfo.num].push(baseMapInfo);
    if (targetMapInfo.num < this._typeMapVec.length)
        this._typeMapVec[targetMapInfo.num].push(targetMapInfo)
}
;
pigg.puzzle.view.GameView.prototype.resetSwitchNumber = function() {
    var self = this;
    var __localFn0__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL);
        com.greensock.TweenMax.to(self._switchBaseMapInfo.mc, .2, {
            x: basePosX
        });
        com.greensock.TweenMax.to(self._switchTargetMapInfo.mc, .2, {
            x: basePosX - pigg.puzzle.view.CommonView.BALL_SIZE
        })
    };
    var __localFn1__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL);
        com.greensock.TweenMax.to(self._switchBaseMapInfo.mc, .2, {
            x: basePosX
        });
        com.greensock.TweenMax.to(self._switchTargetMapInfo.mc, .2, {
            x: basePosX + pigg.puzzle.view.CommonView.BALL_SIZE
        })
    };
    var __localFn2__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL);
        com.greensock.TweenMax.to(self._switchBaseMapInfo.mc, .2, {
            y: basePosY
        });
        com.greensock.TweenMax.to(self._switchTargetMapInfo.mc, .2, {
            y: basePosY - pigg.puzzle.view.CommonView.BALL_SIZE
        })
    };
    var __localFn3__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL);
        com.greensock.TweenMax.to(self._switchBaseMapInfo.mc, .2, {
            y: basePosY
        });
        com.greensock.TweenMax.to(self._switchTargetMapInfo.mc, .2, {
            y: basePosY + pigg.puzzle.view.CommonView.BALL_SIZE
        })
    };
    var __localFn4__ = function() {
        self._switchBaseMapInfo.mc.rotation = 20;
        self._switchBaseMapInfo.mc.setOrigin();
        com.greensock.TweenMax.to(self._switchBaseMapInfo.mc, .75, {
            rotation: 0,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            ease: com.greensock.easing.Elastic.easeOut.config(1.75, .2)
        });
        self._switchTargetMapInfo.mc.rotation = -20;
        self._switchTargetMapInfo.mc.setOrigin();
        com.greensock.TweenMax.to(self._switchTargetMapInfo.mc, .75, {
            rotation: 0,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            ease: com.greensock.easing.Elastic.easeOut.config(1.75, .2)
        });
        self.switchBallButtonMode(true);
        self._isFlush = false;
        self._mouseDownInfo = null;
        self._switching = false
    };
    this.traceLog('resetSwitchNumber');
    this.temporaryChangeStatus(this._switchBaseMapInfo, this._switchTargetMapInfo, 0);
    var basePosX = this._switchBaseMapInfo.mc.x;
    var basePosY = this._switchBaseMapInfo.mc.y;
    this._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH);
    if (this._switchTargetDirection == 'left') {
        com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, .2, {
            x: basePosX
        });
        com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, .2, {
            x: basePosX - pigg.puzzle.view.CommonView.BALL_SIZE,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            onComplete: __localFn0__
        })
    } else if (this._switchTargetDirection == 'right') {
        com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, .2, {
            x: basePosX
        });
        com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, .2, {
            x: basePosX + pigg.puzzle.view.CommonView.BALL_SIZE,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            onComplete: __localFn1__
        })
    } else if (this._switchTargetDirection == 'up') {
        com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, .2, {
            y: basePosY
        });
        com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, .2, {
            y: basePosY - pigg.puzzle.view.CommonView.BALL_SIZE,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            onComplete: __localFn2__
        })
    } else if (this._switchTargetDirection == 'down') {
        com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, .2, {
            y: basePosY
        });
        com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, .2, {
            y: basePosY + pigg.puzzle.view.CommonView.BALL_SIZE,
            scaleX: 1,
            scaleY: 1,
            originX: 0,
            originY: 0,
            onComplete: __localFn3__
        })
    }
    com.greensock.TweenMax.to(this._switchTargetMapInfo, .4, {
        onComplete: __localFn4__
    })
}
;
pigg.puzzle.view.GameView.prototype.actSwitchNumber = function(crush) {
    var self = this;
    crush = typeof crush !== 'undefined' ? crush : false;
    var __localFn0__ = function() {
        if (!crush)
            self.removeBall(true);
        else
            self.fixSwitchNumber(true)
    };
    this.traceLog('actSwitchNumber::', this._currentMoveTimes, this._clearMoveTimes);
    if (this._isUseCheatItem == -1) {
        this.updateTimes();
        if (this._existSelectPotion) {
            this.hideSelectPotion();
            this._existSelectPotion = false
        }
    }
    var basePosX = this._switchBaseMapInfo.mc.x;
    var basePosY = this._switchBaseMapInfo.mc.y;
    var targetPosX = this._switchTargetMapInfo.mc.x;
    var targetPosY = this._switchTargetMapInfo.mc.y;
    if (this._switchTargetDirection == 'left')
        targetPosX = basePosX - pigg.puzzle.view.CommonView.BALL_SIZE;
    else if (this._switchTargetDirection == 'right')
        targetPosX = basePosX + pigg.puzzle.view.CommonView.BALL_SIZE;
    else if (this._switchTargetDirection == 'up')
        targetPosY = basePosY - pigg.puzzle.view.CommonView.BALL_SIZE;
    else if (this._switchTargetDirection == 'down')
        targetPosY = basePosY + pigg.puzzle.view.CommonView.BALL_SIZE;
    this._switchTargetMapInfo.mc.scaleX = this._switchTargetMapInfo.mc.scaleY = 1;
    this._switchTargetMapInfo.mc.rotation = 0;
    this._switchBaseMapInfo.mc.rotation = 0;
    com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, .2, {
        x: basePosX,
        y: basePosY
    });
    com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, .2, {
        x: targetPosX,
        y: targetPosY,
        scaleX: 1,
        scaleY: 1,
        originX: 0,
        originY: 0,
        onComplete: __localFn0__
    });
    this._main.playSE(pigg.puzzle.data.CommonData.SE_SWITCH);
    this._mouseDownInfo = null;
    this._switching = false
}
;
pigg.puzzle.view.GameView.prototype.rejectSwitchNumber = function() {
    this.traceLog('rejectSwitchNumber::');
    com.greensock.TweenMax.killTweensOf(this._mouseDownInfo.mc);
    com.greensock.TweenMax.to(this._mouseDownInfo.mc, .75, {
        rotation: 0,
        scaleX: 1,
        scaleY: 1,
        originX: 0,
        originY: 0,
        ease: com.greensock.easing.Elastic.easeOut.config(1.75, .2)
    });
    this._isObjClick = false;
    this._mouseDownInfo = null;
    this._switching = false;
    this._itemMouseOverObj = null;
    this._isObjMouseDown = false
}
;
pigg.puzzle.view.GameView.prototype.fixSwitchNumber = function(crush) {
    crush = typeof crush !== 'undefined' ? crush : false;
    this.traceLog('fixSwitchNumber');
    this._switchTargetMapInfo.mc.x = this._switchTargetMapInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    this._switchTargetMapInfo.mc.y = this._switchTargetMapInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    this._switchTargetMapInfo.mc.changeBallType(this._switchTargetMapInfo.num, this._switchTargetMapInfo.isOrder, this._switchTargetMapInfo.hasMission);
    this._switchTargetMapInfo.mc.changeCrushType(this._switchTargetMapInfo.crushType);
    this._switchBaseMapInfo.mc.x = this._switchBaseMapInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    this._switchBaseMapInfo.mc.y = this._switchBaseMapInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
    this._switchBaseMapInfo.mc.changeBallType(this._switchBaseMapInfo.num, this._switchBaseMapInfo.isOrder, this._switchBaseMapInfo.hasMission);
    this._switchBaseMapInfo.mc.changeCrushType(this._switchBaseMapInfo.crushType);
    if (crush) {
        this.traceLog('fixSwitchNumber::crush');
        this.checkCrush(this._switchBaseMapInfo, this._switchTargetMapInfo);
        this.setMatchBright(this._switchBaseMapInfo, true, false);
        this.setMatchBright(this._switchTargetMapInfo, true, false);
        com.greensock.TweenMax.to(this._switchBaseMapInfo.mc, 1, {
            delay: 0,
            rotation: 0,
            scaleX: 1.1,
            scaleY: 1.1,
            originX: -(1 - 1.1) * this._adjstObjPos,
            originY: -(1 - 1.1) * this._adjstObjPos,
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
        });
        com.greensock.TweenMax.to(this._switchTargetMapInfo.mc, 1, {
            delay: 0,
            rotation: 0,
            scaleX: 1.1,
            scaleY: 1.1,
            originX: -(1 - 1.1) * this._adjstObjPos,
            originY: -(1 - 1.1) * this._adjstObjPos,
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
        })
    }
    this._switchTargetMapInfo = null;
    this._switchBaseMapInfo = null
}
;
pigg.puzzle.view.GameView.prototype.checkMatchAll = function(checkType) {
    checkType = typeof checkType !== 'undefined' ? checkType : 0;
    if (checkType == 1) {
        this._comboCount = 0;
        this._comboPrevCount = 0
    } else
        this._fallAllAddDelay = 0;
    this._stackRemoveVec = org.apache.royale.utils.Language.Vector();
    this._stackChangeTypeVec = org.apache.royale.utils.Language.Vector();
    this._stackQuakeVec = org.apache.royale.utils.Language.Vector();
    this._stackFilterVec = org.apache.royale.utils.Language.Vector();
    this._stackAutoQuakeVec = org.apache.royale.utils.Language.Vector();
    var cnt = 0
      , len = 0
      , cntY = 0
      , lenY = 0
      , cntX = 0
      , lenX = 0;
    var cnt2 = 0
      , len2 = 0;
    var flushCount = 0;
    var addScorPos = new openfl.geom.Point;
    var addScoreNum = 0;
    var mInfo;
    var randomChange = 0;
    len = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntY = 0; cntY < lenY; cntY++) {
        for (cnt = 0; cnt < len - 1; cnt++)
            if (this._map[cnt][cntY].crushType != 4 && !this._map[cnt][cntY].isFix && this._map[cnt][cntY].num != -1 && this._map[cnt][cntY].isOrder == -1 && this._map[cnt][cntY].isAcorn == -1 && this._map[cnt][cntY].num == this._map[cnt + 1][cntY].num)
                flushCount++;
            else {
                if (flushCount >= 2) {
                    if (this._comboCount > 0)
                        randomChange = org.apache.royale.utils.Language._int(Math.random() * flushCount);
                    len2 = flushCount + 1;
                    addScorPos = new openfl.geom.Point(this._map[cnt][cntY].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE - len2 * pigg.puzzle.view.CommonView.BALL_SIZE / 2,this._map[cnt][cntY].my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2);
                    for (cnt2 = 0; cnt2 < len2; cnt2++) {
                        mInfo = this._map[cnt - cnt2][cntY];
                        mInfo.checkHorizontal = flushCount;
                        if (this._comboCount > 0 && cnt2 == randomChange)
                            mInfo.isSwitch = org.apache.royale.utils.Language._int(Math.random() * 2 + 1);
                        addScoreNum = this.addScore(0, flushCount, true);
                        mInfo.addScore = addScoreNum;
                        mInfo.isSwitchMatch = true
                    }
                }
                flushCount = 0
            }
        if (flushCount >= 2) {
            len2 = flushCount + 1;
            if (this._comboCount > 0)
                randomChange = org.apache.royale.utils.Language._int(Math.random() * flushCount);
            addScorPos = new openfl.geom.Point(this._map[cnt][cntY].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE - len2 * pigg.puzzle.view.CommonView.BALL_SIZE / 2,this._map[cnt][cntY].my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2);
            for (cnt2 = 0; cnt2 < len2; cnt2++) {
                mInfo = this._map[cnt - cnt2][cntY];
                mInfo.checkHorizontal = flushCount;
                if (this._comboCount > 0 && cnt2 == randomChange)
                    mInfo.isSwitch = org.apache.royale.utils.Language._int(Math.random() * 2 + 1);
                addScoreNum = this.addScore(0, flushCount, true);
                mInfo.addScore = addScoreNum;
                mInfo.isSwitchMatch = true
            }
        }
        flushCount = 0
    }
    len = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    for (cntX = 0; cntX < lenX; cntX++) {
        for (cnt = 0; cnt < len - 1; cnt++)
            if (this._map[cntX][cnt].crushType != 4 && !this._map[cntX][cnt].isFix && this._map[cntX][cnt].num != -1 && this._map[cntX][cnt].isOrder == -1 && this._map[cntX][cnt].isAcorn == -1 && this._map[cntX][cnt].num == this._map[cntX][cnt + 1].num)
                flushCount++;
            else {
                if (flushCount >= 2) {
                    if (this._comboCount > 0)
                        randomChange = org.apache.royale.utils.Language._int(Math.random() * flushCount);
                    len2 = flushCount + 1;
                    addScorPos = new openfl.geom.Point(this._map[cntX][cnt].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2,this._map[cntX][cnt].my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE - len2 * pigg.puzzle.view.CommonView.BALL_SIZE / 2);
                    for (cnt2 = 0; cnt2 < len2; cnt2++) {
                        mInfo = this._map[cntX][cnt - cnt2];
                        mInfo.checkVertical = flushCount;
                        if (this._comboCount > 0 && cnt2 == randomChange)
                            mInfo.isSwitch = org.apache.royale.utils.Language._int(Math.random() * 2 + 1);
                        addScoreNum = this.addScore(0, flushCount, true);
                        mInfo.addScore = addScoreNum;
                        mInfo.isSwitchMatch = true
                    }
                }
                flushCount = 0
            }
        if (flushCount >= 2) {
            if (this._comboCount > 0)
                randomChange = org.apache.royale.utils.Language._int(Math.random() * flushCount);
            len2 = flushCount + 1;
            addScorPos = new openfl.geom.Point(this._map[cntX][cnt].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2,this._map[cntX][cnt].my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE - len2 * pigg.puzzle.view.CommonView.BALL_SIZE / 2);
            for (cnt2 = 0; cnt2 < len2; cnt2++) {
                mInfo = this._map[cntX][cnt - cnt2];
                mInfo.checkVertical = flushCount;
                if (this._comboCount > 0 && cnt2 == randomChange)
                    mInfo.isSwitch = org.apache.royale.utils.Language._int(Math.random() * 2 + 1);
                addScoreNum = this.addScore(0, flushCount, true);
                mInfo.addScore = addScoreNum;
                mInfo.isSwitchMatch = true
            }
        }
        flushCount = 0
    }
    this.traceLog('checkMatchAll::end', checkType);
    if (checkType == 2)
        return;
    this.traceLog('\u3053\u3053\u3067\u30b3\u30cd\u30af\u30c8\u30b0\u30eb\u30fc\u30d7\u691c\u51fa');
    this.decideMatch(checkType)
}
;
pigg.puzzle.view.GameView.prototype.checkCrush = function(baseMapIfo, targetMapIfo) {
    var fusion = false;
    var switchCrushType = 0;
    this._stackRemoveVec = org.apache.royale.utils.Language.Vector();
    this._stackChangeTypeVec = org.apache.royale.utils.Language.Vector();
    this._stackQuakeVec = org.apache.royale.utils.Language.Vector();
    this._stackFilterVec = org.apache.royale.utils.Language.Vector();
    this._stackAutoQuakeVec = org.apache.royale.utils.Language.Vector();
    if (baseMapIfo.crushType == 4 && targetMapIfo.crushType == 4) {
        this.traceLog('\u30dc\u30e0x\u30dc\u30e0 \u5168\u6d88\u3057', baseMapIfo.crushType, targetMapIfo.crushType);
        this.setCrushRemove(10, baseMapIfo.mx, baseMapIfo.my, baseMapIfo.num)
    } else if (baseMapIfo.crushType == 4 && targetMapIfo.crushType != 0 || baseMapIfo.crushType != 0 && targetMapIfo.crushType == 4) {
        var cType = 0;
        var cNum = 0;
        if (baseMapIfo.crushType != 4) {
            cType = baseMapIfo.crushType;
            targetMapIfo.num = baseMapIfo.num;
            targetMapIfo.ballType = baseMapIfo.ballType;
            baseMapIfo.removeDelay = .3;
            baseMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            targetMapIfo.removeDelay = .2;
            targetMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (targetMapIfo.isAcorn == -1 && baseMapIfo.isAcorn == -1) {
                this.checkAround(targetMapIfo);
                this.checkAround(baseMapIfo)
            }
            this.stackRemoveObecjt(baseMapIfo);
            this.stackRemoveObecjt(targetMapIfo);
            if (cType == 1 || cType == 2)
                this.setCrushRemove(11, targetMapIfo.mx, targetMapIfo.my, baseMapIfo.num, 0, targetMapIfo);
            else if (cType == 3) {
                this.traceLog('\u30dc\u30e0x\u30c8\u30b2A', baseMapIfo.crushType, targetMapIfo.crushType);
                this.setCrushRemove(12, targetMapIfo.mx, targetMapIfo.my, baseMapIfo.num, 0, targetMapIfo)
            }
        } else if (targetMapIfo.crushType != 4) {
            baseMapIfo.num = targetMapIfo.num;
            baseMapIfo.ballType = targetMapIfo.ballType;
            targetMapIfo.removeDelay = .3;
            targetMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            baseMapIfo.removeDelay = .2;
            baseMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (targetMapIfo.isAcorn == -1 && baseMapIfo.isAcorn == -1) {
                this.checkAround(targetMapIfo);
                this.checkAround(baseMapIfo)
            }
            this.stackRemoveObecjt(baseMapIfo);
            this.stackRemoveObecjt(targetMapIfo);
            cType = targetMapIfo.crushType;
            if (cType == 1 || cType == 2)
                this.setCrushRemove(11, baseMapIfo.mx, baseMapIfo.my, targetMapIfo.num, 0, baseMapIfo);
            else if (cType == 3)
                this.setCrushRemove(12, baseMapIfo.mx, baseMapIfo.my, targetMapIfo.num, 0, baseMapIfo)
        }
        fusion = true
    } else if (baseMapIfo.crushType == 4 && targetMapIfo.crushType == 0) {
        baseMapIfo.num = targetMapIfo.num;
        baseMapIfo.ballType = targetMapIfo.ballType;
        targetMapIfo.removeDelay = .3;
        targetMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
        baseMapIfo.removeDelay = .2;
        baseMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
        if (targetMapIfo.isAcorn == -1 && baseMapIfo.isAcorn == -1) {
            this.checkAround(targetMapIfo);
            this.checkAround(baseMapIfo)
        }
        this.stackRemoveObecjt(targetMapIfo);
        this.stackRemoveObecjt(baseMapIfo);
        this.setCrushRemove(4, baseMapIfo.mx, baseMapIfo.my, targetMapIfo.num, 0, targetMapIfo);
        fusion = false
    } else if (baseMapIfo.crushType == 0 && targetMapIfo.crushType == 4) {
        targetMapIfo.num = baseMapIfo.num;
        targetMapIfo.ballType = baseMapIfo.ballType;
        baseMapIfo.removeDelay = .3;
        baseMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
        targetMapIfo.removeDelay = .2;
        targetMapIfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
        if (targetMapIfo.isAcorn == -1 && baseMapIfo.isAcorn == -1) {
            this.checkAround(targetMapIfo);
            this.checkAround(baseMapIfo)
        }
        this.stackRemoveObecjt(baseMapIfo);
        this.stackRemoveObecjt(targetMapIfo);
        this.setCrushRemove(4, targetMapIfo.mx, targetMapIfo.my, baseMapIfo.num, 0, baseMapIfo);
        fusion = false
    } else if ((baseMapIfo.crushType == 1 || baseMapIfo.crushType == 2) && (targetMapIfo.crushType == 1 || targetMapIfo.crushType == 2))
        if (baseMapIfo.isSwitch == 2) {
            baseMapIfo.crushType = 2;
            targetMapIfo.crushType = 1;
            baseMapIfo.ballCrushType = 0;
            targetMapIfo.ballCrushType = 0;
            this.checkAround(targetMapIfo);
            this.checkAround(baseMapIfo);
            this.setCrushRemove(7, targetMapIfo.mx, baseMapIfo.my, targetMapIfo.num, 0, baseMapIfo)
        } else {
            baseMapIfo.crushType = 1;
            targetMapIfo.crushType = 2;
            baseMapIfo.ballCrushType = 0;
            targetMapIfo.ballCrushType = 0;
            this.setCrushRemove(7, baseMapIfo.mx, targetMapIfo.my, baseMapIfo.num, 0, targetMapIfo)
        }
    else if (baseMapIfo.crushType == 1 || baseMapIfo.crushType == 2 && targetMapIfo.crushType == 3 || (targetMapIfo.crushType == 1 || targetMapIfo.crushType == 2 && baseMapIfo.crushType == 3))
        this.setCrushRemove(5, targetMapIfo.mx, targetMapIfo.my, targetMapIfo.num);
    else if (baseMapIfo.crushType == 3 && targetMapIfo.crushType == 3)
        this.setCrushRemove(6, targetMapIfo.mx, targetMapIfo.my, targetMapIfo.num);
    if (!fusion)
        this.actSwitchNumber()
}
;
pigg.puzzle.view.GameView.prototype.decideMatch = function(checkType) {
    checkType = typeof checkType !== 'undefined' ? checkType : 0;
    var mInfo;
    var cntX = 0
      , cnt2 = 0
      , cntY = 0
      , lenX = 0
      , lenY = 0
      , len2 = 0
      , cnt = 0
      , len = 0;
    var stackCrushVec;
    stackCrushVec = org.apache.royale.utils.Language.Vector();
    var matchVec;
    matchVec = org.apache.royale.utils.Language.Vector();
    var existCrush = false;
    var checkGroupeIndex = -1;
    var specialPriority = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    this.traceLog('decideMatch::_existSelectPotion::', this._existSelectPotion);
    this._matchGroupeSetCrushVec = org.apache.royale.utils.Language.Vector();
    this._matchGroupeManager.makeGroupe();
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.isOrder != -1 && (cntY == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 || cntY != pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && this._map[cntX][cntY + 1].isThroughOrder) && mInfo.isSwitch == 0)
                if (!mInfo.isStackRemove)
                    this.stackRemoveObecjt(mInfo, true);
            if (mInfo.checkVertical == 0 && mInfo.checkHorizontal == 0 && !mInfo.isCrush)
                continue;
            if (mInfo.crushType != 0) {
                this.traceLog('\u30de\u30c3\u30c1\u3057\u305f\u4e2d\u306b\u30b9\u30da\u30b7\u30e3\u30eb\u304c\u3042\u3063\u305f');
                if (mInfo.hasWired == 0) {
                    this.traceLog('\u30de\u30c3\u30c1\u3057\u305f\u4e2d\u306b\u30b9\u30da\u30b7\u30e3\u30eb\u304c\u3042\u3063\u305f\u3000\u30ef\u30a4\u30e4\u30fc\u306a\u3057');
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num]);
                    this.stackRemoveObecjt(mInfo);
                    existCrush = true
                } else {
                    this.checkJellyWired(mInfo);
                    this.traceLog('\u30de\u30c3\u30c1\u3057\u305f\u4e2d\u306b\u30b9\u30da\u30b7\u30e3\u30eb\u304c\u3042\u3063\u305f\u3000\u30ef\u30a4\u30e4\u30fc\u3042\u308a')
                }
                matchVec.push(mInfo);
                continue
            }
            checkGroupeIndex = this._matchGroupeSetCrushVec.indexOf(mInfo.matchGroupeIndex);
            this.traceLog('_matchGroupeSetCrushVec::', this._matchGroupeSetCrushVec);
            this.traceLog('checkGroupeIndex::', checkGroupeIndex, mInfo.matchGroupeIndex, this._matchGroupeManager.specialPriorityVec.length, this._matchGroupeManager.specialPriorityVec);
            if (mInfo.matchGroupeIndex != -1)
                specialPriority = Number(this._matchGroupeManager.specialPriorityVec[mInfo.matchGroupeIndex]);
            else
                specialPriority = 0;
            if ((mInfo.checkHorizontal >= 4 || mInfo.checkVertical >= 4) && mInfo.isSwitch > 0 && checkGroupeIndex == -1) {
                this._sendMakeSpecialCount[1]++;
                this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30ec\u30a4\u30f3\u30dc\u30fc\u306b\u306a\u308b', mInfo.mx, mInfo.my, mInfo.isStackRemove);
                this.makeSpecialPiece(mInfo, 4)
            } else if (mInfo.checkHorizontal < 4 && mInfo.checkHorizontal > 0 && mInfo.checkVertical > 0 && mInfo.checkVertical < 4 && checkGroupeIndex == -1 && specialPriority == 1) {
                this._sendMakeSpecialCount[0]++;
                this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c8\u30b2\u306b\u306a\u308b');
                this.makeSpecialPiece(mInfo, 3)
            } else if ((mInfo.checkHorizontal == 3 || mInfo.checkVertical == 3) && mInfo.isSwitch > 0 && checkGroupeIndex == -1 && specialPriority == 0) {
                this._sendMakeSpecialCount[2]++;
                this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30bf\u30c6\u30e8\u30b3\u306b\u306a\u308b', mInfo.addScore);
                this.makeSpecialPiece(mInfo, mInfo.isSwitch)
            } else if (!mInfo.isStackRemove) {
                matchVec.push(mInfo);
                this.stackRemoveObecjt(mInfo);
                if (mInfo.hasWired == 0 && mInfo.isAcorn == -1)
                    this.checkAround(mInfo)
            }
            if (mInfo.isStackRemove && mInfo.crushType != 0 && mInfo.crushType < 5) {
                this.traceLog('decideMatch::mInfo.isStackRemove\u306e\u4e2d\u306bcrushType123', mInfo.crushType);
                stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num])
            }
        }
    var addDelay = 0;
    if (matchVec.length > 0 && existCrush) {
        len = matchVec.length;
        for (cnt = 0; cnt < len; cnt++) {
            matchVec[cnt].removeDelay += .5;
            this.traceLog('matchVec[cnt].removeDelay **** ', matchVec[cnt].removeDelay)
        }
        addDelay = .5
    }
    if (stackCrushVec.length > 0) {
        len = stackCrushVec.length;
        for (cnt = 0; cnt < len; cnt++)
            this.setCrushRemove(stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3])
    }
    this.traceLog('\u3053\u3053\u3053', this._map[5][5].isStackRemove);
    if (checkType == 0) {
        this.allBallsStyle();
        if (this._stackRemoveVec.length > 0) {
            this.removeBall();
            this._comboPrevCount++;
            this.showComboPraise();
            if (this._comboPrevCount % 3 == 0) {
                this.traceLog('\u30b3\u30f3\u30dc3\u56de\u3067\u30df\u30c3\u30b7\u30e7\u30f3\u30d4\u30fc\u30b9\u624b\u6570++');
                this._missionPieceBufferCount++
            }
            this.traceLog('\u30b3\u30f3\u30dcpraise\u7528\u9023\u9396 :: _comboPrevCount :: ', this._comboPrevCount)
        } else {
            this._comboPrevCount = 0;
            this.traceLog('\u6d88\u3059\u3082\u306e\u30ca\u30b7::\u30b2\u30fc\u30e0\u306e\u7d50\u679c\u3092\u78ba\u8a8d::checkGameResult');
            this.traceLog('\u4e00\u624b\u3054\u3068\u306e\u7372\u5f97\u30dd\u30a4\u30f3\u30c8:: _additionalPoint::', this._additionalPoint, this._isGameCleared);
            if (!this._isGameCleared) {
                this.traceLog('\u4e00\u624b\u3054\u3068\u306e\u7372\u5f97\u30dd\u30a4\u30f3\u30c8:: !_isGameCleared::checkGameResult\u3078');
                this.checkGameResult()
            } else {
                this.traceLog('_isGameCleared::autoCrushSpecialPiece\u3078');
                this.autoCrushSpecialPiece()
            }
            len = this._acornPieceBufferCurrent.length;
            for (cnt = 0; cnt < len; cnt++)
                this._acornPieceBufferCurrent[cnt]++;
            this._missionPieceBufferCount++;
            this.switchBallButtonMode(true)
        }
    } else if (checkType == 1) {
        this.traceLog('\u3053\u3053\u3053\u3053', this._map[5][5].isStackRemove);
        if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_SWITCH)
            this.startUseCheatItem(this._currentUseItemType);
        else if (this._stackRemoveVec.length > 0) {
            this.actSwitchNumber();
            this._comboPrevCount++;
            this.traceLog('\u30b3\u30f3\u30dcpraise\u7528 :: _comboPrevCount :: ', this._comboPrevCount);
            if (this._comboPrevCount % 3 == 0) {
                this.traceLog('\u30b3\u30f3\u30dc3\u56de\u3067\u30df\u30c3\u30b7\u30e7\u30f3\u30d4\u30fc\u30b9\u624b\u6570++');
                this._missionPieceBufferCount++
            }
        } else
            this.resetSwitchNumber()
    }
}
;
pigg.puzzle.view.GameView.prototype.makeSpecialPiece = function(mInfo, specialType) {
    var self = this;
    function delayCheck(mInfo) {
        self.traceLog('delayCheck');
        self.checkJellyWired(mInfo);
        self.checkCorrectPiece(mInfo, mInfo.ballType + 1)
    }
    com.greensock.TweenMax.to(mInfo, .28, {
        onComplete: delayCheck,
        onCompleteParams: [mInfo]
    });
    this.setCrushType(mInfo, specialType);
    mInfo.removeDelay = .28;
    this.checkAround(mInfo);
    this._matchGroupeSetCrushVec.push(mInfo.matchGroupeIndex);
    if (mInfo.hasMission != -1) {
        mInfo.hasMission = -1;
        this.checkGetMission(mInfo)
    }
    if (mInfo.addScore > 0)
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, mInfo.addScore, mInfo.ballType, false, .4)
}
;
pigg.puzzle.view.GameView.prototype.showComboPraise = function(finish) {
    finish = typeof finish !== 'undefined' ? finish : false;
    if (this._main.isLowSpecMode)
        return;
    if (this._main.isShowGameTutorial)
        return;
    if (!finish && this._comboPrevCount < 2)
        return;
    this.traceLog('setComboPraise::', this._comboPrevCount);
    if (!this._isShowComboPraise) {
        if (this._main.currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
            this._comboPraiseAnimalContainer.y = 80;
            this._comboPraiseAnimalContainer.scaleX = -.9;
            this._comboPraiseAnimalContainer.scaleY = .9
        } else {
            this._comboPraiseAnimalContainer.y = 125;
            this._comboPraiseAnimalContainer.scaleX = -.6;
            this._comboPraiseAnimalContainer.scaleY = .6
        }
        this._menuBottomContainer.swapChildren(this._menuBottomContainer.getChildAt(this._menuBottomContainer.numChildren - 1), this._comboPraiseContainer);
        this._main.addSpine(this._main.spineAnimal, this._comboPraiseAnimalContainer);
        this._main.spineAnimal.playAction('joy', 0, true);
        this._comboPraiseContainer.visible = true;
        com.greensock.TweenMax.killTweensOf(this._comboPraiseContainer);
        this._comboPraiseContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH;
        com.greensock.TweenMax.to(this._comboPraiseContainer, .15, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH - 200,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.showComboPraise, this, 'showComboPraise')
        });
        this._isShowComboPraise = true;
        return
    }
    if (this._main.currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX)
        ;
    else if (this._comboPrevCount == 2)
        ;if (finish || this._comboPrevCount < 2) {
        this._comboPraiseTxts.visible = false;
        return
    }
    this._numberFontManager.makeNumber('comboCount', this._comboPrevCount);
    if (!this._comboPraiseTxts.visible) {
        this._comboPraiseTxts.visible = true;
        this._comboPraiseTxts.y = -70;
        com.greensock.TweenMax.to(this._comboPraiseTxts, .5, {
            y: -100,
            ease: com.greensock.easing.Expo.easeOut
        })
    } else {
        this._comboPraiseTxts.y = -70;
        com.greensock.TweenMax.to(this._comboPraiseTxts, .5, {
            y: -100,
            ease: com.greensock.easing.Expo.easeOut
        })
    }
}
;
pigg.puzzle.view.GameView.prototype.hideComboPraise = function() {
    var self = this;
    var __localFn0__ = function() {
        self._comboPraiseTxts.visible = false
    };
    var __localFn1__ = function() {
        self._comboPraiseContainer.visible = false;
        if (self._main.spineAnimal.parent == self._comboPraiseAnimalContainer)
            self._main.spineAnimal.stopAction()
    };
    this.traceLog('hideComboPraise');
    if (!this._isShowComboPraise)
        return;
    this._isShowComboPraise = false;
    com.greensock.TweenMax.to(this._comboPraiseTxts, .65, {
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._comboPraiseContainer, .3, {
        delay: .65,
        x: pigg.puzzle.view.CommonView.STAGE_WIDTH,
        ease: com.greensock.easing.Cubic.easeIn,
        onComplete: __localFn1__
    })
}
;
pigg.puzzle.view.GameView.prototype.autoCrushSpecialPiece = function() {
    this.traceLog('autoCrushSpecialPiece');
    var mInfo;
    var cntX = 0
      , cnt2 = 0
      , cntY = 0
      , lenX = 0
      , lenY = 0
      , len2 = 0
      , cnt = 0
      , len = 0;
    var stackCrushVec;
    stackCrushVec = org.apache.royale.utils.Language.Vector();
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.crushType != 0) {
                stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num]);
                if (!mInfo.isStackRemove)
                    this.stackRemoveObecjt(mInfo)
            }
        }
    if (stackCrushVec.length > 0) {
        len = stackCrushVec.length;
        for (cnt = 0; cnt < len; cnt++)
            this.setCrushRemove(stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3])
    }
    if (this._stackRemoveVec.length > 0) {
        this._comboPrevCount++;
        this.showComboPraise(true);
        this.traceLog('autoCrushSpecialPiece:::_stackRemoveVec::', this._stackRemoveVec);
        this.traceLog('autoCrushSpecialPiece::removeBall');
        this.removeBall()
    } else {
        this.traceLog('autoCrushSpecialPiece::_isAuto', this._isAuto);
        if (this._isAuto == 1) {
            this.traceLog('autoCrushSpecialPiece::_isAuto \x3d\x3d 1:::startBonusPoint');
            this._isAuto = 2;
            this.startBonusPoint()
        } else {
            this.traceLog('autoCrushSpecialPiece::progress\u3067\u30af\u30ea\u30a2\u3092\u6295\u3052\u308b');
            if (this._isUseCheatItem != -1)
                this.sendUseCheatItem(true);
            else {
                this.traceLog('autoCrushSpecialPiece::sendProgressData');
                this.sendProgressData(true, true)
            }
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.makeBonusPoint = function() {
    var useItemCategory;
    this.traceLog('makeBonusPoint');
    this._bonusSpecialCount = this._clearMoveTimes - this._currentMoveTimes;
    if (this._bonusSpecialCount == 0) {
        if (this._isUseCheatItem != -1)
            this.sendUseCheatItem(true);
        else {
            this.traceLog('makeBonusPoint::sendProgressData');
            this.sendProgressData(true, true)
        }
        return
    }
    this.addBonusPoint()
}
;
pigg.puzzle.view.GameView.prototype.addBonusPoint = function() {
    var self = this;
    var __localFn0__ = function() {
        self.traceLog('addBonusPoint\u30af\u30ea\u30a2');
        if (self._isUseCheatItem != -1)
            self.sendUseCheatItem(true);
        else {
            self.traceLog('addBonusPoint::sendProgressData');
            self.sendProgressData(true, true)
        }
    };
    var useItemCategory;
    this._bonusSpecialCount--;
    this.traceLog('addBonusPoint:::addScore::');
    this.updateTimes();
    this.setThroughBonusPoint();
    if (this._bonusSpecialCount == 0)
        com.greensock.TweenMax.to(this, 1, {
            onComplete: __localFn0__
        });
    else
        com.greensock.TweenMax.to(this, .15, {
            onComplete: org.apache.royale.utils.Language.closure(this.addBonusPoint, this, 'addBonusPoint')
        })
}
;
pigg.puzzle.view.GameView.prototype.setThroughBonusPoint = function() {
    if (this._main.currentUsePotion == -1)
        this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE, null, null, 0, 540, 65);
    else
        this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE, null, null, 0, 540, 30)
}
;
pigg.puzzle.view.GameView.prototype.moveThroughBonusPoint = function(mc, distance, targetObj) {}
;
pigg.puzzle.view.GameView.prototype.removeThroughBonusPoint = function(removeMc, targetObj) {}
;
pigg.puzzle.view.GameView.prototype.removeThroughBonusScore = function() {
    this.traceLog('removeThroughBonusScore');
    this.addScore(1, 100, false);
    if (!this._main.isLowSpecMode)
        this._themeParticleView.makeBonusScoreParticle(this._main.currentUsePotion);
    this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
}
;
pigg.puzzle.view.GameView.prototype.checkGameResult = function(onLoad) {
    onLoad = typeof onLoad !== 'undefined' ? onLoad : false;
    this.traceLog('checkGameResult::');
    var useItemCategory;
    this._gamePieceMask.visible = false;
    this._gamePieceMask.scaleX = this._gamePieceMask.scaleY = 0;
    this._pieceContainer.mask = null;
    this.removeFromParent(this.pieceMaskCover);
    this.traceLog('checkGameResult:::', onLoad);
    if (this._main.currentThemeType == -1)
        return;
    if (this._main.currentThemeType == 0) {
        if (this._correctPieceArray[0][1] == this._correctPieceArray[0][2] && this._correctPieceArray[1][1] == this._correctPieceArray[1][2] && this._correctPieceArray[2][1] == this._correctPieceArray[2][2]) {
            this.traceLog('theme:\u6307\u5b9a\u30d4\u30fc\u30b9\u30af\u30ea\u30a2');
            this.startGameFinish();
            return
        }
    } else if (this._main.currentThemeType == 1) {
        if (this._currentJellyCount == 0) {
            this.traceLog('theme:\u30bc\u30ea\u30fc\u3092\u6d88\u3059\u30af\u30ea\u30a2');
            this.startGameFinish();
            return
        }
    } else if (this._main.currentThemeType == 2) {
        if (this._currentOrderCount[0] >= this._totalOrderCount[0] && this._currentOrderCount[1] >= this._totalOrderCount[1]) {
            this.traceLog('theme:\u4e0b\u306b\u843d\u3068\u3059\u30af\u30ea\u30a2\uff01');
            this.startGameFinish();
            return
        }
    } else if (this._main.currentThemeType == 3) {
        if (this._currentGameScore >= this._goalScore) {
            this.traceLog('theme:\u76ee\u6a19\u30b9\u30b3\u30a2\u30af\u30ea\u30a2\uff01', this._clearMoveTimes, this._currentMoveTimes);
            if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR) {
                this.traceLog('\u3057\u304b\u3057\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4e2d\u306a\u306e\u3067\u624b\u6570\u304c\u306a\u304f\u306a\u308b\u307e\u3067\u30af\u30ea\u30a2\u3092\u9001\u3089\u306a\u3044', this._clearMoveTimes, this._currentMoveTimes);
                if (this._clearMoveTimes == this._currentMoveTimes) {
                    this.traceLog('\u624b\u6570\u30bc\u30ed\u3067\u30af\u30ea\u30a2\u3092\u9001\u308b');
                    this.startGameFinish();
                    return
                } else {
                    if (!onLoad) {
                        this.traceLog('\u624b\u6570\u30bc\u30ed\u3058\u3083\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u9032\u6357');
                        this._comboCount = 0;
                        this._assistManager.checkMatchConnect();
                        this.sendProgressData(false, true)
                    }
                    return
                }
            }
            this.startGameFinish();
            return
        }
    } else if (this._main.currentThemeType == 4) {
        this.traceLog('theme:\u30d9\u30a2\u3092\u307b\u308a\u304a\u3053\u3059', this._currentMarshmallowCount, this._totalMarshmallowCount);
        if (this._currentMarshmallowCount == this._totalMarshmallowCount) {
            this.traceLog('theme:\u30d9\u30a2\u3092\u307b\u308a\u304a\u3053\u3059\u30af\u30ea\u30a2');
            this.startGameFinish();
            return
        }
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        this.traceLog('theme:\u82b1\u3092\u3042\u3064\u3081\u308b', this._currentFlowerCount, this._totalFlowerCount);
        if (this._currentFlowerCount == this._totalFlowerCount) {
            this.traceLog('theme:\u82b1\u3092\u3042\u3064\u3081\u308b');
            this._isGameCleared = true;
            this.startBonusCrush();
            this.updateKeepClearCount();
            return
        }
    }
    this.traceLog('theme:\u30af\u30ea\u30a2\u5931\u6557\u524d', this._currentMoveTimes, this._clearMoveTimes, this._clearMoveTimes - this._currentMoveTimes, this._main.userData.boardRemainingMoveCount);
    if (this._main.isLocal) {
        if (this._currentMoveTimes == this._clearMoveTimes) {
            this.traceLog('theme:\u30af\u30ea\u30a2\u5931\u6557', this._currentMoveTimes, this._clearMoveTimes);
            this._isSendingFailed = true;
            this.sendProgressData(false, true);
            return
        }
    } else if (this._currentMoveTimes == this._clearMoveTimes && this._clearMoveTimes - this._currentMoveTimes != this._main.userData.boardRemainingMoveCount) {
        this.traceLog('theme:\u30af\u30ea\u30a2\u5931\u6557', this._currentMoveTimes, this._clearMoveTimes);
        this._isSendingFailed = true;
        this.sendProgressData(false, true);
        return
    }
    this.traceLog('\u6d88\u3059\u3082\u306e\u30ca\u30b7::\u30b3\u30cd\u30af\u30c8\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d::checkMatchConnect', onLoad, this._isUseCheatItem, this._isShuffle);
    this._comboCount = 0;
    this._assistManager.checkMatchConnect();
    if (!onLoad)
        if (this._isUseCheatItem != -1)
            this.sendUseCheatItem(false);
        else if (this._clearMoveTimes - this._currentMoveTimes != this._main.userData.boardRemainingMoveCount)
            if (!this._isShuffle) {
                this.traceLog('\u901a\u5e38\u6642\u306f\u624b\u6570\u3092\u6e1b\u3089\u3057\u3066\u6295\u3052\u308b');
                this.sendProgressData(false, true)
            } else {
                this.traceLog('\u30b7\u30e3\u30c3\u30d5\u30eb\u5f8c\u306f\u624b\u6570\u3092\u6e1b\u3089\u3055\u305a\u6295\u3052\u308b');
                this._isShuffle = false;
                this.sendProgressData(false, false)
            }
        else if (this._isShuffle) {
            this.traceLog('\u30b7\u30e3\u30c3\u30d5\u30eb\u5f8c\u306f\u624b\u6570\u3092\u6e1b\u3089\u3055\u305a\u6295\u3052\u308b\uff12');
            this._isShuffle = false;
            this.sendProgressData(false, false)
        }
}
;
pigg.puzzle.view.GameView.prototype._isWaitProgressClearType = false;
pigg.puzzle.view.GameView.prototype.sendUseCheatItem = function(clearType) {
    clearType = typeof clearType !== 'undefined' ? clearType : true;
    this._isWaitProgressClearType = clearType;
    var useItemCategory;
    this._isSendingUseCheatItem = true;
    this.traceLog('\u4f7f\u7528sendUseCheatItem\u30a2\u30a4\u30c6\u30e0::', this._isUseCheatItem);
    if (this._isUseCheatItem == 0)
        useItemCategory = pigg.puzzle.view.CommonView.CHEAT_ITEM_SWITCH;
    else if (this._isUseCheatItem == 1)
        useItemCategory = pigg.puzzle.view.CommonView.CHEAT_ITEM_DELETE;
    else if (this._isUseCheatItem == 2)
        useItemCategory = pigg.puzzle.view.CommonView.CHEAT_ITEM_ARROW;
    this.traceLog('\u4f7f\u7528\u30a2\u30a4\u30c6\u30e0::', useItemCategory);
    this._main.loadDataManager.useCheatItem(useItemCategory);
    this._isUseCheatItem = -1
}
;
pigg.puzzle.view.GameView.prototype.onUseCheatItem = function() {
    this.traceLog('onUseCheatItem');
    this._isSendingUseCheatItem = false;
    this.sendProgressData(this._isWaitProgressClearType, false)
}
;
pigg.puzzle.view.GameView.prototype.startGameFinish = function() {
    this.traceLog('startGameFinish');
    this._comboCount = 0;
    this._comboPrevCount = 0;
    this._isGameCleared = true;
    this.startBonusCrush();
    this.updateKeepClearCount()
}
;
pigg.puzzle.view.GameView.prototype._testClear;
pigg.puzzle.view.GameView.prototype.sendProgressData = function(isClear, isDeclement) {
    isClear = typeof isClear !== 'undefined' ? isClear : false;
    isDeclement = typeof isDeclement !== 'undefined' ? isDeclement : true;
    this.traceLog('sendProgressData::', isClear, isDeclement, this._main.currentRemainEventStepPoint, this._currentGameScore);
    if (this._main.isLocal) {
        this._testClear = isClear;
        if (this._testClear && this._main.userData.boardUsingPuzzleScoreItemMagnification > 0)
            this._currentGameScore *= this._main.userData.boardUsingPuzzleScoreItemMagnification;
        this.traceLog('sendProgressData::_currentGameScore::', this._currentGameScore);
        if (isClear && (this._main.currentRemainEventStepPoint - this._currentGameScore <= 0 && !this._main.isEventComplete || this._main.currentRemainLimitedTermPoint - this._currentGameScore <= 0 && (this._main.isJoinSpecialChallenge == 2 || this._main.isJoinSpecialChallenge == 0) || this._main.currentRemainLimitedQuantityPoint - this._currentGameScore <= 0 && this._main.isJoinSpecialChallenge == 1)) {
            this.traceLog('\u30c0\u30df\u30fc\u306eJSON\u8aad\u307f\u8fbc\u3080');
            if (this._main.currentEventStep < pigg.puzzle.view.CommonView.EVENT_STEP_MAX)
                this._main.loadDataManager.sendProgress(isClear, this._additionalPoint, saveStr, this._sendMakeSpecialCount[0], this._sendMakeSpecialCount[1], this._sendMakeSpecialCount[2], isDeclement, this._additionaMissionlPoint, this._main.currentEventStep);
            else if (this._main.isJoinSpecialChallenge == 2 || this._main.isJoinSpecialChallenge == 0)
                this._main.loadDataManager.sendProgress(isClear, this._additionalPoint, saveStr, this._sendMakeSpecialCount[0], this._sendMakeSpecialCount[1], this._sendMakeSpecialCount[2], isDeclement, this._additionaMissionlPoint, 8);
            else if (this._main.isJoinSpecialChallenge == 1)
                this._main.loadDataManager.sendProgress(isClear, this._additionalPoint, saveStr, this._sendMakeSpecialCount[0], this._sendMakeSpecialCount[1], this._sendMakeSpecialCount[2], isDeclement, this._additionaMissionlPoint, 9)
        } else
            this.onProgress(null, isClear)
    } else {
        var saveStr = this._mappingView.saveGame();
        if (this._main.userData.boardUsingPuzzleScoreItemMagnification != 0 && this._main.userData.boardUsingPuzzleScoreItemCategory != null && this._main.userData.boardUsingPuzzleScoreItemCategory != '') {
            this.traceLog('_additionalPoint:::\u524d', this._additionalPoint);
            this._additionalPoint *= this._main.userData.boardUsingPuzzleScoreItemMagnification;
            this.traceLog('_additionalPoint\u306b\u4ed5\u69d8\u4e2d\u306e\u30dd\u30fc\u30b7\u30e7\u30f3\u52b9\u679c\u306e\u305b\u308b', this._additionalPoint)
        } else if (this._main.userData.equippedScoreItemCategory != null && this._main.userData.equippedScoreItemCategory != '') {
            this.traceLog('\u88c5\u5099\u4e2d::', this._main.userData.equippedScoreItemCategory);
            if (this._main.userData.equippedScoreItemCategory.indexOf(pigg.puzzle.view.CommonView.SCORE_ITEM_10) == 0)
                this._additionalPoint *= 10;
            else if (this._main.userData.equippedScoreItemCategory.indexOf(pigg.puzzle.view.CommonView.SCORE_ITEM_5) == 0)
                this._additionalPoint *= 5;
            else if (this._main.userData.equippedScoreItemCategory.indexOf(pigg.puzzle.view.CommonView.SCORE_ITEM_3) == 0)
                this._additionalPoint *= 3;
            else if (this._main.userData.equippedScoreItemCategory.indexOf(pigg.puzzle.view.CommonView.SCORE_ITEM_20) == 0)
                this._additionalPoint *= 20;
            this.traceLog('_additionalPoint\u306b\u88c5\u5099\u4e2d\u306e\u30dd\u30fc\u30b7\u30e7\u30f3\u52b9\u679c\u306e\u305b\u308b', this._additionalPoint)
        } else if (this._main.userData.boardUsingPuzzleScoreItemMagnification > 0)
            this._additionalPoint *= this._main.userData.boardUsingPuzzleScoreItemMagnification;
        this._isSendingProgressClear = isClear;
        this.traceLog('_main.loadDataManager.sendProgress::\u306a\u3052\u308b\u60c5\u5831', isClear, this._additionalPoint, saveStr, this._sendMakeSpecialCount[0], this._sendMakeSpecialCount[1], this._sendMakeSpecialCount[2], isDeclement, this._additionaMissionlPoint);
        this._main.loadDataManager.sendProgress(isClear, this._additionalPoint, saveStr, this._sendMakeSpecialCount[0], this._sendMakeSpecialCount[1], this._sendMakeSpecialCount[2], isDeclement, this._additionaMissionlPoint);
        this._additionalPoint = 0;
        this._additionaMissionlPoint = 0;
        this._isSendingProgress = true;
        this._isMouseEnable = false;
        this._sendMakeSpecialCount = [0, 0, 0]
    }
}
;
pigg.puzzle.view.GameView.prototype.onProgress = function(data, testClear) {
    data = typeof data !== 'undefined' ? data : null;
    testClear = typeof testClear !== 'undefined' ? testClear : false;
    this.traceLog('onProgress::', testClear);
    this._isShuffle = false;
    if (this._main.isLocal) {
        if (this._testClear) {
            if (data)
                this._progressData = data;
            this._main.userData.missionPoint += this._currentMissionPieceCount;
            this._main.totalMissionPieceCount += this._currentMissionPieceCount;
            if (this._main.totalMissionPieceCount >= this._main.eventData.missionRequiredPoint) {
                this._main.totalMissionPieceCount -= this._main.eventData.missionRequiredPoint;
                this._main.userData.isDuringRoulette = true
            }
            this.traceLog('_testClear', this._main.userData.isDuringRoulette, this._main.userData.missionPoint, this._main.totalMissionPieceCount);
            this.hideGameTelop();
            this.showGameClear();
            if (data) {
                if (this._main.specialChallengeExist) {
                    this._isGetLimitedTerm = data.isProvidedLimitedTermIncentive;
                    this._isGetLimitedQuantity = data.isProvidedLimitedQuantityIncentive;
                    this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30af\u30ea\u30a2\u30c1\u30a7\u30c3\u30af::', this._isGetLimitedTerm, this._isGetLimitedQuantity)
                }
                this.traceLog('\u30af\u30ea\u30a2\u8868\u793a::\u9023\u52dd\u542b\u307e\u306a\u3044\u7372\u5f97\u30dd\u30a4\u30f3\u30c8', data.themePoint, data.winningStreakPoint, this._main.userTutorialStatus);
                this._currentGameScore = Number(data.themePoint + data.winningStreakPoint);
                this._winningPoint = Number(data.winningStreakPoint)
            }
            this._winningPoint = this._main.keepClearCount * 100;
            if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
                this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30d7\u30e9\u30b9\u3059\u308b::', this._main.userTutorialStatus, '\u3092', this._main.userTutorialStatus + 1);
                this._main.userTutorialStatus++;
                this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
            } else if (this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND) {
                this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2ND\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30d7\u30e9\u30b9\u3059\u308b::', this._main.userTutorialStatus2nd, '\u3092', this._main.userTutorialStatus2nd + 1);
                if (this._main.userTutorialStatus2nd == 3)
                    this._waitDisplayMissionPanel = true;
                this._main.userTutorialStatus2nd++;
                this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
            }
        }
        if (!this._isGameCleared)
            this.hideComboPraise();
        this.removeFromParent(this.pieceMaskCover);
        this._isSendingProgress = false;
        if (!this._isGameCleared && this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
            this.checkOnProgressTutorial();
        if (this._isSendingFailed)
            this._main.loadDataManager.getContinueInfo();
        return
    }
    if (this._isSendingFailed)
        this._main.loadDataManager.getContinueInfo();
    this.removeFromParent(this.pieceMaskCover);
    if (this._clearMoveTimes - this._currentMoveTimes > 0) {
        this.traceLog('onProgress::\u624b\u6570\u304c\u3042\u308b\u306e\u3067\u30de\u30a6\u30b9\u8a31\u53ef');
        this._isMouseEnable = true
    } else
        this.traceLog('onProgress::\u624b\u6570\u304c\u306a\u3044\u306e\u3067\u30de\u30a6\u30b9\u8a31\u53ef\u3057\u306a\u3044');
    this.traceLog('onProgress::isThemeClear::', data.isThemeClear);
    this.traceLog('onProgress::isThemeClear::', data.isThemeClear);
    this.traceLog('onProgress::boardBaseData::', this._main.userData.boardBaseData);
    this.traceLog('onProgress::boardData::', this._main.userData.boardData);
    this._progressData = data;
    this._isSendingProgress = false;
    this.hideComboPraise();
    if (this._clearMoveTimes - this._currentMoveTimes > 0) {
        this.traceLog('onProgress::\u624b\u6570\u304c\u3042\u308b\u306e\u3067\u30de\u30a6\u30b9\u8a31\u53ef');
        this._isMouseEnable = true
    } else
        this.traceLog('onProgress::\u624b\u6570\u304c\u306a\u3044\u306e\u3067\u30de\u30a6\u30b9\u8a31\u53ef\u3057\u306a\u3044');
    if (data.isThemeClear) {
        if (this._main.specialChallengeExist) {
            this._isGetLimitedTerm = data.isProvidedLimitedTermIncentive;
            this._isGetLimitedQuantity = data.isProvidedLimitedQuantityIncentive;
            this.traceLog('\u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30e3\u30ec\u30f3\u30b8\u30af\u30ea\u30a2\u30c1\u30a7\u30c3\u30af::', this._isGetLimitedTerm, this._isGetLimitedQuantity);
            if (!this._main.userData.hasLimitedTermIncentive && this._isGetLimitedTerm)
                this._main.userData.hasLimitedTermIncentive = true;
            if (!this._main.userData.hasLimitedQuantityIncentive && this._isGetLimitedQuantity)
                this._main.userData.hasLimitedQuantityIncentive = true
        }
        this.traceLog('\u30af\u30ea\u30a2\u8868\u793a::\u9023\u52dd\u542b\u307e\u306a\u3044\u7372\u5f97\u30dd\u30a4\u30f3\u30c8', data.themePoint, data.winningStreakPoint, this._main.userTutorialStatus);
        this._currentGameScore = Number(data.themePoint + data.winningStreakPoint);
        this._winningPoint = Number(data.winningStreakPoint);
        this.showGameClear();
        if (this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30d7\u30e9\u30b9\u3059\u308b::', this._main.userTutorialStatus, '\u3092', this._main.userTutorialStatus + 1);
            this._main.userTutorialStatus++;
            if (this._main.userTutorialStatus == pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT) {
                this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30af\u30ea\u30a2');
                this._main.loadDataManager.clearPpoint('puzzle_tutorial_clear')
            }
            this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
        } else if (this._main.userTutorialStatus2nd < pigg.puzzle.view.CommonView.TUTORIAL_STAGE_COUNT_2ND) {
            this.traceLog('\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb2ND\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30d7\u30e9\u30b9\u3059\u308b::', this._main.userTutorialStatus2nd, '\u3092', this._main.userTutorialStatus2nd + 1);
            if (this._main.userTutorialStatus2nd == 3)
                this._waitDisplayMissionPanel = true;
            this._main.userTutorialStatus2nd++;
            this._main.loadDataManager.setUserStatus(String(this._main.userTutorialStatus) + ',' + this._main.userEventStatus + ',' + this._main.userTutorialStatus2nd + ',' + this._main.userTutorialStatusTemp + ',' + this._main.userSpStatus)
        }
    } else {
        this.traceLog('\u672a\u30af\u30ea\u30a2\u306e\u5834\u5408\u624b\u6570\u306e\u30ba\u30ec\u30c1\u30a7\u30c3\u30af::', data.remainignMoveTimes, this._clearMoveTimes - this._currentMoveTimes);
        this.traceLog('\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u624b\u6570::', data.remainignMoveTimes);
        this.traceLog('\u30d5\u30ed\u30f3\u30c8\u5074\u306e\u624b\u6570::', this._clearMoveTimes - this._currentMoveTimes);
        if (data.remainignMoveTimes > 0 && data.remainignMoveTimes != this._clearMoveTimes - this._currentMoveTimes) {
            this.traceLog('\u30ba\u30ec\u3042\u308a::\u30ea\u30ed\u30fc\u30c9');
            this._main.loadDataManager.reloadPage()
        }
    }
    if (!this._isGameCleared && this._main.userTutorialStatus < pigg.puzzle.view.CommonView.TUTORIAL_CLEAR)
        this.checkOnProgressTutorial()
}
;
pigg.puzzle.view.GameView.prototype.onGetContinueInfo = function(data) {
    data = typeof data !== 'undefined' ? data : null;
    this.traceLog('onGetContinueInfo');
    if (this._isGameCleared)
        return;
    if (!this._isSendingFailed)
        return;
    if (!this._main.isLocal) {
        if (this._main.userData.boardUUID == null)
            return;
        if (this._main.userData.boardUUID == '')
            return
    }
    this.traceLog('onGetContinueInfo:\u30af\u30ea\u30a2\u5931\u6557\u9001\u4fe1\u5224\u5b9a::', this._currentMoveTimes, this._clearMoveTimes, this._clearMoveTimes - this._currentMoveTimes, this._main.userData.boardRemainingMoveCount);
    this.traceLog('GameView::onGetContinueInfo::\u6240\u6301\u30b3\u30a4\u30f3', data.asCoinCount);
    this.traceLog('GameView::onGetContinueInfo::\u8ffd\u52a0\u624b\u6570', data.continueAddMoveCount);
    this.traceLog('GameView::onGetContinueInfo::\u8ffd\u52a0\u5024\u6bb5', data.continuePrice);
    this._asCoin = Number(data.asCoinCount);
    this._continuePrice = Number(data.continuePrice);
    this._continueAddTimes = Number(data.continueAddMoveCount);
    this._menuResultManager.showConfirmGiveUpPanel(this._asCoin, this._continuePrice, this._continueAddTimes);
    this._isSendingFailed = false
}
;
pigg.puzzle.view.GameView.prototype.checkAround = function(mInfo, self) {
    self = typeof self !== 'undefined' ? self : false;
    var targetMapInfo;
    if (self) {
        targetMapInfo = this._map[mInfo.mx][mInfo.my];
        if (targetMapInfo.isIcing && !targetMapInfo.isStackRemove)
            this.stackRemoveObecjt(targetMapInfo);
        return
    }
    if (mInfo.isHammer)
        return;
    if (mInfo.mx > 0) {
        targetMapInfo = this._map[mInfo.mx - 1][mInfo.my];
        if ((targetMapInfo.isIcing || targetMapInfo.isAcorn != -1) && !targetMapInfo.isStackRemove) {
            if (targetMapInfo.removeDelay == 0 || targetMapInfo.removeDelay < mInfo.removeDelay) {
                targetMapInfo.removeDelay = mInfo.removeDelay;
                targetMapInfo.filterDelay = targetMapInfo.removeDelay - .2
            }
            this.stackRemoveObecjt(targetMapInfo)
        } else if (targetMapInfo.num != -1 && targetMapInfo.num < 6 && targetMapInfo.isQuake == 0)
            this.stackQuakeObecjt(targetMapInfo)
    }
    if (mInfo.mx < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1) {
        targetMapInfo = this._map[mInfo.mx + 1][mInfo.my];
        if ((targetMapInfo.isIcing || targetMapInfo.isAcorn != -1) && !targetMapInfo.isStackRemove) {
            this.stackRemoveObecjt(targetMapInfo);
            if (targetMapInfo.removeDelay == 0 || targetMapInfo.removeDelay < mInfo.removeDelay) {
                targetMapInfo.removeDelay = mInfo.removeDelay;
                targetMapInfo.filterDelay = targetMapInfo.removeDelay - .2
            }
        } else if (targetMapInfo.num != -1 && targetMapInfo.num < 6 && targetMapInfo.isQuake == 0)
            this.stackQuakeObecjt(targetMapInfo)
    }
    if (mInfo.my > 0) {
        targetMapInfo = this._map[mInfo.mx][mInfo.my - 1];
        if ((targetMapInfo.isIcing || targetMapInfo.isAcorn != -1) && !targetMapInfo.isStackRemove) {
            this.stackRemoveObecjt(targetMapInfo);
            if (targetMapInfo.removeDelay == 0 || targetMapInfo.removeDelay < mInfo.removeDelay) {
                targetMapInfo.removeDelay = mInfo.removeDelay;
                targetMapInfo.filterDelay = targetMapInfo.removeDelay - .2
            }
        } else if (targetMapInfo.num != -1 && targetMapInfo.num < 6 && targetMapInfo.isQuake == 0)
            this.stackQuakeObecjt(targetMapInfo)
    }
    if (mInfo.my < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1) {
        targetMapInfo = this._map[mInfo.mx][mInfo.my + 1];
        if ((targetMapInfo.isIcing || targetMapInfo.isAcorn != -1) && !targetMapInfo.isStackRemove) {
            this.stackRemoveObecjt(targetMapInfo);
            if (targetMapInfo.removeDelay == 0 || targetMapInfo.removeDelay < mInfo.removeDelay) {
                targetMapInfo.removeDelay = mInfo.removeDelay;
                targetMapInfo.filterDelay = targetMapInfo.removeDelay - .2
            }
        } else if (targetMapInfo.num != -1 && targetMapInfo.num < 6 && targetMapInfo.isQuake == 0)
            this.stackQuakeObecjt(targetMapInfo)
    }
}
;
pigg.puzzle.view.GameView.prototype.setCrushRemove = function(crushType, px, py, ballType, baseRemoveDelay, baseInfo, bySwitch) {
    var self = this;
    baseRemoveDelay = typeof baseRemoveDelay !== 'undefined' ? baseRemoveDelay : 0;
    baseInfo = typeof baseInfo !== 'undefined' ? baseInfo : null;
    bySwitch = typeof bySwitch !== 'undefined' ? bySwitch : true;
    var __localFn0__ = function() {
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntX = 0; cntX < lenX; cntX++)
            for (cntY = 0; cntY < lenY; cntY++) {
                mInfo = self._map[cntX][cntY];
                if (mInfo.ballType == ballType && mInfo.crushType == 1 || mInfo.crushType == 2)
                    if (mInfo.hasWired == 0)
                        stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, 0]);
                    else {
                        mInfo.checkWired = true;
                        self.checkJellyWired(mInfo);
                        mInfo.isMakeByBomb = false
                    }
            }
        if (stackCrushVec.length > 0) {
            len = stackCrushVec.length;
            for (cnt = 0; cnt < len; cnt++)
                self.setCrushRemove(stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3], stackCrushVec[cnt][4])
        }
        self.removeBall()
    };
    var __localFn1__ = function() {
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntX = 0; cntX < lenX; cntX++)
            for (cntY = 0; cntY < lenY; cntY++) {
                mInfo = self._map[cntX][cntY];
                if (mInfo.ballType == ballType && mInfo.crushType == 3) {
                    self.traceLog('setCrushRemove::mInfo.hasWired::', mInfo.hasWired);
                    if (mInfo.hasWired == 0) {
                        stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, 0]);
                        addCnt++
                    } else {
                        mInfo.checkWired = true;
                        self.checkJellyWired(mInfo);
                        mInfo.isMakeByBomb = false
                    }
                }
            }
        if (stackCrushVec.length > 0) {
            len = stackCrushVec.length;
            for (cnt = 0; cnt < len; cnt++)
                self.setCrushRemove(stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3], stackCrushVec[cnt][4])
        }
        self.traceLog('removeBall\u5b9f\u884c');
        self.removeBall()
    };
    var cntX = 0
      , cntY = 0
      , lenX = 0
      , lenY = 0;
    var cnt = 0
      , len = 0;
    var cx = 0
      , cy = 0;
    var mInfo;
    var nX = 0;
    var nY = 0;
    var distance = 0;
    var addRemoveDelay = 0;
    var stackCrushVec;
    var stripeType = 0;
    var crushMapInfo = this._map[px][py];
    var chargeValue = 0;
    var addActDelay = .35;
    var addFilterDelay = .1;
    var addCnt = 0;
    var maxDist = 0;
    var isAutoBomb = false;
    if (crushMapInfo.isSetCrushRemove)
        return;
    else
        crushMapInfo.isSetCrushRemove = true;
    stackCrushVec = org.apache.royale.utils.Language.Vector();
    if (crushType == 1) {
        if (this._fallAllAddDelay < .1)
            this._fallAllAddDelay = .1;
        else
            this._fallAllAddDelay += 0;
        chargeValue = 10;
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[px][cntY];
            if (mInfo.isStackRemove)
                continue;
            addRemoveDelay = .03 * Math.abs(py - mInfo.my) + addActDelay;
            if (mInfo.isMakeByBomb)
                addRemoveDelay -= addActDelay;
            this.traceLog('\u30bf\u30c6\u6d88\u3057::', baseRemoveDelay);
            mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (this._isAuto == 0) {
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay)
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                if (mInfo.filterDelay == 0 || mInfo.filterDelay < baseRemoveDelay + addRemoveDelay - addFilterDelay)
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
            } else if (mInfo.crushType == 0)
                if (mInfo.removeDelay == 0 || mInfo.removeDelay < baseRemoveDelay + addRemoveDelay) {
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    if (mInfo.filterDelay == 0 || mInfo.filterDelay > baseRemoveDelay + addRemoveDelay - addFilterDelay)
                        mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
                }
            this.stackRemoveObecjt(mInfo);
            if (mInfo.crushType != 0 && mInfo.crushType != 1 && mInfo.crushType != 7 && !mInfo.isMakeByBomb && mInfo.hasWired == 0 && (!mInfo.isMakeByBomb || mInfo.isMakeByBomb && mInfo.checkWired)) {
                if (mInfo.crushType == 4)
                    ;stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        }
        this.checkAround(crushMapInfo)
    } else if (crushType == 2) {
        chargeValue = 10;
        if (this._fallAllAddDelay < .3)
            this._fallAllAddDelay = .3;
        else
            this._fallAllAddDelay += .05;
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][py];
            if (mInfo.isStackRemove)
                continue;
            addRemoveDelay = .03 * Math.abs(px - mInfo.mx) + addActDelay;
            if (mInfo.isMakeByBomb)
                addRemoveDelay -= addActDelay;
            mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (this._isAuto == 0) {
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay)
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                if (mInfo.filterDelay == 0 || mInfo.filterDelay < baseRemoveDelay + addRemoveDelay - addFilterDelay)
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
            } else if (mInfo.crushType == 0)
                if (mInfo.removeDelay == 0 || mInfo.removeDelay < baseRemoveDelay + addRemoveDelay) {
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    if (mInfo.filterDelay == 0 || mInfo.filterDelay > baseRemoveDelay + addRemoveDelay - addFilterDelay)
                        mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
                }
            this.traceLog('\u30e8\u30b3\u6d88\u3057::', mInfo.crushType, mInfo.hasWired, mInfo.isMakeByBomb, mInfo.checkWired);
            this.stackRemoveObecjt(mInfo);
            if (mInfo.crushType != 0 && mInfo.crushType != 2 && mInfo.crushType != 7 && mInfo.hasWired == 0 && (!mInfo.isMakeByBomb || mInfo.isMakeByBomb && mInfo.checkWired)) {
                this.traceLog('\u30e8\u30b3\u6d88\u3057::\u3067stackcrush::');
                stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        }
        this.checkAround(crushMapInfo)
    } else if (crushType == 3) {
        if (this._fallAllAddDelay < .2)
            this._fallAllAddDelay = .2;
        else
            this._fallAllAddDelay += .01;
        chargeValue = 15;
        lenX = px + 3;
        lenY = py + 3;
        cx = px - 2;
        cy = py - 2;
        if (lenX > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X)
            lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        if (lenY > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y)
            lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        if (cx < 0)
            cx = 0;
        if (cy < 0)
            cy = 0;
        this.traceLog('\u30c8\u30b2\u306e\u5b9f\u884c', bySwitch, px, py, baseRemoveDelay, addRemoveDelay);
        for (cntX = cx; cntX < lenX; cntX++)
            for (cntY = cy; cntY < lenY; cntY++) {
                distance = Math.abs(px - cntX) + Math.abs(py - cntY);
                if (distance > 2)
                    continue;
                mInfo = this._map[cntX][cntY];
                if (mInfo == null)
                    continue;
                if (bySwitch)
                    addRemoveDelay = .2;
                else
                    addRemoveDelay = 0;
                addRemoveDelay += addActDelay;
                if (mInfo.isMakeByBomb)
                    addRemoveDelay -= addActDelay;
                this.traceLog('\u30c8\u30b2\u8ddd\u96e2::', Math.abs(px - cntX) + Math.abs(py - cntY));
                this.traceLog('\u30c8\u30b2::mInfo::', mInfo.isMakeByBomb, mInfo.removeDelay, baseRemoveDelay, addRemoveDelay);
                if (!crushMapInfo.isMakeByBomb)
                    if (this._isAuto == 0) {
                        if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                            mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                            if (!mInfo.isSetCrushRemove)
                                mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay - (2 - distance) * .05
                        }
                    } else {
                        if (mInfo.crushType == 0)
                            if (mInfo.removeDelay == 0 || mInfo.removeDelay < baseRemoveDelay + addRemoveDelay) {
                                mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                                if (!mInfo.isSetCrushRemove)
                                    if (mInfo.filterDelay == 0 || mInfo.filterDelay > baseRemoveDelay + addRemoveDelay - addFilterDelay - (2 - distance) * .05)
                                        mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay - (2 - distance) * .05
                            }
                    }
                else if (crushMapInfo.isMakeByBomb) {
                    if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay)
                        mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    if (mInfo.filterDelay == 0 || mInfo.filterDelay < baseRemoveDelay + addRemoveDelay - addFilterDelay)
                        mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
                }
                mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
                if (mInfo.isStackRemove)
                    continue;
                this.stackRemoveObecjt(mInfo);
                if (!mInfo.isSetCrushRemove && mInfo.crushType != 7 && mInfo.crushType != 0 && mInfo.hasWired == 0 && (!mInfo.isMakeByBomb || mInfo.isMakeByBomb && mInfo.checkWired))
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
    } else if (crushType == 4) {
        chargeValue = 30;
        this.traceLog('\u30ec\u30a4\u30f3\u30dc\u30fc', crushMapInfo.mx, crushMapInfo.my, ballType, crushMapInfo.isStackRemove);
        if (ballType == 6) {
            ballType = org.apache.royale.utils.Language._int(Math.random() * 3);
            this._typeMapVec[ballType].push(this._map[px][py]);
            this._normalPieceMapVec.push(this._map[px][py]);
            isAutoBomb = true;
            crushMapInfo.num = ballType;
            crushMapInfo.ballType = ballType
        }
        var targetVec;
        if (ballType >= 12) {
            targetVec = this._acornVec[ballType - 12];
            crushMapInfo.num = ballType;
            crushMapInfo.ballType = ballType
        } else
            targetVec = this._typeMapVec[ballType];
        if (this._fallAllAddDelay < len * .01)
            this._fallAllAddDelay = len * .01;
        else
            this._fallAllAddDelay += .01;
        len = targetVec.length;
        for (cnt = 0; cnt < len; cnt++) {
            mInfo = targetVec[cnt];
            if (mInfo == null)
                continue;
            if (mInfo.isStackRemove)
                continue;
            mInfo.isWaitCrushEffect = true;
            nX = px - mInfo.mx;
            nY = py - mInfo.my;
            distance = Math.sqrt(nX * nX + nY * nY);
            if (!isAutoBomb)
                addRemoveDelay = len * .15 + .6 + .4;
            else
                addRemoveDelay = .6 + len * .05 + .2;
            mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                if (!isAutoBomb)
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - (len * .15 - .15 * cnt) + .1;
                else
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - (len * .05 - .05 * cnt) + .1
            }
            this.stackRemoveObecjt(mInfo);
            if (ballType < 12 && mInfo.hasWired == 0)
                this.checkAround(mInfo);
            if (mInfo.crushType != 0 && mInfo.isSwitch == 0 && mInfo.crushType != 7 && mInfo.hasWired == 0)
                stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay + .25])
        }
        this.traceLog('\u30ec\u30a4\u30f3\u30dc\u30fc', crushMapInfo.mx, crushMapInfo.my, ballType, crushMapInfo.isStackRemove);
        if (crushMapInfo)
            crushMapInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
        if (baseInfo)
            baseInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
        com.greensock.TweenMax.to(crushMapInfo, baseRemoveDelay + .3, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [crushType, px, py, ballType, isAutoBomb]
        })
    } else if (crushType == 5) {
        if (this._fallAllAddDelay < .4)
            this._fallAllAddDelay = .4;
        else
            this._fallAllAddDelay += .4;
        chargeValue = 30;
        addActDelay = .3;
        lenY = py + 2;
        cy = py - 1;
        if (lenY > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y)
            lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        if (cy < 0)
            cy = 0;
        for (cntY = cy; cntY < lenY; cntY++) {
            len = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
            for (cnt = 0; cnt < len; cnt++) {
                mInfo = this._map[cnt][cntY];
                if (mInfo == null)
                    continue;
                if (mInfo.isStackRemove)
                    continue;
                addRemoveDelay = .04 * Math.abs(px - mInfo.mx) + addActDelay;
                if (px < cnt)
                    addRemoveDelay += .6;
                if (cnt == px && cntY == py) {
                    mInfo.crushType = 5;
                    this.setCrushType(mInfo, 5)
                } else if (mInfo.crushType == 3 && mInfo.isSwitch != 0) {
                    mInfo.crushType = 0;
                    this.setCrushType(mInfo, 0)
                } else if ((mInfo.crushType == 1 || mInfo.crushType == 2) && mInfo.isSwitch != 0) {
                    mInfo.crushType = 0;
                    this.setCrushType(mInfo, 0)
                }
                mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - .2
                }
                this.stackRemoveObecjt(mInfo);
                if (mInfo.crushType != 0 && mInfo.isSwitch == 0 && mInfo.crushType != 7 && mInfo.crushType != 5 && mInfo.hasWired == 0)
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        }
        lenX = px + 2;
        cx = px - 1;
        if (lenX > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X)
            lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        if (cx < 0)
            cx = 0;
        for (cntX = cx; cntX < lenX; cntX++) {
            len = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
            for (cnt = 0; cnt < len; cnt++) {
                mInfo = this._map[cntX][cnt];
                if (mInfo == null)
                    continue;
                if (mInfo.isStackRemove || mInfo.isLeave)
                    continue;
                addRemoveDelay = .04 * Math.abs(py - mInfo.my) + addActDelay + .3;
                if (py > cnt)
                    addRemoveDelay += .6;
                mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - .2
                }
                this.stackRemoveObecjt(mInfo);
                if (mInfo.crushType != 0 && mInfo.isSwitch == 0 && mInfo.crushType != 7 && mInfo.hasWired == 0)
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        }
        com.greensock.TweenMax.to(mInfo.mc, baseRemoveDelay, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [crushType, px, py, ballType]
        })
    } else if (crushType == 6) {
        if (this._fallAllAddDelay < .2)
            this._fallAllAddDelay = .2;
        else
            this._fallAllAddDelay += .2;
        chargeValue = 35;
        lenX = px + 4;
        lenY = py + 4;
        cx = px - 3;
        cy = py - 3;
        if (lenX > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X)
            lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        if (lenY > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y)
            lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        if (cx < 0)
            cx = 0;
        if (cy < 0)
            cy = 0;
        addRemoveDelay = .4;
        addRemoveDelay += addActDelay;
        for (cntX = cx; cntX < lenX; cntX++)
            for (cntY = cy; cntY < lenY; cntY++) {
                distance = Math.abs(px - cntX) + Math.abs(py - cntY);
                if (distance > 4)
                    continue;
                mInfo = this._map[cntX][cntY];
                if (mInfo == null)
                    continue;
                if (mInfo.isStackRemove)
                    continue;
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                    mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay - (3 - distance) * .07
                }
                if (mInfo.crushType == 3 && mInfo.isSwitch != 0)
                    mInfo.ballCrushType = 0;
                mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
                this.stackRemoveObecjt(mInfo);
                this._stackAutoQuakeVec.push(mInfo);
                if (mInfo.crushType != 0 && mInfo.isSwitch == 0 && mInfo.crushType != 7 && mInfo.crushType != 8 && mInfo.hasWired == 0)
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        com.greensock.TweenMax.to(mInfo.mc, baseRemoveDelay + .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [crushType, px, py, ballType]
        })
    } else if (crushType == 7) {
        if (this._fallAllAddDelay < .3)
            this._fallAllAddDelay = .3;
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[px][cntY];
            if (mInfo.isStackRemove)
                continue;
            addRemoveDelay = .03 * Math.abs(py - mInfo.my) + addActDelay;
            mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                mInfo.removeDelay = baseRemoveDelay + addRemoveDelay + .2;
                mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
            }
            this.stackRemoveObecjt(mInfo);
            if (mInfo.isSwitch == 0 && mInfo.crushType != 0 && mInfo.crushType != 1 && mInfo.crushType != 7 && mInfo.hasWired == 0) {
                if (mInfo.crushType == 4)
                    ;stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
        }
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][py];
            if (mInfo.isStackRemove)
                continue;
            addRemoveDelay = .03 * Math.abs(px - mInfo.mx) + addActDelay;
            mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
            if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay) {
                mInfo.removeDelay = baseRemoveDelay + addRemoveDelay + .2;
                mInfo.filterDelay = baseRemoveDelay + addRemoveDelay - addFilterDelay
            }
            this.stackRemoveObecjt(mInfo);
            if (mInfo.isSwitch == 0 && mInfo.crushType != 0 && mInfo.crushType != 2 && mInfo.crushType != 7 && mInfo.hasWired == 0)
                stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
        }
        this.traceLog('\u77e2\u5370x\u77e2\u5370::', px, py, baseInfo.mx, baseInfo.my);
        com.greensock.TweenMax.to(mInfo, baseRemoveDelay + .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [1, px, py, ballType]
        });
        com.greensock.TweenMax.to(mInfo, baseRemoveDelay + .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [2, px, py, baseInfo.ballType]
        })
    } else if (crushType == 10) {
        chargeValue = 50;
        lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
        lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
        var bombRemoveCount = 0;
        for (cntX = 0; cntX < lenX; cntX++)
            for (cntY = 0; cntY < lenY; cntY++) {
                mInfo = this._map[cntX][cntY];
                if (mInfo.isStackRemove)
                    continue;
                addRemoveDelay = .02 * bombRemoveCount;
                bombRemoveCount++;
                if (mInfo.removeDelay == 0 || mInfo.removeDelay > baseRemoveDelay + addRemoveDelay)
                    mInfo.removeDelay = baseRemoveDelay + addRemoveDelay;
                mInfo.addScore = pigg.puzzle.view.CommonView.POINT_NORMAL_PIECE;
                this.stackRemoveObecjt(mInfo);
                if (mInfo.crushType != 0 && mInfo.crushType != 2 && mInfo.crushType != 7 && mInfo.crushType != 4 && mInfo.hasWired == 0)
                    stackCrushVec.push([mInfo.crushType, mInfo.mx, mInfo.my, mInfo.num, baseRemoveDelay + addRemoveDelay])
            }
    } else if (crushType == 11) {
        chargeValue = 30;
        maxDist = 0;
        addCnt = 0;
        len = Number(this._typeMapVec[ballType].length);
        for (cnt = 0; cnt < len; cnt++) {
            mInfo = this._typeMapVec[ballType][cnt];
            if (mInfo == null)
                continue;
            if (mInfo.isStackRemove)
                continue;
            nX = px - mInfo.mx;
            nY = py - mInfo.my;
            distance = Math.sqrt(nX * nX + nY * nY);
            addRemoveDelay = len * .15 + .65 + .4;
            mInfo.isMakeByBomb = true;
            if (mInfo.crushType == 0)
                if (Math.random() < .5)
                    stripeType = 1;
                else
                    stripeType = 2;
            this.setCrushType(mInfo, stripeType, 0, false, false);
            com.greensock.TweenMax.to(mInfo.mc, baseRemoveDelay + addRemoveDelay - (len * .15 - .15 * cnt) + .3, {
                onComplete: org.apache.royale.utils.Language.closure(this.setCrushType, this, 'setCrushType'),
                onCompleteParams: [mInfo, stripeType, 1, true]
            })
        }
        com.greensock.TweenMax.to(crushMapInfo, baseRemoveDelay + .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [4, px, py, ballType]
        });
        com.greensock.TweenMax.to(this, addRemoveDelay + .5, {
            onComplete: __localFn0__
        });
        return
    } else if (crushType == 12) {
        chargeValue = 30;
        maxDist = 0;
        addCnt = 0;
        this.traceLog('\u30dc\u30e0 x \u30c8\u30b2 (\u30b9\u30e9\u30a4\u30c9\u306e\u307f)');
        com.greensock.TweenMax.to(crushMapInfo, baseRemoveDelay + .2, {
            onComplete: org.apache.royale.utils.Language.closure(this.setCrushEffect, this, 'setCrushEffect'),
            onCompleteParams: [4, px, py, ballType]
        });
        len = Number(this._typeMapVec[ballType].length);
        for (cnt = 0; cnt < len; cnt++) {
            mInfo = this._typeMapVec[ballType][cnt];
            if (mInfo == null)
                continue;
            nX = px - mInfo.mx;
            nY = py - mInfo.my;
            distance = Math.sqrt(nX * nX + nY * nY);
            addRemoveDelay = len * .15 + .65 + .4;
            mInfo.isMakeByBomb = true;
            this.setCrushType(mInfo, 3, 0, false, false);
            if (cnt != len - 1)
                com.greensock.TweenMax.to(mInfo, baseRemoveDelay + addRemoveDelay - (len * .15 - .15 * cnt) + .3, {
                    onComplete: org.apache.royale.utils.Language.closure(this.setCrushType, this, 'setCrushType'),
                    onCompleteParams: [mInfo, 3, 1, true]
                })
        }
        this.traceLog('addRemoveDelay::', len, addRemoveDelay);
        com.greensock.TweenMax.to(baseInfo, .1 + addRemoveDelay + .25, {
            onComplete: __localFn1__
        });
        return
    }
    if (stackCrushVec.length > 0) {
        len = stackCrushVec.length;
        for (cnt = 0; cnt < len; cnt++) {
            this.traceLog('\u30b9\u30bf\u30c3\u30af\u3057\u305f\u30b9\u30da\u30b7\u30e3\u30eb\u30ad\u30e3\u30f3\u30c7\u30a3', stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3], stackCrushVec[cnt][4]);
            this.setCrushRemove(stackCrushVec[cnt][0], stackCrushVec[cnt][1], stackCrushVec[cnt][2], stackCrushVec[cnt][3], stackCrushVec[cnt][4])
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.setCrushType = function(mapInfo, type, isChange, autoCrush, isStack) {
    isChange = typeof isChange !== 'undefined' ? isChange : 0;
    autoCrush = typeof autoCrush !== 'undefined' ? autoCrush : false;
    isStack = typeof isStack !== 'undefined' ? isStack : true;
    this.traceLog('setCrushType:::', type);
    var isTransform = false;
    if (isChange != 2) {
        if (mapInfo.crushType != type)
            isTransform = true;
        mapInfo.crushType = type;
        mapInfo.ballCrushType = type
    }
    if (type == 4)
        mapInfo.num = 6;
    if (isChange != 0) {
        mapInfo.mc.changeCrushType(type);
        if (type != 0) {
            com.greensock.TweenMax.killTweensOf(mapInfo.mc);
            mapInfo.mc.scaleX = 1.5;
            mapInfo.mc.scaleY = 1.5;
            mapInfo.mc.setOrigin();
            com.greensock.TweenMax.to(mapInfo.mc, 1, {
                rotation: 0,
                scaleX: 1,
                scaleY: 1,
                onUpdate: org.apache.royale.utils.Language.closure(mapInfo.mc.setOrigin, mapInfo.mc, 'setOrigin'),
                ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
            });
            if (!this._isSetObject) {
                this.addSetCrushTypeEffect(mapInfo, type);
                this._main.playSE(pigg.puzzle.data.CommonData.SE_MAKE_SPECIAL)
            }
        }
    } else if (isStack)
        this.stackChangeTypeObecjt(mapInfo);
    if (isChange == 1 && autoCrush) {
        this.traceLog('autoCrush');
        this.setMatchBright(mapInfo, true, false);
        com.greensock.TweenMax.to(mapInfo.mc, 1, {
            delay: 0,
            rotation: 0,
            scaleX: 1.1,
            scaleY: 1.1,
            onUpdate: org.apache.royale.utils.Language.closure(mapInfo.mc.setOrigin, mapInfo.mc, 'setOrigin'),
            ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
        })
    }
}
;
pigg.puzzle.view.GameView.prototype.addSetCrushTypeEffect = function(mInfo, crushType) {
    if (mInfo == null)
        return;
    if (crushType < 1 || crushType > 4)
        return;
    this.traceLog('addSetCrushTypeEffect::', crushType);
    var brightLevel = Number(this._typeBrightFilterLevel[mInfo.ballType]);
    brightLevel = 100;
    var ct = new openfl.geom.ColorTransform;
    ct.redOffset = brightLevel;
    ct.greenOffset = brightLevel;
    ct.blueOffset = brightLevel;
    var tile;
    var tx = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE - this._crushTilemap.x + this._adjstObjPos - 2;
    var ty = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE - pigg.puzzle.view.CommonView.BALL_SIZE / 8 - this._crushTilemap.y + this._adjstObjPos + 6;
    if (crushType == 1)
        tile = new TileBase(this.RECT_ADD_EFFECT_ARROW_V[mInfo.ballType]);
    else if (crushType == 2)
        tile = new TileBase(this.RECT_ADD_EFFECT_ARROW_H[mInfo.ballType]);
    else if (crushType == 3)
        tile = new TileBase(this.RECT_CRUSH_TOGETOGE[mInfo.ballType]);
    else if (crushType == 4)
        tile = new TileBase(this.RECT_CRUSH_RAINBOW);
    this._crushTilemap.addTile(tile);
    tile.originX = tile.originY = this._adjstObjPos;
    tile.x = tx;
    tile.y = ty;
    tile.scaleX = tile.scaleY = 1;
    tile.colorTransform = ct;
    com.greensock.TweenMax.to(tile, .6, {
        scaleX: 2.2,
        scaleY: 2.2,
        alpha: 0,
        ease: com.greensock.easing.Expo.easeOut,
        onComplete: org.apache.royale.utils.Language.closure(this.removeTile, this, 'removeTile'),
        onCompleteParams: [tile]
    })
}
;
pigg.puzzle.view.GameView.prototype.setCrushEffect = function(crushType, px, py, ballType, autoBomb) {
    var self = this;
    autoBomb = typeof autoBomb !== 'undefined' ? autoBomb : false;
    var __localFn0__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile1, .35, {
            y: ty - 500,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile1]
        });
        com.greensock.TweenMax.to(tile2, .35, {
            y: ty + 500,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile2]
        })
    };
    var __localFn1__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile1, .35, {
            x: tx - 550,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile1]
        });
        com.greensock.TweenMax.to(tile2, .35, {
            x: tx + 550,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile2]
        })
    };
    var __localFn2__ = function() {
        for (cnt = 0; cnt < len - 1; cnt++) {
            mInfo = targetVec[cnt];
            if (!mInfo.mc.visible)
                continue;
            cebomb = new TileBase(self.RECT_CRUSH_RAINBOW);
            cebomb.originX = cebomb.originY = self._adjstObjPos;
            cebomb.x = tx;
            cebomb.y = ty;
            cebomb.colorTransform = ct;
            if (!autoBomb) {
                if (cnt == len - 2) {
                    self.traceLog('\u6700\u5f8c');
                    isEnd = true
                }
                self.traceLog('setCrushEffect::\u30de\u30c3\u30c1\u3067\u6d88\u3048\u308b');
                com.greensock.TweenMax.to(cebomb, cnt * .15, {
                    onComplete: appearBombEffect,
                    onCompleteParams: [cebomb, mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE - self._crushTilemap.x + self._adjstObjPos - 2, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE - self._crushTilemap.y + self._adjstObjPos, px, py, autoBomb, isEnd]
                })
            } else {
                self.traceLog('setCrushEffect::auto\u304b\u9023\u9396');
                com.greensock.TweenMax.to(cebomb, cnt * .05, {
                    onComplete: appearBombEffect,
                    onCompleteParams: [cebomb, mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE - self._crushTilemap.x + self._adjstObjPos - 2, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE - self._crushTilemap.y + self._adjstObjPos, px, py, autoBomb]
                })
            }
        }
    };
    function appearBombEffect(mc, tx, ty, pxx, pyy, ab, end) {
        ab = typeof ab !== 'undefined' ? ab : false;
        end = typeof end !== 'undefined' ? end : false;
        var __localFn0__ = function() {
            self._map[pxx][pyy].mc.originX = self._map[pxx][pyy].mc.originY = 0;
            self._map[pxx][pyy].mc.x = self._map[pxx][pyy].mx * pigg.puzzle.view.CommonView.BALL_SIZE + self._adjstObjPos;
            self._map[pxx][pyy].mc.y = self._map[pxx][pyy].my * pigg.puzzle.view.CommonView.BALL_SIZE + self._adjstObjPos
        };
        var __localFn1__ = function() {
            self._map[pxx][pyy].mc.originX = self._map[pxx][pyy].mc.originY = 0;
            self._map[pxx][pyy].mc.x = self._map[pxx][pyy].mx * pigg.puzzle.view.CommonView.BALL_SIZE + self._adjstObjPos;
            self._map[pxx][pyy].mc.y = self._map[pxx][pyy].my * pigg.puzzle.view.CommonView.BALL_SIZE + self._adjstObjPos
        };
        self._crushTilemap.addTile(mc);
        self._main.playSE(pigg.puzzle.data.CommonData.SE_RAINBOW_THROUGH);
        if (!ab) {
            if (!end) {
                com.greensock.TweenMax.killTweensOf(self._map[pxx][pyy].mc);
                self._map[pxx][pyy].mc.scaleX = self._map[pxx][pyy].mc.scaleY = 1.3;
                self._map[pxx][pyy].mc.rotation = 0;
                com.greensock.TweenMax.to(self._map[pxx][pyy].mc, 1, {
                    rotation: 360,
                    scaleX: 1.5,
                    scaleY: 1.5,
                    ease: com.greensock.easing.Elastic.easeOut
                })
            } else {
                com.greensock.TweenMax.killTweensOf(self._map[pxx][pyy].mc);
                self._map[pxx][pyy].mc.scaleX = self._map[pxx][pyy].mc.scaleY = 1.3;
                self._map[pxx][pyy].mc.rotation = 0;
                com.greensock.TweenMax.to(self._map[pxx][pyy].mc, 1, {
                    rotation: 360,
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut,
                    onComplete: __localFn0__
                })
            }
            mc.scaleX = mc.scaleY = 1
        } else {
            if (!end) {
                com.greensock.TweenMax.killTweensOf(self._map[pxx][pyy].mc);
                self._map[pxx][pyy].mc.scaleX = self._map[pxx][pyy].mc.scaleY = 1.1;
                self._map[pxx][pyy].mc.rotation = 0;
                com.greensock.TweenMax.to(self._map[pxx][pyy].mc, 1, {
                    rotation: 360,
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut,
                    onComplete: __localFn1__
                })
            } else {
                com.greensock.TweenMax.killTweensOf(self._map[pxx][pyy].mc);
                self._map[pxx][pyy].mc.scaleX = self._map[pxx][pyy].mc.scaleY = 1.1;
                com.greensock.TweenMax.to(self._map[pxx][pyy].mc, 1, {
                    rotation: 0,
                    scaleX: 1,
                    scaleY: 1,
                    ease: com.greensock.easing.Elastic.easeOut
                })
            }
            mc.scaleX = mc.scaleY = 1
        }
        com.greensock.TweenMax.to(mc, .78, {
            rotation: 1800,
            scaleX: .8,
            scaleY: .8,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(mc, .78, {
            x: tx,
            y: ty,
            ease: com.greensock.easing.Expo.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [mc]
        })
    }
    var __localFn4__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile1, .4, {
            x: tx - 550,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile1]
        });
        com.greensock.TweenMax.to(tile1, .35, {
            rotation: 560,
            ease: com.greensock.easing.Expo.easeOut
        })
    };
    var __localFn5__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile4, .35, {
            y: ty + 500,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile4]
        });
        com.greensock.TweenMax.to(tile4, .35, {
            rotation: 560,
            ease: com.greensock.easing.Expo.easeOut
        })
    };
    var __localFn6__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile2, .35, {
            x: tx + 500,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile2]
        });
        com.greensock.TweenMax.to(tile2, .35, {
            rotation: 560,
            ease: com.greensock.easing.Expo.easeOut
        })
    };
    var __localFn7__ = function() {
        self._main.playSE(pigg.puzzle.data.CommonData.SE_ARROW_START);
        com.greensock.TweenMax.to(tile3, .35, {
            y: ty - 500,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(self.removeTile, self, 'removeTile'),
            onCompleteParams: [tile3]
        });
        com.greensock.TweenMax.to(tile3, .35, {
            rotation: 560,
            ease: com.greensock.easing.Expo.easeOut
        })
    };
    var cnt = 0
      , len = 0;
    var mInfo;
    var tx, ty;
    var brightLevel = 0;
    if (crushType != 4)
        brightLevel = this._typeBrightFilterLevel[ballType] / 2;
    else
        brightLevel = 100;
    var ct = new openfl.geom.ColorTransform;
    ct.redOffset = brightLevel;
    ct.greenOffset = brightLevel;
    ct.blueOffset = brightLevel;
    tx = px * pigg.puzzle.view.CommonView.BALL_SIZE - this._crushTilemap.x + this._adjstObjPos - 2;
    ty = py * pigg.puzzle.view.CommonView.BALL_SIZE - pigg.puzzle.view.CommonView.BALL_SIZE / 8 - this._crushTilemap.y + this._adjstObjPos + 6;
    var tile1, tile2, tile3, tile4;
    if (crushType == 1) {
        this.traceLog('setCrushEffect::,crushType \x3d\x3d 1');
        tile1 = new TileBase(this.RECT_CRUSH_ARROW_V_U[ballType]);
        this._crushTilemap.addTile(tile1);
        tile1.x = tx;
        tile1.y = ty;
        tile1.originX = tile1.originY = this._adjstObjPos;
        tile1.scaleX = tile1.scaleY = .9;
        tile2 = new TileBase(this.RECT_CRUSH_ARROW_V_D[ballType]);
        this._crushTilemap.addTile(tile2);
        tile2.x = tx;
        tile2.y = ty;
        tile2.originX = tile2.originY = this._adjstObjPos;
        tile2.scaleX = tile2.scaleY = .9;
        tile2.rotation = Math.random() * 40 - 20;
        if (tile2.rotation < 0 && tile2.rotation > -10)
            tile2.rotation += -10;
        else if (tile2.rotation > 0 && tile2.rotation < 10)
            tile2.rotation += 10;
        tile1.rotation = Math.random() * 40 - 20;
        if (tile1.rotation < 0 && tile1.rotation > -10)
            tile1.rotation += -10;
        else if (tile1.rotation > 0 && tile1.rotation < 10)
            tile1.rotation += 10;
        com.greensock.TweenMax.to(tile1, 1, {
            scaleX: 1.2,
            scaleY: 1.2,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(tile2, 1, {
            scaleX: 1.2,
            scaleY: 1.2,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(tile1, .2, {
            onComplete: __localFn0__
        })
    } else if (crushType == 2) {
        this.traceLog('setCrushEffect::,crushType \x3d\x3d 2');
        tile1 = new TileBase(this.RECT_CRUSH_ARROW_H_L[ballType]);
        this._crushTilemap.addTile(tile1);
        tile1.x = tx;
        tile1.y = ty;
        tile1.originX = tile1.originY = this._adjstObjPos;
        tile2 = new TileBase(this.RECT_CRUSH_ARROW_H_R[ballType]);
        this._crushTilemap.addTile(tile2);
        tile2.x = tx;
        tile2.y = ty;
        tile2.originX = tile2.originY = this._adjstObjPos;
        tile2.rotation = Math.random() * 40 - 20;
        if (tile2.rotation < 0 && tile2.rotation > -10)
            tile2.rotation += -10;
        else if (tile2.rotation > 0 && tile2.rotation < 10)
            tile2.rotation += 10;
        tile1.rotation = Math.random() * 40 - 20;
        if (tile1.rotation < 0 && tile1.rotation > -10)
            tile1.rotation += -10;
        else if (tile1.rotation > 0 && tile1.rotation < 10)
            tile1.rotation += 10;
        tile1.scaleX = tile1.scaleY = .9;
        tile2.scaleX = tile2.scaleY = .9;
        com.greensock.TweenMax.to(tile1, 1, {
            scaleX: 1.2,
            scaleY: 1.2,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(tile2, 1, {
            scaleX: 1.2,
            scaleY: 1.2,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut
        });
        com.greensock.TweenMax.to(tile2, .2, {
            onComplete: __localFn1__
        })
    } else if (crushType == 3) {
        this.traceLog('\u30c8\u30b2\u30c8\u30b2\u30a8\u30d5\u30a7\u30af\u30c83');
        tile1 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        this._crushTilemap.addTile(tile1);
        tile1.x = tx;
        tile1.y = ty;
        tile1.originX = tile1.originY = this._adjstObjPos;
        tile1.scaleX = tile1.scaleY = 1;
        tile1.colorTransform = ct;
        com.greensock.TweenMax.to(tile1, .8, {
            rotation: 360,
            scaleX: 3.8,
            scaleY: 3.8,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(this.removeTile, this, 'removeTile'),
            onCompleteParams: [tile1]
        });
        this._main.playSE(pigg.puzzle.data.CommonData.SE_TOGETOGE_START)
    } else if (crushType == 4) {
        var cebomb;
        var targetVec;
        if (ballType >= 12) {
            targetVec = this._acornVec[ballType - 12];
            len = targetVec.length + 1
        } else {
            targetVec = this._typeMapVec[ballType];
            len = targetVec.length
        }
        var startPoint;
        var targetPoint;
        var startScale = 1.3;
        var startDelay = .35;
        this.traceLog('\u30dc\u30e0\u30a8\u30d5\u30a7\u30af\u30c8');
        var isEnd = false;
        if (autoBomb) {
            startScale = 1;
            startDelay = .2
        }
        this._tilemap.setTileIndex(this._map[px][py].mc, this._tilemap.numTiles - 1);
        this.traceLog('_map[px][py].mc.originX ::', this._map[px][py].mc.originX, this._map[px][py].mc.originY);
        com.greensock.TweenMax.killTweensOf(this._map[px][py].mc);
        this._map[px][py].mc.originX = this._map[px][py].mc.originY = this._adjstObjPos;
        this._map[px][py].mc.x = this._map[px][py].mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE;
        this._map[px][py].mc.y = this._map[px][py].my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE;
        this._map[px][py].mc.colorTransform = ct;
        com.greensock.TweenMax.to(this._map[px][py].mc, startDelay, {
            scaleX: startScale,
            scaleY: startScale,
            rotation: 720,
            ease: com.greensock.easing.Cubic.easeOut,
            onComplete: __localFn2__
        })
    } else if (crushType == 5) {
        tile1 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        tile2 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        tile3 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        tile4 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        tile1.colorTransform = ct;
        tile2.colorTransform = ct;
        tile3.colorTransform = ct;
        tile4.colorTransform = ct;
        tile1.x = tx;
        tile1.y = ty;
        tile1.originX = tile1.originY = this._adjstObjPos;
        tile1.scaleX = tile1.scaleY = 1;
        tile2.x = tx;
        tile2.y = ty;
        tile2.originX = tile2.originY = this._adjstObjPos;
        tile2.scaleX = tile2.scaleY = 1;
        tile3.x = tx;
        tile3.y = ty;
        tile3.originX = tile3.originY = this._adjstObjPos;
        tile3.scaleX = tile3.scaleY = 1;
        tile4.x = tx;
        tile4.y = ty;
        tile4.originX = tile4.originY = this._adjstObjPos;
        tile4.scaleX = tile4.scaleY = 1;
        this._crushTilemap.addTile(tile3);
        this._crushTilemap.addTile(tile2);
        this._crushTilemap.addTile(tile4);
        this._crushTilemap.addTile(tile1);
        com.greensock.TweenMax.to(tile1, .3, {
            rotation: 360,
            scaleX: 3.2,
            scaleY: 3.2,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(tile2, .9, {
            rotation: 360,
            scaleX: 3.2,
            scaleY: 3.2,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(tile3, 1.2, {
            rotation: 360,
            scaleX: 3.2,
            scaleY: 3.2,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(tile4, .6, {
            rotation: 360,
            scaleX: 3.2,
            scaleY: 3.2,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(tile1, .3, {
            onComplete: __localFn4__
        });
        com.greensock.TweenMax.to(tile4, .6, {
            onComplete: __localFn5__
        });
        com.greensock.TweenMax.to(tile2, .9, {
            onComplete: __localFn6__
        });
        com.greensock.TweenMax.to(tile3, 1.2, {
            onComplete: __localFn7__
        })
    } else if (crushType == 6) {
        this.traceLog('\u30c8\u30b2\u30c8\u30b2\u30a8\u30d5\u30a7\u30af\u30c86');
        tile1 = new TileBase(this.RECT_CRUSH_TOGETOGE[ballType]);
        this._crushTilemap.addTile(tile1);
        tile1.x = tx;
        tile1.y = ty;
        tile1.originX = tile1.originY = this._adjstObjPos;
        this._main.playSE(pigg.puzzle.data.CommonData.SE_TOGETOGE_LARGE_START);
        com.greensock.TweenMax.to(tile1, .9, {
            rotation: 720,
            scaleX: 7,
            scaleY: 7,
            ease: com.greensock.easing.Sine.easeIn,
            onComplete: org.apache.royale.utils.Language.closure(this.removeTile, this, 'removeTile'),
            onCompleteParams: [tile1]
        })
    }
    if (crushType == 15)
        ;
}
;
pigg.puzzle.view.GameView.prototype.removeEffect = function(mc) {
    this.removeFromParent(mc);
    mc = null
}
;
pigg.puzzle.view.GameView.prototype.setAutoQuake = function(isSet) {
    isSet = typeof isSet !== 'undefined' ? isSet : true;
    if (this._stackAutoQuakeVec == null)
        return;
    if (this._stackAutoQuakeVec.length == 0)
        return;
    this.traceLog('setAutoQuake::', isSet);
    var cnt = 0
      , len = 0;
    var mInfo;
    this._isAutoQuake = isSet;
    len = this._stackAutoQuakeVec.length;
    if (isSet)
        for (cnt = 0; cnt < len; cnt++) {
            mInfo = this._stackAutoQuakeVec[cnt];
            this.tweenQuake(mInfo)
        }
    else
        for (cnt = 0; cnt < len; cnt++)
            mInfo = this._stackAutoQuakeVec[cnt]
}
;
pigg.puzzle.view.GameView.prototype.tweenQuake = function(mInfo) {
    if (!this._isAutoQuake)
        return
}
;
pigg.puzzle.view.GameView.prototype.addScoreTxt = function(mx, my, score, typeNum, isMarshmallow, delay) {
    isMarshmallow = typeof isMarshmallow !== 'undefined' ? isMarshmallow : false;
    delay = typeof delay !== 'undefined' ? delay : .1;
    var addTime = 0;
    var mc;
    var baseMX = mx;
    var baseMY = my;
    this.traceLog('addScoreTxt::', score, typeNum, isMarshmallow);
    if (!isMarshmallow) {
        if (typeNum == 13 || typeNum == 14)
            addTime = .3
    } else {
        delay = .1;
        if (typeNum == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_S) {
            addTime = .5;
            my += 10
        } else if (typeNum == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_M) {
            addTime = .7;
            my += 45
        } else if (typeNum == pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_L) {
            addTime = .9;
            my += 40
        }
    }
    my += pigg.puzzle.view.CommonView.BALL_SIZE - 5;
    this._makeScoreManager.makeScore(score, mx, my, typeNum, delay, addTime);
    this.addScore(0, score);
    this.traceLog('addScoreTxt::', mx, my);
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE && this._currentDisplayScore < this._goalScore) {
        if (typeNum == 13 || typeNum == 14)
            ;this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_SCORE, null, this._themeTileArray[0], score, baseMX, baseMY - 5)
    }
}
;
pigg.puzzle.view.GameView.prototype.removeAddScoreTxt = function(target, delay) {
    var self = this;
    delay = typeof delay !== 'undefined' ? delay : 0;
    var __localFn0__ = function() {
        if (target.parent)
            self.removeTile(target);
        if (self._addScoreVec && self._addScoreVec.length > 0 && self._addScoreVec.indexOf(target) != -1)
            self._addScoreVec.splice(self._addScoreVec.indexOf(target), 1);
        target = null
    };
    com.greensock.TweenMax.to(target, delay, {
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.GameView.prototype.stackRemoveObecjt = function(mInfo, order) {
    order = typeof order !== 'undefined' ? order : false;
    if (mInfo.isLeave)
        return;
    if (mInfo.isStackRemove)
        return;
    if (mInfo.isFixVoid)
        return;
    if (mInfo.isThroughVoid)
        return;
    mInfo.isStackRemove = true;
    this._stackRemoveVec.push(mInfo);
    this._stackFilterVec.push(mInfo)
}
;
pigg.puzzle.view.GameView.prototype.pickUpRemoveObecjt = function(mInfo) {
    this._stackRemoveVec.splice(this._stackRemoveVec.indexOf(mInfo), 1)
}
;
pigg.puzzle.view.GameView.prototype.stackChangeTypeObecjt = function(mInfo) {
    if (mInfo.isStackSetCrush)
        return;
    mInfo.isStackSetCrush = true;
    this._stackChangeTypeVec.push(mInfo)
}
;
pigg.puzzle.view.GameView.prototype.stackQuakeObecjt = function(mInfo) {
    if (mInfo.isFixVoid)
        return;
    if (mInfo.isQuake == 1)
        return;
    if (mInfo.isStackRemove)
        return;
    if (mInfo.isThroughVoid)
        return;
    this._stackQuakeVec.push(mInfo)
}
;
pigg.puzzle.view.GameView.prototype.stackFilterObecjt = function(mInfo) {
    if (mInfo.isFixVoid)
        return;
    if (mInfo.isQuake == 1)
        return;
    if (mInfo.isStackRemove)
        return;
    if (mInfo.isThroughVoid)
        return;
    this._stackFilterVec.push(mInfo)
}
;
pigg.puzzle.view.GameView.prototype.removeBall = function(isSwitch) {
    isSwitch = typeof isSwitch !== 'undefined' ? isSwitch : false;
    if (this._stackRemoveVec == null || this._stackRemoveVec.length == 0) {
        if (this._isStartAction)
            this._isStartAction = false;
        this.traceLog('\u6d88\u3059\u3082\u306e\u30ca\u30b7:::removeBall::')
    }
    if (this._stackRemoveVec == null)
        return;
    if (this._stackRemoveVec.length == 0) {
        this.traceLog('::removeBall::_stackRemoveVec.length', this._currentUseItemType);
        if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_SWITCH) {
            this.traceLog('::removeBall::allBallsDisplay');
            this.fixSwitchNumber();
            this.allBallsDisplay();
            this.endUseCheatItem();
            this.traceLog('::removeBall::checkMatchConnect');
            this._assistManager.checkMatchConnect()
        }
        return
    }
    if (isSwitch) {
        this.traceLog('removeBall::isSwitch::fixSwitchNumber');
        this.fixSwitchNumber()
    }
    if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_SWITCH)
        this.endUseCheatItem();
    this._emptyBalls = org.apache.royale.utils.Language.Vector();
    this._isFlush = true;
    this._gamePieceMask.visible = true;
    this._gamePieceMask.scaleX = this._gamePieceMask.scaleY = this._gameMaterialContainer.scaleX;
    this._gamePieceMask.x = this._gameMaterialContainer.x;
    this._gamePieceMask.y = this._gameMaterialContainer.y;
    if (this._pieceContainer.mask == null)
        this._pieceContainer.mask = this._gamePieceMask;
    this.addChild(this.pieceMaskCover);
    var mInfo;
    var cnt = 0
      , len = 0;
    var ce;
    var maxDelay = 0;
    var delayTime = 0;
    var addSwitchDelay = 0;
    this._removeBallCount = 0;
    this._fallMotionCount = 0;
    this._removeLineArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._removeActionArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    len = this._stackRemoveVec.length;
    for (cnt = 0; cnt < len; cnt++) {
        mInfo = this._stackRemoveVec[cnt];
        if (mInfo.isVoid)
            continue;
        if (this._stackRemoveVec[cnt].crushEffect == null) {
            ce = new openfl.display.MovieClip;
            this._stackRemoveVec[cnt].crushEffect = ce;
            this._effectContainer.addChild(ce);
            ce.x = this._stackRemoveVec[cnt].mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            ce.y = this._stackRemoveVec[cnt].my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
        } else if (this._stackRemoveVec[cnt].crushEffect.parent == null)
            this._effectContainer.addChild(this._stackRemoveVec[cnt].crushEffect);
        delayTime = mInfo.removeDelay;
        if (mInfo.hasWired == 0)
            mInfo.num = -1;
        mInfo.isDelete = true;
        if (mInfo.isIcing) {
            mInfo.iceLevel--;
            if (mInfo.iceLevel == 0) {
                mInfo.isMovable = true;
                mInfo.isIcing = false;
                mInfo.isFix = false;
                mInfo.ballCrushType = 20;
                this.traceLog('\u30a2\u30a4\u30b7\u30f3\u30b0\u7834\u58ca', mInfo.mx, mInfo.my)
            } else {
                mInfo.isDelete = false;
                mInfo.isIcing = true;
                mInfo.isFix = true;
                mInfo.isMovable = false;
                this.traceLog('\u30a2\u30a4\u30b7\u30f3\u30b01\u306b\u5909\u5316', mInfo.mx, mInfo.my);
                mInfo.ballCrushType = 21
            }
        }
        if (mInfo.hasMission != -1) {
            mInfo.crushMission = mInfo.hasMission;
            mInfo.hasMission = -1
        }
        if (mInfo.hasWired > 0) {
            mInfo.hasWired = 0;
            mInfo.isMovable = true;
            mInfo.isDelete = false;
            mInfo.checkWired = true
        } else if (mInfo.isOrder != -1)
            if (mInfo.my == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 || this._map[mInfo.mx][mInfo.my + 1].isThroughOrder) {
                this._appearOrderCount[mInfo.isOrder]--;
                this._currentOrderCount[mInfo.isOrder]++;
                if (mInfo.isOrder == 0)
                    mInfo.ballCrushType = 10;
                else
                    mInfo.ballCrushType = 11;
                mInfo.isOrder = -1;
                delayTime -= .3;
                this._checkOrderTimes = 0
            } else {
                mInfo.num = 10;
                mInfo.isDelete = false;
                mInfo.checkJelly = true
            }
        else {
            mInfo.checkWired = false;
            mInfo.isCheckedWired = false
        }
        if (maxDelay < delayTime)
            maxDelay = delayTime;
        if (!mInfo.isFix && !mInfo.isIcing && mInfo.isOrder == -1 && !mInfo.checkWired) {
            this._removeLineArray[mInfo.mx] += 1;
            this._removeBallCount++;
            this._removeLineCount++
        }
        if (this._comboCount == 0)
            addSwitchDelay = .28;
        else
            addSwitchDelay = .28;
        this._removeActionCount++;
        this._removeActionArray[mInfo.mx]++;
        com.greensock.TweenMax.to(mInfo, delayTime + .01 + addSwitchDelay, {
            onComplete: org.apache.royale.utils.Language.closure(this.removeAction, this, 'removeAction'),
            onCompleteParams: [mInfo]
        })
    }
    len = this._stackFilterVec.length;
    this.traceLog('removeBall::bb', len);
    var dTime = 1;
    for (cnt = 0; cnt < len; cnt++) {
        mInfo = this._stackFilterVec[cnt];
        if (mInfo.isOrder != -1)
            continue;
        if (mInfo.ballCrushType == 10 || mInfo.ballCrushType == 11)
            continue;
        if (mInfo.isCheckedWired && mInfo.crushType == 0)
            continue;
        com.greensock.TweenMax.to(mInfo.mc, 0, {
            delay: mInfo.filterDelay,
            onComplete: org.apache.royale.utils.Language.closure(this.setMatchBright, this, 'setMatchBright'),
            onCompleteParams: [mInfo, true]
        });
        if (mInfo.isIcing || mInfo.checkWired)
            com.greensock.TweenMax.to(mInfo.mc, 1, {
                delay: mInfo.filterDelay,
                rotation: 0,
                scaleX: 1,
                scaleY: 1,
                originX: 0,
                originY: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
            });
        else
            com.greensock.TweenMax.to(mInfo.mc, 1, {
                delay: mInfo.filterDelay,
                rotation: 0,
                scaleX: 1.1,
                scaleY: 1.1,
                originX: -(1 - 1.1) * this._adjstObjPos,
                originY: -(1 - 1.1) * this._adjstObjPos,
                ease: com.greensock.easing.Elastic.easeOut.config(1.5, .2)
            })
    }
    this.traceLog('removeBall::cc');
    len = this._stackQuakeVec.length;
    for (cnt = 0; cnt < len; cnt++) {
        mInfo = this._stackQuakeVec[cnt];
        if (mInfo.isStackRemove)
            continue
    }
    if (this._stackChangeTypeVec && this._stackChangeTypeVec.length > 0) {
        len = this._stackChangeTypeVec.length;
        for (cnt = 0; cnt < len; cnt++) {
            if (this._stackChangeTypeVec.length < cnt - 1)
                break;
            if (this._stackChangeTypeVec[cnt].isStackRemove) {
                this.addSetCrushTypeEffect(this._stackChangeTypeVec[cnt], this._stackChangeTypeVec[cnt].crushType);
                continue
            }
            if (this._stackChangeTypeVec[cnt].crushType != 7) {
                this.traceLog('removeBall\u306b\u3088\u308b_stackChangeTypeVec::', this._stackChangeTypeVec[cnt].mx, this._stackChangeTypeVec[cnt].my);
                this.setCrushType(this._stackChangeTypeVec[cnt], this._stackChangeTypeVec[cnt].crushType, 1)
            }
        }
    }
    this.traceLog('\u3069\u3046\u306a::', this._map[5][5].isStackRemove);
    this.updateDeleteBall()
}
;
pigg.puzzle.view.GameView.prototype.setMatchBright = function(mInfo, isSet, crushEffect) {
    isSet = typeof isSet !== 'undefined' ? isSet : true;
    crushEffect = typeof crushEffect !== 'undefined' ? crushEffect : true;
    if (mInfo.ballCrushType == 10 || mInfo.ballCrushType == 11)
        return;
    if (isSet) {
        if (mInfo.isWaitCrushEffect) {
            mInfo.mc.rotation = Math.random() * 60 - 30;
            if (mInfo.mc.rotation < 0 && mInfo.mc.rotation > -20)
                mInfo.mc.rotation += -20;
            else if (mInfo.mc.rotation > 0 && mInfo.mc.rotation < 20)
                mInfo.mc.rotation += 20
        } else {
            mInfo.mc.rotation = Math.random() * 40 - 20;
            if (mInfo.mc.rotation < 0 && mInfo.mc.rotation > -10)
                mInfo.mc.rotation += -10;
            else if (mInfo.mc.rotation > 0 && mInfo.mc.rotation < 10)
                mInfo.mc.rotation += 10
        }
        mInfo.mc.scaleX = mInfo.mc.scaleY = .9;
        mInfo.mc.setOrigin();
        var brightLevel = 0;
        if (mInfo.crushType == 4 && mInfo.isSwitch != 0)
            brightLevel = 30;
        else if (mInfo.ballCrushType == 4)
            brightLevel = 200;
        else if (mInfo.ballCrushType == 21)
            brightLevel = 80;
        else if (mInfo.ballCrushType == 12 || mInfo.ballCrushType == 14)
            brightLevel = 120;
        else if (mInfo.ballCrushType == 13 || mInfo.ballCrushType == 15)
            brightLevel = 70;
        else if (mInfo.ballCrushType == 20)
            brightLevel = 120;
        else if (mInfo.ballCrushType != 0)
            brightLevel = this._typeBrightFilterLevel[mInfo.ballType] / 2;
        else if (mInfo.num != -1 && mInfo.crushType != 4)
            brightLevel = Number(this._typeBrightFilterLevel[mInfo.ballType]);
        else
            brightLevel = 100;
        if (brightLevel == 0 || brightLevel == NaN)
            brightLevel = 120;
        var ct = new openfl.geom.ColorTransform;
        ct.redOffset = brightLevel;
        ct.greenOffset = brightLevel;
        ct.blueOffset = brightLevel;
        mInfo.mc.colorTransform = ct;
        this.traceLog('brightLevel::', mInfo.ballCrushType, brightLevel);
        var color_matrix_filter = new openfl.filters.ColorMatrixFilter;
        color_matrix_filter.matrix = [1, 0, 0, 0, brightLevel, 0, 1, 0, 0, brightLevel, 0, 0, 1, 0, brightLevel, 0, 0, 0, 1, 0];
        if (mInfo.checkWired) {
            color_matrix_filter.matrix = [1, 0, 0, 0, 120, 0, 1, 0, 0, 120, 0, 0, 1, 0, 120, 0, 0, 0, 1, 0];
            mInfo.wiredObjct.colorTransform = ct
        }
        if (crushEffect && !mInfo.isWaitCrushEffect && !mInfo.checkWired)
            if (mInfo.ballCrushType == 1 || mInfo.ballCrushType == 2 || mInfo.ballCrushType == 3) {
                this.setCrushEffect(mInfo.ballCrushType, mInfo.mx, mInfo.my, mInfo.ballType);
                if (mInfo.ballCrushType == 1 || mInfo.ballCrushType == 2)
                    ;mInfo.mc.visible = false;
                mInfo.ballCrushType = 0
            }
        this._main.playSE(pigg.puzzle.data.CommonData.SE_MATCH)
    } else
        mInfo.mc.colorTransform = null
}
;
pigg.puzzle.view.GameView.prototype.updateDeleteBall = function() {
    this.addEmptyBall = [];
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt = 0
      , len = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var mInfo;
    this.tempBallArray = [];
    var checkChange = false;
    var arr = [];
    var arr2 = [];
    var addNum = 0;
    var unmovable = -1;
    var throughable = [];
    var voidCount = 0;
    var addCount = 0;
    var prevNum = 0;
    var rejectNum = 0;
    var addOrder = -1;
    var addAcorn = -1;
    var hasMission = -1;
    for (cntX = 0; cntX < lenX; cntX++) {
        voidCount = 0;
        this.addEmptyBall[cntX] = [];
        this.tempBallArray[cntX] = [];
        arr = [];
        arr2 = [];
        unmovable = -1;
        throughable = [];
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[cntX][cntY];
            if (!mInfo.isThroughVoid && (mInfo.isFix || !mInfo.isMovable) || mInfo.isWarpOut != -1)
                unmovable = cntY;
            if (mInfo.isThroughVoid)
                throughable.push(cntY);
            if (mInfo.num != -1) {
                this.tempBallArray[cntX].push([mInfo.num, mInfo.crushType, mInfo.isLeave, mInfo.isOrder, mInfo.isAcorn, mInfo.hasMission]);
                arr2.push(mInfo.num)
            } else if (mInfo.isThroughVoid)
                voidCount++;
            else if (unmovable != -1)
                if (this._map[cntX][unmovable].hasWired == 0)
                    if (unmovable - voidCount >= 0) {
                        this.tempBallArray[cntX].splice(unmovable - voidCount, 0, [mInfo.num, 0, mInfo.isLeave, mInfo.isOrder, mInfo.isAcorn, mInfo.hasMission]);
                        arr2.splice(unmovable - voidCount, 0, mInfo.num)
                    } else {
                        this.tempBallArray[cntX].splice(0, 0, [mInfo.num, 0, mInfo.isLeave, mInfo.isOrder, mInfo.isAcorn, mInfo.hasMission]);
                        arr2.splice(0, 0, mInfo.num)
                    }
                else {
                    this.tempBallArray[cntX].splice(unmovable - voidCount + 1, 0, [mInfo.num, 0, mInfo.isLeave, mInfo.isOrder, mInfo.isAcorn, mInfo.hasMission]);
                    arr2.splice(unmovable - voidCount + 1, 0, mInfo.num)
                }
            else
                voidCount++;
            arr.push(mInfo.num)
        }
        checkChange = false;
        prevNum = -1;
        rejectNum = -1;
        while (this.tempBallArray[cntX].length + throughable.length < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y) {
            hasMission = -1;
            addOrder = this.checkAddOrderObject();
            checkChange = true;
            if (addOrder == -1) {
                addAcorn = this.checkAddAcornObject();
                if (addAcorn == -1) {
                    addNum = org.apache.royale.utils.Language._int(Math.random() * this._normalPieceTypeCount);
                    while (rejectNum == addNum)
                        addNum = org.apache.royale.utils.Language._int(Math.random() * this._normalPieceTypeCount);
                    if (rejectNum == addNum) {
                        rejectNum = -1;
                        prevNum = -1
                    }
                    if (this._main.existMission)
                        hasMission = this.checkAddMissionPiece()
                } else
                    addNum = 12 + addAcorn
            } else
                addNum = 10;
            this.tempBallArray[cntX].unshift([addNum, 0, false, addOrder, addAcorn, hasMission]);
            this.addEmptyBall[cntX].push([addNum, 0, false, addOrder, addAcorn, hasMission]);
            if (addNum == 10)
                this.traceLog('---------------\u30c0\u30df\u30fc\u8ffd\u52a0', cntX);
            if (prevNum == addNum)
                rejectNum = addNum;
            else
                rejectNum = -1;
            prevNum = addNum
        }
        if (throughable.length > 0) {
            len = throughable.length;
            for (cnt = 0; cnt < len; cnt++) {
                if (this.tempBallArray[cntX].length >= pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y)
                    break;
                this.tempBallArray[cntX].splice(throughable[cnt], 0, [-1, 0, false, -1, -1]);
                arr2.splice(throughable[cnt], 0, -1, -1, -1)
            }
        }
        for (cntY = 0; cntY < lenY; cntY++) {
            this._map[cntX][cntY].num = this.tempBallArray[cntX][cntY][0];
            this._map[cntX][cntY].crushType = this.tempBallArray[cntX][cntY][1];
            this._map[cntX][cntY].isLeave = this.tempBallArray[cntX][cntY][2];
            this._map[cntX][cntY].isOrder = this.tempBallArray[cntX][cntY][3];
            this._map[cntX][cntY].isAcorn = this.tempBallArray[cntX][cntY][4];
            this._map[cntX][cntY].hasMission = this.tempBallArray[cntX][cntY][5]
        }
    }
    this.traceLog('updateDeleteBall::end')
}
;
pigg.puzzle.view.GameView.prototype.checkAddOrderObject = function() {
    if (this._main.currentThemeType != pigg.puzzle.view.CommonView.THEME_ORDER)
        return -1;
    if (this._afterOrderCount[0] == 0 && this._afterOrderCount[1] == 0)
        return -1;
    if (this._checkOrderTimes < 2)
        return -1;
    this._checkOrderTimes = 0;
    if (this._afterOrderCount[0] > 0 && this._appearOrderCount[0] == 0) {
        this.traceLog('\u30aa\u30fc\u30c0\u30fc\u3092\u8ffd\u52a0', 0, this._afterOrderCount[0]);
        this._afterOrderCount[0]--;
        this._appearOrderCount[0]++;
        return 0
    } else if (this._afterOrderCount[1] > 0 && this._appearOrderCount[1] == 0) {
        this.traceLog('\u30aa\u30fc\u30c0\u30fc\u3092\u8ffd\u52a0', 1, this._afterOrderCount[0]);
        this._afterOrderCount[1]--;
        this._appearOrderCount[1]++;
        return 1
    }
    return -1
}
;
pigg.puzzle.view.GameView.prototype.checkAddAcornObject = function() {
    if (this._acornPieceRatio == null)
        return -1;
    if (this._acornPieceLimit == null)
        return -1;
    this.traceLog('checkAddAcornObject::', this._acornPieceRatio, this._acornPieceLimit, this._acornPieceBufferCurrent);
    var cnt = 0
      , len = 0;
    len = this._acornTypeNum;
    for (cnt = 0; cnt < len; cnt++) {
        if (this._acornPieceRatio[cnt] == 0)
            continue;
        if (this._acornVec[cnt] && this._acornVec[cnt].length + this._acornPiecePreAdd[cnt] >= this._acornPieceLimit[cnt])
            continue;
        if (this._acornPiecePreAdd[cnt] >= this._acornPieceLimit[cnt])
            continue;
        if (this._acornPieceBufferLimit[cnt] > this._acornPieceBufferCurrent[cnt])
            continue;
        if (Math.random() <= this._acornPieceRatio[cnt] / 100) {
            this._acornPiecePreAdd[cnt]++;
            this.traceLog('\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u306b\u30d2\u30c3\u30c8', cnt);
            this._acornPieceBufferCurrent[cnt] = 0;
            return cnt;
            break
        }
    }
    return -1
}
;
pigg.puzzle.view.GameView.prototype.checkAddMissionPiece = function() {
    this.traceLog('checkAddMissionPiece::', this._missionPieceTotalLimit, this._missionPieceTotalCount, this._missionPieceDispLimit, this._missionPieceDispCount, this._missionPieceMinInterval, this._missionPieceBufferCount);
    if (this._missionPieceTotalLimit <= this._missionPieceTotalCount)
        return -1;
    if (this._missionPieceDispLimit <= this._missionPieceDispCount)
        return -1;
    if (this._missionPieceMinInterval > this._missionPieceBufferCount)
        return -1;
    if (this._missionPieceTotalLimit <= this._currentMissionPieceDisplayCount)
        return -1;
    if (Math.random() <= this._missionPieceRatio / 100) {
        this._missionPieceTotalCount++;
        this._missionPieceDispCount++;
        this._missionPieceBufferCount = 0;
        this.traceLog('checkAddMissionPiece::ADD');
        return 0
    }
    return -1;
    this._missionPieceTotalCount++;
    this._missionPieceDispCount++;
    this._missionPieceBufferCount = 0;
    this.traceLog('checkAddMissionPiece::ADD');
    return 0
}
;
pigg.puzzle.view.GameView.prototype.removeAction = function(mInfo) {
    this.traceLog('removeAction', this._removeActionCount, this._removeActionArray[mInfo.mx], mInfo.crushMission, mInfo.crushMission);
    if (mInfo.ballCrushType != 20 && mInfo.ballCrushType != 21 && mInfo.ballCrushType < 12)
        this.checkJellyWired(mInfo);
    if (mInfo.checkJelly || mInfo.isCheckedWired) {
        this._removeActionCount--;
        this._removeActionArray[mInfo.mx]--;
        if (this._removeLineArray[mInfo.mx] == 0 && this._removeActionArray[mInfo.mx] == 0)
            this.searchEmpty(mInfo.mx);
        this.traceLog('checkJelly\u306e\u307f::', mInfo.num);
        return
    }
    if (mInfo.checkAround) {
        this.traceLog('\u30c1\u30a7\u30c3\u30afaround');
        this.checkAround(mInfo)
    }
    if (mInfo.ballType == -1 && mInfo.isMovable)
        ;
    else if (mInfo.ballCrushType < 10) {
        if (mInfo.addScore > 0)
            this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, mInfo.addScore, mInfo.ballType);
        this.makeCrushParticle(mInfo.ballType, mInfo.mx, mInfo.my);
        mInfo.crushEffect.rotation = Math.random() * 30 - 15
    }
    this._main.playSE(pigg.puzzle.data.CommonData.SE_ERASE);
    mInfo.mc.colorTransform = null;
    if (mInfo.ballType != -1 && mInfo.ballType < 6)
        this.checkCorrectPiece(mInfo, mInfo.ballType + 1);
    mInfo.mc.visible = false;
    mInfo.mc.scaleX = mInfo.mc.scaleY = 1;
    if (mInfo.crushMission != -1) {
        this.traceLog('\u30aa\u30d7\u30b7\u30e7\u30f3\u7372\u5f97::');
        this.checkGetMission(mInfo)
    }
    if (mInfo.ballCrushType == 10 || mInfo.ballCrushType == 11) {
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_HONEYCOMB, mInfo.ballType);
        if (mInfo.ballCrushType == 10)
            this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_ORDER, mInfo, this._themeTileArray[0], mInfo.ballCrushType);
        else if (mInfo.ballCrushType == 11)
            this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_ORDER, mInfo, this._themeTileArray[1], mInfo.ballCrushType)
    } else if (mInfo.ballCrushType == 20) {
        this.makeCrushParticle(20, mInfo.mx, mInfo.my);
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_STUMP, mInfo.ballCrushType)
    } else if (mInfo.ballCrushType == 21) {
        this.makeCrushParticle(21, mInfo.mx, mInfo.my);
        mInfo.mc.visible = true;
        mInfo.mc.changeBallType(20);
        this.traceLog('removeAction::\u304d\u308a\u304b\u3076')
    } else if (mInfo.ballCrushType == 12) {
        this.makeCrushParticle(12, mInfo.mx, mInfo.my);
        mInfo.ballCrushType = 0;
        this.traceLog('removeAction::\u3069\u3093\u3050\u308a')
    } else if (mInfo.ballCrushType == 13) {
        this.makeCrushParticle(13, mInfo.mx, mInfo.my);
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_SILVER, mInfo.ballCrushType);
        this.traceLog('removeAction::\u30b7\u30eb\u30d0\u30fc')
    } else if (mInfo.ballCrushType == 14) {
        this.makeCrushParticle(14, mInfo.mx, mInfo.my);
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_GOLD, mInfo.ballCrushType);
        this.traceLog('removeAction::\u30b4\u30fc\u30eb\u30c9')
    } else if (mInfo.ballCrushType == 15) {
        if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER)
            this.checkFlower();
        this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_FLOWER, mInfo.ballCrushType);
        this.makeCrushParticle(15, mInfo.mx, mInfo.my);
        if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER && this._currentFlowerDisplayCount - this._currentThroughFlower > 0)
            this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_FLOWER, null, this._themeTileArray[0], 0, mInfo.mx, mInfo.my);
        this.traceLog('removeAction::\u82b1')
    }
    if (mInfo.ballCrushType == 4)
        this.traceLog('removeAction::\u30dc\u30e0');
    if (mInfo.isWaitCrushEffect && mInfo.ballCrushType != 0 && mInfo.ballCrushType < 12) {
        this.setCrushEffect(mInfo.ballCrushType, mInfo.mx, mInfo.my, mInfo.ballType);
        this.traceLog('WAIT:::', mInfo.ballCrushType)
    }
    mInfo.mc.rotation = 0;
    mInfo.ballType = -1;
    this._removeActionCount--;
    this._removeActionArray[mInfo.mx]--;
    if (!mInfo.isFix) {
        this._removeLineArray[mInfo.mx]--;
        this._removeLineCount--
    }
    if (this._removeLineArray[mInfo.mx] == 0 && this._removeActionArray[mInfo.mx] == 0)
        this.searchEmpty(mInfo.mx)
}
;
pigg.puzzle.view.GameView.prototype.checkCorrectPiece = function(mInfo, type) {
    var throughTarget = 0;
    if (this._main.currentThemeType != pigg.puzzle.view.CommonView.THEME_PIECE)
        return;
    if (this._correctPieceArray[0][0] != type && this._correctPieceArray[1][0] != type && this._correctPieceArray[2][0] != type)
        return;
    if (this._correctPieceArray[0][1] == this._correctPieceArray[0][2] && this._correctPieceArray[1][1] == this._correctPieceArray[1][2] && this._correctPieceArray[2][1] == this._correctPieceArray[2][2])
        return;
    if (mInfo) {
        if (this._correctPieceArray[0][0] == type && this._correctPieceArray[0][1] > this._correctPieceArray[0][2])
            throughTarget = 0;
        else if (this._correctPieceArray[1][0] == type && this._correctPieceArray[1][1] > this._correctPieceArray[1][2])
            throughTarget = 1;
        else if (this._correctPieceArray[2][0] == type && this._correctPieceArray[2][1] > this._correctPieceArray[2][2])
            throughTarget = 2;
        else
            throughTarget = -1;
        if (throughTarget != -1)
            this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_PIECE, mInfo, this._themeTileArray[throughTarget], type)
    }
    if (this._correctPieceArray[0][0] == type && this._correctPieceArray[0][1] > this._correctPieceArray[0][2])
        this._correctPieceArray[0][2]++;
    else if (this._correctPieceArray[1][0] == type && this._correctPieceArray[1][1] > this._correctPieceArray[1][2])
        this._correctPieceArray[1][2]++;
    else if (this._correctPieceArray[2][0] == type && this._correctPieceArray[2][1] > this._correctPieceArray[2][2])
        this._correctPieceArray[2][2]++;
    this.traceLog('checkCorrectPiece::[2]', type, this._correctPieceArray[0][2], this._correctPieceArray[1][2], this._correctPieceArray[2][2]);
    this.traceLog('checkCorrectPiece::[1]', type, this._correctPieceArray[0][1], this._correctPieceArray[1][1], this._correctPieceArray[2][1]);
    this.traceLog('checkCorrectPiece::[0]', type, this._correctPieceArray[0][0], this._correctPieceArray[1][0], this._correctPieceArray[2][0])
}
;
pigg.puzzle.view.GameView.prototype.checkJellyWired = function(mInfo) {
    if (this._isStartAction)
        return;
    if (mInfo.checkWired || mInfo.hasWired > 0) {
        mInfo.hasWired = 0;
        this.removeTile(mInfo.wiredObjct);
        mInfo.isFix = false;
        mInfo.isMovable = true;
        this.setMatchBright(mInfo, false, false);
        mInfo.checkWired = false;
        mInfo.isCheckedWired = true;
        if (mInfo.addScore > 0)
            this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, mInfo.addScore, mInfo.ballType, false, .1);
        this.makeCrushParticle(24, mInfo.mx, mInfo.my);
        return
    }
    if (mInfo.hasJelly > 0) {
        mInfo.hasJelly--;
        if (mInfo.hasJelly == 1)
            if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
                mInfo.jellyObjct.updateId(this.BEARHIDE_RECT[0]);
                this.makeCrushParticle(26, mInfo.mx, mInfo.my)
            } else {
                mInfo.jellyObjct.updateId(this.HONEY_RECT[0]);
                this.makeCrushParticle(23, mInfo.mx, mInfo.my)
            }
        else if (mInfo.hasJelly == 0) {
            this.removeTile(mInfo.jellyObjct);
            if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
                if (mInfo.hasMarshmallow != -1) {
                    this._hasMarshmallowArray[mInfo.hasMarshmallow][1]--;
                    this.traceLog('\u30d9\u30a2 -- ', mInfo.hasMarshmallow, this._hasMarshmallowArray[mInfo.hasMarshmallow][1]);
                    if (this._hasMarshmallowArray[mInfo.hasMarshmallow][1] == 0) {
                        this.traceLog('\u30d9\u30a2\u53d6\u308a\u51fa\u3057');
                        this.removeTile(this._hasMarshmallowArray[mInfo.hasMarshmallow][0].marshmallowObjct);
                        this._hasMarshmallowArray[mInfo.hasMarshmallow][0].marshmallowObjct = null;
                        this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_BEAR, this._hasMarshmallowArray[mInfo.hasMarshmallow][0], this._themeTileArray[0]);
                        this._currentMarshmallowCount++
                    }
                }
                this.makeCrushParticle(25, mInfo.mx, mInfo.my)
            } else {
                this.addScoreTxt(mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos, mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE, pigg.puzzle.view.CommonView.POINT_HONEY + mInfo.addScore, mInfo.ballType);
                mInfo.addScore = 0;
                this.makeCrushParticle(22, mInfo.mx, mInfo.my);
                this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THEME_JELLY, mInfo, this._themeTileArray[0]);
                this._currentJellyCount--
            }
        }
    }
}
;
pigg.puzzle.view.GameView.prototype.checkFlower = function() {
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER && this._currentFlowerCount > 0)
        this._currentFlowerCount--;
    this.traceLog('checkFlower:::\u306e\u3053\u308a', this._currentFlowerCount, this._totalFlowerCount)
}
;
pigg.puzzle.view.GameView.prototype.checkGetMission = function(mInfo) {
    var tx = this._missionPanel.x + this._missionTile.x;
    var ty = this._missionPanel.y + this._missionTile.y;
    this._throughObjectManager.setThroughObject(pigg.puzzle.view.CommonView.THROUGH_MISSION, mInfo, this._missionTile, 0, tx, ty);
    mInfo.crushMission = -1;
    this._currentMissionPieceCount++;
    this._additionaMissionlPoint++;
    this._missionPieceDispCount--;
    this.traceLog('checkGetMission::', this._currentMissionPieceCount, this._missionPieceDispCount)
}
;
pigg.puzzle.view.GameView.prototype.updateDispThemeCount = function(type, targetObj, score) {
    targetObj = typeof targetObj !== 'undefined' ? targetObj : null;
    score = typeof score !== 'undefined' ? score : 0;
    if (targetObj == null)
        return;
    this.traceLog('updateDispThemeCount:::::', this._currentMissionPieceDisplayCount);
    var index = 0;
    if (targetObj == this._themeTileArray[0])
        index = 0;
    else if (targetObj == this._themeTileArray[1])
        index = 1;
    else if (targetObj == this._themeTileArray[2])
        index = 2;
    this.traceLog('updateDispThemeCount:::::', this._main.currentThemeType, index);
    if (this._main.currentThemeType != -1 && this._themeTileArray[index] == null)
        return;
    if (type == pigg.puzzle.view.CommonView.THEME_PIECE) {
        if (this._correctPieceArray[index][1] > this._correctPieceArray[index][3])
            this._correctPieceArray[index][3]++;
        this._numberFontManager.makeNumber(this._scoreFontStr[index], this._correctPieceArray[index][1] - this._correctPieceArray[index][3]);
        if (this._correctPieceArray[index][1] == this._correctPieceArray[index][2]) {
            this._numberFontManager.removeNumber(this._scoreFontStr[index]);
            this._themeCheckArray[index].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_JELLY) {
        this._currentJellyDisplayCount--;
        this._numberFontManager.makeNumber(this._scoreFontStr[0], this._currentJellyDisplayCount);
        if (this._currentJellyDisplayCount == 0) {
            this._numberFontManager.removeNumber(this._scoreFontStr[0]);
            this._themeCheckArray[0].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_ORDER) {
        if (this._totalOrderCount[index] > this._currentOrderDisplayCount[index])
            this._currentOrderDisplayCount[index]++;
        this._numberFontManager.makeNumber(this._scoreFontStr[index], this._totalOrderCount[index] - this._currentOrderDisplayCount[index]);
        if (this._totalOrderCount[index] <= this._currentOrderDisplayCount[index]) {
            this._numberFontManager.removeNumber(this._scoreFontStr[index]);
            this._themeCheckArray[index].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_SCORE) {
        this._currentDisplayScore += score;
        if (this._goalScore - this._currentDisplayScore > 0)
            this._numberFontManager.makeNumber(this._scoreFontStr[0], this._goalScore - this._currentDisplayScore);
        else {
            this._numberFontManager.removeNumber(this._scoreFontStr[0]);
            this._themeCheckArray[0].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_BEAR) {
        this._currentMarshmallowDisplayCount++;
        this._numberFontManager.makeNumber(this._scoreFontStr[0], this._totalMarshmallowCount - this._currentMarshmallowDisplayCount);
        if (this._totalMarshmallowCount == this._currentMarshmallowDisplayCount) {
            this._numberFontManager.removeNumber(this._scoreFontStr[0]);
            this._themeCheckArray[0].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        this._currentFlowerDisplayCount--;
        this._numberFontManager.makeNumber(this._scoreFontStr[0], this._currentFlowerDisplayCount);
        this.traceLog('\u82b1::removeThroughFlower::', this._currentFlowerDisplayCount);
        if (this._currentFlowerDisplayCount == 0) {
            this._numberFontManager.removeNumber(this._scoreFontStr[0]);
            this._themeCheckArray[0].visible = true
        }
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MISSION) {
        this._currentMissionPieceDisplayCount++;
        if (this._currentMissionPieceCount >= this._main.eventData.missionPieceTotalLimit)
            this._numberFontManager.makeNumber('missionCount', this._currentMissionPieceDisplayCount, 1);
        else
            this._numberFontManager.makeNumber('missionCount', this._currentMissionPieceDisplayCount);
        this.traceLog('_currentMissionPieceDisplayCount:::', this._currentMissionPieceDisplayCount)
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MOVETIMES) {
        this.traceLog('_continueAddDispCount', this._continueAddDispCount);
        this._continueAddDispCount++;
        this._numberFontManager.makeNumber('moveTimes', this._continueAddDispCount);
        if (this._continueAddDispCount == this._continueAddTimes) {
            this.traceLog('\u30de\u30a6\u30b9\u52b9\u679c\u5fa9\u65e7');
            this._isMouseEnable = true
        }
    }
    if (this._main.isParticle && !this._main.isLowSpecMode)
        if (type == pigg.puzzle.view.CommonView.THROUGH_MOVETIMES)
            this._themeParticleView.makeThemeParticle(this._moveTimesContainer.x, this._moveTimesContainer.y);
        else if (type == pigg.puzzle.view.CommonView.THROUGH_MISSION)
            this._themeParticleView.makeMissionGetParticle(this._missionPanel.x, this._missionPanel.y);
        else if (type == pigg.puzzle.view.CommonView.THEME_PIECE)
            this._themeParticleView.makeThemeParticle(this._themeContainer.x + targetObj.x, 24 + targetObj.y, 0, this._correctPieceArray[index][0]);
        else
            this._themeParticleView.makeThemeParticle(this._themeContainer.x + targetObj.x, 24 + targetObj.y, type)
}
;
pigg.puzzle.view.GameView.prototype._themeParticleView;
pigg.puzzle.view.GameView.prototype.searchEmpty = function(sx) {
    sx = typeof sx !== 'undefined' ? sx : -1;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt = 0
      , len = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var startX = 0;
    var arr = [];
    var typeArr = [];
    var checkChange = false;
    var fallCount = 0;
    var fallCountHighest = 0;
    var pushNum = 0;
    var emptymc;
    var emptyCount = 0;
    var addDelay = 0;
    var addPosY = 10;
    var fTime = this._fallTime;
    var allRemoveCount = 0;
    var mInfo;
    var addTweenPosY = 0;
    var addThroughVoid = [];
    var fallThroughVoid = 0;
    var throughRepeat = -1;
    var addEmptyThrough = 0;
    var cntT = 0
      , lenT = 0;
    fTime = this._fallTime - this._comboCount * .005;
    if (fTime < this._fallTime)
        fTime = this._fallTime;
    if (sx != -1) {
        startX = sx;
        lenX = sx + 1
    }
    for (cntX = startX; cntX < lenX; cntX++) {
        arr = [];
        typeArr = [];
        fallCount = 0;
        addThroughVoid = [];
        throughRepeat = -1;
        fallThroughVoid = 0;
        for (cntY = lenY - 1; cntY >= 0; cntY--) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.isDelete || mInfo.isMovable && mInfo.ballType == -1) {
                fallCount++;
                throughRepeat = -1
            } else if (!mInfo.isThroughVoid && (!mInfo.isMovable || mInfo.isFix)) {
                fallCount = 0;
                throughRepeat = -1
            } else if (fallCount > 0 && mInfo.isThroughVoid) {
                this.traceLog('throughRepeat::', throughRepeat);
                this.traceLog('addThroughVoid::', addThroughVoid);
                if (throughRepeat == -1)
                    addThroughVoid.push([cntY, 1]);
                else if (addThroughVoid && addThroughVoid[throughRepeat])
                    addThroughVoid[throughRepeat][1]++;
                throughRepeat = addThroughVoid.length - 1;
                lenT = addThroughVoid.length;
                fallThroughVoid = 0;
                for (cntT = 0; cntT < lenT; cntT++)
                    fallThroughVoid += Number(addThroughVoid[cntT][1])
            } else if (fallCount > 0 && mInfo.ballType != -1) {
                throughRepeat = -1;
                mInfo.fallCount = fallCount;
                this._fallMotionCount++;
                addTweenPosY = 5;
                if (mInfo.my + fallCount == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 || mInfo.my + fallCount < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && (this._map[cntX][mInfo.my + fallCount + 1].isFix || !this._map[cntX][mInfo.my + fallCount + 1].isMovable))
                    addTweenPosY = 0;
                if (mInfo.isIcing)
                    this.traceLog('_fallMotionCount::\u30a2\u30a4\u30b7\u30f3\u30b0');
                com.greensock.TweenMax.to(mInfo.mc, fTime + fallCount * this._fallAddTime + addDelay, {
                    delay: this._fallAllBaseDelay + this._fallAllAddDelay,
                    y: mInfo.mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * fallCount + fallThroughVoid * pigg.puzzle.view.CommonView.BALL_SIZE + addTweenPosY,
                    ease: com.greensock.easing.Power1.easeIn,
                    onComplete: org.apache.royale.utils.Language.closure(this.tweenBack, this, 'tweenBack'),
                    onCompleteParams: [mInfo.mc, 0, addTweenPosY, mInfo.mx, mInfo.my + fallCount + fallThroughVoid]
                });
                addDelay += this._fallDelayTime;
                if (cntY + fallCount <= addThroughVoid[0])
                    addThroughVoid = [-1, 0];
                if (addThroughVoid.length > 0)
                    if (cntY + fallCount + fallThroughVoid - 1 == addThroughVoid[0][0]) {
                        addThroughVoid.shift();
                        lenT = addThroughVoid.length;
                        fallThroughVoid = 0;
                        for (cntT = 0; cntT < lenT; cntT++)
                            fallThroughVoid += Number(addThroughVoid[cntT][1])
                    }
            }
        }
        checkChange = false;
        emptyCount = 0;
        addEmptyThrough = 0;
        if (this.addEmptyBall && this.addEmptyBall[cntX] && this.addEmptyBall[cntX].length > 0) {
            len = Number(this.addEmptyBall[cntX].length);
            for (cnt = 0; cnt < len; cnt++) {
                if (cntX == 4)
                    this.traceLog('addEmptyThrough\u524d', addEmptyThrough, emptyCount + 1 + addEmptyThrough, pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - (emptyCount + 1 + addEmptyThrough), this._map[cntX][pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - (emptyCount + 1 + addEmptyThrough)].isThroughVoid);
                if (addThroughVoid[0] == -1) {
                    if (pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - (emptyCount + 1 + addEmptyThrough) >= 0 && this._map[cntX][pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - (emptyCount + 1 + addEmptyThrough)].isThroughVoid)
                        addEmptyThrough += Number(this._map[cntX][pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - (emptyCount + 1 + addEmptyThrough)].isThroughVoidLevel);
                    if (cntX == 3)
                        this.traceLog('if (addThroughVoid[0] \x3d\x3d -1) ::', cnt, addEmptyThrough)
                } else {
                    while (this._map[cntX][emptyCount + addEmptyThrough].isThroughVoid)
                        addEmptyThrough++;
                    if (cntX == 4)
                        this.traceLog('do::', this._map[cntX][len - 1 - emptyCount + addEmptyThrough].isThroughVoid)
                }
                if (cntX == 4)
                    this.traceLog('do::', this._map[cntX][len - 1 - emptyCount + addEmptyThrough].isThroughVoid);
                if (cntX == 4)
                    this.traceLog('addEmptyThrough\u3042\u3068', addEmptyThrough);
                emptymc = new TileGummy;
                this._tilemap.addTile(emptymc);
                emptymc.init();
                emptymc.x = cntX * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                if (addThroughVoid[0] == -1) {
                    emptymc.changeBallType(this.addEmptyBall[cntX][cnt][0], this.addEmptyBall[cntX][cnt][3], this.addEmptyBall[cntX][cnt][5]);
                    emptymc.y = -pigg.puzzle.view.CommonView.BALL_SIZE + -emptyCount * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
                } else {
                    emptymc.changeBallType(this.addEmptyBall[cntX][len - 1 - cnt][0], this.addEmptyBall[cntX][len - 1 - cnt][3], this.addEmptyBall[cntX][len - 1 - cnt][5]);
                    emptymc.y = -pigg.puzzle.view.CommonView.BALL_SIZE + -(len - 1 - emptyCount) * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos
                }
                this.traceLog('emptymc.y::', len, this._emptyBalls.length, emptymc.y);
                this._emptyBalls.push(emptymc);
                if (cntX == 4)
                    this.traceLog('\u30c0\u30df\u30fc\u306e\u843d\u3061\u308bmy::', fallCount, emptyCount, fallCount - emptyCount - 1);
                addTweenPosY = 5;
                if (fallCount == pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y && cnt == 0 || fallCount < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y && (this._map[cntX][fallCount].isFix || !this._map[cntX][fallCount].isMovable) && cnt == 0)
                    addTweenPosY = 0;
                if (addThroughVoid[0] == -1)
                    com.greensock.TweenMax.to(emptymc, fTime + fallCount * this._fallAddTime + addDelay, {
                        delay: this._fallAllBaseDelay + this._fallAllAddDelay,
                        y: emptymc.y + pigg.puzzle.view.CommonView.BALL_SIZE * (fallCount - +addEmptyThrough) + addTweenPosY,
                        ease: com.greensock.easing.Power1.easeIn,
                        onComplete: org.apache.royale.utils.Language.closure(this.tweenBack, this, 'tweenBack'),
                        onCompleteParams: [emptymc, 1, addTweenPosY, cntX, fallCount - emptyCount - 1]
                    });
                else
                    com.greensock.TweenMax.to(emptymc, fTime + (fallCount + addEmptyThrough / 1.5) * this._fallAddTime + addDelay, {
                        delay: this._fallAllBaseDelay + this._fallAllAddDelay,
                        y: emptymc.y + pigg.puzzle.view.CommonView.BALL_SIZE * (fallCount + addEmptyThrough) + addTweenPosY,
                        ease: com.greensock.easing.Power1.easeIn,
                        onComplete: org.apache.royale.utils.Language.closure(this.tweenBack, this, 'tweenBack'),
                        onCompleteParams: [emptymc, 1, addTweenPosY, cntX, fallCount - emptyCount - 1 + addEmptyThrough]
                    });
                if (addThroughVoid[0] == -1)
                    addDelay += this._fallDelayTime;
                else
                    addDelay -= this._fallDelayTime;
                emptyCount++;
                this._fallMotionCount++
            }
            this.traceLog('emptymc.y::end::', len, this._emptyBalls.length, emptymc.y)
        }
        if (this._fallMotionCount == 0 && this._removeLineCount <= 0 && this._removeActionCount <= 0) {
            len = this._removeLineArray.length;
            for (cnt = 0; cnt < len; cnt++)
                allRemoveCount += Number(this._removeLineArray[cnt]);
            if (allRemoveCount == 0) {
                this.traceLog('searchEmpty::allBallsDisplay');
                com.greensock.TweenMax.to(this, .3, {
                    onComplete: org.apache.royale.utils.Language.closure(this.allBallsDisplay, this, 'allBallsDisplay'),
                    onCompleteParams: [false, false]
                })
            }
        }
        if (fallCountHighest < fallCount)
            fallCountHighest = fallCount
    }
}
;
pigg.puzzle.view.GameView.prototype.tweenBack = function(mc, type, addPosY, tx, ty) {
    var self = this;
    addPosY = typeof addPosY !== 'undefined' ? addPosY : 5;
    tx = typeof tx !== 'undefined' ? tx : 0;
    ty = typeof ty !== 'undefined' ? ty : 0;
    var __localFn0__ = function() {
        mc.scaleX = 1;
        mc.scaleY = 1
    };
    var __localFn1__ = function() {
        self._fallMotionCount--;
        if (self._fallMotionCount == 0 && self._removeLineCount <= 0 && self._removeActionCount <= 0)
            self.allBallsDisplay(false, false)
    };
    var __localFn2__ = function() {
        mc.scaleX = 1;
        mc.scaleY = 1
    };
    var __localFn3__ = function() {
        self._removeBallCount--;
        self._fallMotionCount--;
        mc.scaleX = 1;
        mc.scaleY = 1;
        if (self._removeBallCount == 0 && self._fallMotionCount == 0 && self._removeLineCount <= 0 && self._removeActionCount <= 0)
            self.allBallsDisplay(false, false);
        else if (self._fallMotionCount == 0 && self._removeLineCount <= 0 && self._removeActionCount <= 0)
            self.allBallsDisplay(false, false)
    };
    var mcy = mc.y;
    var tmcy = mc.y;
    var diffY = 0;
    if (addPosY == 0) {
        mc.scaleY = .8;
        mc.y += 5
    }
    this._main.playSE(pigg.puzzle.data.CommonData.SE_FALL);
    if (type == 0) {
        com.greensock.TweenMax.killTweensOf(mc);
        mc.rotation = Math.random() * 30 - 15;
        if (mc.rotation < 0 && mc.rotation > -10)
            mc.rotation = -10;
        else if (mc.rotation > 0 && mc.rotation < 10)
            mc.rotation = 10;
        mc.setOrigin();
        com.greensock.TweenMax.to(mc, .6, {
            rotation: 0,
            y: org.apache.royale.utils.Language._int(mcy - addPosY),
            scaleY: 1,
            originX: 0,
            originY: 0,
            ease: com.greensock.easing.Elastic.easeOut.config(1, .5),
            onComplete: __localFn0__
        });
        if (ty < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && this._map[tx][ty + 1] && this._map[tx][ty + 1].num != -1 && this._map[tx][ty + 1].isVoid != -1)
            if (!com.greensock.TweenMax.isTweening(this._map[tx][ty + 1].mc)) {
                this._map[tx][ty + 1].mc.rotation = Math.random() * 30 - 15;
                this._map[tx][ty + 1].mc.scaleY = .9;
                tmcy = (ty + 1) * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
                this._map[tx][ty + 1].mc.y = tmcy + 5;
                if (this._map[tx][ty + 1].mc.rotation < 0 && this._map[tx][ty + 1].mc.rotation > -15)
                    this._map[tx][ty + 1].mc.rotation = -10;
                else if (this._map[tx][ty + 1].mc.rotation > 0 && this._map[tx][ty + 1].mc.rotation < 15)
                    this._map[tx][ty + 1].mc.rotation = 10;
                this._map[tx][ty + 1].mc.setOrigin();
                com.greensock.TweenMax.to(this._map[tx][ty + 1].mc, .3, {
                    rotation: 0,
                    scaleY: 1,
                    y: tmcy,
                    originX: 0,
                    originY: 0,
                    ease: com.greensock.easing.Expo.easeOut
                })
            }
        com.greensock.TweenMax.to(mc, .2, {
            onComplete: __localFn1__
        })
    } else {
        com.greensock.TweenMax.killTweensOf(mc);
        mc.rotation = Math.random() * 30 - 15;
        if (mc.rotation < 0 && mc.rotation > -5)
            mc.rotation = -5;
        else if (mc.rotation > 0 && mc.rotation < 5)
            mc.rotation = 5;
        mc.setOrigin();
        com.greensock.TweenMax.to(mc, .6, {
            rotation: 0,
            y: org.apache.royale.utils.Language._int(mcy - addPosY),
            scaleY: 1,
            originX: 0,
            originY: 0,
            ease: com.greensock.easing.Elastic.easeOut.config(1, .5),
            onComplete: __localFn2__
        });
        if (ty < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1 && this._map[tx][ty + 1] && this._map[tx][ty + 1].num != -1 && this._map[tx][ty + 1].isVoid != -1)
            if (!com.greensock.TweenMax.isTweening(this._map[tx][ty + 1].mc)) {
                diffY = this._map[tx][ty + 1].mc.y - ((ty + 1) * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos);
                this._map[tx][ty + 1].mc.rotation = Math.random() * 30 - 15;
                this._map[tx][ty + 1].mc.scaleY = .9;
                tmcy = (ty + 1) * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos + diffY;
                this._map[tx][ty + 1].mc.y = tmcy + 5;
                if (this._map[tx][ty + 1].mc.rotation < 0 && this._map[tx][ty + 1].mc.rotation > -15)
                    this._map[tx][ty + 1].mc.rotation = -10;
                else if (this._map[tx][ty + 1].mc.rotation > 0 && this._map[tx][ty + 1].mc.rotation < 15)
                    this._map[tx][ty + 1].mc.rotation = 10;
                this._map[tx][ty + 1].mc.setOrigin();
                com.greensock.TweenMax.to(this._map[tx][ty + 1].mc, .3, {
                    rotation: 0,
                    scaleY: 1,
                    y: tmcy,
                    originX: 0,
                    originY: 0,
                    ease: com.greensock.easing.Expo.easeOut
                })
            }
        com.greensock.TweenMax.to(mc, .2, {
            onComplete: __localFn3__
        })
    }
}
;
pigg.puzzle.view.GameView.prototype.allBallsDisplay = function(checkMatch, addCount) {
    checkMatch = typeof checkMatch !== 'undefined' ? checkMatch : true;
    addCount = typeof addCount !== 'undefined' ? addCount : true;
    this.traceLog('allBallsDisplay', this._typeCount, this._normalPieceTypeCount);
    this._typeMapVec = org.apache.royale.utils.Language.Vector();
    this._normalPieceMapVec = org.apache.royale.utils.Language.Vector();
    this._removeActionCount = 0;
    this._removeActionArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._removeLineArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this._fallMotionCount = 0;
    this._removeLineCount = 0;
    this._removeActionCount = 0;
    this._acornVec = org.apache.royale.utils.Language.Vector(this._acornTypeNum, 'Vector.\x3cMapInfo\x3e');
    this._acornPiecePreAdd = org.apache.royale.utils.Language.Vector(this._acornTypeNum, 'int');
    len = this._typeCount;
    for (cnt = 0; cnt < len; cnt++)
        this._typeMapVec[cnt] = org.apache.royale.utils.Language.Vector();
    if (checkMatch)
        this._isFlush = false;
    var cnt = 0
      , len = 0
      , cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var mInfo;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[cntX][cntY];
            mInfo.isCheckVoid = false;
            mInfo.fromWarp = -1;
            mInfo.addFallVoid = 0;
            mInfo.isStackSetCrush = false;
            mInfo.matchGroupeIndex = -1;
            mInfo.isCheckedWired = false;
            mInfo.isMakeByBomb = false;
            mInfo.isWaitCrushEffect = false;
            mInfo.isStackRemove = false;
            mInfo.isSwitch = 0;
            mInfo.checkVertical = 0;
            mInfo.checkHorizontal = 0;
            mInfo.isLeave = false;
            mInfo.removeDelay = 0;
            mInfo.filterDelay = 0;
            mInfo.addScore = 0;
            mInfo.isSwitchMatch = false;
            mInfo.ballType = mInfo.num;
            mInfo.isDelete = false;
            if (mInfo.num >= 12 && mInfo.num < 20)
                mInfo.ballCrushType = mInfo.num;
            else
                mInfo.ballCrushType = mInfo.crushType;
            mInfo.checkJelly = false;
            mInfo.checkWired = false;
            mInfo.isHammer = false;
            mInfo.isCrush = false;
            mInfo.assistFocusMapInfo = [[], [], [], []];
            mInfo.assistLevel = [0, 0, 0, 0];
            mInfo.testAssistMax = [-1, -1];
            mInfo.isSetCrushRemove = false;
            mInfo.checkAround = false;
            mInfo.crushMission = -1;
            mInfo.mc.rotation = 0;
            mInfo.mc.scaleX = 1;
            mInfo.mc.scaleY = 1;
            mInfo.mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            mInfo.mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            mInfo.mc.colorTransform = null;
            if (mInfo.wiredObjct)
                mInfo.wiredObjct.colorTransform = null;
            if (mInfo.num != -1) {
                mInfo.mc.changeBallType(mInfo.num, mInfo.isOrder, mInfo.hasMission);
                if (mInfo.num < this._typeCount) {
                    this._typeMapVec[mInfo.num].push(mInfo);
                    this._normalPieceMapVec.push(mInfo)
                }
                mInfo.mc.visible = true;
                if (mInfo.num >= 12 && mInfo.num < 20) {
                    if (this._acornVec[mInfo.num - 12] == null)
                        this._acornVec[mInfo.num - 12] = org.apache.royale.utils.Language.Vector();
                    this._acornVec[mInfo.num - 12].push(mInfo)
                }
            } else
                ;
        }
    if (this._emptyBalls && this._emptyBalls.length > 0) {
        len = this._emptyBalls.length;
        for (cnt = 0; cnt < len; cnt++) {
            this._tilemap.removeTile(this._emptyBalls[cnt]);
            this._emptyBalls[cnt] = null
        }
        this._emptyBalls = null
    }
    this._isStartAction = false;
    this._searchSlantManager.initVoidStatus();
    this._checkOrderTimes++;
    if (addCount)
        this._comboCount++;
    if (this._searchSlantManager.isEndWarpSearchVoid) {
        this._isFlush = true;
        this._searchSlantManager.initVoidStatus();
        this._searchSlantManager.checkPresetGrid(true)
    } else if (checkMatch)
        this.checkMatchAll();
    else {
        this._searchSlantManager.initVoidStatus();
        this._searchSlantManager.checkPresetGrid(true)
    }
}
;
pigg.puzzle.view.GameView.prototype.allBallsStyle = function() {
    var cnt = 0
      , len = 0
      , cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    var mInfo;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[cntX][cntY];
            com.greensock.TweenMax.killTweensOf(mInfo.mc);
            mInfo.mc.x = cntX * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            mInfo.mc.y = cntY * pigg.puzzle.view.CommonView.BALL_SIZE + this._adjstObjPos;
            mInfo.mc.rotation = 0;
            mInfo.mc.originX = 0;
            mInfo.mc.originY = 0;
            mInfo.mc.scaleX = 1;
            mInfo.mc.scaleY = 1;
            mInfo.mc.changeCrushType(mInfo.crushType);
            if (mInfo.num != -1) {
                mInfo.mc.changeBallType(mInfo.num, mInfo.isOrder, mInfo.hasMission);
                mInfo.mc.visible = true
            } else {
                if (!mInfo.isFix && mInfo.isMovable)
                    mInfo.mc.changeBallType(99);
                if (mInfo.isFixVoid || mInfo.isThroughVoid)
                    mInfo.mc.visible = false;
                if (!mInfo.isIcing && mInfo.isOrder == -1)
                    mInfo.mc.visible = false
            }
        }
}
;
pigg.puzzle.view.GameView.prototype.enterframe = function(e) {
    var dx;
    var dy
}
;
pigg.puzzle.view.GameView.prototype.switchBallButtonMode = function(type) {
    var mInfo;
    var cntX = 0
      , cnt2 = 0
      , cntY = 0
      , lenX = 0
      , lenY = 0
      , len2 = 0;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++)
            mInfo = this._map[cntX][cntY]
}
;
pigg.puzzle.view.GameView.prototype.hideRoulette = function() {
    this._menuResultManager.hideRoulette()
}
;
pigg.puzzle.view.GameView.prototype._tileset;
pigg.puzzle.view.GameView.prototype._tilemap;
pigg.puzzle.view.GameView.prototype.PIECE_RECT;
pigg.puzzle.view.GameView.prototype.ARROW_V_RECT;
pigg.puzzle.view.GameView.prototype.ARROW_H_RECT;
pigg.puzzle.view.GameView.prototype.TOGETOGE_RECT;
pigg.puzzle.view.GameView.prototype.RAINBOW_RECT = 0;
pigg.puzzle.view.GameView.prototype.WIRE_RECT = 0;
pigg.puzzle.view.GameView.prototype.KIRIKABU1_RECT = 0;
pigg.puzzle.view.GameView.prototype.KIRIKABU2_RECT = 0;
pigg.puzzle.view.GameView.prototype.SILVER_RECT = 0;
pigg.puzzle.view.GameView.prototype.GOLD_RECT = 0;
pigg.puzzle.view.GameView.prototype.FLOWER_RECT = 0;
pigg.puzzle.view.GameView.prototype.ACORN_RECT = 0;
pigg.puzzle.view.GameView.prototype.HONEYCOMB1_RECT = 0;
pigg.puzzle.view.GameView.prototype.HONEYCOMB2_RECT = 0;
pigg.puzzle.view.GameView.prototype.HONEY_RECT;
pigg.puzzle.view.GameView.prototype.BEARHIDE_RECT;
pigg.puzzle.view.GameView.prototype.ORDER_ARROW_RECT = 0;
pigg.puzzle.view.GameView.prototype.WARP_RECT;
pigg.puzzle.view.GameView.prototype.MISSION_THEME_RECT = 0;
pigg.puzzle.view.GameView.prototype.MISSION_PIECE_RECT;
pigg.puzzle.view.GameView.prototype.MISSION_ARROW_V_RECT;
pigg.puzzle.view.GameView.prototype.MISSION_ARROW_H_RECT;
pigg.puzzle.view.GameView.prototype.MISSION_TOGETOGE_RECT;
pigg.puzzle.view.GameView.prototype.MARSHMALLOW_RECT;
pigg.puzzle.view.GameView.prototype.CHEAT_FOCUS_RECT = 0;
pigg.puzzle.view.GameView.prototype._jellyTilemap;
pigg.puzzle.view.GameView.prototype._wiredTilemap;
pigg.puzzle.view.GameView.prototype._marshmallowTilemap;
pigg.puzzle.view.GameView.prototype.initPieceTile = function() {
    this._tileset = this._main.gamePieceTileset.clone();
    this.PIECE_RECT = [];
    this.ARROW_V_RECT = [];
    this.ARROW_H_RECT = [];
    this.TOGETOGE_RECT = [];
    this.HONEY_RECT = [];
    this.BEARHIDE_RECT = [];
    this.WARP_RECT = [];
    this.MISSION_PIECE_RECT = [];
    this.MISSION_ARROW_V_RECT = [];
    this.MISSION_ARROW_H_RECT = [];
    this.MISSION_TOGETOGE_RECT = [];
    this.MARSHMALLOW_RECT = [];
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    for (cnt = 0; cnt < 12; cnt++)
        for (cnt2 = 0; cnt2 < 6; cnt2++)
            if (cnt == 0)
                this.PIECE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 1)
                this.ARROW_V_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 2)
                this.ARROW_H_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 3)
                this.TOGETOGE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 4)
                if (cnt2 == 0)
                    this.RAINBOW_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 1)
                    this.WIRE_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 2)
                    this.KIRIKABU2_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 3)
                    this.KIRIKABU1_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 4)
                    this.SILVER_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else {
                    if (cnt2 == 5)
                        this.GOLD_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE))
                }
            else if (cnt == 5)
                if (cnt2 == 0)
                    this.FLOWER_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 1)
                    this.ACORN_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 2)
                    this.HONEYCOMB1_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 3)
                    this.HONEYCOMB2_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 4)
                    this.HONEY_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
                else {
                    if (cnt2 == 5)
                        this.HONEY_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)))
                }
            else if (cnt == 6)
                if (cnt2 == 0)
                    this.BEARHIDE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
                else if (cnt2 == 1)
                    this.BEARHIDE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
                else if (cnt2 == 2)
                    this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 3)
                    this.ORDER_ARROW_RECT = this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                else if (cnt2 == 4)
                    this.WARP_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
                else {
                    if (cnt2 == 5)
                        this.WARP_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)))
                }
            else if (cnt == 7)
                this.MISSION_PIECE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 8)
                this.MISSION_ARROW_V_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 9)
                this.MISSION_ARROW_H_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 10)
                this.MISSION_TOGETOGE_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 11)
                if (cnt2 == 0)
                    this.MARSHMALLOW_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(384,128,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE * 2)));
                else if (cnt2 == 1)
                    this.MARSHMALLOW_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(384 + pigg.puzzle.view.CommonView.BALL_SIZE,128,pigg.puzzle.view.CommonView.BALL_SIZE * 2,248)));
                else if (cnt2 == 2)
                    this.MARSHMALLOW_RECT.push(this._tileset.addRect(new openfl.geom.Rectangle(384 + pigg.puzzle.view.CommonView.BALL_SIZE * 3,128,pigg.puzzle.view.CommonView.BALL_SIZE * 3,pigg.puzzle.view.CommonView.BALL_SIZE * 6)));
    this.CHEAT_FOCUS_RECT = this._tileset.addRect(new openfl.geom.Rectangle(960,512,64,64));
    this.traceLog('MISSION_PIECE_RECT::', this.MISSION_PIECE_RECT);
    this.traceLog('MISSION_ARROW_V_RECT::', this.MISSION_PIECE_RECT);
    this.traceLog('MISSION_ARROW_H_RECT::', this.MISSION_PIECE_RECT);
    this.traceLog('MISSION_TOGETOGE_RECT::', this.MISSION_PIECE_RECT);
    this._tilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT,this._tileset)
}
;
pigg.puzzle.view.GameView.prototype.makeTilePiece = function() {
    this.traceLog('makeTilePiece\u524d');
    this._pieceContainer.addChild(this._tilemap);
    this._tilemap.x = this._tilemap.y = -this._adjstObjPos - 2;
    this._pieceContainer.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.pieceMD, this, 'pieceMD'));
    this.traceLog('makeTilePiece\u5f8c');
    this._jellyTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT,this._tileset);
    this._jellyTilemap.x = this._jellyTilemap.y = -this._adjstObjPos - 2;
    this._jellyContainer.addChild(this._jellyTilemap);
    this._wiredTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT,this._tileset);
    this._wiredTilemap.x = this._wiredTilemap.y = -this._adjstObjPos - 2;
    this._wiredContainer.addChild(this._wiredTilemap);
    this._marshmallowTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT,this._tileset);
    this._marshmallowTilemap.x = this._marshmallowTilemap.y = -this._adjstObjPos - 2;
    this._marshmallowContainer.addChild(this._marshmallowTilemap)
}
;
pigg.puzzle.view.GameView.prototype._isSwitchNumber;
pigg.puzzle.view.GameView.prototype.pv;
pigg.puzzle.view.GameView.prototype.pieceMD = function(e) {
    var mx = Math.floor((e.localX + 4) / pigg.puzzle.view.CommonView.BALL_SIZE);
    var my = Math.floor((e.localY + 4) / pigg.puzzle.view.CommonView.BALL_SIZE);
    this.traceLog('pieceMD::', e.localX, e.localY, mx, my);
    if (mx < 0 || my < 0 || mx >= pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X || my >= pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y)
        return;
    this._isSwitchNumber = false;
    this._assistManager.setAssistTimer(false);
    this.traceLog('pieceMD:::', this._isFlush, this._isGameCleared, this._isMouseEnable, mx, my);
    if (this._isFlush)
        return;
    if (this._isGameCleared)
        return;
    if (!this._isMouseEnable)
        return;
    var mInfo = this._map[mx][my];
    if (mInfo == null)
        return;
    this.traceLog('pieceMD:::', this._currentUseItemType);
    if (mInfo.isVoid && this._currentUseItemType != -1)
        return;
    if (mInfo.isOrder != -1 && this._currentUseItemType != -1)
        return;
    if (mInfo.hasWired > 0 && (this._currentUseItemType != 1 && this._currentUseItemType != 2))
        return;
    if (mInfo.isFix && this._currentUseItemType != 1)
        return;
    if (mInfo.num == -1 && this._currentUseItemType != 1)
        return;
    if (this._main.isParticle && this.pv == null && !this._main.isLowSpecMode) {
        this.pv = new pigg.puzzle.view.ParticleView(this._main);
        this.pv.init(pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT, 0, 4);
        this.addChild(this.pv)
    }
    this.traceLog('e.currentTarget.x::', this.mouseX, this.mouseY);
    if (this._main.isParticle && !this._main.isLowSpecMode)
        this.pv.makeTapParticle(this.mouseX, this.mouseY);
    this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.pieceMM, this, 'pieceMM'));
    this.addEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.pieceMU, this, 'pieceMU'));
    this._mouseDownPosX = this.mouseX;
    this._mouseDownPosY = this.mouseY;
    this._mouseDownInfo = mInfo;
    this._isObjMouseDown = true;
    this.traceLog('pieceMD::', mInfo.mx, mInfo.my);
    if (this._currentUseItemType != -1)
        return;
    this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
    com.greensock.TweenMax.killTweensOf(this._mouseDownInfo.mc);
    var oy = 40;
    if (this._mouseDownInfo.my == 0)
        oy = 25;
    com.greensock.TweenMax.to(this._mouseDownInfo.mc, .25, {
        scaleX: 1.5 / this._gameMaterialScale,
        scaleY: 1.5 / this._gameMaterialScale,
        originX: 10 / this._gameMaterialScale,
        originY: oy / this._gameMaterialScale,
        ease: com.greensock.easing.Expo.easeOut
    })
}
;
pigg.puzzle.view.GameView.prototype.pieceMM = function(e) {
    this.traceLog('objMM');
    if (this._isSwitchNumber)
        return;
    var swtchThreshold = 8;
    if (!this._isMouseEnable)
        return;
    if (this._isGameCleared)
        return;
    if (this._isFlush)
        return;
    if (this._isItemGridClick)
        return;
    if (this._mouseDownInfo == null)
        return;
    if (this._isSendingUseCheatItem)
        return;
    var mInfo = this._map[this._mouseDownInfo.mx][this._mouseDownInfo.my];
    if (this._mouseDownInfo != null && this._currentUseItemType == 1) {
        if (this._mouseDownInfo != mInfo) {
            this._mouseDownInfo = null;
            this._switching = false
        }
        this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.pieceMM, this, 'pieceMM'));
        return
    }
    if (this._mouseDownInfo != null && this._currentUseItemType == 2) {
        if (this._mouseDownInfo.isOrder != -1)
            return;
        if (this._mouseDownInfo.isAcorn != -1)
            return;
        if (this._mouseDownPosX > this.mouseX + swtchThreshold) {
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType, 2)
        } else if (this._mouseDownPosX < this.mouseX - swtchThreshold) {
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType, 2)
        } else if (this._mouseDownPosY > this.mouseY + swtchThreshold) {
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType, 1)
        } else if (this._mouseDownPosY < this.mouseY - swtchThreshold) {
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType, 1)
        }
        return
    } else if (this._currentUseItemType == 2 && this._itemTargetInfo != null) {
        this.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.pieceMM, this, 'pieceMM'));
        return
    }
    if (this._isObjClick)
        swtchThreshold *= 2;
    if (this._mouseDownInfo != null && !this._switching) {
        this._currentMouseOver = null;
        if (this._mouseDownPosX > this.mouseX + swtchThreshold)
            this.trySwitchNumber('left');
        else if (this._mouseDownPosX < this.mouseX - swtchThreshold)
            this.trySwitchNumber('right');
        else if (this._mouseDownPosY > this.mouseY + swtchThreshold)
            this.trySwitchNumber('up');
        else if (this._mouseDownPosY < this.mouseY - swtchThreshold)
            this.trySwitchNumber('down')
    }
}
;
pigg.puzzle.view.GameView.prototype.pieceMU = function(e) {
    this.traceLog('pieceMU');
    this.removeEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.pieceMU, this, 'pieceMU'));
    this._isObjMouseDown = false;
    if (this._isFlush)
        return;
    if (this._isItemGridClick)
        return;
    var rnd;
    if (this._mouseDownInfo)
        if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_ARROW && this._mouseDownInfo.isOrder == -1 && this._mouseDownInfo.isAcorn == -1) {
            this.traceLog('pieceMU:::::CHEATITEM_TYPE_ARROW');
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType, -1);
            this._mouseDownInfo = null;
            this._switching = false;
            return
        } else if (this._currentUseItemType == pigg.puzzle.view.CommonView.CHEATITEM_TYPE_EREASE && this._mouseDownInfo.isOrder == -1) {
            this.traceLog('pieceMU:::::CHEATITEM_TYPE_EREASE');
            this._itemTargetInfo = this._mouseDownInfo;
            this.startUseCheatItem(this._currentUseItemType);
            return
        } else {
            com.greensock.TweenMax.killTweensOf(this._mouseDownInfo.mc);
            com.greensock.TweenMax.to(this._mouseDownInfo.mc, .75, {
                scaleX: 1,
                scaleY: 1,
                originX: 0,
                originY: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.75, .2)
            });
            this._isObjClick = false
        }
    this._mouseDownInfo = null;
    this._switching = false;
    if (!this._isFlush && this._currentUseItemType == -1) {
        this.traceLog('objMU::Timer\u30b9\u30bf\u30fc\u30c8');
        this._assistManager.setAssistTimer()
    }
}
;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_PIECE;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ARROW_V_U;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ARROW_V_D;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ARROW_H_L;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ARROW_H_R;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_TOGETOGE;
pigg.puzzle.view.GameView.prototype.RECT_ADD_EFFECT_ARROW_V;
pigg.puzzle.view.GameView.prototype.RECT_ADD_EFFECT_ARROW_H;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_RAINBOW = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ICING = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_HONEY1 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_HONEY2 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_FLOWER = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_ACORN = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_BEARHIDE1 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_BEARHIDE2 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_WIRE1 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_WIRE2 = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_GOLD = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_SILVER = 0;
pigg.puzzle.view.GameView.prototype.RECT_CRUSH_KIRA = 0;
pigg.puzzle.view.GameView.prototype._crushTilemap;
pigg.puzzle.view.GameView.prototype._crushTileset;
pigg.puzzle.view.GameView.prototype.ADJUST_RECT_POS_X = 768;
pigg.puzzle.view.GameView.prototype.initCrushTile = function() {
    this.traceLog('initCrushPiece');
    this._crushTileset = this._main.gamePieceTileset.clone();
    var cnt = 0
      , len = 0
      , cnt2 = 0
      , len2 = 0;
    len = 8;
    for (cnt = 0; cnt < len; cnt++) {
        len2 = 6;
        for (cnt2 = 0; cnt2 < len2; cnt2++)
            if (cnt == 0)
                this.RECT_CRUSH_ARROW_V_U.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 1)
                this.RECT_CRUSH_ARROW_V_D.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 2)
                this.RECT_CRUSH_ARROW_H_L.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 3)
                this.RECT_CRUSH_ARROW_H_R.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 4)
                this.RECT_CRUSH_TOGETOGE.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 5)
                this.RECT_ADD_EFFECT_ARROW_V.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 6)
                this.RECT_ADD_EFFECT_ARROW_H.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 7) {
                if (cnt2 == 0)
                    this.RECT_CRUSH_RAINBOW = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE));
                this.RECT_CRUSH_PIECE.push(this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + (pigg.puzzle.view.CommonView.BALL_SIZE + cnt2 * 32),cnt * pigg.puzzle.view.CommonView.BALL_SIZE,32,32)))
            }
    }
    this.RECT_CRUSH_ICING = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 64,480,32,32));
    this.RECT_CRUSH_HONEY1 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 96,480,32,32));
    this.RECT_CRUSH_HONEY2 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 128,480,32,32));
    this.RECT_CRUSH_FLOWER = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 160,480,32,32));
    this.RECT_CRUSH_ACORN = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 192,480,32,32));
    this.RECT_CRUSH_BEARHIDE1 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 224,480,32,32));
    this.RECT_CRUSH_BEARHIDE2 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 256,480,32,32));
    this.RECT_CRUSH_WIRE1 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 288,480,32,32));
    this.RECT_CRUSH_WIRE2 = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 320,448,64,64));
    this.RECT_CRUSH_SILVER = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 0,512,64,64));
    this.RECT_CRUSH_GOLD = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 64,512,64,64));
    this.RECT_CRUSH_KIRA = this._crushTileset.addRect(new openfl.geom.Rectangle(this.ADJUST_RECT_POS_X + 128,512,32,32));
    this._crushTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH + 26,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT + 200,this._crushTileset);
    this._gameEffectContainer.addChild(this._crushTilemap);
    this._crushTilemap.x = -64;
    this._crushTilemap.y = -200
}
;
pigg.puzzle.view.GameView.prototype._crushParticleCnt = 0;
pigg.puzzle.view.GameView.prototype.makeCrushParticle = function(ballType, mx, my) {
    ballType = typeof ballType !== 'undefined' ? ballType : 1;
    mx = typeof mx !== 'undefined' ? mx : 0;
    my = typeof my !== 'undefined' ? my : 0;
    if (this._main.isLowSpecMode)
        return;
    this.traceLog('makeCrushParticle', ballType);
    var tx, ty, dist, tr;
    var cnt = 0;
    var mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE - this._crushTilemap.x;
    var mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE - this._crushTilemap.y;
    var crushTile;
    var addx = 0;
    var threshold = 8 * this._gameMaterialScale;
    var thresholdHalf = 4 * this._gameMaterialScale;
    if (ballType < 10)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 4) + threshold * 4 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 4 + threshold * 4 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_PIECE[ballType],mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            ty = mcy + 120 + Math.random() * 16;
            com.greensock.TweenMax.to(crushTile, .32, {
                bezier: [{
                    x: mcx + tx / 3,
                    y: mcy - threshold * 3,
                    scaleX: 1.2 * this._gameMaterialScale,
                    scaleY: 1.2 * this._gameMaterialScale
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .3 * this._gameMaterialScale,
                    scaleY: .3 * this._gameMaterialScale
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 20)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 6) + threshold * 10 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 6 + threshold * 10 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_ICING,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            tr = Math.random() * 360;
            ty = mcy + 200 + Math.random() * 32;
            com.greensock.TweenMax.to(crushTile, .45, {
                bezier: [{
                    x: mcx + tx / 2,
                    y: mcy - threshold * 3,
                    scaleX: 1.5 * this._gameMaterialScale,
                    scaleY: 1.5 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .4 * this._gameMaterialScale,
                    scaleY: .4 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 21)
        for (cnt = 0; cnt < 3; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 3) + threshold * 5 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 3 + threshold * 5 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_ICING,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            tr = Math.random() * 360;
            ty = mcy + 160 + Math.random() * 32;
            com.greensock.TweenMax.to(crushTile, .38, {
                bezier: [{
                    x: mcx + tx / 2,
                    y: mcy - threshold * 2,
                    scaleX: 1 * this._gameMaterialScale,
                    scaleY: 1 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .4 * this._gameMaterialScale,
                    scaleY: .4 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 12)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 3) + threshold * 5 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 3 + threshold * 5 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_ACORN,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            tr = Math.random() * 360;
            ty = mcy + 200 + Math.random() * 32;
            com.greensock.TweenMax.to(crushTile, .43, {
                bezier: [{
                    x: mcx + tx / 2,
                    y: mcy - threshold * 2,
                    scaleX: .8 * this._gameMaterialScale,
                    scaleY: .8 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .6 * this._gameMaterialScale,
                    scaleY: .6 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 13 || ballType == 14)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt == 0) {
                if (ballType == 13)
                    crushTile = new TileBase(this.RECT_CRUSH_SILVER,mcx,mcy);
                else if (ballType == 14)
                    crushTile = new TileBase(this.RECT_CRUSH_GOLD,mcx,mcy);
                crushTile.originX = crushTile.originY = 32;
                crushTile.scaleX = -1;
                ty = mcy - 60 * this._gameMaterialScale;
                this._crushTilemap.addTile(crushTile);
                this._crushParticleCnt++;
                if (ballType == 13)
                    com.greensock.TweenMax.to(crushTile, .72, {
                        ease: com.greensock.easing.Expo.easeOut,
                        scaleX: 1.2,
                        scaleY: 1.2,
                        y: ty,
                        onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                        onCompleteParams: [crushTile]
                    });
                else if (ballType == 14)
                    com.greensock.TweenMax.to(crushTile, .76, {
                        ease: com.greensock.easing.Expo.easeOut,
                        scaleX: 1.2,
                        scaleY: 1.2,
                        y: ty,
                        onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                        onCompleteParams: [crushTile]
                    })
            } else {
                mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
                mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y - 20;
                if (cnt < 2) {
                    mcx += Math.random() * threshold + threshold * 3;
                    tx = +(Math.random() * threshold * 4) + threshold * 2 + thresholdHalf
                } else {
                    mcx -= Math.random() * threshold + threshold * 3;
                    tx = -(Math.random() * threshold * 4 + threshold * 2 + thresholdHalf)
                }
                if (cnt == 0 || cnt == 3)
                    mcy += Math.random() * (threshold * 3) + threshold;
                else
                    mcy -= Math.random() * (threshold * 3) + threshold;
                crushTile = new TileBase(this.RECT_CRUSH_KIRA,mcx,mcy);
                crushTile.originX = crushTile.originY = 16;
                this._crushTilemap.addTile(crushTile);
                this._crushParticleCnt++;
                crushTile.scaleX = crushTile.scaleY = 1;
                ty = mcy - (30 * this._gameMaterialScale + Math.random() * 20);
                com.greensock.TweenMax.to(crushTile, .4 + Math.random() * .3, {
                    bezier: [{
                        y: mcy - 20,
                        scaleX: .5,
                        scaleY: .5
                    }, {
                        y: ty,
                        scaleX: 1.2 * this._gameMaterialScale,
                        scaleY: 1.2 * this._gameMaterialScale
                    }, {
                        y: ty,
                        scaleX: 1 * this._gameMaterialScale,
                        scaleY: 1 * this._gameMaterialScale
                    }],
                    ease: com.greensock.easing.Expo.easeOut,
                    onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                    onCompleteParams: [crushTile]
                })
            }
        }
    else if (ballType == 14)
        ;
    else if (ballType == 15) {
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + threshold;
                tx = +(Math.random() * threshold * 4) + threshold * 2 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + threshold;
                tx = -(Math.random() * threshold * 4 + threshold * 2 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_FLOWER,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale * 1.2;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            ty = mcy + 240;
            com.greensock.TweenMax.to(crushTile, .5, {
                bezier: [{
                    x: mcx + tx / 3 + (Math.random() * 64 - 32),
                    y: mcy + 120,
                    scaleX: -1.2 * this._gameMaterialScale,
                    scaleY: 1.2 * this._gameMaterialScale,
                    rotation: Math.random() * 360
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: 1 * this._gameMaterialScale,
                    scaleY: 1 * this._gameMaterialScale,
                    rotation: Math.random() * 360
                }],
                ease: com.greensock.easing.Sine.easeIn,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
        this.traceLog('\u82b1setCrushEffect', this._currentFlowerDisplayCount, this._currentThroughFlower)
    } else if (ballType == 22)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 6) + threshold * 10 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 6 + threshold * 10 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_HONEY2,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = 1.4 * this._gameMaterialScale;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            tr = Math.random() * 360;
            ty = mcy + 400;
            com.greensock.TweenMax.to(crushTile, .55, {
                bezier: [{
                    x: mcx + tx / 2,
                    y: mcy - threshold * 2,
                    scaleX: 1.5 * this._gameMaterialScale,
                    scaleY: 1.5 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .6 * this._gameMaterialScale,
                    scaleY: .6 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 23)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + thresholdHalf;
                tx = +(Math.random() * threshold * 3) + threshold * 5 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + thresholdHalf;
                tx = -(Math.random() * threshold * 3 + threshold * 5 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold;
            else
                mcy -= Math.random() * threshold;
            crushTile = new TileBase(this.RECT_CRUSH_HONEY1,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = 1.4 * this._gameMaterialScale;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            tr = Math.random() * 360;
            ty = mcy + 300;
            com.greensock.TweenMax.to(crushTile, .45, {
                bezier: [{
                    x: mcx + tx / 2,
                    y: mcy - threshold * 2,
                    scaleX: 1.2 * this._gameMaterialScale,
                    scaleY: 1.2 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: .6 * this._gameMaterialScale,
                    scaleY: .6 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 24)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt == 0) {
                crushTile = new TileBase(this.RECT_CRUSH_WIRE2,mcx,mcy);
                crushTile.originX = crushTile.originY = 32;
                ty = mcy + 200 + Math.random() * 32;
                tr = Math.random() * 320;
                if (Math.random() < .5)
                    tx = +(Math.random() * threshold * 4) + threshold * 8 + thresholdHalf;
                else
                    tx = -(Math.random() * threshold * 4 + threshold * 8 + thresholdHalf);
                this._crushTilemap.addTile(crushTile);
                this._crushParticleCnt++;
                com.greensock.TweenMax.to(crushTile, .45, {
                    bezier: [{
                        x: mcx + tx / 2,
                        y: mcy - threshold * 2,
                        scaleX: 1.2 * this._gameMaterialScale,
                        scaleY: 1.2 * this._gameMaterialScale,
                        rotation: tr / 3
                    }, {
                        x: mcx + tx,
                        y: ty,
                        scaleX: .6 * this._gameMaterialScale,
                        scaleY: .6 * this._gameMaterialScale,
                        rotation: tr
                    }],
                    ease: com.greensock.easing.Sine.easeOut,
                    onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                    onCompleteParams: [crushTile]
                })
            } else {
                crushTile = new TileBase(this.RECT_CRUSH_WIRE1,mcx,mcy);
                crushTile.originX = crushTile.originY = 16;
                if (cnt < 2) {
                    mcx += Math.random() * threshold + thresholdHalf;
                    tx = +(Math.random() * threshold * 4) + threshold * 7 + thresholdHalf
                } else {
                    mcx -= Math.random() * threshold + thresholdHalf;
                    tx = -(Math.random() * threshold * 4 + threshold * 7 + thresholdHalf)
                }
                if (cnt == 0 || cnt == 3)
                    mcy += Math.random() * threshold;
                else
                    mcy -= Math.random() * threshold;
                this._crushTilemap.addTile(crushTile);
                this._crushParticleCnt++;
                ty = mcy + 200 + Math.random() * 32;
                tr = Math.random() * 360;
                com.greensock.TweenMax.to(crushTile, .45, {
                    bezier: [{
                        x: mcx + tx / 2,
                        y: mcy - threshold * 2,
                        scaleX: 1.2 * this._gameMaterialScale,
                        scaleY: 1.2 * this._gameMaterialScale,
                        rotation: tr / 3
                    }, {
                        x: mcx + tx,
                        y: ty,
                        scaleX: .6 * this._gameMaterialScale,
                        scaleY: .6 * this._gameMaterialScale,
                        rotation: tr
                    }],
                    ease: com.greensock.easing.Sine.easeOut,
                    onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                    onCompleteParams: [crushTile]
                })
            }
        }
    else if (ballType == 25)
        for (cnt = 0; cnt < 4; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + threshold * 2;
                tx = +(Math.random() * threshold * 4) + threshold * 4 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + threshold * 2;
                tx = -(Math.random() * threshold * 4 + threshold * 4 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold * 2;
            else
                mcy -= Math.random() * threshold * 2;
            crushTile = new TileBase(this.RECT_CRUSH_BEARHIDE2,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale * 1.2;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            ty = mcy + 240 + Math.random() * 32;
            tr = Math.random() * 720 - 360;
            com.greensock.TweenMax.to(crushTile, .5, {
                bezier: [{
                    x: mcx + tx / 3 + (Math.random() * 64 - 32),
                    y: mcy + 100,
                    scaleX: 1.2 * this._gameMaterialScale,
                    scaleY: 1.2 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: 1 * this._gameMaterialScale,
                    scaleY: 1 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    else if (ballType == 26)
        for (cnt = 0; cnt < 3; cnt++) {
            mcx = mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.x;
            mcy = my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE / 2 - this._crushTilemap.y;
            if (cnt < 2) {
                mcx += Math.random() * threshold + threshold * 2;
                tx = +(Math.random() * threshold * 4) + threshold * 2 + thresholdHalf
            } else {
                mcx -= Math.random() * threshold + threshold * 2;
                tx = -(Math.random() * threshold * 4 + threshold * 2 + thresholdHalf)
            }
            if (cnt == 0 || cnt == 3)
                mcy += Math.random() * threshold * 2;
            else
                mcy -= Math.random() * threshold * 2;
            crushTile = new TileBase(this.RECT_CRUSH_BEARHIDE1,mcx,mcy);
            crushTile.originX = crushTile.originY = 16;
            crushTile.scaleX = crushTile.scaleY = this._gameMaterialScale * 1.2;
            crushTile.rotation = Math.random() * 360;
            this._crushTilemap.addTile(crushTile);
            this._crushParticleCnt++;
            ty = mcy + 180 + Math.random() * 32;
            tr = Math.random() * 360 - 180;
            com.greensock.TweenMax.to(crushTile, .42, {
                bezier: [{
                    x: mcx + tx / 3 + (Math.random() * 64 - 32),
                    y: mcy + 60,
                    scaleX: 1.2 * this._gameMaterialScale,
                    scaleY: 1.2 * this._gameMaterialScale,
                    rotation: tr / 3
                }, {
                    x: mcx + tx,
                    y: ty,
                    scaleX: 1 * this._gameMaterialScale,
                    scaleY: 1 * this._gameMaterialScale,
                    rotation: tr
                }],
                ease: com.greensock.easing.Sine.easeOut,
                onComplete: org.apache.royale.utils.Language.closure(this.removeParticle, this, 'removeParticle'),
                onCompleteParams: [crushTile]
            })
        }
    this.traceLog('MAKE***:_crushParticleCnt:::', this._crushParticleCnt)
}
;
pigg.puzzle.view.GameView.prototype.removeParticle = function(tile, clean) {
    clean = typeof clean !== 'undefined' ? clean : false;
    if (tile == null)
        return;
    if (tile.parent == null)
        return;
    tile.parent.removeTile(tile);
    tile = null;
    this._crushParticleCnt--
}
;
pigg.puzzle.view.GameView.prototype._themeContainer;
pigg.puzzle.view.GameView.prototype._themeTilemap;
pigg.puzzle.view.GameView.prototype._themeTileset;
pigg.puzzle.view.GameView.prototype._themeTile;
pigg.puzzle.view.GameView.prototype._themeTileRect;
pigg.puzzle.view.GameView.prototype._themeTileArray;
pigg.puzzle.view.GameView.prototype._themeTxtContainer;
pigg.puzzle.view.GameView.prototype._scoreTextArray;
pigg.puzzle.view.GameView.prototype._missionTile;
pigg.puzzle.view.GameView.prototype._missionTilemap;
pigg.puzzle.view.GameView.prototype._textformat;
pigg.puzzle.view.GameView.prototype._headerTilemap;
pigg.puzzle.view.GameView.prototype._headerTileset;
pigg.puzzle.view.GameView.prototype._headerScoreTile;
pigg.puzzle.view.GameView.prototype._headerPotionThumbTile;
pigg.puzzle.view.GameView.prototype._headerPointIconTile;
pigg.puzzle.view.GameView.prototype._headerThemeTxtTile;
pigg.puzzle.view.GameView.prototype._headerMoveTimesAlertTile;
pigg.puzzle.view.GameView.prototype._scoreFontStr;
pigg.puzzle.view.GameView.prototype._themeCheckArray;
pigg.puzzle.view.GameView.prototype.HEADER_POTION_THMUB_RECT;
pigg.puzzle.view.GameView.prototype.HEADER_POINT_ICON_RECT = 0;
pigg.puzzle.view.GameView.prototype.HEADER_THEME_TXT_RECT;
pigg.puzzle.view.GameView.prototype.HEADER_MOVETIMES_ALERT_RECT = 0;
pigg.puzzle.view.GameView.prototype._menuEventTilemap;
pigg.puzzle.view.GameView.prototype._menuEventTileset;
pigg.puzzle.view.GameView.prototype._menuBtnTile;
pigg.puzzle.view.GameView.prototype._eventBtnTile;
pigg.puzzle.view.GameView.prototype._menuEventBtnContainer;
pigg.puzzle.view.GameView.prototype._menuCheatItemContainer;
pigg.puzzle.view.GameView.prototype._menuCheatItemContainers;
pigg.puzzle.view.GameView.prototype.RECT_STEP_BTN;
pigg.puzzle.view.GameView.prototype._menuCheatItemBtnTile;
pigg.puzzle.view.GameView.prototype._menuCheatItemPlusTile;
pigg.puzzle.view.GameView.prototype._menuCheatItemLockTile;
pigg.puzzle.view.GameView.prototype._menuCheatItemCloseTile;
pigg.puzzle.view.GameView.prototype._menuCheatItemBtnTilemap;
pigg.puzzle.view.GameView.prototype._menuCheatItemBtnTilemaps;
pigg.puzzle.view.GameView.prototype._menuCheatItemBtnTileset;
pigg.puzzle.view.GameView.prototype._menuCheatItemTxtStr;
pigg.puzzle.view.GameView.prototype._themeCheckTilemap;
pigg.puzzle.view.GameView.prototype._gameScoreTilemap;
pigg.puzzle.view.GameView.prototype._gamePotionScoreTilemap;
pigg.puzzle.view.GameView.prototype._gameMoveTimesTilemap;
pigg.puzzle.view.GameView.prototype.initMenuPanel = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnAction('down', 0)
    };
    var __localFn1__ = function(e) {
        self.btnAction('click', 0)
    };
    var __localFn2__ = function(e) {
        self.btnAction('down', 1)
    };
    var __localFn3__ = function(e) {
        self.btnAction('click', 1)
    };
    var cnt = 0
      , cnt2 = 0
      , len = 0;
    var format = new openfl.text.TextFormat('Rounded Mplus 1c',20,2236962);
    var tl;
    this._headerTileset = this._main.gamePartsTileset.clone();
    this._headerTileset.addRect(new openfl.geom.Rectangle(0,0,369,120));
    this._headerTileset.addRect(new openfl.geom.Rectangle(369,0,233,112));
    this._headerTileset.addRect(new openfl.geom.Rectangle(603,0,259,121));
    this.MISSION_THEME_RECT = this._headerTileset.addRect(new openfl.geom.Rectangle(762,121,58,55));
    this.HEADER_POTION_THMUB_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(822,121,43,53)));
    this.HEADER_POTION_THMUB_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(866,121,43,53)));
    this.HEADER_POTION_THMUB_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(910,121,43,53)));
    this.HEADER_POTION_THMUB_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(954,121,43,53)));
    this.HEADER_POINT_ICON_RECT = this._headerTileset.addRect(new openfl.geom.Rectangle(863,77,35,35));
    this.HEADER_THEME_TXT_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(863,0,139,17)));
    this.HEADER_THEME_TXT_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(863,17,139,17)));
    this.HEADER_THEME_TXT_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(863,34,139,17)));
    this.HEADER_THEME_TXT_RECT.push(this._headerTileset.addRect(new openfl.geom.Rectangle(863,51,139,17)));
    this.HEADER_MOVETIMES_ALERT_RECT = this._headerTileset.addRect(new openfl.geom.Rectangle(641,1426,110,102));
    this._headerTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,300,this._headerTileset);
    this._headerTilemap.addTile(new TileBase);
    this._headerScoreTile = new TileBase(1);
    this._headerTilemap.addTile(this._headerScoreTile);
    this._menuTopContainer.addChild(this._headerTilemap);
    this._headerMoveTimesAlertTile = new TileBase(this.HEADER_MOVETIMES_ALERT_RECT);
    this._headerPotionThumbTile = new TileBase;
    this._headerPotionThumbTile.x = 390;
    this._headerPotionThumbTile.y = 61;
    this._headerPointIconTile = new TileBase(this.HEADER_POINT_ICON_RECT);
    this._headerPointIconTile.x = 452;
    this._headerPointIconTile.y = 35;
    this._headerTilemap.addTile(this._headerPointIconTile);
    this._headerThemeTxtTile = new TileBase;
    this._headerThemeTxtTile.x = 183;
    this._headerThemeTxtTile.y = 14;
    this._headerTilemap.addTile(this._headerThemeTxtTile);
    this._menuEventTileset = this._main.commonPartsTileset.clone();
    this._menuEventTileset.addRect(new openfl.geom.Rectangle(945,0,103,103));
    len = 9;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_STEP_BTN.push(this._menuEventTileset.addRect(new openfl.geom.Rectangle(cnt * 105,0,103,103)));
    this._menuEventTilemap = new openfl.display.Tilemap(275,200,this._menuEventTileset);
    this._eventBtnTile = new TileBase(5);
    this._eventBtnTile.originX = this._eventBtnTile.originY = 100 / 2;
    this._eventBtnTile.x = 76 + 114;
    this._eventBtnTile.y = 100;
    this._menuBtnTile = new TileBase(0);
    this._menuBtnTile.originX = this._menuBtnTile.originY = 100 / 2;
    this._menuBtnTile.x = 76;
    this._menuBtnTile.y = 100;
    this._menuEventTilemap.addTile(this._eventBtnTile);
    this._menuEventTilemap.addTile(this._menuBtnTile);
    this._menuEventBtnContainer.addChild(this._menuEventTilemap);
    this._menuEventBtnContainer.y = 738 + 200;
    this._menuCheatItemBtnTileset = this._main.gamePartsTileset.clone();
    len = 3;
    for (cnt2 = 0; cnt2 < 2; cnt2++)
        for (cnt = 0; cnt < len; cnt++) {
            this._menuCheatItemBtnTileset.addRect(new openfl.geom.Rectangle(641 + cnt * 106,290 + cnt2 * 110,105,108));
            if (cnt2 == 0) {
                this._menuCheatItemBtnTile.push(new TileBase(cnt));
                this._menuCheatItemBtnTile[cnt].originX = this._menuCheatItemBtnTile[cnt].originY = 51;
                this._menuCheatItemBtnTile[cnt].y = 80;
                this._menuCheatItemBtnTile[cnt].x = 80
            }
        }
    this._menuCheatItemBtnTileset.addRect(new openfl.geom.Rectangle(901,74,40,40));
    this._menuCheatItemBtnTileset.addRect(new openfl.geom.Rectangle(943,74,36,40));
    this._menuCheatItemBtnTileset.addRect(new openfl.geom.Rectangle(1003,0,44,44));
    var txtContainer;
    for (cnt = 0; cnt < 3; cnt++) {
        this._menuCheatItemContainers.push(new openfl.display.Sprite);
        this._menuBottomContainer.addChild(this._menuCheatItemContainers[cnt]);
        this._menuCheatItemContainers[cnt].mouseChildren = false;
        this._menuCheatItemContainers[cnt].mouseEnabled = false;
        this._menuCheatItemBtnTilemaps.push(new openfl.display.Tilemap(460,220,this._menuCheatItemBtnTileset));
        this._menuCheatItemBtnTilemaps[cnt].addTile(this._menuCheatItemBtnTile[cnt]);
        this._menuCheatItemContainers[cnt].addChild(this._menuCheatItemBtnTilemaps[cnt]);
        this._menuCheatItemContainers[cnt].x = 250 + cnt * 116;
        this._menuCheatItemContainers[cnt].y = -24;
        this._menuCheatItemPlusTile.push(new TileBase(6));
        this._menuCheatItemPlusTile[cnt].x = 94;
        this._menuCheatItemPlusTile[cnt].y = 27;
        this._menuCheatItemCloseTile.push(new TileBase(8));
        this._menuCheatItemCloseTile[cnt].originX = this._menuCheatItemCloseTile[cnt].originY = 22;
        this._menuCheatItemCloseTile[cnt].x = 95 + 22;
        this._menuCheatItemCloseTile[cnt].y = 15 + 22;
        txtContainer = new openfl.display.Sprite;
        this._menuCheatItemContainers[cnt].addChild(txtContainer);
        txtContainer.y = 100;
        txtContainer.x = -16;
        this._numberFontManager.makeFontInfo(this._menuCheatItemTxtStr[cnt], 100 + 140, 60, txtContainer, 6434068, 16777215, 80 + 116, 10, 5, 'CENTER', true, true);
        this._numberFontManager.makeNumber(this._menuCheatItemTxtStr[cnt], 100)
    }
    var btn;
    for (cnt = 0; cnt < 3; cnt++) {
        btn = new openfl.display.MovieClip;
        btn.graphics.beginFill(0, 0);
        btn.graphics.drawCircle(330 + cnt * 116, 56, 51);
        btn.graphics.endFill();
        btn.id = cnt;
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_OUT, org.apache.royale.utils.Language.closure(this.cheatItemBtnMOU, this, 'cheatItemBtnMOU'));
        btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.cheatItemBtnMD, this, 'cheatItemBtnMD'));
        btn.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.cheatItemBtnCL, this, 'cheatItemBtnCL'));
        this._menuBottomContainer.addChild(btn)
    }
    btn = new openfl.display.MovieClip;
    btn.graphics.beginFill(0, 0);
    btn.graphics.drawRect(140, 50, 102, 102);
    btn.graphics.endFill();
    this._menuEventBtnContainer.addChild(btn);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    btn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    btn = new openfl.display.MovieClip;
    btn.graphics.beginFill(255, 0);
    btn.graphics.drawRect(26, 50, 102, 102);
    btn.graphics.endFill();
    this._menuEventBtnContainer.addChild(btn);
    btn.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    btn.addEventListener(openfl.events.MouseEvent.CLICK, __localFn3__);
    this._moveTimesContainer = new openfl.display.Sprite;
    this._menuTopContainer.addChild(this._moveTimesContainer);
    this._numberFontManager.makeFontInfo('moveTimes', 200, 80, this._moveTimesContainer, 6434068, 16777215, 50, 14);
    this._numberFontManager.makeNumber('moveTimes', 80);
    this._gameMoveTimesTilemap = this._numberFontManager.getFontInfo('moveTimes').tilemap;
    this._moveTimesContainer.x = 0;
    this._moveTimesContainer.y = 0;
    this._menuTopContainer.mouseChildren = false;
    this._menuTopContainer.mouseEnabled = false;
    this._gameMenuScoreContainer = new openfl.display.Sprite;
    this._menuTopContainer.addChild(this._gameMenuScoreContainer);
    this._numberFontManager.makeFontInfo('gameScore', 200, 80, this._gameMenuScoreContainer, 16413475, 16777215, 100, 20, 7);
    this._numberFontManager.makeNumber('gameScore', 0);
    this._gameScoreTilemap = this._numberFontManager.getFontInfo('gameScore').tilemap;
    this._gameMenuScoreContainer.x = 470;
    this._gameMenuScoreContainer.y = 26;
    this._numberFontManager.makeFontInfo('gamePotionScore', 240, 200, this._gameMenuScoreContainer, 16413475, 16777215, 186, 81, 5);
    format.align = openfl.text.TextFormatAlign.CENTER;
    if (this._themeContainer == null) {
        this._themeContainer = new openfl.display.Sprite;
        this._menuTopContainer.addChild(this._themeContainer);
        this._themeTxtContainer = new openfl.display.Sprite;
        this._themeContainer.y = 24;
        this._themeTileset = this._main.gamePartsTileset.clone();
        this._themeTileRect = [];
        this._themeTileArray = [];
        for (cnt = 0; cnt < 13; cnt++)
            if (cnt <= 10)
                this._themeTileRect.push(this._themeTileset.addRect(new openfl.geom.Rectangle(cnt * 56,122,56,56)));
            else if (cnt == 11)
                this._themeTileRect.push(this._themeTileset.addRect(new openfl.geom.Rectangle(cnt * 56,122,95,56)));
            else if (cnt == 12)
                this._themeTileRect.push(this._themeTileset.addRect(new openfl.geom.Rectangle(711,122,44,56)));
        this._themeTilemap = new openfl.display.Tilemap(400,100,this._themeTileset);
        this._themeContainer.addChild(this._themeTilemap);
        this._themeContainer.addChild(this._themeTxtContainer);
        this._scoreTextArray = [];
        this._scoreFontStr = ['gameThemeScore1', 'gameThemeScore2', 'gameThemeScore3'];
        this._numberFontManager.makeFontInfo(this._scoreFontStr[0], 150, 80, this._themeTxtContainer, 16777215, 8342836, 106, 15, 4.5, 'CENTER', false, true);
        this._numberFontManager.makeNumber(this._scoreFontStr[0], 1);
        this._numberFontManager.makeFontInfo(this._scoreFontStr[1], 250, 80, this._themeTxtContainer, 16777215, 8342836, 250, 15, 4.5, 'CENTER', false, true);
        this._numberFontManager.makeNumber(this._scoreFontStr[1], 1);
        this._numberFontManager.makeFontInfo(this._scoreFontStr[2], 350, 80, this._themeTxtContainer, 16777215, 8342836, 392, 15, 4.5, 'CENTER', false, true);
        this._numberFontManager.makeNumber(this._scoreFontStr[2], 1);
        this._themeTxtContainer.x = -14;
        this._themeTxtContainer.y = 29;
        var checkTile;
        this._themeCheckTilemap = new openfl.display.Tilemap(200,60,this._themeTileset);
        for (cnt = 0; cnt < 3; cnt++) {
            checkTile = new TileBase(12);
            this._themeCheckTilemap.addTile(checkTile);
            checkTile.x = cnt * this._intervalThemeIcon + 15;
            this._themeCheckArray.push(checkTile);
            checkTile.visible = false
        }
        this._themeCheckTilemap.y = 26;
        this._themeCheckTilemap.x = 16;
        this._themeContainer.addChild(this._themeCheckTilemap)
    }
    if (this._missionPanel == null) {
        this._missionPanel = new openfl.display.Sprite;
        this._missionPanel.x = 75;
        this._missionPanel.y = 64;
        this._menuTopContainer.addChild(this._missionPanel);
        this._missionTile = new TileBase(this.MISSION_THEME_RECT);
        this._missionTile.originX = this._missionTile.originY = pigg.puzzle.view.CommonView.BALL_SIZE / 2;
        this._missionTile.x = this._missionTile.y = pigg.puzzle.view.CommonView.BALL_SIZE / 2;
        this._missionTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,this._headerTileset);
        this._missionTilemap.addTile(this._missionTile);
        this._missionPanel.addChild(this._missionTilemap);
        this._numberFontManager.makeFontInfo('missionCount', 60, 60, this._missionPanel, 16777215, 8342836, 64, 20, 4.5, 'CENTER', false, true);
        this._numberFontManager.addFontType('missionCount', 16777215, 14046498, 64, 20, 4.5, 'CENTER', true);
        this._numberFontManager.makeNumber('missionCount', 0);
        this._missionPanel.mouseChildren = false;
        this._missionPanel.mouseEnabled = false;
        this._missionPanel.visible = false
    }
    if (this._comboPraiseContainer == null) {
        this._comboPraiseContainer = new openfl.display.Sprite;
        this._menuBottomContainer.addChild(this._comboPraiseContainer);
        this._comboPraiseTxts = new openfl.display.Sprite;
        var comboTileset = this._main.gamePartsTileset.clone();
        comboTileset.addRect(new openfl.geom.Rectangle(224,1491,100,26));
        var comboTilemap = new openfl.display.Tilemap(200,60,comboTileset);
        var comboTile = new TileBase;
        comboTilemap.x = 0;
        comboTilemap.y = 60;
        comboTilemap.addTile(comboTile);
        this._comboPraiseTxts.addChild(comboTilemap);
        this._numberFontManager.makeFontInfo('comboCount', 150, 60, this._comboPraiseTxts, 16614835, 16777215, 76, 30, 6, 'CENTER', false, true);
        this._numberFontManager.makeNumber('comboCount', 20);
        this._comboPraiseAnimalContainer = new openfl.display.Sprite;
        this._comboPraiseContainer.addChild(this._comboPraiseAnimalContainer);
        this._comboPraiseContainer.mouseChildren = false;
        this._comboPraiseContainer.mouseEnabled = false;
        this._comboPraiseAnimalContainer.scaleX = -.7;
        this._comboPraiseAnimalContainer.scaleY = .7;
        this._comboPraiseAnimalContainer.x = 120;
        this._comboPraiseAnimalContainer.y = 110;
        this._comboPraiseTxts.x = 76;
        this._comboPraiseTxts.y = 0;
        this._comboPraiseTxts.visible = false;
        this._comboPraiseContainer.addChild(this._comboPraiseTxts);
        this._comboPraiseContainer.y = 0;
        this._comboPraiseContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH - 200;
        this._comboPraiseContainer.visible = false
    }
    if (this._themeParticleView == null) {
        this._themeParticleView = new pigg.puzzle.view.ParticleView(this._main);
        this._themeParticleView.init(640, 600, 1, 4);
        this._menuTopContainer.addChild(this._themeParticleView)
    }
    this._menuTopContainer.y = -200;
    this._menuBottomContainer.y = pigg.puzzle.view.CommonView.GAME_MENU_BOTTOM_Y + 200;
    this._gameMaterialContainer.x = this._currentMaterialViewX + 640
}
;
pigg.puzzle.view.GameView.prototype.updateEventBtn = function() {
    if (this._eventBtnTile)
        this._eventBtnTile.updateId(this.RECT_STEP_BTN[this._main.currentEventStep]);
    else
        this._eventBtnTile = new TileBase(this.RECT_STEP_BTN[this._main.currentEventStep])
}
;
pigg.puzzle.view.GameView.prototype.onLoadSheetPng = function(code, bmd) {}
;
pigg.puzzle.view.GameView.prototype._currentDummyHeaderType = 0;
pigg.puzzle.view.GameView.prototype.updateHeaderScoreType = function(isPotion) {
    isPotion = typeof isPotion !== 'undefined' ? isPotion : false;
    this.traceLog('updateHeaderScoreType::', this._main.currentUsePotion);
    this._numberFontManager.removeFontInfo('gamePotionScore');
    this._moveTimesContainer.x = 0;
    this._moveTimesContainer.y = 0;
    this._numberFontManager.updateSize('moveTimes', 10);
    this._themeContainer.x = 246 - this._themeTilemap.numTiles * this._intervalThemeIcon / 2;
    this._numberFontManager.updateSize('gameScore', 7);
    if (!isPotion) {
        this._gameMenuScoreContainer.x = 470;
        this._gameMenuScoreContainer.y = 26;
        this._headerScoreTile.updateId(1);
        this._headerTilemap.removeTile(this._headerPotionThumbTile);
        this._headerScoreTile.x = 407;
        this._headerPointIconTile.y = 44
    } else {
        this._numberFontManager.makeFontInfo('gamePotionScore', 240, 200, this._gameMenuScoreContainer, 16413475, 16777215, 186, 81, 5);
        this._numberFontManager.makeNumber('gamePotionScore', this._currentGameScore * this._main.userData.boardUsingPuzzleScoreItemMagnification);
        this._gamePotionScoreTilemap = this._numberFontManager.getFontInfo('gamePotionScore').tilemap;
        this._gameMenuScoreContainer.x = 470;
        this._gameMenuScoreContainer.y = -4;
        this._headerScoreTile.updateId(2);
        this._headerScoreTile.x = 382;
        this._headerPointIconTile.y = 15;
        this._headerPotionThumbTile.updateId(this.HEADER_POTION_THMUB_RECT[this._main.currentUsePotion]);
        this._headerTilemap.addTile(this._headerPotionThumbTile)
    }
    this._headerTilemap.swapTiles(this._headerPointIconTile, this._headerScoreTile);
    this._numberFontManager.makeNumber('gameScore', this._currentGameScore);
    this._numberFontManager.makeNumber('moveTimes', this._clearMoveTimes - this._currentMoveTimes);
    this.adjustPointIcon()
}
;
pigg.puzzle.view.GameView.prototype.adjustPointIcon = function() {
    var dg = this.getDigit(this._currentGameScore);
    if (dg < 3)
        this._headerPointIconTile.x = 462;
    else if (dg == 3)
        this._headerPointIconTile.x = 452;
    else if (dg == 4)
        this._headerPointIconTile.x = 440;
    else if (dg == 5)
        this._headerPointIconTile.x = 428;
    else if (dg == 6)
        this._headerPointIconTile.x = 420
}
;
pigg.puzzle.view.GameView.prototype.btnAction = function(action, btnType) {
    if (action == 'down') {
        this._main.playSE(pigg.puzzle.data.CommonData.SE_BUTTON_DOWN);
        if (btnType == 0) {
            this._eventBtnTile.scaleX = this._eventBtnTile.scaleY = 1.2;
            com.greensock.TweenMax.to(this._eventBtnTile, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        } else if (btnType == 1) {
            this._menuBtnTile.scaleX = this._menuBtnTile.scaleY = 1.2;
            com.greensock.TweenMax.to(this._menuBtnTile, .6, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2)
            })
        }
    } else if (action == 'click')
        if (btnType == 0)
            this._main.showEventView();
        else if (btnType == 1)
            this._main.showMenu()
}
;
pigg.puzzle.view.GameView.prototype.testSwitchMission = function() {
    if (this._main.existMission)
        this._missionPanel.visible = true;
    else
        this._missionPanel.visible = false
}
;
pigg.puzzle.view.GameView.prototype.setThemePanel = function() {
    var cnt = 0
      , len = 0;
    var tile;
    this.removeThemeTile();
    this._numberFontManager.removeNumber('gameThemeScore1');
    this._numberFontManager.removeNumber('gameThemeScore2');
    this._numberFontManager.removeNumber('gameThemeScore3');
    if (this._main.currentThemeType == -1)
        return;
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE) {
        this._themeTxtContainer.x = -8;
        this._themeCheckTilemap.x = 2
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR) {
        this._themeTxtContainer.x = 33;
        this._themeCheckTilemap.x = 38
    } else {
        this._themeTxtContainer.x = 2;
        this._themeCheckTilemap.x = 16
    }
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE)
        this._headerThemeTxtTile.updateId(this.HEADER_THEME_TXT_RECT[2]);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR)
        this._headerThemeTxtTile.updateId(this.HEADER_THEME_TXT_RECT[3]);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER)
        this._headerThemeTxtTile.updateId(this.HEADER_THEME_TXT_RECT[1]);
    else
        this._headerThemeTxtTile.updateId(this.HEADER_THEME_TXT_RECT[0]);
    if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_PIECE) {
        if (this._correctPieceArray[0][1] > 0) {
            this.addThemeTile(this._correctPieceArray[0][0] - 1);
            this._numberFontManager.makeNumber('gameThemeScore1', this._correctPieceArray[0][1])
        }
        if (this._correctPieceArray[1][1] > 0) {
            this.addThemeTile(this._correctPieceArray[1][0] - 1);
            this._numberFontManager.makeNumber('gameThemeScore2', this._correctPieceArray[1][1])
        }
        if (this._correctPieceArray[2][1] > 0) {
            this.addThemeTile(this._correctPieceArray[2][0] - 1);
            this._numberFontManager.makeNumber('gameThemeScore3', this._correctPieceArray[2][1])
        }
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY)
        this.addThemeTile(8);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER) {
        if (this._totalOrderCount[0] > 0)
            this.addThemeTile(6);
        if (this._totalOrderCount[1] > 0)
            this.addThemeTile(7);
        this.searchOrderSetGrid()
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE) {
        this.addThemeTile(9);
        this._goalScore = this._mappingView.mappingGoalScore;
        this._numberFontManager.makeNumber('gameThemeScore1', this._goalScore)
    } else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR)
        this.addThemeTile(11);
    else if (this._main.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        this.addThemeTile(10);
        this._currentFlowerCount = this._mappingView.mappingFlowerCount;
        this._currentFlowerDisplayCount = this._currentFlowerCount
    }
    this._themeContainer.x = 246 - this._themeTilemap.numTiles * this._intervalThemeIcon / 2;
    this.traceLog('_themeContainer.width::', this._themeContainer.width)
}
;
pigg.puzzle.view.GameView.prototype._intervalThemeIcon = 66;
pigg.puzzle.view.GameView.prototype.addThemeTile = function(index) {
    var adj = 0;
    if (index != 11)
        adj = 0;
    else
        adj = 40;
    var pos = this._themeTilemap.numTiles * this._intervalThemeIcon;
    var tile = new TileBase(index,(56 + adj) / 2 + 10 + pos,10);
    tile.originX = (56 + adj) / 2;
    tile.originY = 56 / 2;
    tile.y = 56 / 2 + 10;
    this._themeTilemap.x = -adj / 2;
    if (index == 11)
        this._themeTilemap.x += 6;
    this._themeTilemap.addTile(tile);
    this._themeTileArray.push(tile)
}
;
pigg.puzzle.view.GameView.prototype.removeThemeTile = function() {
    if (this._themeTilemap == null)
        return;
    var size = this._themeTilemap.numTiles;
    this.traceLog('removeThemTile::', size);
    if (size == 0)
        return;
    this._themeTilemap.removeTiles(0, size);
    if (this._themeTilemap.numTiles == 0)
        this._themeTileArray = []
}
;
pigg.puzzle.view.GameView.prototype.RECT_GAME_TELOP_THEME;
pigg.puzzle.view.GameView.prototype.RECT_GAME_TELOP_RESULT;
pigg.puzzle.view.GameView.prototype.RECT_GAME_TELOP_FINISH;
pigg.puzzle.view.GameView.prototype.initGameTelop = function() {
    var cnt = 0
      , len = 0;
    this._gameTelopTileset = this._main.gamePartsTileset.clone();
    len = 6;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_GAME_TELOP_THEME.push(this._gameTelopTileset.addRect(new openfl.geom.Rectangle(0,178 + 146 * cnt,640,145)));
    len = 3;
    for (cnt = 0; cnt < len; cnt++)
        this.RECT_GAME_TELOP_RESULT.push(this._gameTelopTileset.addRect(new openfl.geom.Rectangle(0,1054 + 146 * cnt,640,145)));
    this.RECT_GAME_TELOP_FINISH.push(this._gameTelopTileset.addRect(new openfl.geom.Rectangle(641,1041,450,133)));
    this.RECT_GAME_TELOP_FINISH.push(this._gameTelopTileset.addRect(new openfl.geom.Rectangle(640,1174,449,251)));
    this._gameTelopTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.STAGE_WIDTH,pigg.puzzle.view.CommonView.STAGE_HEIGHT,this._gameTelopTileset,false);
    this._gameTelopTile = new TileBase;
    this._gameTelopTilemap.addTile(this._gameTelopTile);
    this._gameTelopContainer = new openfl.display.Sprite;
    this._gameTelopContainer.addChild(this._gameTelopTilemap);
    this._gameTelopAnimalContainer = new openfl.display.Sprite;
    this._gameTelopContainer.addChild(this._gameTelopAnimalContainer);
    this._gameTelopAnimalContainer.scaleX = -.6;
    this._gameTelopAnimalContainer.scaleY = .6;
    this._gameTelopAnimalContainer.x = 400;
    this._gameTelopAnimalContainer.y = 500;
    this._gameTelopHoContainer = new openfl.display.Sprite;
    this._gameTelopContainer.addChild(this._gameTelopHoContainer);
    this._gameTelopHoContainer.x = -200;
    this._gameTelopHoContainer.y = 480
}
;
pigg.puzzle.view.GameView.prototype.updateTelopAnimal = function() {
    if (this._main.currentEventStep >= pigg.puzzle.view.CommonView.EVENT_STEP_MAX) {
        this._gameTelopAnimalContainer.scaleX = -.9;
        this._gameTelopAnimalContainer.scaleY = .9;
        this._gameTelopAnimalContainer.y = 480
    } else {
        this._gameTelopAnimalContainer.scaleX = -.6;
        this._gameTelopAnimalContainer.scaleY = .6
    }
}
;
pigg.puzzle.view.GameView.prototype.showConfirmRetire = function() {
    this._menuResultManager.showConfirmRetire()
}
;
pigg.puzzle.view.GameView.prototype._isFirstShowTheme = true;
pigg.puzzle.view.GameView.prototype.showTheme = function() {
    if (this._isFirstShowTheme)
        com.greensock.TweenMax.to(this._menuEventBtnContainer, .5, {
            delay: .3,
            y: 738,
            ease: com.greensock.easing.Cubic.easeOut
        });
    this._isFirstShowTheme = false;
    this.showBgBlack();
    this._isShowTheme = true
}
;
pigg.puzzle.view.GameView.prototype.showBgBlack = function() {
    this._bgBackBlack.visible = true;
    com.greensock.TweenMax.to(this._bgBackBlack, .2, {
        alpha: 1
    })
}
;
pigg.puzzle.view.GameView.prototype.hideBgBlack = function(tween) {
    var self = this;
    tween = typeof tween !== 'undefined' ? tween : true;
    var __localFn0__ = function() {
        self._bgBackBlack.visible = false
    };
    if (tween)
        com.greensock.TweenMax.to(this._bgBackBlack, .2, {
            alpha: 0,
            onComplete: __localFn0__
        });
    else {
        this._bgBackBlack.alpha = 0;
        this._bgBackBlack.visible = false
    }
}
;
pigg.puzzle.view.GameView.prototype.changeSpecMode = function() {
    if (this._main.isLowSpecMode) {
        this._tilemap.smoothing = false;
        this._throughObjectManager.throughTilemap.smoothing = false
    } else {
        this._tilemap.smoothing = true;
        this._throughObjectManager.throughTilemap.smoothing = true
    }
}
;
pigg.puzzle.view.GameView.prototype.set__acornPieceRatio = function(v) {
    this._acornPieceRatio = v
}
;
pigg.puzzle.view.GameView.prototype.set__acornPieceLimit = function(v) {
    this._acornPieceLimit = v
}
;
pigg.puzzle.view.GameView.prototype.get__map = function() {
    return this._map
}
;
pigg.puzzle.view.GameView.prototype.get__clearMoveTimes = function() {
    return this._clearMoveTimes
}
;
pigg.puzzle.view.GameView.prototype.get__currentThemeType = function() {
    return this._main.currentThemeType
}
;
pigg.puzzle.view.GameView.prototype.set__currentThemeType = function(v) {
    this._main.currentThemeType = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentMissionIndex = function() {
    return this._currentMissionIndex
}
;
pigg.puzzle.view.GameView.prototype.set__currentMissionIndex = function(v) {
    this._currentMissionIndex = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentMoveTimes = function() {
    return this._currentMoveTimes
}
;
pigg.puzzle.view.GameView.prototype.set__currentMoveTimes = function(v) {
    this._currentMoveTimes = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentJellyCount = function() {
    return this._currentJellyCount
}
;
pigg.puzzle.view.GameView.prototype.set__currentJellyCount = function(v) {
    this._currentJellyCount = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentOrderCount = function() {
    return this._currentOrderCount
}
;
pigg.puzzle.view.GameView.prototype.set__currentOrderCount = function(v) {
    this._currentOrderCount = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentGameScore = function() {
    return this._currentGameScore
}
;
pigg.puzzle.view.GameView.prototype.set__currentGameScore = function(v) {
    this._currentGameScore = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentMarshmallowCount = function() {
    return this._currentMarshmallowCount
}
;
pigg.puzzle.view.GameView.prototype.set__currentMarshmallowCount = function(v) {
    this._currentMarshmallowCount = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentFlowerCount = function() {
    return this._currentFlowerCount
}
;
pigg.puzzle.view.GameView.prototype.set__currentFlowerCount = function(v) {
    this._currentFlowerCount = v
}
;
pigg.puzzle.view.GameView.prototype.get__correctPieceArray = function() {
    return this._correctPieceArray
}
;
pigg.puzzle.view.GameView.prototype.set__correctPieceArray = function(v) {
    this._correctPieceArray = v
}
;
pigg.puzzle.view.GameView.prototype.get__isFlush = function() {
    return this._isFlush
}
;
pigg.puzzle.view.GameView.prototype.set__isFlush = function(v) {
    this._isFlush = v
}
;
pigg.puzzle.view.GameView.prototype.get__isAuto = function() {
    return this._isAuto
}
;
pigg.puzzle.view.GameView.prototype.set__isAuto = function(v) {
    this._isAuto = v
}
;
pigg.puzzle.view.GameView.prototype.get__isGameCleared = function() {
    return this._isGameCleared
}
;
pigg.puzzle.view.GameView.prototype.get__typeCount = function() {
    return this._typeCount
}
;
pigg.puzzle.view.GameView.prototype.get__memoryMap = function() {
    return this._memoryMap
}
;
pigg.puzzle.view.GameView.prototype.set__memoryMap = function(v) {
    this._memoryMap = v
}
;
pigg.puzzle.view.GameView.prototype.get__memoryMarshmallowArray = function() {
    return this._memoryMarshmallowArray
}
;
pigg.puzzle.view.GameView.prototype.set__memoryMarshmallowArray = function(v) {
    this._memoryMarshmallowArray = v
}
;
pigg.puzzle.view.GameView.prototype.get__isSendingFailed = function() {
    return this._isSendingFailed
}
;
pigg.puzzle.view.GameView.prototype.set__isSendingFailed = function(v) {
    this._isSendingFailed = v
}
;
pigg.puzzle.view.GameView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.GameView.prototype.get__currentThroughFlower = function() {
    return this._currentThroughFlower
}
;
pigg.puzzle.view.GameView.prototype.set__currentThroughFlower = function(v) {
    this._currentThroughFlower = v
}
;
pigg.puzzle.view.GameView.prototype.get__warpGridCount = function() {
    return this._warpGridCount
}
;
pigg.puzzle.view.GameView.prototype.get__warpOutVec = function() {
    return this._warpOutVec
}
;
pigg.puzzle.view.GameView.prototype.get__warpInVec = function() {
    return this._warpInVec
}
;
pigg.puzzle.view.GameView.prototype.get__existWarpGrid = function() {
    return this._existWarpGrid
}
;
pigg.puzzle.view.GameView.prototype.get__mapSizeMinYArray = function() {
    return this._mapSizeMinYArray
}
;
pigg.puzzle.view.GameView.prototype.get__normalBallTypeArray = function() {
    return this._normalBallTypeArray
}
;
pigg.puzzle.view.GameView.prototype.get__itemContainerAppear = function() {
    return this._itemContainerAppear
}
;
pigg.puzzle.view.GameView.prototype.get__gameMenuItemContainer = function() {
    return this._gameMenuItemContainer
}
;
pigg.puzzle.view.GameView.prototype.get__isGetLimitedQuantity = function() {
    return this._isGetLimitedQuantity
}
;
pigg.puzzle.view.GameView.prototype.get__isGetLimitedTerm = function() {
    return this._isGetLimitedTerm
}
;
pigg.puzzle.view.GameView.prototype.get__progressData = function() {
    return this._progressData
}
;
pigg.puzzle.view.GameView.prototype.get__winningPoint = function() {
    return this._winningPoint
}
;
pigg.puzzle.view.GameView.prototype.get__keepClearBonusScore = function() {
    return this._keepClearBonusScore
}
;
pigg.puzzle.view.GameView.prototype.get__winningPointLimit = function() {
    return this._winningPointLimit
}
;
pigg.puzzle.view.GameView.prototype.set__winningPointLimit = function(v) {
    this._winningPointLimit = v
}
;
pigg.puzzle.view.GameView.prototype.get__isSendingGiveUp = function() {
    return this._isSendingGiveUp
}
;
pigg.puzzle.view.GameView.prototype.set__isSendingGiveUp = function(v) {
    this._isSendingGiveUp = v
}
;
pigg.puzzle.view.GameView.prototype.get__confirmBackBlack = function() {
    return this._confirmBackBlack
}
;
pigg.puzzle.view.GameView.prototype.set__confirmBackBlack = function(v) {
    this._confirmBackBlack = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentThroughMissionPiece = function() {
    return this._currentThroughMissionPiece
}
;
pigg.puzzle.view.GameView.prototype.set__currentThroughMissionPiece = function(v) {
    this._currentThroughMissionPiece = v
}
;
pigg.puzzle.view.GameView.prototype.get__waitDisplayMissionPanel = function() {
    return this._waitDisplayMissionPanel
}
;
pigg.puzzle.view.GameView.prototype.set__waitDisplayMissionPanel = function(v) {
    this._waitDisplayMissionPanel = v
}
;
pigg.puzzle.view.GameView.prototype.get__currentMissionPieceCount = function() {
    return this._currentMissionPieceCount
}
;
pigg.puzzle.view.GameView.prototype.set__currentMissionPieceCount = function(v) {
    this._currentMissionPieceCount = v
}
;
pigg.puzzle.view.GameView.prototype.get__addScoreVec = function() {
    return this._addScoreVec
}
;
pigg.puzzle.view.GameView.prototype.set__addScoreVec = function(v) {
    this._addScoreVec = v
}
;
pigg.puzzle.view.GameView.prototype.get__gameMaterialScale = function() {
    return this._gameMaterialScale
}
;
pigg.puzzle.view.GameView.prototype.set__gameMaterialScale = function(v) {
    this._gameMaterialScale = v
}
;
pigg.puzzle.view.GameView.prototype.get__numberFontManager = function() {
    return this._numberFontManager
}
;
pigg.puzzle.view.GameView.prototype.set__applyMap = function(v) {
    this._applyMap = v
}
;
pigg.puzzle.view.GameView.prototype.set__applyMarshmallowArray = function(v) {
    this._applyMarshmallowArray = v
}
;
pigg.puzzle.view.GameView.prototype.set__pieceCountType = function(v) {
    this._pieceCountType = v
}
;
pigg.puzzle.view.GameView.prototype.get__isShuffle = function() {
    return this._isShuffle
}
;
pigg.puzzle.view.GameView.prototype.set__isShuffle = function(v) {
    this._isShuffle = v
}
;
Object.defineProperties(pigg.puzzle.view.GameView.prototype, {
    acornPieceRatio: {
        set: pigg.puzzle.view.GameView.prototype.set__acornPieceRatio
    },
    acornPieceLimit: {
        set: pigg.puzzle.view.GameView.prototype.set__acornPieceLimit
    },
    map: {
        get: pigg.puzzle.view.GameView.prototype.get__map
    },
    clearMoveTimes: {
        get: pigg.puzzle.view.GameView.prototype.get__clearMoveTimes
    },
    currentThemeType: {
        get: pigg.puzzle.view.GameView.prototype.get__currentThemeType,
        set: pigg.puzzle.view.GameView.prototype.set__currentThemeType
    },
    currentMissionIndex: {
        get: pigg.puzzle.view.GameView.prototype.get__currentMissionIndex,
        set: pigg.puzzle.view.GameView.prototype.set__currentMissionIndex
    },
    currentMoveTimes: {
        get: pigg.puzzle.view.GameView.prototype.get__currentMoveTimes,
        set: pigg.puzzle.view.GameView.prototype.set__currentMoveTimes
    },
    currentJellyCount: {
        get: pigg.puzzle.view.GameView.prototype.get__currentJellyCount,
        set: pigg.puzzle.view.GameView.prototype.set__currentJellyCount
    },
    currentOrderCount: {
        get: pigg.puzzle.view.GameView.prototype.get__currentOrderCount,
        set: pigg.puzzle.view.GameView.prototype.set__currentOrderCount
    },
    currentGameScore: {
        get: pigg.puzzle.view.GameView.prototype.get__currentGameScore,
        set: pigg.puzzle.view.GameView.prototype.set__currentGameScore
    },
    currentMarshmallowCount: {
        get: pigg.puzzle.view.GameView.prototype.get__currentMarshmallowCount,
        set: pigg.puzzle.view.GameView.prototype.set__currentMarshmallowCount
    },
    currentFlowerCount: {
        get: pigg.puzzle.view.GameView.prototype.get__currentFlowerCount,
        set: pigg.puzzle.view.GameView.prototype.set__currentFlowerCount
    },
    correctPieceArray: {
        get: pigg.puzzle.view.GameView.prototype.get__correctPieceArray,
        set: pigg.puzzle.view.GameView.prototype.set__correctPieceArray
    },
    isFlush: {
        get: pigg.puzzle.view.GameView.prototype.get__isFlush,
        set: pigg.puzzle.view.GameView.prototype.set__isFlush
    },
    isAuto: {
        get: pigg.puzzle.view.GameView.prototype.get__isAuto,
        set: pigg.puzzle.view.GameView.prototype.set__isAuto
    },
    isGameCleared: {
        get: pigg.puzzle.view.GameView.prototype.get__isGameCleared
    },
    typeCount: {
        get: pigg.puzzle.view.GameView.prototype.get__typeCount
    },
    memoryMap: {
        get: pigg.puzzle.view.GameView.prototype.get__memoryMap,
        set: pigg.puzzle.view.GameView.prototype.set__memoryMap
    },
    memoryMarshmallowArray: {
        get: pigg.puzzle.view.GameView.prototype.get__memoryMarshmallowArray,
        set: pigg.puzzle.view.GameView.prototype.set__memoryMarshmallowArray
    },
    isSendingFailed: {
        get: pigg.puzzle.view.GameView.prototype.get__isSendingFailed,
        set: pigg.puzzle.view.GameView.prototype.set__isSendingFailed
    },
    isShow: {
        get: pigg.puzzle.view.GameView.prototype.get__isShow
    },
    currentThroughFlower: {
        get: pigg.puzzle.view.GameView.prototype.get__currentThroughFlower,
        set: pigg.puzzle.view.GameView.prototype.set__currentThroughFlower
    },
    warpGridCount: {
        get: pigg.puzzle.view.GameView.prototype.get__warpGridCount
    },
    warpOutVec: {
        get: pigg.puzzle.view.GameView.prototype.get__warpOutVec
    },
    warpInVec: {
        get: pigg.puzzle.view.GameView.prototype.get__warpInVec
    },
    existWarpGrid: {
        get: pigg.puzzle.view.GameView.prototype.get__existWarpGrid
    },
    mapSizeMinYArray: {
        get: pigg.puzzle.view.GameView.prototype.get__mapSizeMinYArray
    },
    normalBallTypeArray: {
        get: pigg.puzzle.view.GameView.prototype.get__normalBallTypeArray
    },
    itemContainerAppear: {
        get: pigg.puzzle.view.GameView.prototype.get__itemContainerAppear
    },
    gameMenuItemContainer: {
        get: pigg.puzzle.view.GameView.prototype.get__gameMenuItemContainer
    },
    isGetLimitedQuantity: {
        get: pigg.puzzle.view.GameView.prototype.get__isGetLimitedQuantity
    },
    isGetLimitedTerm: {
        get: pigg.puzzle.view.GameView.prototype.get__isGetLimitedTerm
    },
    progressData: {
        get: pigg.puzzle.view.GameView.prototype.get__progressData
    },
    winningPoint: {
        get: pigg.puzzle.view.GameView.prototype.get__winningPoint
    },
    keepClearBonusScore: {
        get: pigg.puzzle.view.GameView.prototype.get__keepClearBonusScore
    },
    winningPointLimit: {
        get: pigg.puzzle.view.GameView.prototype.get__winningPointLimit,
        set: pigg.puzzle.view.GameView.prototype.set__winningPointLimit
    },
    isSendingGiveUp: {
        get: pigg.puzzle.view.GameView.prototype.get__isSendingGiveUp,
        set: pigg.puzzle.view.GameView.prototype.set__isSendingGiveUp
    },
    confirmBackBlack: {
        get: pigg.puzzle.view.GameView.prototype.get__confirmBackBlack,
        set: pigg.puzzle.view.GameView.prototype.set__confirmBackBlack
    },
    currentThroughMissionPiece: {
        get: pigg.puzzle.view.GameView.prototype.get__currentThroughMissionPiece,
        set: pigg.puzzle.view.GameView.prototype.set__currentThroughMissionPiece
    },
    waitDisplayMissionPanel: {
        get: pigg.puzzle.view.GameView.prototype.get__waitDisplayMissionPanel,
        set: pigg.puzzle.view.GameView.prototype.set__waitDisplayMissionPanel
    },
    currentMissionPieceCount: {
        get: pigg.puzzle.view.GameView.prototype.get__currentMissionPieceCount,
        set: pigg.puzzle.view.GameView.prototype.set__currentMissionPieceCount
    },
    addScoreVec: {
        get: pigg.puzzle.view.GameView.prototype.get__addScoreVec,
        set: pigg.puzzle.view.GameView.prototype.set__addScoreVec
    },
    gameMaterialScale: {
        get: pigg.puzzle.view.GameView.prototype.get__gameMaterialScale,
        set: pigg.puzzle.view.GameView.prototype.set__gameMaterialScale
    },
    numberFontManager: {
        get: pigg.puzzle.view.GameView.prototype.get__numberFontManager
    },
    applyMap: {
        set: pigg.puzzle.view.GameView.prototype.set__applyMap
    },
    applyMarshmallowArray: {
        set: pigg.puzzle.view.GameView.prototype.set__applyMarshmallowArray
    },
    pieceCountType: {
        set: pigg.puzzle.view.GameView.prototype.set__pieceCountType
    },
    isShuffle: {
        get: pigg.puzzle.view.GameView.prototype.get__isShuffle,
        set: pigg.puzzle.view.GameView.prototype.set__isShuffle
    }
});
pigg.puzzle.view.GameView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'GameView',
        qName: 'pigg.puzzle.view.GameView',
        kind: 'class'
    }]
};
pigg.puzzle.view.GameView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'acornPieceRatio': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'acornPieceLimit': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'map': {
                    type: 'Vector.\x3cVector.\x3cpigg.puzzle.data.MapInfo\x3e\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'clearMoveTimes': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentThemeType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentMissionIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentMoveTimes': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentJellyCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentOrderCount': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentGameScore': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentMarshmallowCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentFlowerCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'correctPieceArray': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isFlush': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isAuto': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isGameCleared': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'typeCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'memoryMap': {
                    type: 'Vector.\x3cVector.\x3cpigg.puzzle.data.MapInfo\x3e\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'memoryMarshmallowArray': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isSendingFailed': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isShow': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentThroughFlower': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'warpGridCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'warpOutVec': {
                    type: 'Vector.\x3cpigg.puzzle.data.MapInfo\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'warpInVec': {
                    type: 'Vector.\x3cpigg.puzzle.data.MapInfo\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'existWarpGrid': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'mapSizeMinYArray': {
                    type: 'Array',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'normalBallTypeArray': {
                    type: 'Array',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'itemContainerAppear': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'gameMenuItemContainer': {
                    type: 'openfl.display.MovieClip',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isGetLimitedQuantity': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isGetLimitedTerm': {
                    type: 'Boolean',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'progressData': {
                    type: 'pigg.data.puzzle.PuzzleProgressData',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'winningPoint': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'keepClearBonusScore': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'winningPointLimit': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isSendingGiveUp': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'confirmBackBlack': {
                    type: 'openfl.display.Sprite',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentThroughMissionPiece': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'waitDisplayMissionPanel': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'currentMissionPieceCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'addScoreVec': {
                    type: 'Vector.\x3cTileBase\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'gameMaterialScale': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'numberFontManager': {
                    type: 'pigg.puzzle.manager.NumberFontManager',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'applyMap': {
                    type: 'Vector.\x3cVector.\x3cpigg.puzzle.data.MapInfo\x3e\x3e',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'applyMarshmallowArray': {
                    type: 'Array',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'pieceCountType': {
                    type: 'int',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'isShuffle': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.GameView'
                }
            }
        },
        methods: function() {
            return {
                'GameView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.view.MappingView',
                            optional: false
                        }]
                    }
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'initPotionStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'stackTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'pauseTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'killTweenObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateCheatItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateSelectPotion': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'onUseScoreItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'removeThroughSelectPotion': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'setGameTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'setLoadStatus': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'setObject': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'forceResetGame': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'startShuffle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'applyMemoryObj': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'hideGameView': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'showGameTelop': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'telopEnd': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'telopAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'onGiveUp': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateKeepClearCount': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'onContinue': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.data.puzzle.PuzzleContinueData',
                            optional: false
                        }]
                    }
                },
                'removeThroughMoveTimes': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'removeConfirmBackWhite': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'showGameClear': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'gameMenuSettingConfirmGiveUp': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'checkTutorialAssistLimitter': {
                    type: 'Boolean',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'fromMainview': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'onCompleteCheatItemAction': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'checkMatchAll': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'removeThroughBonusScore': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'onUseCheatItem': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'sendProgressData': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'onProgress': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'onGetContinueInfo': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: true
                        }]
                    }
                },
                'removeEffect': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.MovieClip',
                            optional: false
                        }]
                    }
                },
                'addScoreTxt': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'removeAddScoreTxt': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'TileBase',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'checkAddOrderObject': {
                    type: 'int',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'checkAddAcornObject': {
                    type: 'int',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'checkAddMissionPiece': {
                    type: 'int',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateDispThemeCount': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Tile',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'allBallsDisplay': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'allBallsStyle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'hideRoulette': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateEventBtn': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'onLoadSheetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'updateHeaderScoreType': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'testSwitchMission': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'removeThemeTile': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'updateTelopAnimal': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'showConfirmRetire': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'showTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'showBgBlack': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                },
                'hideBgBlack': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'changeSpecMode': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.GameView'
                }
            }
        }
    }
}
;
pigg.puzzle.view.MappingView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._mappingBtns = [];
    this._mappingJellyBtns = [];
    this._mappingMarshmallowBtns = [];
    this._mappingWarpBtns = [];
    this._mappingMarshmallowArray = [];
    this._mappingOrderArray = [[0, 0], [0, 0]];
    this._mappingTotalOrderCount = [0, 0];
    this._mappingCurrentOrderCount = [0, 0];
    this._mappingAppearOrderCount = [0, 0];
    this._mappingAfterOrderCount = [0, 0];
    this._mappingPreOrderCount = [0, 0];
    this._mappingCorrectPieceArray = [[1, 0, 0], [2, 0, 0], [3, 0, 0]]
}
;
goog.inherits(pigg.puzzle.view.MappingView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.MappingView', pigg.puzzle.view.MappingView);
pigg.puzzle.view.MappingView.prototype._gameView;
pigg.puzzle.view.MappingView.prototype._mappingContainer;
pigg.puzzle.view.MappingView.prototype._mappingMap;
pigg.puzzle.view.MappingView.prototype._isMapObjMouseOver;
pigg.puzzle.view.MappingView.prototype._mappingBtns;
pigg.puzzle.view.MappingView.prototype._mappingJellyBtns;
pigg.puzzle.view.MappingView.prototype._mappingMarshmallowBtns;
pigg.puzzle.view.MappingView.prototype._mappingWarpBtns;
pigg.puzzle.view.MappingView.prototype._currentMappingBtn = 1;
pigg.puzzle.view.MappingView.prototype._currentMappingPiece = 0;
pigg.puzzle.view.MappingView.prototype._currentMappingJellyBtn = -1;
pigg.puzzle.view.MappingView.prototype._currentMappingMarshmallowBtn = -1;
pigg.puzzle.view.MappingView.prototype._currentMappingWarpBtn = -1;
pigg.puzzle.view.MappingView.prototype._currentMappingOrderNum = 0;
pigg.puzzle.view.MappingView.prototype._mappingMarshmallowArray;
pigg.puzzle.view.MappingView.prototype._currentMappingWarpIndex = 0;
pigg.puzzle.view.MappingView.prototype._currentMappingThemeType = -1;
pigg.puzzle.view.MappingView.prototype._mappingOrderArray;
pigg.puzzle.view.MappingView.prototype._mappingTotalOrderCount;
pigg.puzzle.view.MappingView.prototype._mappingCurrentOrderCount;
pigg.puzzle.view.MappingView.prototype._mappingAppearOrderCount;
pigg.puzzle.view.MappingView.prototype._mappingAfterOrderCount;
pigg.puzzle.view.MappingView.prototype._mappingPreOrderCount;
pigg.puzzle.view.MappingView.prototype._mappingTotalMarshmallowCount = 0;
pigg.puzzle.view.MappingView.prototype._mappingCurrentMarshmallowCount = 0;
pigg.puzzle.view.MappingView.prototype._mappingCorrectPieceArray;
pigg.puzzle.view.MappingView.prototype._mappingClearMoveTimes = 0;
pigg.puzzle.view.MappingView.prototype._mappingPieceCountType = 6;
pigg.puzzle.view.MappingView.prototype._main;
pigg.puzzle.view.MappingView.prototype._mappingAcornPieceRatio;
pigg.puzzle.view.MappingView.prototype._mappingAcornPieceLimit;
pigg.puzzle.view.MappingView.prototype._mappingFlowerCount = 0;
pigg.puzzle.view.MappingView.prototype._mappingGoalScore = 0;
pigg.puzzle.view.MappingView.prototype.clean = function() {
    this._main = null;
    this._gameView = null;
    this._mappingContainer = null;
    this._mappingMap = null;
    this._mappingBtns = null;
    this._mappingJellyBtns = null;
    this._mappingMarshmallowBtns = null;
    this._mappingMarshmallowArray = null;
    this._mappingOrderArray = null;
    this._mappingTotalOrderCount = null;
    this._mappingCurrentOrderCount = null;
    this._mappingAppearOrderCount = null;
    this._mappingAfterOrderCount = null;
    this._mappingPreOrderCount = null;
    this._mappingCorrectPieceArray = null
}
;
pigg.puzzle.view.MappingView.prototype.init = function(main) {
    this._main = main;
    this.traceLog('MappingView::', this._main.currentEventStep);
    this.initMappingObject()
}
;
pigg.puzzle.view.MappingView.prototype.changeTheme = function(isMapping) {
    isMapping = typeof isMapping !== 'undefined' ? isMapping : false;
    return
}
;
pigg.puzzle.view.MappingView.prototype.initMappingObject = function() {
    this._mappingMap = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    var cnt = 0
      , len = 0
      , cntY = 0
      , lenY = 0
      , cntX = 0
      , lenX = 0;
    var mInfo;
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++) {
        this._mappingMap[cntX] = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y, 'MapInfo');
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            this._mappingMap[cntX][cntY] = new pigg.puzzle.data.MapInfo;
            mInfo = this._mappingMap[cntX][cntY];
            mInfo.mx = cntX;
            mInfo.my = cntY;
            mInfo.mappingType = 1;
            this.traceLog('mappingMap\u751f\u6210::', mInfo.mx, mInfo.my)
        }
    }
    this._mappingMarshmallowArray = [];
    this._mappingAcornPieceRatio = org.apache.royale.utils.Language.Vector(4, 'int');
    this._mappingAcornPieceLimit = org.apache.royale.utils.Language.Vector(4, 'int')
}
;
pigg.puzzle.view.MappingView.prototype.mapObjMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.mapObjRO = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.mapBtnMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.mapJellyBtnMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.mapMarshmallowBtnMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.mapWarpBtnMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.themeChangeMD = function(e) {
    if (e)
        if (e.currentTarget == this._mappingContainer.themeTypeBtn.typeBtn1)
            this._currentMappingThemeType = 0;
        else if (e.currentTarget == this._mappingContainer.themeTypeBtn.typeBtn2)
            this._currentMappingThemeType = 1;
        else if (e.currentTarget == this._mappingContainer.themeTypeBtn.typeBtn3)
            this._currentMappingThemeType = 2;
        else if (e.currentTarget == this._mappingContainer.themeTypeBtn.typeBtn4)
            this._currentMappingThemeType = 3;
        else if (e.currentTarget == this._mappingContainer.themeTypeBtn.typeBtn5)
            this._currentMappingThemeType = 4;
    this.changeTheme(true)
}
;
pigg.puzzle.view.MappingView.prototype.pieceCountTypeMD = function(e) {
    if (e.currentTarget == this._mappingContainer.pieceCountTypeBtn.typeBtn1)
        this._mappingPieceCountType = 6;
    else if (e.currentTarget == this._mappingContainer.pieceCountTypeBtn.typeBtn2)
        this._mappingPieceCountType = 5;
    else if (e.currentTarget == this._mappingContainer.pieceCountTypeBtn.typeBtn3)
        this._mappingPieceCountType = 4;
    else if (e.currentTarget == this._mappingContainer.pieceCountTypeBtn.typeBtn4)
        this._mappingPieceCountType = 3;
    this._mappingContainer.pieceCountTypeBtn.gotoAndStop(1 + (6 - this._mappingPieceCountType))
}
;
pigg.puzzle.view.MappingView.prototype.themeAobjChangeMD = function(e) {
    var btnIndex = 0;
    if (e.currentTarget == this._mappingContainer.themeTypeBtn.themeAg1Btn)
        btnIndex = 0;
    else if (e.currentTarget == this._mappingContainer.themeTypeBtn.themeAg2Btn)
        btnIndex = 1;
    else if (e.currentTarget == this._mappingContainer.themeTypeBtn.themeAg3Btn)
        btnIndex = 2;
    if (this._mappingCorrectPieceArray[btnIndex][0] < this._mappingPieceCountType)
        this._mappingCorrectPieceArray[btnIndex][0]++;
    else
        this._mappingCorrectPieceArray[btnIndex][0] = 1;
    if (btnIndex == 0)
        this._mappingContainer.themeTypeBtn.themeAg1.gotoAndStop(this._mappingCorrectPieceArray[btnIndex][0]);
    else if (btnIndex == 1)
        this._mappingContainer.themeTypeBtn.themeAg2.gotoAndStop(this._mappingCorrectPieceArray[btnIndex][0]);
    else if (btnIndex == 2)
        this._mappingContainer.themeTypeBtn.themeAg3.gotoAndStop(this._mappingCorrectPieceArray[btnIndex][0])
}
;
pigg.puzzle.view.MappingView.prototype.resetMappingObject = function() {}
;
pigg.puzzle.view.MappingView.prototype.setPieceRatio = function() {
    this.traceLog('setPieceRatio\u7d50\u679c::', this._mappingAcornPieceRatio);
    this.traceLog('setPieceLimit\u7d50\u679c::', this._mappingAcornPieceLimit)
}
;
pigg.puzzle.view.MappingView.prototype.importPieceRatio = function() {
    this.traceLog('importPieceRatio _ \u7d50\u679c::', this._mappingAcornPieceRatio);
    this.traceLog('importPieceRatio _ \u7d50\u679c\u5236\u9650::', this._mappingAcornPieceLimit)
}
;
pigg.puzzle.view.MappingView.prototype.initPieceRatio = function() {
    this._mappingAcornPieceRatio = org.apache.royale.utils.Language.Vector(4, 'int');
    this._mappingAcornPieceLimit = org.apache.royale.utils.Language.Vector(4, 'int')
}
;
pigg.puzzle.view.MappingView.prototype.mappingResetMD = function(e) {
    this.resetMappingObject()
}
;
pigg.puzzle.view.MappingView.prototype.mappingImportMD = function(e) {
    var allImpStr = [];
    allImpStr = this._mappingContainer.portTxt.text.split('_');
    this.applyImportTheme(allImpStr)
}
;
pigg.puzzle.view.MappingView.prototype.applyImportTheme = function(allImpStr, isLoad) {
    isLoad = typeof isLoad !== 'undefined' ? isLoad : false;
    var impStr = [];
    var impPieceStr = [];
    var impJellyStr = [];
    var impWiredStr = [];
    var impMarshmallowStr = [];
    var impWarpStr = [];
    var impThemeStr = [];
    var impRatioStr = [];
    impStr = allImpStr[0].split(',');
    impPieceStr = allImpStr[1].split(',');
    this.traceLog('Mapping:::impPieceStr::', impPieceStr);
    impJellyStr = allImpStr[2].split(',');
    impWiredStr = allImpStr[3].split(',');
    impMarshmallowStr = allImpStr[4].split(',');
    if (allImpStr.length == 6)
        impThemeStr = allImpStr[5].split(',');
    else if (allImpStr.length == 7) {
        impWarpStr = allImpStr[5].split(',');
        impThemeStr = allImpStr[6].split(',')
    } else if (allImpStr.length == 8) {
        impWarpStr = allImpStr[5].split(',');
        impRatioStr = allImpStr[6].split(',');
        impThemeStr = allImpStr[7].split(',')
    }
    this._currentMappingThemeType = Number(impThemeStr[0]);
    this._mappingClearMoveTimes = Number(impThemeStr[1]);
    this._mappingPieceCountType = Number(impThemeStr[2]);
    this.traceLog('\u30de\u30c3\u30d4\u30f3\u30b0::applyImportTheme::_mappingClearMoveTimes', this._mappingClearMoveTimes, impThemeStr[3]);
    if (this._currentMappingThemeType == 0) {
        this._mappingCorrectPieceArray[0][0] = impThemeStr[3];
        this._mappingCorrectPieceArray[0][1] = impThemeStr[4];
        this._mappingCorrectPieceArray[0][2] = impThemeStr[5];
        this._mappingCorrectPieceArray[1][0] = impThemeStr[6];
        this._mappingCorrectPieceArray[1][1] = impThemeStr[7];
        this._mappingCorrectPieceArray[1][2] = impThemeStr[8];
        this._mappingCorrectPieceArray[2][0] = impThemeStr[9];
        this._mappingCorrectPieceArray[2][1] = impThemeStr[10];
        this._mappingCorrectPieceArray[2][2] = impThemeStr[11]
    } else if (this._currentMappingThemeType == 2) {
        this._mappingTotalOrderCount[0] = impThemeStr[3];
        this._mappingTotalOrderCount[1] = impThemeStr[4];
        this._mappingPreOrderCount[0] = impThemeStr[5];
        this._mappingPreOrderCount[1] = impThemeStr[6];
        this._mappingAfterOrderCount[0] = impThemeStr[7];
        this._mappingAfterOrderCount[1] = impThemeStr[8]
    } else if (this._currentMappingThemeType == 3)
        this._mappingGoalScore = Number(impThemeStr[3]);
    else if (this._currentMappingThemeType == 5)
        this._mappingFlowerCount = Number(impThemeStr[3]);
    if (this._currentMappingThemeType != -1)
        this.changeTheme(true);
    this.traceLog('\u304a\u984cimp::::aa');
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var cnt = 0;
    var mInfo;
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._mappingMap[cntX][cntY];
            mInfo.mappingType = Number(impStr[cnt]);
            mInfo.mappingPieceType = Number(impPieceStr[cnt]);
            mInfo.hasJelly = Number(impJellyStr[cnt]);
            mInfo.hasWired = Number(impWiredStr[cnt]);
            mInfo.hasMarshmallowType = Number(impMarshmallowStr[cnt]);
            mInfo.isWarpIn = -1;
            mInfo.isWarpOut = -1;
            mInfo.warpIndex = -1;
            if (mInfo.marshmallowObjct)
                mInfo.marshmallowObjct.visible = false;
            if (mInfo.hasJelly > 0)
                ;if (mInfo.hasWired > 0)
                ;if (mInfo.hasMarshmallowType != 0)
                this._mappingMarshmallowArray.push(mInfo);
            if (impWarpStr.length > 0)
                if (impWarpStr[cnt] != -1) {
                    mInfo.warpIndex = Number(impWarpStr[cnt]);
                    if (impWarpStr[cnt] >= 10)
                        mInfo.isWarpOut = impWarpStr[cnt] - 10;
                    else
                        mInfo.isWarpIn = Number(impWarpStr[cnt])
                }
            cnt++
        }
    if (impRatioStr.length > 0) {
        var len = 4;
        for (cnt = 0; cnt < len; cnt++) {
            this._mappingAcornPieceRatio[cnt] = impRatioStr[cnt * 2];
            this._mappingAcornPieceLimit[cnt] = impRatioStr[cnt * 2 + 1]
        }
        this.importPieceRatio()
    } else
        this.initPieceRatio()
}
;
pigg.puzzle.view.MappingView.prototype.mappingExportMD = function(e) {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var expStr = '';
    var expPieceStr = '';
    var expJellyStr = '';
    var expWiredStr = '';
    var expMarshmallowStr = '';
    var expWarpStr = '';
    var expRatioStr = '';
    var expThemeStr = '';
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            if (cntX != 0 || cntY != 0) {
                expStr += ',';
                expPieceStr += ',';
                expJellyStr += ',';
                expWiredStr += ',';
                expMarshmallowStr += ',';
                expWarpStr += ','
            }
            expStr += String(this._mappingMap[cntX][cntY].mappingType);
            expPieceStr += String(this._mappingMap[cntX][cntY].mappingPieceType);
            expJellyStr += String(this._mappingMap[cntX][cntY].hasJelly);
            expWiredStr += String(this._mappingMap[cntX][cntY].hasWired);
            expMarshmallowStr += String(this._mappingMap[cntX][cntY].hasMarshmallowType);
            expWarpStr += String(this._mappingMap[cntX][cntY].warpIndex)
        }
    this._mappingClearMoveTimes = this._gameView.clearMoveTimes;
    this._currentMappingThemeType = this._gameView.currentThemeType;
    expThemeStr = this._currentMappingThemeType + ',' + this._mappingClearMoveTimes + ',' + this._mappingPieceCountType + ',';
    if (this._currentMappingThemeType == 0) {
        this._mappingCorrectPieceArray[0][1] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeAG1Count.text);
        this._mappingCorrectPieceArray[1][1] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeAG2Count.text);
        this._mappingCorrectPieceArray[2][1] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeAG3Count.text);
        expThemeStr += org.apache.royale.utils.Language.string(this._mappingCorrectPieceArray)
    } else if (this._currentMappingThemeType == 2) {
        this._mappingTotalOrderCount[0] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeCG1TotalCount.text);
        this._mappingPreOrderCount[0] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeCG1PreCount.text);
        this._mappingAfterOrderCount[0] = this._mappingTotalOrderCount[0] - this._mappingPreOrderCount[0];
        this._mappingTotalOrderCount[1] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeCG2TotalCount.text);
        this._mappingPreOrderCount[1] = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeCG2PreCount.text);
        this._mappingAfterOrderCount[1] = this._mappingTotalOrderCount[1] - this._mappingPreOrderCount[1];
        expThemeStr += this._mappingTotalOrderCount + ',' + this._mappingPreOrderCount + ',' + this._mappingAfterOrderCount
    } else if (this._currentMappingThemeType == 3) {
        this._mappingGoalScore = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeDScoreCount.text);
        expThemeStr += org.apache.royale.utils.Language.string(this._mappingGoalScore)
    } else if (this._currentMappingThemeType == 5) {
        this._mappingFlowerCount = org.apache.royale.utils.Language._int(this._mappingContainer.themeTypeBtn.themeFAcornCount.text);
        expThemeStr += org.apache.royale.utils.Language.string(this._mappingFlowerCount)
    }
    expRatioStr = this._mappingAcornPieceRatio[0] + ',' + this._mappingAcornPieceLimit[0] + ',' + this._mappingAcornPieceRatio[1] + ',' + this._mappingAcornPieceLimit[1] + ',' + this._mappingAcornPieceRatio[2] + ',' + this._mappingAcornPieceLimit[2] + ',' + this._mappingAcornPieceRatio[3] + ',' + this._mappingAcornPieceLimit[3];
    this.traceLog('\u304a\u984cexp::', expThemeStr);
    this._mappingContainer.portTxt.text = expStr + '_' + expPieceStr + '_' + expJellyStr + '_' + expWiredStr + '_' + expMarshmallowStr + '_' + expWarpStr + '_' + expRatioStr + '_' + expThemeStr
}
;
pigg.puzzle.view.MappingView.prototype.saveGame = function() {
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var expStr = '';
    var expPieceStr = '';
    var expJellyStr = '';
    var expWiredStr = '';
    var expMarshmallowStr = '';
    var expMissionStr = '';
    var expThemeStr = '';
    var expTemporaryStr = '';
    var allStr = '';
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            if (cntX != 0 || cntY != 0) {
                expStr += ',';
                expPieceStr += ',';
                expJellyStr += ',';
                expWiredStr += ',';
                expMarshmallowStr += ',';
                expMissionStr += ','
            }
            expStr += String(this.makeMappingIndex(this._gameView.map[cntX][cntY]));
            expPieceStr += String(this._gameView.map[cntX][cntY].num);
            expJellyStr += String(this._gameView.map[cntX][cntY].hasJelly);
            expWiredStr += String(this._gameView.map[cntX][cntY].hasWired);
            expMarshmallowStr += String(this._gameView.map[cntX][cntY].hasMarshmallowType);
            expMissionStr += String(this._gameView.map[cntX][cntY].hasMission)
        }
    expThemeStr = this._gameView.currentMissionIndex + ',' + this._gameView.currentMoveTimes + ',' + this._gameView.currentGameScore + ',' + this._gameView.currentMissionPieceCount;
    if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_PIECE) {
        expThemeStr += ',' + this._gameView.correctPieceArray[0][2];
        expThemeStr += ',' + this._gameView.correctPieceArray[1][2];
        expThemeStr += ',' + this._gameView.correctPieceArray[2][2]
    } else if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_JELLY)
        expThemeStr += ',' + this._gameView.currentJellyCount;
    else if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_ORDER) {
        this.traceLog('SAVE***', this._gameView.currentOrderCount);
        expThemeStr += ',' + this._gameView.currentOrderCount[0] + ',' + this._gameView.currentOrderCount[1]
    } else if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_SCORE)
        expThemeStr += ',' + this._gameView.currentGameScore;
    else if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_BEAR)
        expThemeStr += ',' + this._gameView.currentMarshmallowCount;
    else if (this._gameView.currentThemeType == pigg.puzzle.view.CommonView.THEME_FLOWER)
        expThemeStr += ',' + this._gameView.currentFlowerCount;
    allStr = expStr + '_' + expPieceStr + '_' + expJellyStr + '_' + expWiredStr + '_' + expMarshmallowStr + '_' + expMissionStr + '_' + expThemeStr;
    this.traceLog('saveGame::expThemeStr::', expThemeStr);
    return allStr
}
;
pigg.puzzle.view.MappingView.prototype.makeMappingIndex = function(mInfo) {
    var index = 0;
    if (mInfo.iceLevel == 1)
        index = 6;
    else if (mInfo.iceLevel == 2)
        index = 7;
    else if (mInfo.crushType == 1)
        index = 2;
    else if (mInfo.crushType == 2)
        index = 3;
    else if (mInfo.crushType == 3)
        index = 4;
    else if (mInfo.crushType == 4)
        index = 5;
    else if (mInfo.isOrder != -1)
        index = 10 + mInfo.isOrder;
    else if (mInfo.isAcorn == 0)
        index = 12;
    else if (mInfo.isAcorn == 1)
        index = 13;
    else if (mInfo.isAcorn == 2)
        index = 14;
    else if (mInfo.isAcorn == 3)
        index = 15;
    else if (mInfo.num != -1)
        index = 1;
    else
        index = 99;
    return index
}
;
pigg.puzzle.view.MappingView.prototype.loadGame = function(dataStr) {
    this.traceLog('loadGame::');
    var allLoadStr = [];
    allLoadStr = dataStr.split('_');
    var loadStr = [];
    var loadPieceStr = [];
    var loadJellyStr = [];
    var loadWiredStr = [];
    var loadMarshmallowStr = [];
    var loadMissionStr = [];
    var loadWarpStr = [];
    var loadThemeStr = [];
    var existMissionArr = false;
    loadStr = allLoadStr[0].split(',');
    loadPieceStr = allLoadStr[1].split(',');
    loadJellyStr = allLoadStr[2].split(',');
    loadWiredStr = allLoadStr[3].split(',');
    loadMarshmallowStr = allLoadStr[4].split(',');
    if (allLoadStr.length == 6) {
        loadThemeStr = allLoadStr[5].split(',');
        this.traceLog('mission\u914d\u5217\u306a\u3057')
    } else if (allLoadStr.length == 7) {
        loadMissionStr = allLoadStr[5].split(',');
        loadThemeStr = allLoadStr[6].split(',');
        existMissionArr = true;
        this.traceLog('mission\u914d\u5217\u3042\u308a')
    }
    this._gameView.memoryMarshmallowArray = [];
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0;
    var cnt = 0;
    var mInfo;
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._gameView.memoryMap[cntX][cntY];
            mInfo.mx = cntX;
            mInfo.my = cntY;
            mInfo.mappingType = Number(loadStr[cnt]);
            mInfo.mappingPieceType = Number(loadPieceStr[cnt]);
            mInfo.hasJelly = Number(loadJellyStr[cnt]);
            mInfo.hasWired = Number(loadWiredStr[cnt]);
            mInfo.hasMarshmallowType = Number(loadMarshmallowStr[cnt]);
            if (existMissionArr)
                mInfo.hasMission = Number(loadMissionStr[cnt]);
            if (mInfo.hasMarshmallowType != 0)
                this._gameView.memoryMarshmallowArray.push(mInfo);
            cnt++
        }
    this.traceLog('allLoadStr::', allLoadStr);
    this.traceLog('loadPieceStr', loadPieceStr);
    this.traceLog('loadJellyStr', loadJellyStr);
    this.traceLog('loadWiredStr', loadWiredStr);
    this.traceLog('loadMarshmallowStr', loadMarshmallowStr);
    this.traceLog('loadMissionStr', loadMissionStr);
    this.traceLog('loadThemeStr', loadThemeStr);
    this.traceLog('\u304a\u984cNo.::', loadThemeStr[0]);
    this.traceLog('\u306e\u3053\u308a\u624b\u6570.::', loadThemeStr[1]);
    this.traceLog('\u73fe\u72b6\u30b9\u30b3\u30a2.::', loadThemeStr[2]);
    if (this._main.existMission)
        this.traceLog('\u73fe\u72b6\u30df\u30c3\u30b7\u30e7\u30f3\u30dd\u30a4\u30f3\u30c8.::', loadThemeStr[3]);
    this._gameView.setObject(true, true, true);
    this._gameView.currentMoveTimes = Number(loadThemeStr[1]);
    this._gameView.currentGameScore = Number(loadThemeStr[2]);
    if (this._main.existMission)
        this._gameView.currentMissionPieceCount = Number(loadThemeStr[3]);
    this._gameView.applyMemoryObj();
    this._gameView.setLoadStatus(loadThemeStr, existMissionArr)
}
;
pigg.puzzle.view.MappingView.prototype.saveGameMD = function(e) {
    this.saveGame()
}
;
pigg.puzzle.view.MappingView.prototype.loadGameMD = function(e) {}
;
pigg.puzzle.view.MappingView.prototype.get__mappingContainer = function() {
    return this._mappingContainer
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingJellyBtns = function() {
    return this._mappingJellyBtns
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingMarshmallowBtns = function() {
    return this._mappingMarshmallowBtns
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingMap = function() {
    return this._mappingMap
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingWarpBtns = function() {
    return this._mappingWarpBtns
}
;
pigg.puzzle.view.MappingView.prototype.set__isMapObjMouseOver = function(v) {
    this._isMapObjMouseOver = v
}
;
pigg.puzzle.view.MappingView.prototype.set__gameView = function(v) {
    this._gameView = v
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingFlowerCount = function() {
    return this._mappingFlowerCount
}
;
pigg.puzzle.view.MappingView.prototype.set__mappingFlowerCount = function(value) {
    this._mappingFlowerCount = value
}
;
pigg.puzzle.view.MappingView.prototype.get__mappingGoalScore = function() {
    return this._mappingGoalScore
}
;
pigg.puzzle.view.MappingView.prototype.set__mappingGoalScore = function(value) {
    this._mappingGoalScore = value
}
;
Object.defineProperties(pigg.puzzle.view.MappingView.prototype, {
    mappingContainer: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingContainer
    },
    mappingJellyBtns: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingJellyBtns
    },
    mappingMarshmallowBtns: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingMarshmallowBtns
    },
    mappingMap: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingMap
    },
    mappingWarpBtns: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingWarpBtns
    },
    isMapObjMouseOver: {
        set: pigg.puzzle.view.MappingView.prototype.set__isMapObjMouseOver
    },
    gameView: {
        set: pigg.puzzle.view.MappingView.prototype.set__gameView
    },
    mappingFlowerCount: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingFlowerCount,
        set: pigg.puzzle.view.MappingView.prototype.set__mappingFlowerCount
    },
    mappingGoalScore: {
        get: pigg.puzzle.view.MappingView.prototype.get__mappingGoalScore,
        set: pigg.puzzle.view.MappingView.prototype.set__mappingGoalScore
    }
});
pigg.puzzle.view.MappingView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MappingView',
        qName: 'pigg.puzzle.view.MappingView',
        kind: 'class'
    }]
};
pigg.puzzle.view.MappingView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'mappingContainer': {
                    type: 'openfl.display.MovieClip',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingJellyBtns': {
                    type: 'Array',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingMarshmallowBtns': {
                    type: 'Array',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingMap': {
                    type: 'Vector.\x3cVector.\x3cpigg.puzzle.data.MapInfo\x3e\x3e',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingWarpBtns': {
                    type: 'Array',
                    access: 'readonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'isMapObjMouseOver': {
                    type: 'Boolean',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'gameView': {
                    type: 'pigg.puzzle.view.GameView',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingFlowerCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'mappingGoalScore': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                }
            }
        },
        methods: function() {
            return {
                'MappingView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MappingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'changeTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MappingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'applyImportTheme': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MappingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'saveGame': {
                    type: 'String',
                    declaredBy: 'pigg.puzzle.view.MappingView'
                },
                'loadGame': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.MappingView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.BoneData = function(index, name, parent) {
    this.transformMode = spine.TransformMode.normal;
    if (index < 0)
        throw new openfl.errors.ArgumentError('index must be \x3e\x3d 0');
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._index = index;
    this._name = name;
    this._parent = parent
}
;
goog.exportSymbol('spine.BoneData', spine.BoneData);
spine.BoneData.prototype._index = 0;
spine.BoneData.prototype._name;
spine.BoneData.prototype._parent;
spine.BoneData.prototype.length;
spine.BoneData.prototype.x;
spine.BoneData.prototype.y;
spine.BoneData.prototype.rotation;
spine.BoneData.prototype.scaleX = 1;
spine.BoneData.prototype.scaleY = 1;
spine.BoneData.prototype.shearX;
spine.BoneData.prototype.shearY;
spine.BoneData.prototype.transformMode;
spine.BoneData.prototype.toString = function() {
    return this._name
}
;
spine.BoneData.prototype.get__index = function() {
    return this._index
}
;
spine.BoneData.prototype.get__name = function() {
    return this._name
}
;
spine.BoneData.prototype.get__parent = function() {
    return this._parent
}
;
Object.defineProperties(spine.BoneData.prototype, {
    index: {
        get: spine.BoneData.prototype.get__index
    },
    name: {
        get: spine.BoneData.prototype.get__name
    },
    parent: {
        get: spine.BoneData.prototype.get__parent
    }
});
spine.BoneData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'BoneData',
        qName: 'spine.BoneData',
        kind: 'class'
    }]
};
spine.BoneData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'length': {
                    type: 'Number'
                },
                'x': {
                    type: 'Number'
                },
                'y': {
                    type: 'Number'
                },
                'rotation': {
                    type: 'Number'
                },
                'scaleX': {
                    type: 'Number'
                },
                'scaleY': {
                    type: 'Number'
                },
                'shearX': {
                    type: 'Number'
                },
                'shearY': {
                    type: 'Number'
                },
                'transformMode': {
                    type: 'spine.TransformMode'
                }
            }
        },
        accessors: function() {
            return {
                'index': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.BoneData'
                },
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.BoneData'
                },
                'parent': {
                    type: 'spine.BoneData',
                    access: 'readonly',
                    declaredBy: 'spine.BoneData'
                }
            }
        },
        methods: function() {
            return {
                'BoneData': {
                    type: '',
                    declaredBy: 'spine.BoneData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'spine.BoneData',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.BoneData'
                }
            }
        }
    }
}
;
spine.animation.RotateTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * 2, 'Number')
}
;
goog.inherits(spine.animation.RotateTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.RotateTimeline', spine.animation.RotateTimeline);
spine.animation.RotateTimeline.ENTRIES = 2;
spine.animation.RotateTimeline.PREV_TIME = -2;
spine.animation.RotateTimeline.PREV_ROTATION = -1;
spine.animation.RotateTimeline.ROTATION = 1;
spine.animation.RotateTimeline.prototype.boneIndex = 0;
spine.animation.RotateTimeline.prototype.frames;
spine.animation.RotateTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.rotate.ordinal << 24) + this.boneIndex
}
;
spine.animation.RotateTimeline.prototype.setFrame = function(frameIndex, time, degrees) {
    frameIndex <<= 1;
    this.frames[frameIndex] = time;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.RotateTimeline.ROTATION)] = degrees
}
;
spine.animation.RotateTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var bone = skeleton.bones[this.boneIndex];
    var r;
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            bone.rotation = bone.data.rotation;
            return;
        case spine.animation.MixPose.current:
            r = bone.data.rotation - bone.rotation;
            r -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r / 360)) * 360;
            bone.rotation += r * alpha
        }
        return
    }
    if (time >= frames[frames.length - spine.animation.RotateTimeline.ENTRIES]) {
        if (pose == spine.animation.MixPose.setup)
            bone.rotation = bone.data.rotation + frames[frames.length + spine.animation.RotateTimeline.PREV_ROTATION] * alpha;
        else {
            r = bone.data.rotation + frames[frames.length + spine.animation.RotateTimeline.PREV_ROTATION] - bone.rotation;
            r -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r / 360)) * 360;
            bone.rotation += r * alpha
        }
        return
    }
    var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.RotateTimeline.ENTRIES);
    var prevRotation = Number(frames[frame + spine.animation.RotateTimeline.PREV_ROTATION]);
    var frameTime = Number(frames[frame]);
    var percent = this.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.RotateTimeline.PREV_TIME] - frameTime));
    r = frames[frame + spine.animation.RotateTimeline.ROTATION] - prevRotation;
    r -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r / 360)) * 360;
    r = prevRotation + r * percent;
    if (pose == spine.animation.MixPose.setup) {
        r -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r / 360)) * 360;
        bone.rotation = bone.data.rotation + r * alpha
    } else {
        r = bone.data.rotation + r - bone.rotation;
        r -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r / 360)) * 360;
        bone.rotation += r * alpha
    }
}
;
spine.animation.RotateTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'RotateTimeline',
        qName: 'spine.animation.RotateTimeline',
        kind: 'class'
    }]
};
spine.animation.RotateTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'boneIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'RotateTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.RotateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.RotateTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.RotateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.RotateTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.AttachmentTimeline = function(frameCount) {
    this.frames = org.apache.royale.utils.Language.Vector(frameCount, 'Number');
    this.attachmentNames = org.apache.royale.utils.Language.Vector(frameCount, 'String')
}
;
goog.exportSymbol('spine.animation.AttachmentTimeline', spine.animation.AttachmentTimeline);
spine.animation.AttachmentTimeline.prototype.slotIndex = 0;
spine.animation.AttachmentTimeline.prototype.frames;
spine.animation.AttachmentTimeline.prototype.attachmentNames;
spine.animation.AttachmentTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.attachment.ordinal << 24) + this.slotIndex
}
;
spine.animation.AttachmentTimeline.prototype.setFrame = function(frameIndex, time, attachmentName) {
    this.frames[frameIndex] = time;
    this.attachmentNames[frameIndex] = attachmentName
}
;
spine.animation.AttachmentTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var attachmentName;
    var slot = skeleton.slots[this.slotIndex];
    if (direction == spine.animation.MixDirection.Out && pose == spine.animation.MixPose.setup) {
        attachmentName = slot.data.attachmentName;
        slot.attachment = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex, attachmentName);
        return
    }
    var frames = this.frames;
    if (time < frames[0]) {
        if (pose == spine.animation.MixPose.setup) {
            attachmentName = slot.data.attachmentName;
            slot.attachment = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex, attachmentName)
        }
        return
    }
    var frameIndex = 0;
    if (time >= frames[frames.length - 1])
        frameIndex = frames.length - 1;
    else
        frameIndex = spine.animation.Animation.binarySearch(frames, time, 1) - 1;
    attachmentName = org.apache.royale.utils.Language.string(this.attachmentNames[frameIndex]);
    skeleton.slots[this.slotIndex].attachment = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex, attachmentName)
}
;
spine.animation.AttachmentTimeline.prototype.get__frameCount = function() {
    return this.frames.length
}
;
Object.defineProperties(spine.animation.AttachmentTimeline.prototype, {
    frameCount: {
        get: spine.animation.AttachmentTimeline.prototype.get__frameCount
    }
});
spine.animation.AttachmentTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AttachmentTimeline',
        qName: 'spine.animation.AttachmentTimeline',
        kind: 'class'
    }],
    interfaces: [spine.animation.Timeline]
};
spine.animation.AttachmentTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'slotIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'attachmentNames': {
                    type: 'Vector.\x3cString\x3e'
                }
            }
        },
        accessors: function() {
            return {
                'frameCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.animation.AttachmentTimeline'
                }
            }
        },
        methods: function() {
            return {
                'AttachmentTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.AttachmentTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.AttachmentTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.AttachmentTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.AttachmentTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.AssistManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._map = org.apache.royale.utils.Language.Vector(pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X, 'Vector.\x3cMapInfo\x3e');
    this._asisstMapInfoArray = [];
    this._asisstEffectArray = [];
    this._assistGlowFilter = new openfl.filters.GlowFilter(16776960,1,8,8,4,openfl.filters.BitmapFilterQuality.LOW,false,false)
}
;
goog.inherits(pigg.puzzle.manager.AssistManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.AssistManager', pigg.puzzle.manager.AssistManager);
pigg.puzzle.manager.AssistManager.prototype._assistTimer;
pigg.puzzle.manager.AssistManager.prototype._map;
pigg.puzzle.manager.AssistManager.prototype._asisstMapInfoArray;
pigg.puzzle.manager.AssistManager.prototype._assistTargetMapInfo;
pigg.puzzle.manager.AssistManager.prototype._asisstEffectArray;
pigg.puzzle.manager.AssistManager.prototype._asisstEffectMovePiece;
pigg.puzzle.manager.AssistManager.prototype._shufflePieceCount = 0;
pigg.puzzle.manager.AssistManager.prototype._typeCount = 0;
pigg.puzzle.manager.AssistManager.prototype._main;
pigg.puzzle.manager.AssistManager.prototype._gameView;
pigg.puzzle.manager.AssistManager.prototype._assistMoveTimes = 0;
pigg.puzzle.manager.AssistManager.prototype._shuffleLoopCount = 0;
pigg.puzzle.manager.AssistManager.prototype._brightCT;
pigg.puzzle.manager.AssistManager.prototype._assistGlowFilter;
pigg.puzzle.manager.AssistManager.prototype.clean = function() {
    if (this._assistTimer)
        this._assistTimer.removeEventListener(openfl.events.TimerEvent.TIMER, org.apache.royale.utils.Language.closure(this.assistTimerEvent, this, 'assistTimerEvent'));
    this._assistTimer = null;
    this._map = null;
    this._asisstMapInfoArray = null;
    this._assistTargetMapInfo = null;
    this._asisstEffectArray = null;
    this._asisstEffectMovePiece = null;
    this._gameView = null
}
;
pigg.puzzle.manager.AssistManager.prototype.init = function(main) {
    this._main = main;
    this._assistTimer = new openfl.utils.Timer(8E3,1);
    this._assistTimer.addEventListener(openfl.events.TimerEvent.TIMER, org.apache.royale.utils.Language.closure(this.assistTimerEvent, this, 'assistTimerEvent'));
    var brightLevel = 50;
    this._brightCT = new openfl.geom.ColorTransform;
    this._brightCT.redOffset = brightLevel;
    this._brightCT.greenOffset = brightLevel;
    this._brightCT.blueOffset = brightLevel
}
;
pigg.puzzle.manager.AssistManager.prototype.setAssistTimer = function(isSet, delay) {
    isSet = typeof isSet !== 'undefined' ? isSet : true;
    delay = typeof delay !== 'undefined' ? delay : 0;
    this.traceLog('setAssistTimer::setAssistTimer', isSet, this._assistTimer, this._gameView.isAuto, this._main.isShowGame);
    if (this._assistTimer == null)
        return;
    if (!this._main.isShowGame)
        return;
    this.removeAssistEffect();
    if (isSet) {
        this.traceLog('resultCheckConnect::Timer\u30b9\u30bf\u30fc\u30c8?');
        if (this._gameView.isAuto != 0)
            return;
        if (!this._gameView.checkTutorialAssistLimitter())
            return;
        this.traceLog('resultCheckConnect::Timer\u30b9\u30bf\u30fc\u30c8!');
        this._assistTimer.delay = 6E3 + delay * 1E3;
        this._assistTimer.reset();
        this._assistTimer.start()
    } else {
        this._assistTimer.reset();
        this._assistTimer.stop()
    }
}
;
pigg.puzzle.manager.AssistManager.prototype.resetMoveAssistPiece = function() {
    if (this._asisstEffectMovePiece == null)
        return;
    com.greensock.TweenMax.killTweensOf(this._asisstEffectMovePiece.mc);
    com.greensock.TweenMax.killTweensOf(this._asisstEffectMovePiece);
    this._asisstEffectMovePiece.mc.scaleX = this._asisstEffectMovePiece.mc.scaleY = 1;
    this._asisstEffectMovePiece.mc.rotation = 0;
    this._asisstEffectMovePiece.mc.x = this._asisstEffectMovePiece.mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
    this._asisstEffectMovePiece.mc.y = this._asisstEffectMovePiece.my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
    this._asisstEffectMovePiece.mc.originX = this._asisstEffectMovePiece.mc.originY = 0;
    this._asisstEffectMovePiece.mc.colorTransform = null;
    this._asisstEffectMovePiece = null
}
;
pigg.puzzle.manager.AssistManager.prototype.checkMatchConnect = function(afterShuffle) {
    afterShuffle = typeof afterShuffle !== 'undefined' ? afterShuffle : false;
    if (!afterShuffle)
        this._shuffleLoopCount = 0;
    this._map = this._gameView.map;
    this._asisstMapInfoArray = [];
    var cnt = 0
      , len = 0
      , cntY = 0
      , lenY = 0
      , cntX = 0
      , lenX = 0;
    var cnt2 = 0
      , len2 = 0;
    var mInfo;
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntY = 0; cntY < lenY; cntY++)
        for (cntX = 0; cntX < lenX; cntX++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.num == -1 || mInfo.isFix || mInfo.isOrder != -1 || mInfo.isAcorn != -1)
                continue;
            if (mInfo.num == 6)
                this.searchConnectMatch(cntX, cntY, mInfo.num, 6, mInfo, mInfo);
            else if (mInfo.crushType != 0)
                this.searchConnectMatch(cntX, cntY, mInfo.num, 7, mInfo, mInfo);
            if (cntX == lenX - 1)
                continue;
            else if (mInfo.num == this._map[cntX + 1][cntY].num) {
                this.searchConnectMatch(cntX - 1, cntY, mInfo.num, 0, mInfo, this._map[cntX + 1][cntY]);
                this.searchConnectMatch(cntX + 2, cntY, mInfo.num, 1, mInfo, this._map[cntX + 1][cntY])
            } else if (cntX < lenX - 2 && mInfo.num == this._map[cntX + 2][cntY].num)
                this.searchConnectMatch(cntX + 1, cntY, mInfo.num, 2, mInfo, this._map[cntX + 2][cntY])
        }
    for (cntX = 0; cntX < lenX; cntX++)
        for (cntY = 0; cntY < lenY; cntY++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.num == -1 || mInfo.isFix || mInfo.isOrder != -1 || mInfo.isAcorn != -1)
                continue;
            if (cntY == lenY - 1)
                continue;
            if (mInfo.num == this._map[cntX][cntY + 1].num) {
                this.searchConnectMatch(cntX, cntY - 1, mInfo.num, 3, mInfo, this._map[cntX][cntY + 1]);
                this.searchConnectMatch(cntX, cntY + 2, mInfo.num, 4, mInfo, this._map[cntX][cntY + 1])
            } else if (cntY < lenY - 2 && mInfo.num == this._map[cntX][cntY + 2].num)
                this.searchConnectMatch(cntX, cntY + 1, mInfo.num, 5, mInfo, this._map[cntX][cntY + 2])
        }
    this.resultCheckConnect(afterShuffle)
}
;
pigg.puzzle.manager.AssistManager.prototype.searchConnectMatch = function(cx, cy, targetNum, type, targetInfo, targetInfo2) {
    var mInfo;
    var tInfo;
    if (cx < 0)
        return;
    if (cx > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1)
        return;
    if (cy < 0)
        return;
    if (cy > pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1)
        return;
    mInfo = this._map[cx][cy];
    if (mInfo.hasWired != 0)
        return;
    if (mInfo.isFix)
        return;
    if (mInfo.num == -1)
        return;
    if (type == 6) {
        mInfo = this._map[cx][cy];
        if (cy > 0) {
            tInfo = this._map[cx][cy - 1];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.hasWired == 0 && tInfo.isOrder == -1) {
                mInfo.assistLevel[1] = 5;
                if (this.setAssistLevel(mInfo, 1)) {
                    mInfo.assistFocusMapInfo[1] = [];
                    mInfo.assistFocusMapInfo[1].push(tInfo)
                }
                return
            }
        } else if (cy < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1) {
            tInfo = this._map[cx][cy + 1];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.hasWired == 0 && tInfo.isOrder == -1) {
                mInfo.assistLevel[0] = 5;
                if (this.setAssistLevel(mInfo, 0)) {
                    mInfo.assistFocusMapInfo[0] = [];
                    mInfo.assistFocusMapInfo[0].push(tInfo)
                }
                return
            }
        } else if (cx > 0) {
            tInfo = this._map[cx - 1][cy];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.hasWired == 0 && tInfo.isOrder == -1) {
                mInfo.assistLevel[3] = 5;
                if (this.setAssistLevel(mInfo, 3)) {
                    mInfo.assistFocusMapInfo[3] = [];
                    mInfo.assistFocusMapInfo[3].push(tInfo)
                }
                return
            }
        } else if (cx < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1) {
            tInfo = this._map[cx + 1][cy];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.hasWired == 0 && tInfo.isOrder == -1) {
                mInfo.assistLevel[2] = 5;
                if (this.setAssistLevel(mInfo, 2)) {
                    mInfo.assistFocusMapInfo[2] = [];
                    mInfo.assistFocusMapInfo[2].push(tInfo)
                }
                return
            }
        }
        return
    } else if (type == 7) {
        mInfo = this._map[cx][cy];
        if (cy > 0) {
            tInfo = this._map[cx][cy - 1];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.crushType != 0 && tInfo.hasWired == 0 && tInfo.isOrder == -1 && tInfo.isAcorn == -1) {
                mInfo.assistLevel[1] = 4;
                if (this.setAssistLevel(mInfo, 1)) {
                    mInfo.assistFocusMapInfo[1] = [];
                    mInfo.assistFocusMapInfo[1].push(tInfo)
                }
            }
        }
        if (cy < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1) {
            tInfo = this._map[cx][cy + 1];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.crushType != 0 && tInfo.hasWired == 0 && tInfo.isOrder == -1 && tInfo.isAcorn == -1) {
                mInfo.assistLevel[0] = 4;
                if (this.setAssistLevel(mInfo, 0)) {
                    mInfo.assistFocusMapInfo[0] = [];
                    mInfo.assistFocusMapInfo[0].push(tInfo)
                }
            }
        }
        if (cx > 0) {
            tInfo = this._map[cx - 1][cy];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.crushType != 0 && tInfo.hasWired == 0 && tInfo.isOrder == -1 && tInfo.isAcorn == -1) {
                mInfo.assistLevel[3] = 4;
                if (this.setAssistLevel(mInfo, 3)) {
                    mInfo.assistFocusMapInfo[3] = [];
                    mInfo.assistFocusMapInfo[3].push(tInfo)
                }
            }
        }
        if (cx < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1) {
            tInfo = this._map[cx + 1][cy];
            if (tInfo.num != -1 && !tInfo.isFix && tInfo.crushType != 0 && tInfo.hasWired == 0 && tInfo.isOrder == -1 && tInfo.isAcorn == -1) {
                mInfo.assistLevel[2] = 4;
                if (this.setAssistLevel(mInfo, 2)) {
                    mInfo.assistFocusMapInfo[2] = [];
                    mInfo.assistFocusMapInfo[2].push(tInfo)
                }
            }
        }
        return
    }
    if (type != 4 && type != 5)
        if (cy > 0) {
            mInfo = this._map[cx][cy - 1];
            if (mInfo.num != -1 && !mInfo.isFix && mInfo.hasWired == 0 && mInfo.num == targetNum) {
                mInfo.assistLevel[0]++;
                if (this.setAssistLevel(mInfo, 0))
                    mInfo.assistFocusMapInfo[0].push(targetInfo, targetInfo2)
            }
        }
    if (type != 3 && type != 5)
        if (cy < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y - 1) {
            mInfo = this._map[cx][cy + 1];
            if (mInfo.num != -1 && !mInfo.isFix && mInfo.hasWired == 0 && mInfo.num == targetNum) {
                mInfo.assistLevel[1]++;
                if (this.setAssistLevel(mInfo, 1))
                    mInfo.assistFocusMapInfo[1].push(targetInfo, targetInfo2)
            }
        }
    if (type != 1 && type != 2)
        if (cx > 0) {
            mInfo = this._map[cx - 1][cy];
            if (mInfo.num != -1 && !mInfo.isFix && mInfo.hasWired == 0 && mInfo.num == targetNum) {
                mInfo.assistLevel[2]++;
                if (this.setAssistLevel(mInfo, 2))
                    mInfo.assistFocusMapInfo[2].push(targetInfo, targetInfo2)
            }
        }
    if (type != 0 && type != 2)
        if (cx < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X - 1) {
            mInfo = this._map[cx + 1][cy];
            if (mInfo.num != -1 && !mInfo.isFix && mInfo.hasWired == 0 && mInfo.num == targetNum) {
                mInfo.assistLevel[3]++;
                if (this.setAssistLevel(mInfo, 3))
                    mInfo.assistFocusMapInfo[3].push(targetInfo, targetInfo2)
            }
        }
}
;
pigg.puzzle.manager.AssistManager.prototype.resultCheckConnect = function(afterShuffle) {
    afterShuffle = typeof afterShuffle !== 'undefined' ? afterShuffle : false;
    this._map = this._gameView.map;
    this.removeAssistEffect();
    if (this._asisstMapInfoArray.length == 0) {
        this.shuffleObject();
        return
    }
    if (afterShuffle) {
        if (this._gameView.isShow)
            com.greensock.TweenMax.to(this, .2, {
                onComplete: org.apache.royale.utils.Language.closure(this.startShuffle, this, 'startShuffle')
            });
        else
            this.startShuffle(true);
        return
    }
    var cnt = 0
      , len = 0
      , tar = 0;
    tar = this._asisstMapInfoArray.length - 1;
    len = Number(this._asisstMapInfoArray[tar].length);
    this._assistTargetMapInfo = this._asisstMapInfoArray[tar][org.apache.royale.utils.Language._int(Math.random() * len - 1)];
    this.setAssistTimer()
}
;
pigg.puzzle.manager.AssistManager.prototype.setAssistLevel = function(mInfo, index) {
    var level = Number(mInfo.assistLevel[index]);
    if (level < mInfo.testAssistMax[1])
        return false;
    if (level == mInfo.testAssistMax[1])
        return true;
    mInfo.testAssistMax[0] = index;
    mInfo.testAssistMax[1] = level;
    if (this._asisstMapInfoArray[level] == null)
        this._asisstMapInfoArray[level] = [];
    this._asisstMapInfoArray[level].push(mInfo);
    return true
}
;
pigg.puzzle.manager.AssistManager.prototype.shuffleObject = function() {
    this._shuffleLoopCount++;
    if (this._shuffleLoopCount > 50) {
        this._gameView.forceResetGame(false);
        return
    }
    var mInfo;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt2 = 0
      , len2 = 0;
    var typeArray;
    var type = 0;
    var leftMapInfo, leftMapInfo2;
    var upperMapInfo, upperMapInfo2;
    this._shufflePieceCount = 0;
    this.setAssistTimer(false);
    lenX = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X;
    lenY = pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y;
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._map[cntX][cntY];
            if (mInfo.num == -1 || mInfo.hasWired != 0 || mInfo.crushType != 0 || mInfo.isFix || mInfo.isOrder != -1 || mInfo.isAcorn != -1 || mInfo.hasMission != -1)
                mInfo.shuffleLeave = true
        }
    for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
        for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
            mInfo = this._map[cntX][cntY];
            if (!mInfo.shuffleLeave) {
                typeArray = this.makeTypeArray();
                if (cntX > 1) {
                    leftMapInfo = this._map[cntX - 1][cntY];
                    leftMapInfo2 = this._map[cntX - 2][cntY];
                    if (leftMapInfo.num == leftMapInfo2.num)
                        typeArray.splice(typeArray.indexOf(leftMapInfo.num), 1)
                }
                if (cntY > 1) {
                    upperMapInfo = this._map[cntX][cntY - 1];
                    upperMapInfo2 = this._map[cntX][cntY - 2];
                    if (upperMapInfo.num == upperMapInfo2.num)
                        typeArray.splice(typeArray.indexOf(upperMapInfo.num), 1)
                }
                type = Number(typeArray[org.apache.royale.utils.Language._int(Math.random() * typeArray.length)]);
                mInfo.num = type;
                mInfo.ballType = type
            } else if (mInfo.num != -1)
                mInfo.mc.visible = true
        }
    this.checkMatchConnect(true)
}
;
pigg.puzzle.manager.AssistManager.prototype.startShuffle = function(isSet) {
    isSet = typeof isSet !== 'undefined' ? isSet : false;
    this._map = this._gameView.map;
    var mInfo;
    var cntX = 0
      , lenX = 0
      , cntY = 0
      , lenY = 0
      , cnt2 = 0
      , len2 = 0;
    var typeArray;
    var type = 0;
    var leftMapInfo, leftMapInfo2;
    var upperMapInfo, upperMapInfo2;
    var addDelay = 0;
    if (!isSet) {
        this._gameView.showGameTelop(5);
        this._shufflePieceCount = 0;
        for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
            for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
                mInfo = this._map[cntX][cntY];
                if (mInfo.num == -1 || mInfo.hasWired != 0 || mInfo.crushType != 0 || mInfo.isFix || mInfo.isOrder != -1 || mInfo.isAcorn != -1 || mInfo.hasMission != -1)
                    ;
                else {
                    addDelay = cntX * .04 + cntY * .04;
                    this._shufflePieceCount++;
                    com.greensock.TweenMax.to(mInfo.mc, .5, {
                        delay: addDelay,
                        scaleX: 0,
                        scaleY: 0,
                        ease: com.greensock.easing.Expo.easeOut,
                        onComplete: org.apache.royale.utils.Language.closure(this.appearShuffle, this, 'appearShuffle'),
                        onCompleteParams: [mInfo]
                    })
                }
                mInfo.shuffleLeave = false
            }
    } else {
        this._shufflePieceCount = 0;
        for (cntX = 0; cntX < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_X; cntX++)
            for (cntY = 0; cntY < pigg.puzzle.view.CommonView.GAME_MAP_SIZE_Y; cntY++) {
                mInfo = this._map[cntX][cntY];
                if (!mInfo.shuffleLeave)
                    mInfo.mc.changeBallType(mInfo.num, mInfo.isOrder);
                mInfo.shuffleLeave = false
            }
        this.setAssistTimer(true);
        this._gameView.checkMatchAll()
    }
}
;
pigg.puzzle.manager.AssistManager.prototype.appearShuffle = function(mInfo) {
    var self = this;
    var __localFn0__ = function() {
        self._shufflePieceCount--;
        if (self._shufflePieceCount == 0) {
            self.setAssistTimer(true);
            self._gameView.isShuffle = true;
            self._gameView.showGameTelop(6);
            self._gameView.checkMatchAll()
        }
    };
    com.greensock.TweenMax.to(mInfo.mc, .5, {
        delay: .5,
        ease: com.greensock.easing.Expo.easeOut,
        scaleX: 1,
        scaleY: 1,
        onComplete: __localFn0__
    });
    mInfo.mc.changeBallType(mInfo.num, mInfo.isOrder)
}
;
pigg.puzzle.manager.AssistManager.prototype.makeTypeArray = function() {
    var cnt = 0
      , len = 0;
    var arr = [];
    len = this._typeCount;
    for (cnt = 0; cnt < len; cnt++)
        arr.push(cnt);
    return arr
}
;
pigg.puzzle.manager.AssistManager.prototype.startAssist = function() {
    this._main.startRequestAnimation();
    this.removeAssistEffect();
    if (this._gameView == null)
        return;
    if (this._gameView.isFlush)
        return;
    if (this._gameView.isGameCleared)
        return;
    if (this._assistTargetMapInfo == null)
        return;
    var cnt = 0
      , len = 0
      , tar = 0;
    var assistDir = 0;
    var assistLevel = 0;
    assistDir = Number(this._assistTargetMapInfo.testAssistMax[0]);
    assistLevel = Number(this._assistTargetMapInfo.testAssistMax[1]);
    if (assistDir == -1)
        return;
    this.traceLog('startAssist:::');
    len = Number(this._assistTargetMapInfo.assistFocusMapInfo[assistDir].length);
    for (cnt = 0; cnt < len; cnt++)
        this._asisstEffectArray.push(this._assistTargetMapInfo.assistFocusMapInfo[assistDir][cnt].mc);
    this._asisstEffectArray.push(this._assistTargetMapInfo.mc);
    this._asisstEffectMovePiece = this._assistTargetMapInfo;
    this._assistMoveTimes = 0;
    this.moveAssistPiece(this._assistTargetMapInfo, assistDir)
}
;
pigg.puzzle.manager.AssistManager.prototype.moveAssistPiece = function(mInfo, dir) {
    if (mInfo == null)
        return;
    if (mInfo.mc == null)
        return;
    var dx = 0
      , dy = 0;
    var cnt = 0
      , len = 0;
    var ct;
    mInfo.mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
    mInfo.mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
    dx = mInfo.mc.x;
    dy = mInfo.mc.y;
    if (dir == 0)
        dy += 12;
    else if (dir == 1)
        dy -= 12;
    else if (dir == 2)
        dx += 12;
    else if (dir == 3)
        dx -= 12;
    if (this._assistMoveTimes == 0) {
        ct = new openfl.geom.ColorTransform;
        ct.redMultiplier = 1;
        ct.greenMultiplier = 1;
        ct.blueMultiplier = 1;
        ct.redOffset = 0;
        ct.greenOffset = 0;
        ct.blueOffset = 0
    }
    com.greensock.TweenMax.to(mInfo.mc, .8, {
        x: dx,
        y: dy,
        scaleX: 1.1,
        scaleY: 1.1,
        originX: pigg.puzzle.view.CommonView.BALL_SIZE * .05,
        originY: pigg.puzzle.view.CommonView.BALL_SIZE * .05,
        ease: com.greensock.easing.SlowMo.ease.config(.1, .4, true),
        onComplete: org.apache.royale.utils.Language.closure(this.moveAssistPiece, this, 'moveAssistPiece')
    });
    len = this._asisstEffectArray.length;
    for (cnt = 0; cnt < len; cnt++) {
        if (this._assistMoveTimes == 0)
            this._asisstEffectArray[cnt].colorTransform = ct;
        com.greensock.TweenMax.to(this._asisstEffectArray[cnt].colorTransform, .8, {
            redMultiplier: .7,
            greenMultiplier: .7,
            blueMultiplier: .7,
            redOffset: 255 * .3,
            greenOffset: 255 * .3,
            blueOffset: 255 * .3,
            ease: com.greensock.easing.SlowMo.ease.config(.1, .4, true)
        });
        if (this._asisstEffectArray[cnt] != mInfo.mc)
            com.greensock.TweenMax.to(this._asisstEffectArray[cnt], .8, {
                scaleX: 1.1,
                scaleY: 1.1,
                originX: pigg.puzzle.view.CommonView.BALL_SIZE * .05,
                originY: pigg.puzzle.view.CommonView.BALL_SIZE * .05,
                ease: com.greensock.easing.SlowMo.ease.config(.1, .4, true)
            })
    }
    if (this._assistMoveTimes < 3)
        com.greensock.TweenMax.to(mInfo, 1.2, {
            onComplete: org.apache.royale.utils.Language.closure(this.moveAssistPiece, this, 'moveAssistPiece'),
            onCompleteParams: [mInfo, dir]
        });
    else
        this.removeAssistEffect();
    this._assistMoveTimes++
}
;
pigg.puzzle.manager.AssistManager.prototype.removeAssistEffect = function() {
    this.resetMoveAssistPiece();
    if (this._asisstEffectArray == null)
        return;
    if (this._asisstEffectArray.length == 0)
        return;
    var cnt = 0
      , len = 0;
    len = this._asisstEffectArray.length;
    for (cnt = 0; cnt < len; cnt++) {
        this._asisstEffectArray[cnt].scaleX = this._asisstEffectArray[cnt].scaleY = 1;
        this._asisstEffectArray[cnt].rotation = 0;
        this._asisstEffectArray[cnt].originX = this._asisstEffectArray[cnt].originY = 0;
        this._asisstEffectArray[cnt].colorTransform = null;
        com.greensock.TweenMax.killTweensOf(this._asisstEffectArray[cnt]);
        com.greensock.TweenMax.killTweensOf(this._asisstEffectArray[cnt].colorTransform)
    }
    this._asisstEffectArray = []
}
;
pigg.puzzle.manager.AssistManager.prototype.initAssistStatus = function() {
    this.removeAssistEffect();
    this._asisstEffectArray = [];
    this._assistTargetMapInfo = null;
    this._asisstEffectArray = [];
    this._asisstEffectMovePiece = null
}
;
pigg.puzzle.manager.AssistManager.prototype.assistTimerEvent = function(e) {
    this.startAssist()
}
;
pigg.puzzle.manager.AssistManager.prototype.set__typeCount = function(v) {
    this._typeCount = v
}
;
pigg.puzzle.manager.AssistManager.prototype.set__gameView = function(v) {
    this._gameView = v
}
;
Object.defineProperties(pigg.puzzle.manager.AssistManager.prototype, {
    typeCount: {
        set: pigg.puzzle.manager.AssistManager.prototype.set__typeCount
    },
    gameView: {
        set: pigg.puzzle.manager.AssistManager.prototype.set__gameView
    }
});
pigg.puzzle.manager.AssistManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AssistManager',
        qName: 'pigg.puzzle.manager.AssistManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.AssistManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'typeCount': {
                    type: 'int',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                },
                'gameView': {
                    type: 'pigg.puzzle.view.GameView',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                }
            }
        },
        methods: function() {
            return {
                'AssistManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'setAssistTimer': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'resetMoveAssistPiece': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                },
                'checkMatchConnect': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                },
                'shuffleObject': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager'
                },
                'startShuffle': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.AssistManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.AlertView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('AlertView')
}
;
goog.inherits(pigg.puzzle.view.AlertView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.AlertView', pigg.puzzle.view.AlertView);
pigg.puzzle.view.AlertView.prototype._container;
pigg.puzzle.view.AlertView.prototype._main;
pigg.puzzle.view.AlertView.prototype._back;
pigg.puzzle.view.AlertView.prototype._thisView;
pigg.puzzle.view.AlertView.prototype._itemShortageAlertContainer;
pigg.puzzle.view.AlertView.prototype._itemShortageAlertPanel;
pigg.puzzle.view.AlertView.prototype._itemShortageAlertBackBlack;
pigg.puzzle.view.AlertView.prototype._openShopAlertPanel;
pigg.puzzle.view.AlertView.prototype._openShopAlertContainer;
pigg.puzzle.view.AlertView.prototype._openShopAlertBackBlack;
pigg.puzzle.view.AlertView.prototype._isOpenShop;
pigg.puzzle.view.AlertView.prototype._reloadAlertPanel;
pigg.puzzle.view.AlertView.prototype._reloadAlertContainer;
pigg.puzzle.view.AlertView.prototype._reloadAlertBackBlack;
pigg.puzzle.view.AlertView.prototype._moveUsePageAlertPanel;
pigg.puzzle.view.AlertView.prototype._moveUsePageAlertContainer;
pigg.puzzle.view.AlertView.prototype._moveUsePageAlertBackBlack;
pigg.puzzle.view.AlertView.prototype._moveUserTargetNameTxt;
pigg.puzzle.view.AlertView.prototype._moveUserTargetId;
pigg.puzzle.view.AlertView.prototype._soundAnnounceContainer;
pigg.puzzle.view.AlertView.prototype._soundAnnouncePanel;
pigg.puzzle.view.AlertView.prototype._soundAnnounceBackBlack;
pigg.puzzle.view.AlertView.prototype.clean = function() {}
;
pigg.puzzle.view.AlertView.prototype.init = function(main) {
    this._thisView = this;
    this._main = main;
    this.addChild(this._container = new openfl.display.Sprite)
}
;
pigg.puzzle.view.AlertView.prototype.show = function() {
    this._thisView.visible = true
}
;
pigg.puzzle.view.AlertView.prototype.hide = function() {
    this._thisView.visible = false
}
;
pigg.puzzle.view.AlertView.prototype.initAlertItemShortage = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    var __localFn1__ = function() {
        self._isOpenShop = true;
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_SHOP))
    };
    var __localFn2__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    this._itemShortageAlertContainer = new openfl.display.Sprite;
    this.addChild(this._itemShortageAlertContainer);
    this._itemShortageAlertBackBlack = this.makeBackBlack();
    this._itemShortageAlertContainer.addChild(this._itemShortageAlertBackBlack);
    this._itemShortageAlertPanel = new openfl.display.Sprite;
    this._itemShortageAlertContainer.addChild(this._itemShortageAlertPanel);
    var inner = new openfl.display.Sprite;
    this._itemShortageAlertPanel.addChild(inner);
    inner.x = -(610 / 2);
    inner.y = -(300 / 2);
    this._itemShortageAlertPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._itemShortageAlertPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    var tilemap = this.makeAlertBg(this._main, 342);
    inner.addChild(tilemap);
    var tl;
    var tileset = this._main.gamePanelTileset.clone();
    tilemap = new openfl.display.Tilemap(490,155,tileset);
    inner.addChild(tilemap);
    tilemap.x = 58;
    tilemap.y = 48;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(533,1359,353,64))));
    tl.x = 70;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(533,1424,490,59))));
    tl.y = 85;
    var cancelBtnSpr = new openfl.display.Sprite;
    var cancelBtnBg = this.makeBtnBg(this._main, 4, 256);
    cancelBtnSpr.addChild(cancelBtnBg);
    cancelBtnBg.addTile(tl = new openfl.display.Tile(cancelBtnBg.tileset.addRect(new openfl.geom.Rectangle(478,876,166,28))));
    tl.x = 46;
    tl.y = 22;
    cancelBtnBg.x = -(cancelBtnBg.width / 2);
    cancelBtnBg.y = -(cancelBtnBg.height / 2);
    inner.addChild(cancelBtnSpr);
    cancelBtnSpr.x = 39 + cancelBtnBg.width / 2;
    cancelBtnSpr.y = 220 + cancelBtnBg.height / 2;
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideAlertItemShortage, this, 'hideAlertItemShortage'));
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    var yesBtnSpr = new openfl.display.Sprite;
    var yesBtnBg = this.makeBtnBg(this._main, 3, 256);
    yesBtnSpr.addChild(yesBtnBg);
    yesBtnBg.x = -(yesBtnBg.width / 2);
    yesBtnBg.y = -(yesBtnBg.height / 2);
    yesBtnBg.addTile(tl = new openfl.display.Tile(yesBtnBg.tileset.addRect(new openfl.geom.Rectangle(646,876,139,27))));
    tl.x = 58;
    tl.y = 24;
    inner.addChild(yesBtnSpr);
    yesBtnSpr.x = 315 + yesBtnBg.width / 2;
    yesBtnSpr.y = 220 + yesBtnBg.height / 2;
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideAlertItemShortage, this, 'hideAlertItemShortage'));
    closeBtn.x = 559;
    closeBtn.y = 7;
    inner.addChild(closeBtn)
}
;
pigg.puzzle.view.AlertView.prototype.showAlertItemShortage = function() {
    this.show();
    if (this._itemShortageAlertContainer == null)
        this.initAlertItemShortage();
    this._itemShortageAlertContainer.visible = true;
    this._itemShortageAlertBackBlack.alpha = 0;
    this._itemShortageAlertBackBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideAlertItemShortage, this, 'hideAlertItemShortage'));
    com.greensock.TweenMax.to(this._itemShortageAlertBackBlack, .2, {
        alpha: 1
    });
    this._itemShortageAlertPanel.scaleX = this._itemShortageAlertPanel.scaleY = 1E-4;
    com.greensock.TweenMax.to(this._itemShortageAlertPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.hideAlertItemShortage = function(e) {
    var self = this;
    var __localFn0__ = function() {
        self._itemShortageAlertContainer.visible = false;
        self.hide()
    };
    this._itemShortageAlertBackBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideAlertItemShortage, this, 'hideAlertItemShortage'));
    if (this._isOpenShop) {
        this._isOpenShop = false;
        this.traceLog('\u3072\u3089\u3044\u305f\u5f62\u8de1\u304c\u3042\u308b\u306e\u3067\u66f4\u65b0\u3059\u308b');
        this._main.updateEventData()
    }
    com.greensock.TweenMax.to(this._itemShortageAlertBackBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._itemShortageAlertPanel, .1, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.showOpenShopAlert = function() {
    var self = this;
    var __localFn0__ = function() {
        self._openShopAlertBackBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.hideOpenShopAlert, self, 'hideOpenShopAlert'))
    };
    if (this._openShopAlertPanel == null)
        this.initOpenShopAlert();
    this.show();
    this._openShopAlertBackBlack.visible = true;
    this._openShopAlertBackBlack.alpha = 0;
    com.greensock.TweenMax.to(this._openShopAlertBackBlack, .2, {
        alpha: 1,
        onComplete: __localFn0__
    });
    this._openShopAlertContainer.visible = true;
    this._openShopAlertPanel.scaleX = this._openShopAlertPanel.scaleY = .7;
    com.greensock.TweenMax.to(this._openShopAlertPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.hideOpenShopAlert = function() {
    var self = this;
    var __localFn0__ = function() {
        self._openShopAlertContainer.visible = false;
        self.hide()
    };
    if (this._openShopAlertPanel == null)
        return;
    if (this._isOpenShop) {
        this._isOpenShop = false;
        this.traceLog('\u3072\u3089\u3044\u305f\u5f62\u8de1\u304c\u3042\u308b\u306e\u3067\u66f4\u65b0\u3059\u308b');
        this._main.updateEventData()
    }
    this._openShopAlertBackBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideOpenShopAlert, this, 'hideOpenShopAlert'));
    com.greensock.TweenMax.to(this._openShopAlertBackBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._openShopAlertPanel, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.initOpenShopAlert = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    var __localFn1__ = function() {
        self._isOpenShop = true;
        openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_SHOP))
    };
    var __localFn2__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    this._openShopAlertContainer = new openfl.display.Sprite;
    this.addChild(this._openShopAlertContainer);
    this._openShopAlertBackBlack = this.makeBackBlack();
    this._openShopAlertContainer.addChild(this._openShopAlertBackBlack);
    this._openShopAlertPanel = new openfl.display.Sprite;
    this._openShopAlertContainer.addChild(this._openShopAlertPanel);
    var inner = new openfl.display.Sprite;
    this._openShopAlertPanel.addChild(inner);
    inner.x = -(610 / 2);
    inner.y = -(300 / 2);
    this._openShopAlertPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._openShopAlertPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    var tileset = this._main.menuPartsTileset.clone();
    var tilemap = this.makeAlertBg(this._main, 342);
    var tl;
    inner.addChild(tilemap);
    tilemap = new openfl.display.Tilemap(490,120,tileset);
    inner.addChild(tilemap);
    tilemap.x = 60;
    tilemap.y = 63;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,537,268,29))));
    tl.x = 115;
    tilemap.addTile(tl = new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(1,568,490,59))));
    tl.y = 56;
    var cancelBtnSpr = new openfl.display.Sprite;
    var cancelBtnBg = this.makeBtnBg(this._main, 4, 256);
    cancelBtnSpr.addChild(cancelBtnBg);
    cancelBtnBg.addTile(tl = new openfl.display.Tile(cancelBtnBg.tileset.addRect(new openfl.geom.Rectangle(478,876,166,28))));
    tl.x = 46;
    tl.y = 22;
    cancelBtnBg.x = -(cancelBtnBg.width / 2);
    cancelBtnBg.y = -(cancelBtnBg.height / 2);
    inner.addChild(cancelBtnSpr);
    cancelBtnSpr.x = 39 + cancelBtnBg.width / 2;
    cancelBtnSpr.y = 220 + cancelBtnBg.height / 2;
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideOpenShopAlert, this, 'hideOpenShopAlert'));
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    var yesBtnSpr = new openfl.display.Sprite;
    var yesBtnBg = this.makeBtnBg(this._main, 3, 256);
    yesBtnSpr.addChild(yesBtnBg);
    yesBtnBg.x = -(yesBtnBg.width / 2);
    yesBtnBg.y = -(yesBtnBg.height / 2);
    yesBtnBg.addTile(tl = new openfl.display.Tile(yesBtnBg.tileset.addRect(new openfl.geom.Rectangle(646,876,139,27))));
    tl.x = 58;
    tl.y = 24;
    inner.addChild(yesBtnSpr);
    yesBtnSpr.x = 315 + yesBtnBg.width / 2;
    yesBtnSpr.y = 220 + yesBtnBg.height / 2;
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideOpenShopAlert, this, 'hideOpenShopAlert'));
    closeBtn.x = 559;
    closeBtn.y = 7;
    inner.addChild(closeBtn)
}
;
pigg.puzzle.view.AlertView.prototype.showAlertReload = function(str) {
    if (this._reloadAlertPanel == null)
        this.initAlertReload(str);
    this.show();
    this._reloadAlertBackBlack.visible = true;
    this._reloadAlertBackBlack.alpha = 0;
    com.greensock.TweenMax.to(this._reloadAlertBackBlack, .2, {
        alpha: 1
    });
    this._reloadAlertContainer.visible = true;
    this._reloadAlertPanel.scaleX = this._reloadAlertPanel.scaleY = .7;
    com.greensock.TweenMax.to(this._reloadAlertPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.initAlertReload = function(str) {
    var self = this;
    var __localFn0__ = function() {
        location.reload()
    };
    var __localFn1__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    this._reloadAlertContainer = new openfl.display.Sprite;
    this.addChild(this._reloadAlertContainer);
    this._reloadAlertBackBlack = this.makeBackBlack();
    this._reloadAlertContainer.addChild(this._reloadAlertBackBlack);
    this._reloadAlertPanel = new openfl.display.Sprite;
    this._reloadAlertContainer.addChild(this._reloadAlertPanel);
    var inner = new openfl.display.Sprite;
    this._reloadAlertPanel.addChild(inner);
    inner.x = -(610 / 2);
    inner.y = -(300 / 2);
    this._reloadAlertPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._reloadAlertPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    var tilemap = this.makeAlertBg(this._main, 342);
    var tl;
    inner.addChild(tilemap);
    var tf = this.makeTextField(28, 3355443, openfl.text.TextFormatAlign.CENTER);
    tf.text = '\u30d1\u30ba\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\n\u30ea\u30ed\u30fc\u30c9\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n ' + str + '\n ';
    tf.width = 600;
    tf.x = 5;
    tf.y = 50;
    tf.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    inner.addChild(tf);
    var yesBtnSpr = new openfl.display.Sprite;
    var yesBtnBg = this.makeBtnBg(this._main, 5, 256);
    yesBtnSpr.addChild(yesBtnBg);
    yesBtnBg.x = -(yesBtnBg.width / 2);
    yesBtnBg.y = -(yesBtnBg.height / 2);
    yesBtnBg.addTile(tl = new openfl.display.Tile(yesBtnBg.tileset.addRect(new openfl.geom.Rectangle(697,754,108,27))));
    tl.x = 73;
    tl.y = 24;
    inner.addChild(yesBtnSpr);
    yesBtnSpr.x = 177 + yesBtnBg.width / 2;
    yesBtnSpr.y = 220 + yesBtnBg.height / 2;
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, __localFn0__);
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn1__)
}
;
pigg.puzzle.view.AlertView.prototype.showMoveUserPageAlert = function(nickName, targetId) {
    var self = this;
    var __localFn0__ = function() {
        self._moveUsePageAlertBackBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.hideMoveUserPageAlert, self, 'hideMoveUserPageAlert'))
    };
    this._moveUserTargetId = targetId;
    if (this._moveUsePageAlertPanel == null)
        this.initMoveUserPageAlert();
    this.show();
    this._moveUserTargetNameTxt.text = nickName + '\u3055\u3093\u306e\u304a\u90e8\u5c4b\u306b\u884c\u304d\u307e\u3059\u304b\uff1f\n ';
    this._moveUserTargetNameTxt.y = 50 + (4 - this._moveUserTargetNameTxt.numLines) * 15;
    this._moveUsePageAlertBackBlack.visible = true;
    this._moveUsePageAlertBackBlack.alpha = 0;
    com.greensock.TweenMax.to(this._moveUsePageAlertBackBlack, .2, {
        alpha: 1,
        onComplete: __localFn0__
    });
    this._moveUsePageAlertContainer.visible = true;
    this._moveUsePageAlertPanel.scaleX = this._moveUsePageAlertPanel.scaleY = .7;
    com.greensock.TweenMax.to(this._moveUsePageAlertPanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.hideMoveUserPageAlert = function() {
    var self = this;
    var __localFn0__ = function() {
        self._moveUsePageAlertContainer.visible = false;
        self.hide()
    };
    if (this._moveUsePageAlertPanel == null)
        return;
    this._moveUsePageAlertBackBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideMoveUserPageAlert, this, 'hideMoveUserPageAlert'));
    com.greensock.TweenMax.to(this._moveUsePageAlertBackBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._moveUsePageAlertPanel, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.initMoveUserPageAlert = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    var __localFn1__ = function() {
        openfl.net.navigateToURL(new openfl.net.URLRequest(self.makeMoveUserDomain() + self._moveUserTargetId));
        self.traceLog('makeMoveUserDomain', self.makeMoveUserDomain() + self._moveUserTargetId)
    };
    var __localFn2__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    this._moveUsePageAlertContainer = new openfl.display.Sprite;
    this.addChild(this._moveUsePageAlertContainer);
    this._moveUsePageAlertBackBlack = this.makeBackBlack();
    this._moveUsePageAlertContainer.addChild(this._moveUsePageAlertBackBlack);
    this._moveUsePageAlertPanel = new openfl.display.Sprite;
    this._moveUsePageAlertContainer.addChild(this._moveUsePageAlertPanel);
    var inner = new openfl.display.Sprite;
    this._moveUsePageAlertPanel.addChild(inner);
    inner.x = -(610 / 2);
    inner.y = -(300 / 2);
    this._moveUsePageAlertPanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._moveUsePageAlertPanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    var tilemap = this.makeAlertBg(this._main, 342);
    var tl;
    inner.addChild(tilemap);
    var cancelBtnSpr = new openfl.display.Sprite;
    var cancelBtnBg = this.makeBtnBg(this._main, 4, 256);
    cancelBtnSpr.addChild(cancelBtnBg);
    cancelBtnBg.addTile(tl = new openfl.display.Tile(cancelBtnBg.tileset.addRect(new openfl.geom.Rectangle(478,818,83,27))));
    tl.x = 87;
    tl.y = 23;
    cancelBtnBg.x = -(cancelBtnBg.width / 2);
    cancelBtnBg.y = -(cancelBtnBg.height / 2);
    inner.addChild(cancelBtnSpr);
    cancelBtnSpr.x = 39 + cancelBtnBg.width / 2;
    cancelBtnSpr.y = 220 + cancelBtnBg.height / 2;
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideMoveUserPageAlert, this, 'hideMoveUserPageAlert'));
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    var yesBtnSpr = new openfl.display.Sprite;
    var yesBtnBg = this.makeBtnBg(this._main, 3, 256);
    yesBtnSpr.addChild(yesBtnBg);
    yesBtnBg.x = -(yesBtnBg.width / 2);
    yesBtnBg.y = -(yesBtnBg.height / 2);
    yesBtnBg.addTile(tl = new openfl.display.Tile(yesBtnBg.tileset.addRect(new openfl.geom.Rectangle(573,818,54,26))));
    tl.x = 101;
    tl.y = 23;
    inner.addChild(yesBtnSpr);
    yesBtnSpr.x = 315 + yesBtnBg.width / 2;
    yesBtnSpr.y = 220 + yesBtnBg.height / 2;
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideMoveUserPageAlert, this, 'hideMoveUserPageAlert'));
    closeBtn.x = 559;
    closeBtn.y = 7;
    inner.addChild(closeBtn);
    this._moveUserTargetNameTxt = this.makeTextField(28, 3355443, openfl.text.TextFormatAlign.CENTER);
    this._moveUserTargetNameTxt.text = '';
    this._moveUserTargetNameTxt.width = 530;
    this._moveUserTargetNameTxt.wordWrap = true;
    this._moveUserTargetNameTxt.x = 40;
    this._moveUserTargetNameTxt.y = 50;
    this._moveUserTargetNameTxt.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    inner.addChild(this._moveUserTargetNameTxt)
}
;
pigg.puzzle.view.AlertView.prototype.makeMoveUserDomain = function() {
    var str = window.location.href;
    str = str.slice(0, str.indexOf('pigg.ameba.jp/') + 14);
    var pattern = /puzzle/gi;
    str = str.replace(pattern, 's');
    str += 'user/';
    this.traceLog('makeMoveUserDomain', str);
    return str
}
;
pigg.puzzle.view.AlertView.prototype.initSoundAnnounce = function() {
    var self = this;
    var __localFn0__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    var __localFn1__ = function() {
        self._main.switchSoundOn(true);
        self.hideSoundAnnounce(null)
    };
    var __localFn2__ = function(e) {
        self.btnDownAction(org.apache.royale.utils.Language.as(e.currentTarget, openfl.display.Sprite))
    };
    this._soundAnnounceContainer = new openfl.display.Sprite;
    this.addChild(this._soundAnnounceContainer);
    this._soundAnnounceBackBlack = this.makeBackBlack();
    this._soundAnnounceContainer.addChild(this._soundAnnounceBackBlack);
    this._soundAnnouncePanel = new openfl.display.Sprite;
    this._soundAnnounceContainer.addChild(this._soundAnnouncePanel);
    var inner = new openfl.display.Sprite;
    this._soundAnnouncePanel.addChild(inner);
    inner.x = -(610 / 2);
    inner.y = -(300 / 2);
    this._soundAnnouncePanel.x = pigg.puzzle.view.CommonView.STAGE_WIDTH / 2;
    this._soundAnnouncePanel.y = pigg.puzzle.view.CommonView.STAGE_HEIGHT / 2;
    var tilemap = this.makeAlertBg(this._main, 342);
    inner.addChild(tilemap);
    var tl;
    var tf = this.makeTextField(28, 3355443, openfl.text.TextFormatAlign.CENTER);
    tf.text = 'BGM\u304c\u8074\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u266a\n\u30b5\u30a6\u30f3\u30c9\u8a2d\u5b9a\u3092ON\u306b\u3057\u307e\u3059\u304b\uff1f\n\uff08\u8a2d\u5b9a\u306f\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u5909\u66f4\u3067\u304d\u307e\u3059\uff09\n';
    tf.width = 600;
    tf.x = 5;
    tf.y = 70;
    tf.autoSize = openfl.text.TextFieldAutoSize.CENTER;
    inner.addChild(tf);
    var cancelBtnSpr = new openfl.display.Sprite;
    var cancelBtnBg = this.makeBtnBg(this._main, 4, 256);
    cancelBtnSpr.addChild(cancelBtnBg);
    cancelBtnBg.addTile(tl = new openfl.display.Tile(cancelBtnBg.tileset.addRect(new openfl.geom.Rectangle(736,789,84,28))));
    tl.x = 90;
    tl.y = 23;
    cancelBtnBg.x = -(cancelBtnBg.width / 2);
    cancelBtnBg.y = -(cancelBtnBg.height / 2);
    inner.addChild(cancelBtnSpr);
    cancelBtnSpr.x = 39 + cancelBtnBg.width / 2;
    cancelBtnSpr.y = 220 + cancelBtnBg.height / 2;
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideSoundAnnounce, this, 'hideSoundAnnounce'));
    cancelBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    var yesBtnSpr = new openfl.display.Sprite;
    var yesBtnBg = this.makeBtnBg(this._main, 3, 256);
    yesBtnSpr.addChild(yesBtnBg);
    yesBtnBg.x = -(yesBtnBg.width / 2);
    yesBtnBg.y = -(yesBtnBg.height / 2);
    yesBtnBg.addTile(tl = new openfl.display.Tile(yesBtnBg.tileset.addRect(new openfl.geom.Rectangle(573,818,54,26))));
    tl.x = 101;
    tl.y = 23;
    inner.addChild(yesBtnSpr);
    yesBtnSpr.x = 315 + yesBtnBg.width / 2;
    yesBtnSpr.y = 220 + yesBtnBg.height / 2;
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    yesBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn2__);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hideSoundAnnounce, this, 'hideSoundAnnounce'));
    closeBtn.x = 559;
    closeBtn.y = 7;
    inner.addChild(closeBtn)
}
;
pigg.puzzle.view.AlertView.prototype.showSoundAnnounce = function() {
    this.show();
    if (this._soundAnnounceContainer == null)
        this.initSoundAnnounce();
    this._soundAnnounceContainer.visible = true;
    this._soundAnnounceBackBlack.alpha = 0;
    this._soundAnnounceBackBlack.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideSoundAnnounce, this, 'hideSoundAnnounce'));
    com.greensock.TweenMax.to(this._soundAnnounceBackBlack, .2, {
        alpha: 1
    });
    this._soundAnnouncePanel.scaleX = this._soundAnnouncePanel.scaleY = 1E-4;
    com.greensock.TweenMax.to(this._soundAnnouncePanel, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AlertView.prototype.hideSoundAnnounce = function(e) {
    var self = this;
    var __localFn0__ = function() {
        self.hide()
    };
    this._soundAnnounceBackBlack.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.hideSoundAnnounce, this, 'hideSoundAnnounce'));
    com.greensock.TweenMax.to(this._soundAnnouncePanel, .1, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Elastic.easeOut
    });
    com.greensock.TweenMax.to(this._soundAnnounceBackBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.AlertView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AlertView',
        qName: 'pigg.puzzle.view.AlertView',
        kind: 'class'
    }]
};
pigg.puzzle.view.AlertView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AlertView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'showAlertItemShortage': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'showOpenShopAlert': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'hideOpenShopAlert': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'showAlertReload': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'showMoveUserPageAlert': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'hideMoveUserPageAlert': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                },
                'showSoundAnnounce': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AlertView'
                }
            }
        }
    }
}
;
pigg.puzzle.data = {};
pigg.puzzle.data.MapInfo = function() {
    this._bombLineArray = [];
    this._stackMoveArray = [];
    this._assistLevel = [0, 0, 0, 0];
    this._assistFocusMapInfo = [[], [], [], []];
    this._testAssistMax = [0, 0]
}
;
goog.exportSymbol('pigg.puzzle.data.MapInfo', pigg.puzzle.data.MapInfo);
pigg.puzzle.data.MapInfo.prototype._material;
pigg.puzzle.data.MapInfo.prototype._mc;
pigg.puzzle.data.MapInfo.prototype._num = 0;
pigg.puzzle.data.MapInfo.prototype._mx = 0;
pigg.puzzle.data.MapInfo.prototype._my = 0;
pigg.puzzle.data.MapInfo.prototype._ballType = 0;
pigg.puzzle.data.MapInfo.prototype._ballCrushType = 0;
pigg.puzzle.data.MapInfo.prototype._crushType = 0;
pigg.puzzle.data.MapInfo.prototype._isFlush;
pigg.puzzle.data.MapInfo.prototype._isSwitch = 0;
pigg.puzzle.data.MapInfo.prototype._isClick = 0;
pigg.puzzle.data.MapInfo.prototype._isSwitchMatch;
pigg.puzzle.data.MapInfo.prototype._fallCount = 0;
pigg.puzzle.data.MapInfo.prototype._crushEffect;
pigg.puzzle.data.MapInfo.prototype._isStackRemove = false;
pigg.puzzle.data.MapInfo.prototype._checkDouble = false;
pigg.puzzle.data.MapInfo.prototype._checkVertical = 0;
pigg.puzzle.data.MapInfo.prototype._checkHorizontal = 0;
pigg.puzzle.data.MapInfo.prototype._checkMatchIndex = 0;
pigg.puzzle.data.MapInfo.prototype._isSetCrushRemove = false;
pigg.puzzle.data.MapInfo.prototype._isCrush = false;
pigg.puzzle.data.MapInfo.prototype._isLeave;
pigg.puzzle.data.MapInfo.prototype._isDelete;
pigg.puzzle.data.MapInfo.prototype._removeDelay = 0;
pigg.puzzle.data.MapInfo.prototype._filterDelay = 0;
pigg.puzzle.data.MapInfo.prototype._addScore = 0;
pigg.puzzle.data.MapInfo.prototype._bombLineArray;
pigg.puzzle.data.MapInfo.prototype._pieceType = 0;
pigg.puzzle.data.MapInfo.prototype._isMovable = true;
pigg.puzzle.data.MapInfo.prototype._isWaitCrushEffect = false;
pigg.puzzle.data.MapInfo.prototype._isMakeByBomb = false;
pigg.puzzle.data.MapInfo.prototype._isVoid = false;
pigg.puzzle.data.MapInfo.prototype._isFix = false;
pigg.puzzle.data.MapInfo.prototype._stackMoveArray;
pigg.puzzle.data.MapInfo.prototype._checkVoidR = true;
pigg.puzzle.data.MapInfo.prototype._checkVoidL = true;
pigg.puzzle.data.MapInfo.prototype._checkVoidD = true;
pigg.puzzle.data.MapInfo.prototype._isStackCheckVoid = false;
pigg.puzzle.data.MapInfo.prototype._isStackTweenMove = false;
pigg.puzzle.data.MapInfo.prototype._isStackSetCrush = false;
pigg.puzzle.data.MapInfo.prototype._addFallVoid = 0;
pigg.puzzle.data.MapInfo.prototype._addFallY = 0;
pigg.puzzle.data.MapInfo.prototype._mappingType = 0;
pigg.puzzle.data.MapInfo.prototype._mappingPieceType = 0;
pigg.puzzle.data.MapInfo.prototype._iceLevel = 0;
pigg.puzzle.data.MapInfo.prototype._orderArrow;
pigg.puzzle.data.MapInfo.prototype._checkJelly = false;
pigg.puzzle.data.MapInfo.prototype._checkWired = false;
pigg.puzzle.data.MapInfo.prototype._checkAround = false;
pigg.puzzle.data.MapInfo.prototype._isCheckedWired = false;
pigg.puzzle.data.MapInfo.prototype._isCheckVoid = false;
pigg.puzzle.data.MapInfo.prototype._assistLevel;
pigg.puzzle.data.MapInfo.prototype._assistFocusMapInfo;
pigg.puzzle.data.MapInfo.prototype._testAssistMax;
pigg.puzzle.data.MapInfo.prototype._isOrder = -1;
pigg.puzzle.data.MapInfo.prototype._isIcing = false;
pigg.puzzle.data.MapInfo.prototype._isFixVoid = false;
pigg.puzzle.data.MapInfo.prototype._isThroughVoid = false;
pigg.puzzle.data.MapInfo.prototype._isThroughVoidLevel = 0;
pigg.puzzle.data.MapInfo.prototype._isThroughOrder = false;
pigg.puzzle.data.MapInfo.prototype._hasJelly = 0;
pigg.puzzle.data.MapInfo.prototype._hasWired = 0;
pigg.puzzle.data.MapInfo.prototype._hasBear = -1;
pigg.puzzle.data.MapInfo.prototype._hasBearType = 0;
pigg.puzzle.data.MapInfo.prototype._hasMarshmallow = -1;
pigg.puzzle.data.MapInfo.prototype._hasMarshmallowType = 0;
pigg.puzzle.data.MapInfo.prototype._jellyObjct;
pigg.puzzle.data.MapInfo.prototype._wiredObjct;
pigg.puzzle.data.MapInfo.prototype._marshmallowObjct;
pigg.puzzle.data.MapInfo.prototype._isHammer = false;
pigg.puzzle.data.MapInfo.prototype._shuffleLeave = false;
pigg.puzzle.data.MapInfo.prototype._brightLevel = 0;
pigg.puzzle.data.MapInfo.prototype._isQuake = 0;
pigg.puzzle.data.MapInfo.prototype._matchGroupeIndex = -1;
pigg.puzzle.data.MapInfo.prototype._isWarpIn = -1;
pigg.puzzle.data.MapInfo.prototype._isWarpOut = -1;
pigg.puzzle.data.MapInfo.prototype._fromWarp = -1;
pigg.puzzle.data.MapInfo.prototype._warpArrow;
pigg.puzzle.data.MapInfo.prototype._warpIndex = -1;
pigg.puzzle.data.MapInfo.prototype._isAcorn = -1;
pigg.puzzle.data.MapInfo.prototype._hasMission = -1;
pigg.puzzle.data.MapInfo.prototype._crushMission = -1;
pigg.puzzle.data.MapInfo.prototype._cheatTargetTile;
pigg.puzzle.data.MapInfo.prototype.clean = function() {
    this._mc = null;
    this._crushEffect = null;
    this._jellyObjct = null;
    this._wiredObjct = null;
    this._orderArrow = null
}
;
pigg.puzzle.data.MapInfo.prototype.get__material = function() {
    return this._material
}
;
pigg.puzzle.data.MapInfo.prototype.set__material = function(v) {
    this._material = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__mc = function() {
    return this._mc
}
;
pigg.puzzle.data.MapInfo.prototype.set__mc = function(v) {
    this._mc = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__num = function() {
    return this._num
}
;
pigg.puzzle.data.MapInfo.prototype.set__num = function(v) {
    this._num = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__mx = function() {
    return this._mx
}
;
pigg.puzzle.data.MapInfo.prototype.set__mx = function(v) {
    this._mx = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__my = function() {
    return this._my
}
;
pigg.puzzle.data.MapInfo.prototype.set__my = function(v) {
    this._my = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__ballType = function() {
    return this._ballType
}
;
pigg.puzzle.data.MapInfo.prototype.set__ballType = function(v) {
    this._ballType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__ballCrushType = function() {
    return this._ballCrushType
}
;
pigg.puzzle.data.MapInfo.prototype.set__ballCrushType = function(v) {
    this._ballCrushType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__crushType = function() {
    return this._crushType
}
;
pigg.puzzle.data.MapInfo.prototype.set__crushType = function(v) {
    this._crushType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isFlush = function() {
    return this._isFlush
}
;
pigg.puzzle.data.MapInfo.prototype.set__isFlush = function(v) {
    this._isFlush = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isSwitch = function() {
    return this._isSwitch
}
;
pigg.puzzle.data.MapInfo.prototype.set__isSwitch = function(v) {
    this._isSwitch = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isClick = function() {
    return this._isClick
}
;
pigg.puzzle.data.MapInfo.prototype.set__isClick = function(v) {
    this._isClick = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isSwitchMatch = function() {
    return this._isSwitchMatch
}
;
pigg.puzzle.data.MapInfo.prototype.set__isSwitchMatch = function(v) {
    this._isSwitchMatch = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__fallCount = function() {
    return this._fallCount
}
;
pigg.puzzle.data.MapInfo.prototype.set__fallCount = function(v) {
    this._fallCount = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__crushEffect = function() {
    return this._crushEffect
}
;
pigg.puzzle.data.MapInfo.prototype.set__crushEffect = function(v) {
    this._crushEffect = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isStackRemove = function() {
    return this._isStackRemove
}
;
pigg.puzzle.data.MapInfo.prototype.set__isStackRemove = function(v) {
    this._isStackRemove = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkDouble = function() {
    return this._checkDouble
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkDouble = function(v) {
    this._checkDouble = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkVertical = function() {
    return this._checkVertical
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkVertical = function(v) {
    this._checkVertical = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkHorizontal = function() {
    return this._checkHorizontal
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkHorizontal = function(v) {
    this._checkHorizontal = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkMatchIndex = function() {
    return this._checkMatchIndex
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkMatchIndex = function(v) {
    this._checkMatchIndex = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isSetCrushRemove = function() {
    return this._isSetCrushRemove
}
;
pigg.puzzle.data.MapInfo.prototype.set__isSetCrushRemove = function(v) {
    this._isSetCrushRemove = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isCrush = function() {
    return this._isCrush
}
;
pigg.puzzle.data.MapInfo.prototype.set__isCrush = function(v) {
    this._isCrush = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isLeave = function() {
    return this._isLeave
}
;
pigg.puzzle.data.MapInfo.prototype.set__isLeave = function(v) {
    this._isLeave = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isDelete = function() {
    return this._isDelete
}
;
pigg.puzzle.data.MapInfo.prototype.set__isDelete = function(v) {
    this._isDelete = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__removeDelay = function() {
    return this._removeDelay
}
;
pigg.puzzle.data.MapInfo.prototype.set__removeDelay = function(v) {
    this._removeDelay = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__filterDelay = function() {
    return this._filterDelay
}
;
pigg.puzzle.data.MapInfo.prototype.set__filterDelay = function(v) {
    this._filterDelay = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__addScore = function() {
    return this._addScore
}
;
pigg.puzzle.data.MapInfo.prototype.set__addScore = function(v) {
    this._addScore = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__bombLineArray = function() {
    return this._bombLineArray
}
;
pigg.puzzle.data.MapInfo.prototype.set__bombLineArray = function(v) {
    this._bombLineArray = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__pieceType = function() {
    return this._pieceType
}
;
pigg.puzzle.data.MapInfo.prototype.set__pieceType = function(v) {
    this._pieceType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isMovable = function() {
    return this._isMovable
}
;
pigg.puzzle.data.MapInfo.prototype.set__isMovable = function(v) {
    this._isMovable = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isWaitCrushEffect = function() {
    return this._isWaitCrushEffect
}
;
pigg.puzzle.data.MapInfo.prototype.set__isWaitCrushEffect = function(v) {
    this._isWaitCrushEffect = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isMakeByBomb = function() {
    return this._isMakeByBomb
}
;
pigg.puzzle.data.MapInfo.prototype.set__isMakeByBomb = function(v) {
    this._isMakeByBomb = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isVoid = function() {
    return this._isVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__isVoid = function(v) {
    this._isVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isFix = function() {
    return this._isFix
}
;
pigg.puzzle.data.MapInfo.prototype.set__isFix = function(v) {
    this._isFix = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__stackMoveArray = function() {
    return this._stackMoveArray
}
;
pigg.puzzle.data.MapInfo.prototype.set__stackMoveArray = function(v) {
    this._stackMoveArray = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkVoidR = function() {
    return this._checkVoidR
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkVoidR = function(v) {
    this._checkVoidR = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkVoidL = function() {
    return this._checkVoidL
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkVoidL = function(v) {
    this._checkVoidL = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkVoidD = function() {
    return this._checkVoidD
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkVoidD = function(v) {
    this._checkVoidD = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isStackCheckVoid = function() {
    return this._isStackCheckVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__isStackCheckVoid = function(v) {
    this._isStackCheckVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isStackTweenMove = function() {
    return this._isStackTweenMove
}
;
pigg.puzzle.data.MapInfo.prototype.set__isStackTweenMove = function(v) {
    this._isStackTweenMove = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isStackSetCrush = function() {
    return this._isStackSetCrush
}
;
pigg.puzzle.data.MapInfo.prototype.set__isStackSetCrush = function(v) {
    this._isStackSetCrush = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__addFallVoid = function() {
    return this._addFallVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__addFallVoid = function(v) {
    this._addFallVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__addFallY = function() {
    return this._addFallY
}
;
pigg.puzzle.data.MapInfo.prototype.set__addFallY = function(v) {
    this._addFallY = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__mappingType = function() {
    return this._mappingType
}
;
pigg.puzzle.data.MapInfo.prototype.set__mappingType = function(v) {
    this._mappingType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__mappingPieceType = function() {
    return this._mappingPieceType
}
;
pigg.puzzle.data.MapInfo.prototype.set__mappingPieceType = function(v) {
    this._mappingPieceType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__iceLevel = function() {
    return this._iceLevel
}
;
pigg.puzzle.data.MapInfo.prototype.set__iceLevel = function(v) {
    this._iceLevel = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__orderArrow = function() {
    return this._orderArrow
}
;
pigg.puzzle.data.MapInfo.prototype.set__orderArrow = function(v) {
    this._orderArrow = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkJelly = function() {
    return this._checkJelly
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkJelly = function(v) {
    this._checkJelly = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkWired = function() {
    return this._checkWired
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkWired = function(v) {
    this._checkWired = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__checkAround = function() {
    return this._checkAround
}
;
pigg.puzzle.data.MapInfo.prototype.set__checkAround = function(v) {
    this._checkAround = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isCheckedWired = function() {
    return this._isCheckedWired
}
;
pigg.puzzle.data.MapInfo.prototype.set__isCheckedWired = function(v) {
    this._isCheckedWired = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isCheckVoid = function() {
    return this._isCheckVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__isCheckVoid = function(v) {
    this._isCheckVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__assistLevel = function() {
    return this._assistLevel
}
;
pigg.puzzle.data.MapInfo.prototype.set__assistLevel = function(v) {
    this._assistLevel = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__assistFocusMapInfo = function() {
    return this._assistFocusMapInfo
}
;
pigg.puzzle.data.MapInfo.prototype.set__assistFocusMapInfo = function(v) {
    this._assistFocusMapInfo = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__testAssistMax = function() {
    return this._testAssistMax
}
;
pigg.puzzle.data.MapInfo.prototype.set__testAssistMax = function(v) {
    this._testAssistMax = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isOrder = function() {
    return this._isOrder
}
;
pigg.puzzle.data.MapInfo.prototype.set__isOrder = function(v) {
    this._isOrder = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isIcing = function() {
    return this._isIcing
}
;
pigg.puzzle.data.MapInfo.prototype.set__isIcing = function(v) {
    this._isIcing = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isFixVoid = function() {
    return this._isFixVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__isFixVoid = function(v) {
    this._isFixVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isThroughVoid = function() {
    return this._isThroughVoid
}
;
pigg.puzzle.data.MapInfo.prototype.set__isThroughVoid = function(v) {
    this._isThroughVoid = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isThroughVoidLevel = function() {
    return this._isThroughVoidLevel
}
;
pigg.puzzle.data.MapInfo.prototype.set__isThroughVoidLevel = function(v) {
    this._isThroughVoidLevel = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isThroughOrder = function() {
    return this._isThroughOrder
}
;
pigg.puzzle.data.MapInfo.prototype.set__isThroughOrder = function(v) {
    this._isThroughOrder = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasJelly = function() {
    return this._hasJelly
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasJelly = function(v) {
    this._hasJelly = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasWired = function() {
    return this._hasWired
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasWired = function(v) {
    this._hasWired = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasBear = function() {
    return this._hasBear
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasBear = function(v) {
    this._hasBear = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasBearType = function() {
    return this._hasBearType
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasBearType = function(v) {
    this._hasBearType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasMarshmallow = function() {
    return this._hasMarshmallow
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasMarshmallow = function(v) {
    this._hasMarshmallow = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasMarshmallowType = function() {
    return this._hasMarshmallowType
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasMarshmallowType = function(v) {
    this._hasMarshmallowType = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__jellyObjct = function() {
    return this._jellyObjct
}
;
pigg.puzzle.data.MapInfo.prototype.set__jellyObjct = function(v) {
    this._jellyObjct = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__wiredObjct = function() {
    return this._wiredObjct
}
;
pigg.puzzle.data.MapInfo.prototype.set__wiredObjct = function(v) {
    this._wiredObjct = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__marshmallowObjct = function() {
    return this._marshmallowObjct
}
;
pigg.puzzle.data.MapInfo.prototype.set__marshmallowObjct = function(v) {
    this._marshmallowObjct = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isHammer = function() {
    return this._isHammer
}
;
pigg.puzzle.data.MapInfo.prototype.set__isHammer = function(v) {
    this._isHammer = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__shuffleLeave = function() {
    return this._shuffleLeave
}
;
pigg.puzzle.data.MapInfo.prototype.set__shuffleLeave = function(v) {
    this._shuffleLeave = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__brightLevel = function() {
    return this._brightLevel
}
;
pigg.puzzle.data.MapInfo.prototype.set__brightLevel = function(v) {
    this._brightLevel = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isQuake = function() {
    return this._isQuake
}
;
pigg.puzzle.data.MapInfo.prototype.set__isQuake = function(v) {
    this._isQuake = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__matchGroupeIndex = function() {
    return this._matchGroupeIndex
}
;
pigg.puzzle.data.MapInfo.prototype.set__matchGroupeIndex = function(v) {
    this._matchGroupeIndex = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isWarpIn = function() {
    return this._isWarpIn
}
;
pigg.puzzle.data.MapInfo.prototype.set__isWarpIn = function(v) {
    this._isWarpIn = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isWarpOut = function() {
    return this._isWarpOut
}
;
pigg.puzzle.data.MapInfo.prototype.set__isWarpOut = function(v) {
    this._isWarpOut = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__fromWarp = function() {
    return this._fromWarp
}
;
pigg.puzzle.data.MapInfo.prototype.set__fromWarp = function(v) {
    this._fromWarp = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__warpArrow = function() {
    return this._warpArrow
}
;
pigg.puzzle.data.MapInfo.prototype.set__warpArrow = function(v) {
    this._warpArrow = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__warpIndex = function() {
    return this._warpIndex
}
;
pigg.puzzle.data.MapInfo.prototype.set__warpIndex = function(v) {
    this._warpIndex = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__isAcorn = function() {
    return this._isAcorn
}
;
pigg.puzzle.data.MapInfo.prototype.set__isAcorn = function(v) {
    this._isAcorn = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__hasMission = function() {
    return this._hasMission
}
;
pigg.puzzle.data.MapInfo.prototype.set__hasMission = function(v) {
    this._hasMission = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__crushMission = function() {
    return this._crushMission
}
;
pigg.puzzle.data.MapInfo.prototype.set__crushMission = function(v) {
    this._crushMission = v
}
;
pigg.puzzle.data.MapInfo.prototype.get__cheatTargetTile = function() {
    return this._cheatTargetTile
}
;
pigg.puzzle.data.MapInfo.prototype.set__cheatTargetTile = function(v) {
    this._cheatTargetTile = v
}
;
Object.defineProperties(pigg.puzzle.data.MapInfo.prototype, {
    material: {
        get: pigg.puzzle.data.MapInfo.prototype.get__material,
        set: pigg.puzzle.data.MapInfo.prototype.set__material
    },
    mc: {
        get: pigg.puzzle.data.MapInfo.prototype.get__mc,
        set: pigg.puzzle.data.MapInfo.prototype.set__mc
    },
    num: {
        get: pigg.puzzle.data.MapInfo.prototype.get__num,
        set: pigg.puzzle.data.MapInfo.prototype.set__num
    },
    mx: {
        get: pigg.puzzle.data.MapInfo.prototype.get__mx,
        set: pigg.puzzle.data.MapInfo.prototype.set__mx
    },
    my: {
        get: pigg.puzzle.data.MapInfo.prototype.get__my,
        set: pigg.puzzle.data.MapInfo.prototype.set__my
    },
    ballType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__ballType,
        set: pigg.puzzle.data.MapInfo.prototype.set__ballType
    },
    ballCrushType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__ballCrushType,
        set: pigg.puzzle.data.MapInfo.prototype.set__ballCrushType
    },
    crushType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__crushType,
        set: pigg.puzzle.data.MapInfo.prototype.set__crushType
    },
    isFlush: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isFlush,
        set: pigg.puzzle.data.MapInfo.prototype.set__isFlush
    },
    isSwitch: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isSwitch,
        set: pigg.puzzle.data.MapInfo.prototype.set__isSwitch
    },
    isClick: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isClick,
        set: pigg.puzzle.data.MapInfo.prototype.set__isClick
    },
    isSwitchMatch: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isSwitchMatch,
        set: pigg.puzzle.data.MapInfo.prototype.set__isSwitchMatch
    },
    fallCount: {
        get: pigg.puzzle.data.MapInfo.prototype.get__fallCount,
        set: pigg.puzzle.data.MapInfo.prototype.set__fallCount
    },
    crushEffect: {
        get: pigg.puzzle.data.MapInfo.prototype.get__crushEffect,
        set: pigg.puzzle.data.MapInfo.prototype.set__crushEffect
    },
    isStackRemove: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isStackRemove,
        set: pigg.puzzle.data.MapInfo.prototype.set__isStackRemove
    },
    checkDouble: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkDouble,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkDouble
    },
    checkVertical: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkVertical,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkVertical
    },
    checkHorizontal: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkHorizontal,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkHorizontal
    },
    checkMatchIndex: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkMatchIndex,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkMatchIndex
    },
    isSetCrushRemove: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isSetCrushRemove,
        set: pigg.puzzle.data.MapInfo.prototype.set__isSetCrushRemove
    },
    isCrush: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isCrush,
        set: pigg.puzzle.data.MapInfo.prototype.set__isCrush
    },
    isLeave: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isLeave,
        set: pigg.puzzle.data.MapInfo.prototype.set__isLeave
    },
    isDelete: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isDelete,
        set: pigg.puzzle.data.MapInfo.prototype.set__isDelete
    },
    removeDelay: {
        get: pigg.puzzle.data.MapInfo.prototype.get__removeDelay,
        set: pigg.puzzle.data.MapInfo.prototype.set__removeDelay
    },
    filterDelay: {
        get: pigg.puzzle.data.MapInfo.prototype.get__filterDelay,
        set: pigg.puzzle.data.MapInfo.prototype.set__filterDelay
    },
    addScore: {
        get: pigg.puzzle.data.MapInfo.prototype.get__addScore,
        set: pigg.puzzle.data.MapInfo.prototype.set__addScore
    },
    bombLineArray: {
        get: pigg.puzzle.data.MapInfo.prototype.get__bombLineArray,
        set: pigg.puzzle.data.MapInfo.prototype.set__bombLineArray
    },
    pieceType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__pieceType,
        set: pigg.puzzle.data.MapInfo.prototype.set__pieceType
    },
    isMovable: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isMovable,
        set: pigg.puzzle.data.MapInfo.prototype.set__isMovable
    },
    isWaitCrushEffect: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isWaitCrushEffect,
        set: pigg.puzzle.data.MapInfo.prototype.set__isWaitCrushEffect
    },
    isMakeByBomb: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isMakeByBomb,
        set: pigg.puzzle.data.MapInfo.prototype.set__isMakeByBomb
    },
    isVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__isVoid
    },
    isFix: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isFix,
        set: pigg.puzzle.data.MapInfo.prototype.set__isFix
    },
    stackMoveArray: {
        get: pigg.puzzle.data.MapInfo.prototype.get__stackMoveArray,
        set: pigg.puzzle.data.MapInfo.prototype.set__stackMoveArray
    },
    checkVoidR: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkVoidR,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkVoidR
    },
    checkVoidL: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkVoidL,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkVoidL
    },
    checkVoidD: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkVoidD,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkVoidD
    },
    isStackCheckVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isStackCheckVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__isStackCheckVoid
    },
    isStackTweenMove: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isStackTweenMove,
        set: pigg.puzzle.data.MapInfo.prototype.set__isStackTweenMove
    },
    isStackSetCrush: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isStackSetCrush,
        set: pigg.puzzle.data.MapInfo.prototype.set__isStackSetCrush
    },
    addFallVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__addFallVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__addFallVoid
    },
    addFallY: {
        get: pigg.puzzle.data.MapInfo.prototype.get__addFallY,
        set: pigg.puzzle.data.MapInfo.prototype.set__addFallY
    },
    mappingType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__mappingType,
        set: pigg.puzzle.data.MapInfo.prototype.set__mappingType
    },
    mappingPieceType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__mappingPieceType,
        set: pigg.puzzle.data.MapInfo.prototype.set__mappingPieceType
    },
    iceLevel: {
        get: pigg.puzzle.data.MapInfo.prototype.get__iceLevel,
        set: pigg.puzzle.data.MapInfo.prototype.set__iceLevel
    },
    orderArrow: {
        get: pigg.puzzle.data.MapInfo.prototype.get__orderArrow,
        set: pigg.puzzle.data.MapInfo.prototype.set__orderArrow
    },
    checkJelly: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkJelly,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkJelly
    },
    checkWired: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkWired,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkWired
    },
    checkAround: {
        get: pigg.puzzle.data.MapInfo.prototype.get__checkAround,
        set: pigg.puzzle.data.MapInfo.prototype.set__checkAround
    },
    isCheckedWired: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isCheckedWired,
        set: pigg.puzzle.data.MapInfo.prototype.set__isCheckedWired
    },
    isCheckVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isCheckVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__isCheckVoid
    },
    assistLevel: {
        get: pigg.puzzle.data.MapInfo.prototype.get__assistLevel,
        set: pigg.puzzle.data.MapInfo.prototype.set__assistLevel
    },
    assistFocusMapInfo: {
        get: pigg.puzzle.data.MapInfo.prototype.get__assistFocusMapInfo,
        set: pigg.puzzle.data.MapInfo.prototype.set__assistFocusMapInfo
    },
    testAssistMax: {
        get: pigg.puzzle.data.MapInfo.prototype.get__testAssistMax,
        set: pigg.puzzle.data.MapInfo.prototype.set__testAssistMax
    },
    isOrder: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isOrder,
        set: pigg.puzzle.data.MapInfo.prototype.set__isOrder
    },
    isIcing: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isIcing,
        set: pigg.puzzle.data.MapInfo.prototype.set__isIcing
    },
    isFixVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isFixVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__isFixVoid
    },
    isThroughVoid: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isThroughVoid,
        set: pigg.puzzle.data.MapInfo.prototype.set__isThroughVoid
    },
    isThroughVoidLevel: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isThroughVoidLevel,
        set: pigg.puzzle.data.MapInfo.prototype.set__isThroughVoidLevel
    },
    isThroughOrder: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isThroughOrder,
        set: pigg.puzzle.data.MapInfo.prototype.set__isThroughOrder
    },
    hasJelly: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasJelly,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasJelly
    },
    hasWired: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasWired,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasWired
    },
    hasBear: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasBear,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasBear
    },
    hasBearType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasBearType,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasBearType
    },
    hasMarshmallow: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasMarshmallow,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasMarshmallow
    },
    hasMarshmallowType: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasMarshmallowType,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasMarshmallowType
    },
    jellyObjct: {
        get: pigg.puzzle.data.MapInfo.prototype.get__jellyObjct,
        set: pigg.puzzle.data.MapInfo.prototype.set__jellyObjct
    },
    wiredObjct: {
        get: pigg.puzzle.data.MapInfo.prototype.get__wiredObjct,
        set: pigg.puzzle.data.MapInfo.prototype.set__wiredObjct
    },
    marshmallowObjct: {
        get: pigg.puzzle.data.MapInfo.prototype.get__marshmallowObjct,
        set: pigg.puzzle.data.MapInfo.prototype.set__marshmallowObjct
    },
    isHammer: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isHammer,
        set: pigg.puzzle.data.MapInfo.prototype.set__isHammer
    },
    shuffleLeave: {
        get: pigg.puzzle.data.MapInfo.prototype.get__shuffleLeave,
        set: pigg.puzzle.data.MapInfo.prototype.set__shuffleLeave
    },
    brightLevel: {
        get: pigg.puzzle.data.MapInfo.prototype.get__brightLevel,
        set: pigg.puzzle.data.MapInfo.prototype.set__brightLevel
    },
    isQuake: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isQuake,
        set: pigg.puzzle.data.MapInfo.prototype.set__isQuake
    },
    matchGroupeIndex: {
        get: pigg.puzzle.data.MapInfo.prototype.get__matchGroupeIndex,
        set: pigg.puzzle.data.MapInfo.prototype.set__matchGroupeIndex
    },
    isWarpIn: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isWarpIn,
        set: pigg.puzzle.data.MapInfo.prototype.set__isWarpIn
    },
    isWarpOut: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isWarpOut,
        set: pigg.puzzle.data.MapInfo.prototype.set__isWarpOut
    },
    fromWarp: {
        get: pigg.puzzle.data.MapInfo.prototype.get__fromWarp,
        set: pigg.puzzle.data.MapInfo.prototype.set__fromWarp
    },
    warpArrow: {
        get: pigg.puzzle.data.MapInfo.prototype.get__warpArrow,
        set: pigg.puzzle.data.MapInfo.prototype.set__warpArrow
    },
    warpIndex: {
        get: pigg.puzzle.data.MapInfo.prototype.get__warpIndex,
        set: pigg.puzzle.data.MapInfo.prototype.set__warpIndex
    },
    isAcorn: {
        get: pigg.puzzle.data.MapInfo.prototype.get__isAcorn,
        set: pigg.puzzle.data.MapInfo.prototype.set__isAcorn
    },
    hasMission: {
        get: pigg.puzzle.data.MapInfo.prototype.get__hasMission,
        set: pigg.puzzle.data.MapInfo.prototype.set__hasMission
    },
    crushMission: {
        get: pigg.puzzle.data.MapInfo.prototype.get__crushMission,
        set: pigg.puzzle.data.MapInfo.prototype.set__crushMission
    },
    cheatTargetTile: {
        get: pigg.puzzle.data.MapInfo.prototype.get__cheatTargetTile,
        set: pigg.puzzle.data.MapInfo.prototype.set__cheatTargetTile
    }
});
pigg.puzzle.data.MapInfo.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MapInfo',
        qName: 'pigg.puzzle.data.MapInfo',
        kind: 'class'
    }]
};
pigg.puzzle.data.MapInfo.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'material': {
                    type: 'openfl.display.Sprite',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'mc': {
                    type: 'TileGummy',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'num': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'mx': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'my': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'ballType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'ballCrushType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'crushType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isFlush': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isSwitch': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isClick': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isSwitchMatch': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'fallCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'crushEffect': {
                    type: 'openfl.display.MovieClip',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isStackRemove': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkDouble': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkVertical': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkHorizontal': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkMatchIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isSetCrushRemove': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isCrush': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isLeave': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isDelete': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'removeDelay': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'filterDelay': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'addScore': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'bombLineArray': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'pieceType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isMovable': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isWaitCrushEffect': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isMakeByBomb': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isFix': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'stackMoveArray': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkVoidR': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkVoidL': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkVoidD': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isStackCheckVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isStackTweenMove': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isStackSetCrush': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'addFallVoid': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'addFallY': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'mappingType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'mappingPieceType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'iceLevel': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'orderArrow': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkJelly': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkWired': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'checkAround': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isCheckedWired': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isCheckVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'assistLevel': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'assistFocusMapInfo': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'testAssistMax': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isOrder': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isIcing': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isFixVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isThroughVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isThroughVoidLevel': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isThroughOrder': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasJelly': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasWired': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasBear': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasBearType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasMarshmallow': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasMarshmallowType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'jellyObjct': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'wiredObjct': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'marshmallowObjct': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isHammer': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'shuffleLeave': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'brightLevel': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isQuake': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'matchGroupeIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isWarpIn': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isWarpOut': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'fromWarp': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'warpArrow': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'warpIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'isAcorn': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'hasMission': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'crushMission': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                },
                'cheatTargetTile': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                }
            }
        },
        methods: function() {
            return {
                'MapInfo': {
                    type: '',
                    declaredBy: 'pigg.puzzle.data.MapInfo'
                }
            }
        }
    }
}
;
spine.animation.AnimationStateData = function(skeletonData) {
    this.animationToMixTime = new Object;
    this._skeletonData = skeletonData
}
;
goog.exportSymbol('spine.animation.AnimationStateData', spine.animation.AnimationStateData);
spine.animation.AnimationStateData.prototype._skeletonData;
spine.animation.AnimationStateData.prototype.animationToMixTime;
spine.animation.AnimationStateData.prototype.defaultMix = 0;
spine.animation.AnimationStateData.prototype.setMixByName = function(fromName, toName, duration) {
    var from = this._skeletonData.findAnimation(fromName);
    if (from == null)
        throw new openfl.errors.ArgumentError('Animation not found: ' + fromName);
    var to = this._skeletonData.findAnimation(toName);
    if (to == null)
        throw new openfl.errors.ArgumentError('Animation not found: ' + toName);
    this.setMix(from, to, duration)
}
;
spine.animation.AnimationStateData.prototype.setMix = function(from, to, duration) {
    if (from == null)
        throw new openfl.errors.ArgumentError('from cannot be null.');
    if (to == null)
        throw new openfl.errors.ArgumentError('to cannot be null.');
    this.animationToMixTime[from.name + ':' + to.name] = duration
}
;
spine.animation.AnimationStateData.prototype.getMix = function(from, to) {
    var time = this.animationToMixTime[from.name + ':' + to.name];
    if (time == null)
        return this.defaultMix;
    return org.apache.royale.utils.Language.as(time, Number)
}
;
spine.animation.AnimationStateData.prototype.get__skeletonData = function() {
    return this._skeletonData
}
;
Object.defineProperties(spine.animation.AnimationStateData.prototype, {
    skeletonData: {
        get: spine.animation.AnimationStateData.prototype.get__skeletonData
    }
});
spine.animation.AnimationStateData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AnimationStateData',
        qName: 'spine.animation.AnimationStateData',
        kind: 'class'
    }]
};
spine.animation.AnimationStateData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'defaultMix': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'skeletonData': {
                    type: 'spine.SkeletonData',
                    access: 'readonly',
                    declaredBy: 'spine.animation.AnimationStateData'
                }
            }
        },
        methods: function() {
            return {
                'AnimationStateData': {
                    type: '',
                    declaredBy: 'spine.animation.AnimationStateData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.SkeletonData',
                            optional: false
                        }]
                    }
                },
                'setMixByName': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationStateData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'setMix': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationStateData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.Animation',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.animation.Animation',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'getMix': {
                    type: 'Number',
                    declaredBy: 'spine.animation.AnimationStateData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.Animation',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.animation.Animation',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.AnnounceView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('AnnounceView')
}
;
goog.inherits(pigg.puzzle.view.AnnounceView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.AnnounceView', pigg.puzzle.view.AnnounceView);
pigg.puzzle.view.AnnounceView.prototype._main;
pigg.puzzle.view.AnnounceView.prototype._currentDispMode = 0;
pigg.puzzle.view.AnnounceView.prototype._annouceViewContainer;
pigg.puzzle.view.AnnounceView.prototype._annouceView;
pigg.puzzle.view.AnnounceView.prototype._annouceViewBlack;
pigg.puzzle.view.AnnounceView.prototype._annouceViewPng;
pigg.puzzle.view.AnnounceView.prototype._container;
pigg.puzzle.view.AnnounceView.prototype.init = function(main) {
    var self = this;
    var __localFn0__ = function() {
        self.traceLog('announceMD', self.mouseX, self.mouseY);
        if (self.mouseX > 170 && self.mouseX < 480 && self.mouseY > 630 && self.mouseY < 680) {
            tl.scaleX = tl.scaleY = 1.2;
            com.greensock.TweenMax.killTweensOf(tl);
            com.greensock.TweenMax.to(tl, .8, {
                ease: com.greensock.easing.Elastic.easeOut.config(1.3, .2),
                scaleX: 1,
                scaleY: 1
            })
        }
    };
    var __localFn1__ = function() {
        if (self.mouseX > 170 && self.mouseX < 480 && self.mouseY > 630 && self.mouseY < 680)
            openfl.net.navigateToURL(new openfl.net.URLRequest(pigg.puzzle.data.CommonData.URL_PUZZLE_SHOP), '_blank')
    };
    this._main = main;
    this.addChild(this._container = new openfl.display.Sprite);
    var innerView = new openfl.display.Sprite;
    this._annouceViewBlack = this.makeBackBlack();
    this._annouceView = new openfl.display.Sprite;
    this._annouceViewPng = new openfl.display.Sprite;
    this._container.addChild(this._annouceViewBlack);
    this._container.addChild(this._annouceView);
    this._annouceView.addChild(innerView);
    innerView.addChild(this._annouceViewPng);
    innerView.x = -289;
    innerView.y = -156 + 91;
    this._annouceView.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
    this._annouceView.y = pigg.puzzle.view.CommonView.MYPAGE_HEIGHT / 2;
    var thumbUrl;
    if (this._main.isLocal)
        thumbUrl = '/assets/puzzle/local/announce_' + this._main.eventData.eventCode + '.png';
    else
        thumbUrl = this.addLocation(this._main) + '/stat/dat/puzzle/announce_' + this._main.eventData.eventCode + '.png';
    this._main.loadDataManager.loadPng(thumbUrl, 'announceView', org.apache.royale.utils.Language.closure(this.onLoadPng, this, 'onLoadPng'), this._annouceViewPng);
    var closeBtn = this.makeCloseBtn(this._main, org.apache.royale.utils.Language.closure(this.hide, this, 'hide'));
    closeBtn.x = 549;
    closeBtn.y = -15;
    innerView.addChild(closeBtn);
    var ts = this._main.mypagePartsTileset.clone();
    ts.addRect(new openfl.geom.Rectangle(463,641,310,56));
    var tm = new openfl.display.Tilemap(410,156,ts);
    var tl;
    tm.addTile(tl = new openfl.display.Tile(0));
    tl.originX = 155;
    tl.originY = 28;
    tl.x = 205;
    tl.y = 78;
    tm.x = 84;
    tm.y = 217;
    innerView.addChild(tm);
    this._annouceView.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    this._annouceView.addEventListener(openfl.events.MouseEvent.CLICK, __localFn1__);
    this._container.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH
}
;
pigg.puzzle.view.AnnounceView.prototype.show = function() {
    this.traceLog('show');
    this._container.x = 0;
    this._annouceViewBlack.alpha = 0;
    com.greensock.TweenMax.to(this._annouceViewBlack, .2, {
        alpha: 1
    });
    this._annouceView.scaleX = this._annouceView.scaleY = .001;
    com.greensock.TweenMax.to(this._annouceView, .4, {
        scaleX: 1,
        scaleY: 1,
        ease: com.greensock.easing.Elastic.easeOut
    })
}
;
pigg.puzzle.view.AnnounceView.prototype.hide = function() {
    var self = this;
    var __localFn0__ = function() {
        self.removeFromParent(self._container);
        self._container = null
    };
    com.greensock.TweenMax.to(this._annouceViewBlack, .2, {
        alpha: 0,
        onComplete: __localFn0__
    });
    com.greensock.TweenMax.to(this._annouceView, .1, {
        scaleX: 1E-4,
        scaleY: 1E-4,
        ease: com.greensock.easing.Cubic.easeOut
    })
}
;
pigg.puzzle.view.AnnounceView.prototype.onLoadPng = function(code, bmd, spr) {
    spr = typeof spr !== 'undefined' ? spr : null;
    this.traceLog('Announce::loadpng');
    var ts;
    var tm;
    var tl;
    if (code == 'announceView') {
        ts = new openfl.display.Tileset(bmd);
        ts.addRect(new openfl.geom.Rectangle(0,0,482,282));
        tm = new openfl.display.Tilemap(578,338,ts);
        tm.addTile(tl = new TileBase);
        tl.scaleX = tl.scaleY = 1.2;
        spr.addChild(tm);
        this.show();
        this._main.hideApiLoading()
    }
}
;
pigg.puzzle.view.AnnounceView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AnnounceView',
        qName: 'pigg.puzzle.view.AnnounceView',
        kind: 'class'
    }]
};
pigg.puzzle.view.AnnounceView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AnnounceView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.AnnounceView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AnnounceView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }]
                    }
                },
                'onLoadPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.AnnounceView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.AnimationState = function(data) {
    var self = this;
    this.onStart = new spine.animation.Listeners;
    this.onInterrupt = new spine.animation.Listeners;
    this.onEnd = new spine.animation.Listeners;
    this.onDispose = new spine.animation.Listeners;
    this.onComplete = new spine.animation.Listeners;
    this.onEvent = new spine.animation.Listeners;
    this.propertyIDs = new openfl.utils.Dictionary;
    this.mixingTo = org.apache.royale.utils.Language.Vector();
    var __localFn0__ = function() {
        return new spine.animation.TrackEntry
    };
    if (data == null)
        throw new openfl.errors.ArgumentError('data can not be null');
    spine.animation.AnimationState.emptyAnimation = new spine.animation.Animation('\x3cempty\x3e',org.apache.royale.utils.Language.Vector(),0);
    this.tracks = org.apache.royale.utils.Language.Vector();
    this.events = org.apache.royale.utils.Language.Vector();
    this.data = data;
    this.queue = new spine.animation.EventQueue(this);
    this.trackEntryPool = new spine.Pool(__localFn0__)
}
;
goog.exportSymbol('spine.animation.AnimationState', spine.animation.AnimationState);
spine.animation.AnimationState.SUBSEQUENT = 0;
spine.animation.AnimationState.FIRST = 1;
spine.animation.AnimationState.DIP = 2;
spine.animation.AnimationState.DIP_MIX = 3;
spine.animation.AnimationState.emptyAnimation;
spine.animation.AnimationState.prototype.data;
spine.animation.AnimationState.prototype.tracks;
spine.animation.AnimationState.prototype.events;
spine.animation.AnimationState.prototype.onStart;
spine.animation.AnimationState.prototype.onInterrupt;
spine.animation.AnimationState.prototype.onEnd;
spine.animation.AnimationState.prototype.onDispose;
spine.animation.AnimationState.prototype.onComplete;
spine.animation.AnimationState.prototype.onEvent;
spine.animation.AnimationState.prototype.queue;
spine.animation.AnimationState.prototype.propertyIDs;
spine.animation.AnimationState.prototype.mixingTo;
spine.animation.AnimationState.prototype.animationsChanged;
spine.animation.AnimationState.prototype.timeScale = 1;
spine.animation.AnimationState.prototype.trackEntryPool;
spine.animation.AnimationState.prototype.update = function(delta) {
    delta *= this.timeScale;
    var n = this.tracks.length;
    for (var i = 0; i < n; i++) {
        var current = this.tracks[i];
        if (current == null)
            continue;
        current.animationLast = current.nextAnimationLast;
        current.trackLast = current.nextTrackLast;
        var currentDelta = delta * current.timeScale;
        if (current.delay > 0) {
            current.delay -= currentDelta;
            if (current.delay > 0)
                continue;
            currentDelta = -current.delay;
            current.delay = 0
        }
        var next = current.next;
        if (next != null) {
            var nextTime = current.trackLast - next.delay;
            if (nextTime >= 0) {
                next.delay = 0;
                next.trackTime = nextTime + delta * next.timeScale;
                current.trackTime += currentDelta;
                this.setCurrent(i, next, true);
                while (next.mixingFrom != null) {
                    next.mixTime += currentDelta;
                    next = next.mixingFrom
                }
                continue
            }
        } else if (current.trackLast >= current.trackEnd && current.mixingFrom == null) {
            this.tracks[i] = null;
            this.queue.end(current);
            this.disposeNext(current);
            continue
        }
        if (current.mixingFrom != null && this.updateMixingFrom(current, delta)) {
            var from = current.mixingFrom;
            current.mixingFrom = null;
            while (from != null) {
                this.queue.end(from);
                from = from.mixingFrom
            }
        }
        current.trackTime += currentDelta
    }
    this.queue.drain()
}
;
spine.animation.AnimationState.prototype.updateMixingFrom = function(to, delta) {
    var from = to.mixingFrom;
    if (from == null)
        return true;
    var finished = this.updateMixingFrom(from, delta);
    from.animationLast = from.nextAnimationLast;
    from.trackLast = from.nextTrackLast;
    if (to.mixTime > 0 && (to.mixTime >= to.mixDuration || to.timeScale == 0)) {
        if (from.totalAlpha == 0 || to.mixDuration == 0) {
            to.mixingFrom = from.mixingFrom;
            to.interruptAlpha = from.interruptAlpha;
            this.queue.end(from)
        }
        return finished
    }
    from.trackTime += delta * from.timeScale;
    to.mixTime += delta * to.timeScale;
    return false
}
;
spine.animation.AnimationState.prototype.apply = function(skeleton) {
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    if (this.animationsChanged)
        this._animationsChanged();
    var events = this.events;
    var applied = false;
    var n = this.tracks.length;
    for (var i = 0; i < n; i++) {
        var current = this.tracks[i];
        if (current == null || current.delay > 0)
            continue;
        applied = true;
        var currentPose = i == 0 ? spine.animation.MixPose.current : spine.animation.MixPose.currentLayered;
        var mix = current.alpha;
        if (current.mixingFrom != null)
            mix *= this.applyMixingFrom(current, skeleton, currentPose);
        else if (current.trackTime >= current.trackEnd && current.next == null)
            mix = 0;
        var animationLast = current.animationLast
          , animationTime = current.getAnimationTime();
        var timelineCount = current.animation.timelines.length;
        var timelines = current.animation.timelines;
        var ii = 0;
        if (mix == 1)
            for (ii = 0; ii < timelineCount; ii++)
                org.apache.royale.utils.Language.as(timelines[ii], spine.animation.Timeline, true).apply(skeleton, animationLast, animationTime, events, 1, spine.animation.MixPose.setup, spine.animation.MixDirection.In);
        else {
            var timelineData = current.timelineData;
            var firstFrame = current.timelinesRotation.length == 0;
            if (firstFrame)
                current.timelinesRotation.length = timelineCount << 1;
            var timelinesRotation = current.timelinesRotation;
            for (ii = 0; ii < timelineCount; ii++) {
                var timeline = timelines[ii];
                var pose = timelineData[ii] >= spine.animation.AnimationState.FIRST ? spine.animation.MixPose.setup : currentPose;
                if (org.apache.royale.utils.Language.is(timeline, spine.animation.RotateTimeline))
                    this.applyRotateTimeline(timeline, skeleton, animationTime, mix, pose, timelinesRotation, ii << 1, firstFrame);
                else
                    timeline.apply(skeleton, animationLast, animationTime, events, mix, pose, spine.animation.MixDirection.In)
            }
        }
        this.queueEvents(current, animationTime);
        events.length = 0;
        current.nextAnimationLast = animationTime;
        current.nextTrackLast = current.trackTime
    }
    this.queue.drain();
    return applied
}
;
spine.animation.AnimationState.prototype.applyMixingFrom = function(to, skeleton, currentPose) {
    var from = to.mixingFrom;
    if (from.mixingFrom != null)
        this.applyMixingFrom(from, skeleton, currentPose);
    var mix = 0;
    if (to.mixDuration == 0) {
        mix = 1;
        currentPose = spine.animation.MixPose.setup
    } else {
        mix = to.mixTime / to.mixDuration;
        if (mix > 1)
            mix = 1
    }
    var events = mix < from.eventThreshold ? this.events : null;
    var attachments = mix < from.attachmentThreshold
      , drawOrder = mix < from.drawOrderThreshold;
    var animationLast = from.animationLast
      , animationTime = from.getAnimationTime();
    var timelineCount = from.animation.timelines.length;
    var timelines = from.animation.timelines;
    var timelineData = from.timelineData;
    var timelineDipMix = from.timelineDipMix;
    var firstFrame = from.timelinesRotation.length == 0;
    if (firstFrame)
        from.timelinesRotation.length = timelineCount << 1;
    var timelinesRotation = from.timelinesRotation;
    var pose;
    var alphaDip = from.alpha * to.interruptAlpha;
    var alphaMix = alphaDip * (1 - mix);
    var alpha = 0;
    from.totalAlpha = 0;
    for (var i = 0; i < timelineCount; i++) {
        var timeline = timelines[i];
        switch (timelineData[i]) {
        case spine.animation.AnimationState.SUBSEQUENT:
            if (!attachments && org.apache.royale.utils.Language.is(timeline, spine.animation.AttachmentTimeline))
                continue;
            if (!drawOrder && org.apache.royale.utils.Language.is(timeline, spine.animation.DrawOrderTimeline))
                continue;
            pose = currentPose;
            alpha = alphaMix;
            break;
        case spine.animation.AnimationState.FIRST:
            pose = spine.animation.MixPose.setup;
            alpha = alphaMix;
            break;
        case spine.animation.AnimationState.DIP:
            pose = spine.animation.MixPose.setup;
            alpha = alphaDip;
            break;
        default:
            pose = spine.animation.MixPose.setup;
            alpha = alphaDip;
            var dipMix = timelineDipMix[i];
            alpha *= Math.max(0, 1 - dipMix.mixTime / dipMix.mixDuration);
            break
        }
        from.totalAlpha += alpha;
        if (org.apache.royale.utils.Language.is(timeline, spine.animation.RotateTimeline))
            this.applyRotateTimeline(timeline, skeleton, animationTime, alpha, pose, timelinesRotation, i << 1, firstFrame);
        else
            timeline.apply(skeleton, animationLast, animationTime, events, alpha, pose, spine.animation.MixDirection.Out)
    }
    if (to.mixDuration > 0)
        this.queueEvents(from, animationTime);
    this.events.length = 0;
    from.nextAnimationLast = animationTime;
    from.nextTrackLast = from.trackTime;
    return mix
}
;
spine.animation.AnimationState.prototype.applyRotateTimeline = function(timeline, skeleton, time, alpha, pose, timelinesRotation, i, firstFrame) {
    if (firstFrame)
        timelinesRotation[i] = 0;
    if (alpha == 1) {
        timeline.apply(skeleton, 0, time, null, 1, pose, spine.animation.MixDirection.In);
        return
    }
    var rotateTimeline = org.apache.royale.utils.Language.as(timeline, spine.animation.RotateTimeline, true);
    var frames = rotateTimeline.frames;
    var bone = skeleton.bones[rotateTimeline.boneIndex];
    if (time < frames[0]) {
        if (pose == spine.animation.MixPose.setup)
            bone.rotation = bone.data.rotation;
        return
    }
    var r2;
    if (time >= frames[frames.length - spine.animation.RotateTimeline.ENTRIES])
        r2 = Number(bone.data.rotation + frames[frames.length + spine.animation.RotateTimeline.PREV_ROTATION]);
    else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.RotateTimeline.ENTRIES);
        var prevRotation = Number(frames[frame + spine.animation.RotateTimeline.PREV_ROTATION]);
        var frameTime = Number(frames[frame]);
        var percent = rotateTimeline.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.RotateTimeline.PREV_TIME] - frameTime));
        r2 = frames[frame + spine.animation.RotateTimeline.ROTATION] - prevRotation;
        r2 -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r2 / 360)) * 360;
        r2 = prevRotation + r2 * percent + bone.data.rotation;
        r2 -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r2 / 360)) * 360
    }
    var r1 = pose == spine.animation.MixPose.setup ? bone.data.rotation : bone.rotation;
    var total, diff = r2 - r1;
    if (diff == 0)
        total = Number(timelinesRotation[i]);
    else {
        diff -= (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - diff / 360)) * 360;
        var lastTotal, lastDiff;
        if (firstFrame) {
            lastTotal = 0;
            lastDiff = diff
        } else {
            lastTotal = Number(timelinesRotation[i]);
            lastDiff = Number(timelinesRotation[i + 1])
        }
        var current = diff > 0
          , dir = lastTotal >= 0;
        if (spine.MathUtils.signum(lastDiff) != spine.MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {
            if (Math.abs(lastTotal) > 180)
                lastTotal += 360 * spine.MathUtils.signum(lastTotal);
            dir = current
        }
        total = diff + lastTotal - lastTotal % 360;
        if (dir != current)
            total += 360 * spine.MathUtils.signum(lastTotal);
        timelinesRotation[i] = total
    }
    timelinesRotation[i + 1] = diff;
    r1 += total * alpha;
    bone.rotation = r1 - (16384 - org.apache.royale.utils.Language._int(16384.499999999996 - r1 / 360)) * 360
}
;
spine.animation.AnimationState.prototype.queueEvents = function(entry, animationTime) {
    var animationStart = entry.animationStart
      , animationEnd = entry.animationEnd;
    var duration = animationEnd - animationStart;
    var trackLastWrapped = entry.trackLast % duration;
    var events = this.events;
    var event;
    var i = 0
      , n = events.length;
    for (i = 0; i < n; i++) {
        event = events[i];
        if (event.time < trackLastWrapped)
            break;
        if (event.time > animationEnd)
            continue;
        this.queue.event(entry, event)
    }
    var complete;
    if (entry.loop)
        complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;
    else
        complete = animationTime >= animationEnd && entry.animationLast < animationEnd;
    if (complete)
        this.queue.complete(entry);
    for (i = 0; i < n; i++) {
        event = events[i];
        if (event.time < animationStart)
            continue;
        this.queue.event(entry, events[i])
    }
}
;
spine.animation.AnimationState.prototype.clearTracks = function() {
    var oldTrainDisabled = this.queue.drainDisabled;
    this.queue.drainDisabled = true;
    var n = this.tracks.length;
    for (var i = 0; i < n; i++)
        this.clearTrack(i);
    this.tracks.length = 0;
    this.queue.drainDisabled = oldTrainDisabled;
    this.queue.drain()
}
;
spine.animation.AnimationState.prototype.clearTrack = function(trackIndex) {
    if (trackIndex >= this.tracks.length)
        return;
    var current = this.tracks[trackIndex];
    if (current == null)
        return;
    this.queue.end(current);
    this.disposeNext(current);
    var entry = current;
    while (true) {
        var from = entry.mixingFrom;
        if (from == null)
            break;
        this.queue.end(from);
        entry.mixingFrom = null;
        entry = from
    }
    this.tracks[current.trackIndex] = null;
    this.queue.drain()
}
;
spine.animation.AnimationState.prototype.setCurrent = function(index, current, interrupt) {
    var from = this.expandToIndex(index);
    this.tracks[index] = current;
    if (from != null) {
        if (interrupt)
            this.queue.interrupt(from);
        current.mixingFrom = from;
        current.mixTime = 0;
        if (from.mixingFrom != null && from.mixDuration > 0)
            current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);
        from.timelinesRotation.length = 0
    }
    this.queue.start(current)
}
;
spine.animation.AnimationState.prototype.setAnimationByName = function(trackIndex, animationName, loop) {
    var animation = this.data.skeletonData.findAnimation(animationName);
    if (animation == null)
        throw new openfl.errors.ArgumentError('Animation not found: ' + animationName);
    return this.setAnimation(trackIndex, animation, loop)
}
;
spine.animation.AnimationState.prototype.setAnimation = function(trackIndex, animation, loop) {
    if (animation == null)
        throw new openfl.errors.ArgumentError('animation cannot be null.');
    var interrupt = true;
    var current = this.expandToIndex(trackIndex);
    if (current != null)
        if (current.nextTrackLast == -1) {
            this.tracks[trackIndex] = current.mixingFrom;
            this.queue.interrupt(current);
            this.queue.end(current);
            this.disposeNext(current);
            current = current.mixingFrom;
            interrupt = false
        } else
            this.disposeNext(current);
    var entry = this.trackEntry(trackIndex, animation, loop, current);
    this.setCurrent(trackIndex, entry, interrupt);
    this.queue.drain();
    return entry
}
;
spine.animation.AnimationState.prototype.addAnimationByName = function(trackIndex, animationName, loop, delay) {
    var animation = this.data.skeletonData.findAnimation(animationName);
    if (animation == null)
        throw new openfl.errors.ArgumentError('Animation not found: ' + animationName);
    return this.addAnimation(trackIndex, animation, loop, delay)
}
;
spine.animation.AnimationState.prototype.addAnimation = function(trackIndex, animation, loop, delay) {
    if (animation == null)
        throw new openfl.errors.ArgumentError('animation cannot be null.');
    var last = this.expandToIndex(trackIndex);
    if (last != null)
        while (last.next != null)
            last = last.next;
    var entry = this.trackEntry(trackIndex, animation, loop, last);
    if (last == null) {
        this.setCurrent(trackIndex, entry, true);
        this.queue.drain()
    } else {
        last.next = entry;
        if (delay <= 0) {
            var duration = last.animationEnd - last.animationStart;
            if (duration != 0)
                if (last.loop)
                    delay += duration * (1 + org.apache.royale.utils.Language._int(last.trackTime / duration));
                else
                    delay += duration;
            else
                delay = 0
        }
    }
    entry.delay = delay;
    return entry
}
;
spine.animation.AnimationState.prototype.setEmptyAnimation = function(trackIndex, mixDuration) {
    var entry = this.setAnimation(trackIndex, spine.animation.AnimationState.emptyAnimation, false);
    entry.mixDuration = mixDuration;
    entry.trackEnd = mixDuration;
    return entry
}
;
spine.animation.AnimationState.prototype.addEmptyAnimation = function(trackIndex, mixDuration, delay) {
    if (delay <= 0)
        delay -= mixDuration;
    var entry = this.addAnimation(trackIndex, spine.animation.AnimationState.emptyAnimation, false, delay);
    entry.mixDuration = mixDuration;
    entry.trackEnd = mixDuration;
    return entry
}
;
spine.animation.AnimationState.prototype.setEmptyAnimations = function(mixDuration) {
    var oldDrainDisabled = this.queue.drainDisabled;
    this.queue.drainDisabled = true;
    var n = this.tracks.length;
    for (var i = 0; i < n; i++) {
        var current = this.tracks[i];
        if (current != null)
            this.setEmptyAnimation(current.trackIndex, mixDuration)
    }
    this.queue.drainDisabled = oldDrainDisabled;
    this.queue.drain()
}
;
spine.animation.AnimationState.prototype.expandToIndex = function(index) {
    if (index < this.tracks.length)
        return this.tracks[index];
    this.tracks.length = index + 1;
    return null
}
;
spine.animation.AnimationState.prototype.trackEntry = function(trackIndex, animation, loop, last) {
    var entry = org.apache.royale.utils.Language.as(this.trackEntryPool.obtain(), spine.animation.TrackEntry, true);
    entry.trackIndex = trackIndex;
    entry.animation = animation;
    entry.loop = loop;
    entry.eventThreshold = 0;
    entry.attachmentThreshold = 0;
    entry.drawOrderThreshold = 0;
    entry.animationStart = 0;
    entry.animationEnd = animation.duration;
    entry.animationLast = -1;
    entry.nextAnimationLast = -1;
    entry.delay = 0;
    entry.trackTime = 0;
    entry.trackLast = -1;
    entry.nextTrackLast = -1;
    entry.trackEnd = 2147483648;
    entry.timeScale = 1;
    entry.alpha = 1;
    entry.interruptAlpha = 1;
    entry.mixTime = 0;
    entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation, animation);
    return entry
}
;
spine.animation.AnimationState.prototype.disposeNext = function(entry) {
    var next = entry.next;
    while (next != null) {
        this.queue.dispose(next);
        next = next.next
    }
    entry.next = null
}
;
spine.animation.AnimationState.prototype._animationsChanged = function() {
    this.animationsChanged = false;
    var propertyIDs = this.propertyIDs = new openfl.utils.Dictionary;
    var mixingTo = this.mixingTo;
    var n = this.tracks.length;
    for (var i = 0; i < n; i++) {
        var entry = this.tracks[i];
        if (entry != null)
            entry.setTimelineData(null, mixingTo, propertyIDs)
    }
}
;
spine.animation.AnimationState.prototype.getCurrent = function(trackIndex) {
    if (trackIndex >= this.tracks.length)
        return null;
    return this.tracks[trackIndex]
}
;
spine.animation.AnimationState.prototype.clearListeners = function() {
    this.onStart.listeners.length = 0;
    this.onInterrupt.listeners.length = 0;
    this.onEnd.listeners.length = 0;
    this.onDispose.listeners.length = 0;
    this.onComplete.listeners.length = 0;
    this.onEvent.listeners.length = 0
}
;
spine.animation.AnimationState.prototype.clearListenerNotifications = function() {
    this.queue.clear()
}
;
spine.animation.AnimationState.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AnimationState',
        qName: 'spine.animation.AnimationState',
        kind: 'class'
    }]
};
spine.animation.AnimationState.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '|SUBSEQUENT': {
                    type: 'int'
                },
                '|FIRST': {
                    type: 'int'
                },
                '|DIP': {
                    type: 'int'
                },
                '|DIP_MIX': {
                    type: 'int'
                },
                'data': {
                    type: 'spine.animation.AnimationStateData'
                },
                'tracks': {
                    type: 'Vector.\x3cspine.animation.TrackEntry\x3e'
                },
                'onStart': {
                    type: 'spine.animation.Listeners'
                },
                'onInterrupt': {
                    type: 'spine.animation.Listeners'
                },
                'onEnd': {
                    type: 'spine.animation.Listeners'
                },
                'onDispose': {
                    type: 'spine.animation.Listeners'
                },
                'onComplete': {
                    type: 'spine.animation.Listeners'
                },
                'onEvent': {
                    type: 'spine.animation.Listeners'
                },
                'timeScale': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AnimationState': {
                    type: '',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.animation.AnimationStateData',
                            optional: false
                        }]
                    }
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'Boolean',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }]
                    }
                },
                'clearTracks': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState'
                },
                'clearTrack': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'setAnimationByName': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'setAnimation': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.animation.Animation',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }]
                    }
                },
                'addAnimationByName': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'addAnimation': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.animation.Animation',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Boolean',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'setEmptyAnimation': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'addEmptyAnimation': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'setEmptyAnimations': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'getCurrent': {
                    type: 'spine.animation.TrackEntry',
                    declaredBy: 'spine.animation.AnimationState',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'clearListeners': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState'
                },
                'clearListenerNotifications': {
                    type: 'void',
                    declaredBy: 'spine.animation.AnimationState'
                }
            }
        }
    }
}
;
spine.Pool = function(instantiator) {
    this.items = org.apache.royale.utils.Language.Vector();
    this.instantiator = instantiator
}
;
goog.exportSymbol('spine.Pool', spine.Pool);
spine.Pool.prototype.items;
spine.Pool.prototype.instantiator;
spine.Pool.prototype.obtain = function() {
    return this.items.length > 0 ? this.items.pop() : this.instantiator()
}
;
spine.Pool.prototype.free = function(item) {
    if (org.apache.royale.utils.Language.is(item, spine.Poolable))
        org.apache.royale.utils.Language.as(item, spine.Poolable, true).reset();
    this.items.push(item)
}
;
spine.Pool.prototype.freeAll = function(items) {
    for (var i = 0; i < items.length; i++)
        this.free(items[i])
}
;
spine.Pool.prototype.clear = function() {
    this.items.length = 0
}
;
spine.Pool.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Pool',
        qName: 'spine.Pool',
        kind: 'class'
    }]
};
spine.Pool.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'Pool': {
                    type: '',
                    declaredBy: 'spine.Pool',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Function',
                            optional: false
                        }]
                    }
                },
                'obtain': {
                    type: 'Object',
                    declaredBy: 'spine.Pool'
                },
                'free': {
                    type: 'void',
                    declaredBy: 'spine.Pool',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Object',
                            optional: false
                        }]
                    }
                },
                'freeAll': {
                    type: 'void',
                    declaredBy: 'spine.Pool',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '__AS3__.vec.Vector',
                            optional: false
                        }]
                    }
                },
                'clear': {
                    type: 'void',
                    declaredBy: 'spine.Pool'
                }
            }
        }
    }
}
;
spine.SkeletonJson = function(attachmentLoader) {
    attachmentLoader = typeof attachmentLoader !== 'undefined' ? attachmentLoader : null;
    this.linkedMeshes = org.apache.royale.utils.Language.Vector();
    this.attachmentLoader = attachmentLoader
}
;
goog.exportSymbol('spine.SkeletonJson', spine.SkeletonJson);
spine.SkeletonJson.prototype.attachmentLoader;
spine.SkeletonJson.prototype.scale = 1;
spine.SkeletonJson.prototype.linkedMeshes;
spine.SkeletonJson.prototype.readSkeletonData = function(object, name) {
    name = typeof name !== 'undefined' ? name : null;
    if (object == null)
        throw new openfl.errors.ArgumentError('object cannot be null.');
    var root;
    if (org.apache.royale.utils.Language.is(object, String))
        root = JSON.parse(String(object));
    else if (org.apache.royale.utils.Language.is(object, openfl.utils.ByteArray))
        root = JSON.parse(org.apache.royale.utils.Language.as(object, openfl.utils.ByteArray, true).readUTFBytes(org.apache.royale.utils.Language.as(object, openfl.utils.ByteArray, true).length));
    else if (org.apache.royale.utils.Language.is(object, Object))
        root = object;
    else
        throw new openfl.errors.ArgumentError('object must be a String, ByteArray or Object.');
    var skeletonData = new spine.SkeletonData;
    skeletonData.name = name;
    var skeletonMap = root['skeleton'];
    if (skeletonMap) {
        skeletonData.hash = org.apache.royale.utils.Language.string(skeletonMap['hash']);
        skeletonData.version = org.apache.royale.utils.Language.string(skeletonMap['spine']);
        skeletonData.width = Number(skeletonMap['width'] || 0);
        skeletonData.height = Number(skeletonMap['height'] || 0);
        skeletonData.fps = Number(skeletonMap['fps'] || 0);
        skeletonData.imagesPath = org.apache.royale.utils.Language.string(skeletonMap['images'])
    }
    var boneData;
    var foreachiter0_target = root['bones'];
    for (var foreachiter0 in foreachiter0_target) {
        var boneMap = foreachiter0_target[foreachiter0];
        {
            var parent = null;
            var parentName = org.apache.royale.utils.Language.string(boneMap['parent']);
            if (parentName) {
                parent = skeletonData.findBone(parentName);
                if (!parent)
                    throw new Error('Parent bone not found: ' + parentName);
            }
            boneData = new spine.BoneData(skeletonData.bones.length,boneMap['name'],parent);
            boneData.length = Number(boneMap['length'] || 0) * this.scale;
            boneData.x = Number(boneMap['x'] || 0) * this.scale;
            boneData.y = Number(boneMap['y'] || 0) * this.scale;
            boneData.rotation = Number(boneMap['rotation'] || 0);
            boneData.scaleX = Number(boneMap.hasOwnProperty('scaleX') ? boneMap['scaleX'] : 1);
            boneData.scaleY = Number(boneMap.hasOwnProperty('scaleY') ? boneMap['scaleY'] : 1);
            boneData.shearX = Number(boneMap['shearX'] || 0);
            boneData.shearY = Number(boneMap['shearY'] || 0);
            boneData.transformMode = spine.TransformMode[boneMap['transform'] || 'normal'];
            skeletonData.bones.push(boneData)
        }
    }
    var foreachiter1_target = root['slots'];
    for (var foreachiter1 in foreachiter1_target) {
        var slotMap = foreachiter1_target[foreachiter1];
        {
            var slotName = org.apache.royale.utils.Language.string(slotMap['name']);
            var boneName = org.apache.royale.utils.Language.string(slotMap['bone']);
            boneData = skeletonData.findBone(boneName);
            if (!boneData)
                throw new Error('Slot bone not found: ' + boneName);
            var slotData = new spine.SlotData(skeletonData.slots.length,slotName,boneData);
            var color = org.apache.royale.utils.Language.string(slotMap['color']);
            if (color)
                slotData.color.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
            var dark = org.apache.royale.utils.Language.string(slotMap['dark']);
            if (dark)
                slotData.darkColor = new spine.Color(spine.SkeletonJson.toColor(dark, 0),spine.SkeletonJson.toColor(dark, 1),spine.SkeletonJson.toColor(dark, 2),0);
            slotData.attachmentName = org.apache.royale.utils.Language.string(slotMap['attachment']);
            slotData.blendMode = spine.BlendMode[slotMap['blend'] || 'normal'];
            skeletonData.slots.push(slotData)
        }
    }
    var foreachiter2_target = root['ik'];
    for (var foreachiter2 in foreachiter2_target) {
        var constraintMap = foreachiter2_target[foreachiter2];
        {
            var ikConstraintData = new spine.IkConstraintData(constraintMap['name']);
            ikConstraintData.order = Number(constraintMap['order'] || 0);
            var foreachiter3_target = constraintMap['bones'];
            for (var foreachiter3 in foreachiter3_target) {
                boneName = foreachiter3_target[foreachiter3];
                {
                    var bone = skeletonData.findBone(boneName);
                    if (!bone)
                        throw new Error('IK constraint bone not found: ' + boneName);
                    ikConstraintData.bones.push(bone)
                }
            }
            ikConstraintData.target = skeletonData.findBone(constraintMap['target']);
            if (!ikConstraintData.target)
                throw new Error('Target bone not found: ' + constraintMap['target']);
            ikConstraintData.bendDirection = !constraintMap.hasOwnProperty('bendPositive') || constraintMap['bendPositive'] ? 1 : -1;
            ikConstraintData.mix = Number(constraintMap.hasOwnProperty('mix') ? constraintMap['mix'] : 1);
            skeletonData.ikConstraints.push(ikConstraintData)
        }
    }
    var foreachiter4_target = root['transform'];
    for (var foreachiter4 in foreachiter4_target) {
        constraintMap = foreachiter4_target[foreachiter4];
        {
            var transformConstraintData = new spine.TransformConstraintData(constraintMap['name']);
            transformConstraintData.order = Number(constraintMap['order'] || 0);
            var foreachiter5_target = constraintMap['bones'];
            for (var foreachiter5 in foreachiter5_target) {
                boneName = foreachiter5_target[foreachiter5];
                {
                    bone = skeletonData.findBone(boneName);
                    if (!bone)
                        throw new Error('Transform constraint bone not found: ' + boneName);
                    transformConstraintData.bones.push(bone)
                }
            }
            transformConstraintData.target = skeletonData.findBone(constraintMap['target']);
            if (!transformConstraintData.target)
                throw new Error('Target bone not found: ' + constraintMap['target']);
            transformConstraintData.local = constraintMap.hasOwnProperty('local') ? Boolean(constraintMap['local']) : false;
            transformConstraintData.relative = constraintMap.hasOwnProperty('relative') ? Boolean(constraintMap['relative']) : false;
            transformConstraintData.offsetRotation = Number(constraintMap['rotation'] || 0);
            transformConstraintData.offsetX = Number(constraintMap['x'] || 0) * this.scale;
            transformConstraintData.offsetY = Number(constraintMap['y'] || 0) * this.scale;
            transformConstraintData.offsetScaleX = Number(constraintMap['scaleX'] || 0);
            transformConstraintData.offsetScaleY = Number(constraintMap['scaleY'] || 0);
            transformConstraintData.offsetShearY = Number(constraintMap['shearY'] || 0);
            transformConstraintData.rotateMix = Number(constraintMap.hasOwnProperty('rotateMix') ? constraintMap['rotateMix'] : 1);
            transformConstraintData.translateMix = Number(constraintMap.hasOwnProperty('translateMix') ? constraintMap['translateMix'] : 1);
            transformConstraintData.scaleMix = Number(constraintMap.hasOwnProperty('scaleMix') ? constraintMap['scaleMix'] : 1);
            transformConstraintData.shearMix = Number(constraintMap.hasOwnProperty('shearMix') ? constraintMap['shearMix'] : 1);
            skeletonData.transformConstraints.push(transformConstraintData)
        }
    }
    var foreachiter6_target = root['path'];
    for (var foreachiter6 in foreachiter6_target) {
        constraintMap = foreachiter6_target[foreachiter6];
        {
            var pathConstraintData = new spine.PathConstraintData(constraintMap['name']);
            pathConstraintData.order = Number(constraintMap['order'] || 0);
            var foreachiter7_target = constraintMap['bones'];
            for (var foreachiter7 in foreachiter7_target) {
                boneName = foreachiter7_target[foreachiter7];
                {
                    bone = skeletonData.findBone(boneName);
                    if (!bone)
                        throw new Error('Path constraint bone not found: ' + boneName);
                    pathConstraintData.bones.push(bone)
                }
            }
            pathConstraintData.target = skeletonData.findSlot(constraintMap['target']);
            if (!pathConstraintData.target)
                throw new Error('Path target slot not found: ' + constraintMap['target']);
            pathConstraintData.positionMode = spine.PositionMode[constraintMap['positionMode'] || 'percent'];
            pathConstraintData.spacingMode = spine.SpacingMode[constraintMap['spacingMode'] || 'length'];
            pathConstraintData.rotateMode = spine.RotateMode[constraintMap['rotateMode'] || 'tangent'];
            pathConstraintData.offsetRotation = Number(constraintMap['rotation'] || 0);
            pathConstraintData.position = Number(constraintMap['position'] || 0);
            if (pathConstraintData.positionMode == spine.PositionMode.fixed)
                pathConstraintData.position *= this.scale;
            pathConstraintData.spacing = Number(constraintMap['spacing'] || 0);
            if (pathConstraintData.spacingMode == spine.SpacingMode._length || pathConstraintData.spacingMode == spine.SpacingMode.fixed)
                pathConstraintData.spacing *= this.scale;
            pathConstraintData.rotateMix = Number(constraintMap.hasOwnProperty('rotateMix') ? constraintMap['rotateMix'] : 1);
            pathConstraintData.translateMix = Number(constraintMap.hasOwnProperty('translateMix') ? constraintMap['translateMix'] : 1);
            skeletonData.pathConstraints.push(pathConstraintData)
        }
    }
    var skins = root['skins'];
    for (var skinName in skins) {
        var skinMap = skins[skinName];
        var skin = new spine.Skin(skinName);
        for (slotName in skinMap) {
            var slotIndex = skeletonData.findSlotIndex(slotName);
            var slotEntry = skinMap[slotName];
            for (var attachmentName in slotEntry) {
                var attachment = this.readAttachment(slotEntry[attachmentName], skin, slotIndex, attachmentName, skeletonData);
                if (attachment != null)
                    skin.addAttachment(slotIndex, attachmentName, attachment)
            }
        }
        skeletonData.skins[skeletonData.skins.length] = skin;
        if (skin.name == 'default')
            skeletonData.defaultSkin = skin
    }
    var linkedMeshes = this.linkedMeshes;
    var foreachiter8_target = linkedMeshes;
    for (var foreachiter8 in foreachiter8_target) {
        var linkedMesh = foreachiter8_target[foreachiter8];
        {
            var parentSkin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
            if (!parentSkin)
                throw new Error('Skin not found: ' + linkedMesh.skin);
            var parentMesh = parentSkin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);
            if (!parentMesh)
                throw new Error('Parent mesh not found: ' + linkedMesh.parent);
            linkedMesh.mesh.parentMesh = org.apache.royale.utils.Language.as(parentMesh, spine.attachments.MeshAttachment, true);
            linkedMesh.mesh.updateUVs()
        }
    }
    linkedMeshes.length = 0;
    var events = root['events'];
    if (events)
        for (var eventName in events) {
            var eventMap = events[eventName];
            var eventData = new spine.EventData(eventName);
            eventData.intValue = Number(eventMap['int'] || 0);
            eventData.floatValue = Number(eventMap['float'] || 0);
            eventData.stringValue = org.apache.royale.utils.Language.string(eventMap['string'] || '');
            skeletonData.events.push(eventData)
        }
    var animations = root['animations'];
    for (var animationName in animations)
        this.readAnimation(animations[animationName], animationName, skeletonData);
    return skeletonData
}
;
spine.SkeletonJson.prototype.readAttachment = function(map, skin, slotIndex, name, skeletonData) {
    name = org.apache.royale.utils.Language.string(map['name'] || name);
    var typeName = org.apache.royale.utils.Language.string(map['type'] || 'region');
    var type = spine.attachments.AttachmentType[typeName];
    var scale = this.scale;
    var color;
    switch (type) {
    case spine.attachments.AttachmentType.region:
        var region = this.attachmentLoader.newRegionAttachment(skin, name, map['path'] || name);
        if (!region)
            return null;
        region.path = org.apache.royale.utils.Language.string(map['path'] || name);
        region.x = Number(map['x'] || 0) * scale;
        region.y = Number(map['y'] || 0) * scale;
        region.scaleX = Number(map.hasOwnProperty('scaleX') ? map['scaleX'] : 1);
        region.scaleY = Number(map.hasOwnProperty('scaleY') ? map['scaleY'] : 1);
        region.rotation = Number(map['rotation'] || 0);
        region.width = Number(map['width'] || 0) * scale;
        region.height = Number(map['height'] || 0) * scale;
        color = org.apache.royale.utils.Language.string(map['color']);
        if (color)
            region.color.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
        region.updateOffset();
        return region;
    case spine.attachments.AttachmentType.mesh:
    case spine.attachments.AttachmentType.linkedmesh:
        var mesh = this.attachmentLoader.newMeshAttachment(skin, name, map['path'] || name);
        if (!mesh)
            return null;
        mesh.path = org.apache.royale.utils.Language.string(map['path'] || name);
        color = org.apache.royale.utils.Language.string(map['color']);
        if (color)
            mesh.color.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
        mesh.width = Number(map['width'] || 0) * scale;
        mesh.height = Number(map['height'] || 0) * scale;
        if (map['parent']) {
            mesh.inheritDeform = map.hasOwnProperty('deform') ? Boolean(map['deform']) : true;
            this.linkedMeshes.push(new spine.SkeletonJson.LinkedMesh(mesh,map['skin'],slotIndex,map['parent']));
            return mesh
        }
        var uvs = spine.SkeletonJson.getFloatArray(map, 'uvs', 1);
        this.readVertices(map, mesh, uvs.length);
        mesh.triangles = spine.SkeletonJson.getUintArray(map, 'triangles');
        mesh.regionUVs = uvs;
        mesh.updateUVs();
        mesh.hullLength = org.apache.royale.utils.Language._int(map['hull'] || 0) * 2;
        if (map['edges'])
            mesh.edges = spine.SkeletonJson.getIntArray(map, 'edges');
        return mesh;
    case spine.attachments.AttachmentType.boundingbox:
        var box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
        if (!box)
            return null;
        this.readVertices(map, box, org.apache.royale.utils.Language._int(map['vertexCount']) << 1);
        return box;
    case spine.attachments.AttachmentType.path:
        var path = this.attachmentLoader.newPathAttachment(skin, name);
        if (!path)
            return null;
        path.closed = map.hasOwnProperty('closed') ? Boolean(map['closed']) : false;
        path.constantSpeed = map.hasOwnProperty('constantSpeed') ? Boolean(map['constantSpeed']) : true;
        var vertexCount = org.apache.royale.utils.Language._int(map['vertexCount']);
        this.readVertices(map, path, vertexCount << 1);
        var lengths = org.apache.royale.utils.Language.Vector();
        var foreachiter9_target = map['lengths'];
        for (var foreachiter9 in foreachiter9_target) {
            var curves = foreachiter9_target[foreachiter9];
            {
                lengths.push(Number(curves) * scale)
            }
        }
        path.lengths = lengths;
        return path;
    case spine.attachments.AttachmentType.point:
        var point = this.attachmentLoader.newPointAttachment(skin, name);
        if (!point)
            return null;
        point.x = map.hasOwnProperty('x') ? Number(map['x']) * scale : 0;
        point.y = map.hasOwnProperty('y') ? Number(map['y']) * scale : 0;
        point.rotation = map.hasOwnProperty('rotation') ? Number(map['rotation']) : 0;
        color = org.apache.royale.utils.Language.string(map['color']);
        if (color)
            point.color.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
        return point;
    case spine.attachments.AttachmentType.clipping:
        var clip = this.attachmentLoader.newClippingAttachment(skin, name);
        if (!clip)
            return null;
        var end = org.apache.royale.utils.Language.string(map['end']);
        if (end != null) {
            var slot = skeletonData.findSlot(end);
            if (slot == null)
                throw new Error('Clipping end slot not found: ' + end);
            clip.endSlot = slot
        }
        vertexCount = org.apache.royale.utils.Language._int(map['vertexCount']);
        this.readVertices(map, clip, vertexCount << 1);
        color = org.apache.royale.utils.Language.string(map['color']);
        if (color)
            clip.color.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
        return clip
    }
    return null
}
;
spine.SkeletonJson.prototype.readVertices = function(map, attachment, verticesLength) {
    attachment.worldVerticesLength = verticesLength;
    var vertices = spine.SkeletonJson.getFloatArray(map, 'vertices', 1);
    if (verticesLength == vertices.length) {
        if (this.scale != 1) {
            var n = vertices.length;
            for (var i = 0; i < n; i++)
                vertices[i] *= this.scale
        }
        attachment.vertices = vertices;
        return
    }
    var weights = org.apache.royale.utils.Language.Vector(verticesLength * 3 * 3, 'Number');
    weights.length = 0;
    var bones = org.apache.royale.utils.Language.Vector(verticesLength * 3, 'int');
    bones.length = 0;
    var _n = vertices.length;
    for (i = 0; i < _n; i++) {
        var boneCount = org.apache.royale.utils.Language._int(vertices[i++]);
        bones.push(boneCount);
        for (var nn = i + boneCount * 4; i < nn; i += 4) {
            bones.push(org.apache.royale.utils.Language._int(vertices[i]));
            weights.push(vertices[i + 1] * this.scale);
            weights.push(vertices[i + 2] * this.scale);
            weights.push(vertices[i + 3])
        }
    }
    attachment.bones = bones;
    attachment.vertices = weights
}
;
spine.SkeletonJson.prototype.readAnimation = function(map, name, skeletonData) {
    var scale = this.scale;
    var timelines = org.apache.royale.utils.Language.Vector();
    var duration = 0;
    var slotMap, slotIndex = 0, slotName;
    var values, valueMap, frameIndex = 0;
    var i = 0;
    var timelineName;
    var slots = map['slots'];
    for (slotName in slots) {
        slotMap = slots[slotName];
        slotIndex = skeletonData.findSlotIndex(slotName);
        for (timelineName in slotMap) {
            values = slotMap[timelineName];
            if (timelineName == 'attachment') {
                var attachmentTimeline = new spine.animation.AttachmentTimeline(values.length);
                attachmentTimeline.slotIndex = slotIndex;
                frameIndex = 0;
                var foreachiter10_target = values;
                for (var foreachiter10 in foreachiter10_target) {
                    valueMap = foreachiter10_target[foreachiter10];
                    attachmentTimeline.setFrame(frameIndex++, valueMap['time'], valueMap['name'])
                }
                timelines[timelines.length] = attachmentTimeline;
                duration = Math.max(duration, attachmentTimeline.frames[attachmentTimeline.frameCount - 1])
            } else if (timelineName == 'color') {
                var colorTimeline = new spine.animation.ColorTimeline(values.length);
                colorTimeline.slotIndex = slotIndex;
                frameIndex = 0;
                var foreachiter11_target = values;
                for (var foreachiter11 in foreachiter11_target) {
                    valueMap = foreachiter11_target[foreachiter11];
                    {
                        var color = org.apache.royale.utils.Language.string(valueMap['color']);
                        var r = spine.SkeletonJson.toColor(color, 0);
                        var g = spine.SkeletonJson.toColor(color, 1);
                        var b = spine.SkeletonJson.toColor(color, 2);
                        var a = spine.SkeletonJson.toColor(color, 3);
                        colorTimeline.setFrame(frameIndex, valueMap['time'], r, g, b, a);
                        spine.SkeletonJson.readCurve(valueMap, colorTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines[timelines.length] = colorTimeline;
                duration = Math.max(duration, colorTimeline.frames[(colorTimeline.frameCount - 1) * spine.animation.ColorTimeline.ENTRIES])
            } else if (timelineName == 'twoColor') {
                var twoColorTimeline = new spine.animation.TwoColorTimeline(values.length);
                twoColorTimeline.slotIndex = slotIndex;
                frameIndex = 0;
                var foreachiter12_target = values;
                for (var foreachiter12 in foreachiter12_target) {
                    valueMap = foreachiter12_target[foreachiter12];
                    {
                        color = org.apache.royale.utils.Language.string(valueMap['light']);
                        var darkColor = org.apache.royale.utils.Language.string(valueMap['dark']);
                        var light = new spine.Color(0,0,0,0);
                        var dark = new spine.Color(0,0,0,0);
                        light.setFrom(spine.SkeletonJson.toColor(color, 0), spine.SkeletonJson.toColor(color, 1), spine.SkeletonJson.toColor(color, 2), spine.SkeletonJson.toColor(color, 3));
                        dark.setFrom(spine.SkeletonJson.toColor(darkColor, 0), spine.SkeletonJson.toColor(darkColor, 1), spine.SkeletonJson.toColor(darkColor, 2), spine.SkeletonJson.toColor(darkColor, 3));
                        twoColorTimeline.setFrame(frameIndex, valueMap['time'], light.r, light.g, light.b, light.a, dark.r, dark.g, dark.b);
                        spine.SkeletonJson.readCurve(valueMap, twoColorTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines[timelines.length] = twoColorTimeline;
                duration = Math.max(duration, twoColorTimeline.frames[(twoColorTimeline.frameCount - 1) * spine.animation.TwoColorTimeline.ENTRIES])
            } else
                throw new Error('Invalid timeline type for a slot: ' + timelineName + ' (' + slotName + ')');
        }
    }
    var bones = map['bones'];
    for (var boneName in bones) {
        var boneIndex = skeletonData.findBoneIndex(boneName);
        if (boneIndex == -1)
            throw new Error('Bone not found: ' + boneName);
        var boneMap = bones[boneName];
        for (timelineName in boneMap) {
            values = boneMap[timelineName];
            if (timelineName == 'rotate') {
                var rotateTimeline = new spine.animation.RotateTimeline(values.length);
                rotateTimeline.boneIndex = boneIndex;
                frameIndex = 0;
                var foreachiter13_target = values;
                for (var foreachiter13 in foreachiter13_target) {
                    valueMap = foreachiter13_target[foreachiter13];
                    {
                        rotateTimeline.setFrame(frameIndex, valueMap['time'], valueMap['angle']);
                        spine.SkeletonJson.readCurve(valueMap, rotateTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines[timelines.length] = rotateTimeline;
                duration = Math.max(duration, rotateTimeline.frames[(rotateTimeline.frameCount - 1) * spine.animation.RotateTimeline.ENTRIES])
            } else if (timelineName == 'translate' || timelineName == 'scale' || timelineName == 'shear') {
                var translateTimeline;
                var timelineScale = 1;
                if (timelineName == 'scale')
                    translateTimeline = new spine.animation.ScaleTimeline(values.length);
                else if (timelineName == 'shear')
                    translateTimeline = new spine.animation.ShearTimeline(values.length);
                else {
                    translateTimeline = new spine.animation.TranslateTimeline(values.length);
                    timelineScale = scale
                }
                translateTimeline.boneIndex = boneIndex;
                frameIndex = 0;
                var foreachiter14_target = values;
                for (var foreachiter14 in foreachiter14_target) {
                    valueMap = foreachiter14_target[foreachiter14];
                    {
                        var x = Number(valueMap['x'] || 0) * timelineScale;
                        var y = Number(valueMap['y'] || 0) * timelineScale;
                        translateTimeline.setFrame(frameIndex, valueMap['time'], x, y);
                        spine.SkeletonJson.readCurve(valueMap, translateTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines[timelines.length] = translateTimeline;
                duration = Math.max(duration, translateTimeline.frames[(translateTimeline.frameCount - 1) * spine.animation.TranslateTimeline.ENTRIES])
            } else
                throw new Error('Invalid timeline type for a bone: ' + timelineName + ' (' + boneName + ')');
        }
    }
    var ikMap = map['ik'];
    for (var ikConstraintName in ikMap) {
        var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);
        values = ikMap[ikConstraintName];
        var ikTimeline = new spine.animation.IkConstraintTimeline(values.length);
        ikTimeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);
        frameIndex = 0;
        var foreachiter15_target = values;
        for (var foreachiter15 in foreachiter15_target) {
            valueMap = foreachiter15_target[foreachiter15];
            {
                var mix = Number(valueMap.hasOwnProperty('mix') ? valueMap['mix'] : 1);
                var bendDirection = !valueMap.hasOwnProperty('bendPositive') || valueMap['bendPositive'] ? 1 : -1;
                ikTimeline.setFrame(frameIndex, valueMap['time'], mix, bendDirection);
                spine.SkeletonJson.readCurve(valueMap, ikTimeline, frameIndex);
                frameIndex++
            }
        }
        timelines[timelines.length] = ikTimeline;
        duration = Math.max(duration, ikTimeline.frames[(ikTimeline.frameCount - 1) * spine.animation.IkConstraintTimeline.ENTRIES])
    }
    var transformMap = map['transform'];
    for (var transformName in transformMap) {
        var transformConstraint = skeletonData.findTransformConstraint(transformName);
        values = transformMap[transformName];
        var transformTimeline = new spine.animation.TransformConstraintTimeline(values.length);
        transformTimeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(transformConstraint);
        frameIndex = 0;
        var foreachiter16_target = values;
        for (var foreachiter16 in foreachiter16_target) {
            valueMap = foreachiter16_target[foreachiter16];
            {
                var rotateMix = Number(valueMap.hasOwnProperty('rotateMix') ? valueMap['rotateMix'] : 1);
                var translateMix = Number(valueMap.hasOwnProperty('translateMix') ? valueMap['translateMix'] : 1);
                var scaleMix = Number(valueMap.hasOwnProperty('scaleMix') ? valueMap['scaleMix'] : 1);
                var shearMix = Number(valueMap.hasOwnProperty('shearMix') ? valueMap['shearMix'] : 1);
                transformTimeline.setFrame(frameIndex, valueMap['time'], rotateMix, translateMix, scaleMix, shearMix);
                spine.SkeletonJson.readCurve(valueMap, transformTimeline, frameIndex);
                frameIndex++
            }
        }
        timelines.push(transformTimeline);
        duration = Math.max(duration, transformTimeline.frames[(transformTimeline.frameCount - 1) * spine.animation.TransformConstraintTimeline.ENTRIES])
    }
    var paths = map['paths'];
    for (var pathName in paths) {
        var index = skeletonData.findPathConstraintIndex(pathName);
        if (index == -1)
            throw new Error('Path constraint not found: ' + pathName);
        var data = skeletonData.pathConstraints[index];
        var pathMap = paths[pathName];
        for (timelineName in pathMap) {
            values = pathMap[timelineName];
            if (timelineName == 'position' || timelineName == 'spacing') {
                var pathTimeline;
                timelineScale = 1;
                if (timelineName == 'spacing') {
                    pathTimeline = new spine.animation.PathConstraintSpacingTimeline(values.length);
                    if (data.spacingMode == spine.SpacingMode._length || data.spacingMode == spine.SpacingMode.fixed)
                        timelineScale = scale
                } else {
                    pathTimeline = new spine.animation.PathConstraintPositionTimeline(values.length);
                    if (data.positionMode == spine.PositionMode.fixed)
                        timelineScale = scale
                }
                pathTimeline.pathConstraintIndex = index;
                frameIndex = 0;
                var foreachiter17_target = values;
                for (var foreachiter17 in foreachiter17_target) {
                    valueMap = foreachiter17_target[foreachiter17];
                    {
                        var value = Number(valueMap[timelineName] || 0);
                        pathTimeline.setFrame(frameIndex, valueMap['time'], value * timelineScale);
                        spine.SkeletonJson.readCurve(valueMap, pathTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines.push(pathTimeline);
                duration = Math.max(duration, pathTimeline.frames[(pathTimeline.frameCount - 1) * spine.animation.PathConstraintPositionTimeline.ENTRIES])
            } else if (timelineName == 'mix') {
                var pathMixTimeline = new spine.animation.PathConstraintMixTimeline(values.length);
                pathMixTimeline.pathConstraintIndex = index;
                frameIndex = 0;
                var foreachiter18_target = values;
                for (var foreachiter18 in foreachiter18_target) {
                    valueMap = foreachiter18_target[foreachiter18];
                    {
                        rotateMix = Number(valueMap.hasOwnProperty('rotateMix') ? valueMap['rotateMix'] : 1);
                        translateMix = Number(valueMap.hasOwnProperty('translateMix') ? valueMap['translateMix'] : 1);
                        pathMixTimeline.setFrame(frameIndex, valueMap['time'], rotateMix, translateMix);
                        spine.SkeletonJson.readCurve(valueMap, pathMixTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines.push(pathMixTimeline);
                duration = Math.max(duration, pathMixTimeline.frames[(pathMixTimeline.frameCount - 1) * spine.animation.PathConstraintMixTimeline.ENTRIES])
            }
        }
    }
    var deformMap = map['deform'];
    for (var skinName in deformMap) {
        var skin = skeletonData.findSkin(skinName);
        slotMap = deformMap[skinName];
        for (slotName in slotMap) {
            slotIndex = skeletonData.findSlotIndex(slotName);
            var timelineMap = slotMap[slotName];
            for (timelineName in timelineMap) {
                values = timelineMap[timelineName];
                var attachment = org.apache.royale.utils.Language.as(skin.getAttachment(slotIndex, timelineName), spine.attachments.VertexAttachment);
                if (attachment == null)
                    throw new Error('Deform attachment not found: ' + timelineName);
                var weighted = attachment.bones != null;
                var vertices = attachment.vertices;
                var deformLength = Number(weighted ? vertices.length / 3 * 2 : vertices.length);
                var deformTimeline = new spine.animation.DeformTimeline(values.length);
                deformTimeline.slotIndex = slotIndex;
                deformTimeline.attachment = attachment;
                frameIndex = 0;
                var foreachiter19_target = values;
                for (var foreachiter19 in foreachiter19_target) {
                    valueMap = foreachiter19_target[foreachiter19];
                    {
                        var deform;
                        var verticesValue = valueMap['vertices'];
                        if (verticesValue == null)
                            deform = weighted ? org.apache.royale.utils.Language.Vector(deformLength, 'Number') : vertices;
                        else {
                            deform = org.apache.royale.utils.Language.Vector(deformLength, 'Number');
                            var start = Number(valueMap['offset'] || 0);
                            var temp = spine.SkeletonJson.getFloatArray(valueMap, 'vertices', 1);
                            for (i = 0; i < temp.length; i++)
                                deform[start + i] = temp[i];
                            if (scale != 1) {
                                var n = 0;
                                for (i = start,
                                n = i + temp.length; i < n; i++)
                                    deform[i] *= scale
                            }
                            if (!weighted)
                                for (i = 0; i < deformLength; i++)
                                    deform[i] += vertices[i]
                        }
                        deformTimeline.setFrame(frameIndex, valueMap['time'], deform);
                        spine.SkeletonJson.readCurve(valueMap, deformTimeline, frameIndex);
                        frameIndex++
                    }
                }
                timelines[timelines.length] = deformTimeline;
                duration = Math.max(duration, deformTimeline.frames[deformTimeline.frameCount - 1])
            }
        }
    }
    var drawOrderValues = map['drawOrder'];
    if (!drawOrderValues)
        drawOrderValues = map['draworder'];
    if (drawOrderValues) {
        var drawOrderTimeline = new spine.animation.DrawOrderTimeline(drawOrderValues.length);
        var slotCount = skeletonData.slots.length;
        frameIndex = 0;
        var foreachiter20_target = drawOrderValues;
        for (var foreachiter20 in foreachiter20_target) {
            var drawOrderMap = foreachiter20_target[foreachiter20];
            {
                var drawOrder = null;
                if (drawOrderMap['offsets']) {
                    drawOrder = org.apache.royale.utils.Language.Vector(slotCount, 'int');
                    for (i = slotCount - 1; i >= 0; i--)
                        drawOrder[i] = -1;
                    var offsets = drawOrderMap['offsets'];
                    var unchanged = org.apache.royale.utils.Language.Vector(slotCount - offsets.length, 'int');
                    var originalIndex = 0
                      , unchangedIndex = 0;
                    var foreachiter21_target = offsets;
                    for (var foreachiter21 in foreachiter21_target) {
                        var offsetMap = foreachiter21_target[foreachiter21];
                        {
                            slotIndex = skeletonData.findSlotIndex(offsetMap['slot']);
                            if (slotIndex == -1)
                                throw new Error('Slot not found: ' + offsetMap['slot']);
                            while (originalIndex != slotIndex)
                                unchanged[unchangedIndex++] = originalIndex++;
                            drawOrder[originalIndex + offsetMap['offset']] = originalIndex++
                        }
                    }
                    while (originalIndex < slotCount)
                        unchanged[unchangedIndex++] = originalIndex++;
                    for (i = slotCount - 1; i >= 0; i--)
                        if (drawOrder[i] == -1)
                            drawOrder[i] = unchanged[--unchangedIndex]
                }
                drawOrderTimeline.setFrame(frameIndex++, drawOrderMap['time'], drawOrder)
            }
        }
        timelines[timelines.length] = drawOrderTimeline;
        duration = Math.max(duration, drawOrderTimeline.frames[drawOrderTimeline.frameCount - 1])
    }
    var eventsMap = map['events'];
    if (eventsMap) {
        var eventTimeline = new spine.animation.EventTimeline(eventsMap.length);
        frameIndex = 0;
        var foreachiter22_target = eventsMap;
        for (var foreachiter22 in foreachiter22_target) {
            var eventMap = foreachiter22_target[foreachiter22];
            {
                var eventData = skeletonData.findEvent(eventMap['name']);
                if (!eventData)
                    throw new Error('Event not found: ' + eventMap['name']);
                var event = new spine.Event(eventMap['time'],eventData);
                event.intValue = Number(eventMap.hasOwnProperty('int') ? eventMap['int'] : eventData.intValue);
                event.floatValue = Number(eventMap.hasOwnProperty('float') ? eventMap['float'] : eventData.floatValue);
                event.stringValue = org.apache.royale.utils.Language.string(eventMap.hasOwnProperty('string') ? eventMap['string'] : eventData.stringValue);
                eventTimeline.setFrame(frameIndex++, event)
            }
        }
        timelines[timelines.length] = eventTimeline;
        duration = Math.max(duration, eventTimeline.frames[eventTimeline.frameCount - 1])
    }
    skeletonData.animations[skeletonData.animations.length] = new spine.animation.Animation(name,timelines,duration)
}
;
spine.SkeletonJson.readCurve = function(map, timeline, frameIndex) {
    var curve = map['curve'];
    if (!curve)
        return;
    if (curve == 'stepped')
        timeline.setStepped(frameIndex);
    else if (org.apache.royale.utils.Language.is(curve, Array))
        timeline.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3])
}
;
spine.SkeletonJson.toColor = function(hexString, colorIndex) {
    if (hexString.length != 8 && hexString.length != 6)
        throw new openfl.errors.ArgumentError('Color hexidecimal length must be 6 or 8, received: ' + hexString);
    return parseInt(hexString.substring(colorIndex * 2, colorIndex * 2 + 2), 16) / 255
}
;
spine.SkeletonJson.getFloatArray = function(map, name, scale) {
    var list = map[name];
    var values = org.apache.royale.utils.Language.Vector(list.length, 'Number');
    var i = 0
      , n = list.length;
    if (scale == 1)
        for (i = 0; i < n; i++)
            values[i] = list[i];
    else
        for (i = 0; i < n; i++)
            values[i] = list[i] * scale;
    return values
}
;
spine.SkeletonJson.getIntArray = function(map, name) {
    var list = map[name];
    var values = org.apache.royale.utils.Language.Vector(list.length, 'int');
    var n = list.length;
    for (var i = 0; i < n; i++)
        values[i] = org.apache.royale.utils.Language._int(list[i]);
    return values
}
;
spine.SkeletonJson.getUintArray = function(map, name) {
    var list = map[name];
    var values = org.apache.royale.utils.Language.Vector(list.length, 'uint');
    var n = list.length;
    for (var i = 0; i < n; i++)
        values[i] = org.apache.royale.utils.Language._int(list[i]);
    return values
}
;
spine.SkeletonJson.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SkeletonJson',
        qName: 'spine.SkeletonJson',
        kind: 'class'
    }]
};
spine.SkeletonJson.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'attachmentLoader': {
                    type: 'spine.attachments.AttachmentLoader'
                },
                'scale': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'SkeletonJson': {
                    type: '',
                    declaredBy: 'spine.SkeletonJson',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.attachments.AttachmentLoader',
                            optional: true
                        }]
                    }
                },
                'readSkeletonData': {
                    type: 'spine.SkeletonData',
                    declaredBy: 'spine.SkeletonJson',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.SkeletonJson.LinkedMesh = function(mesh, skin, slotIndex, parent) {
    this.mesh = mesh;
    this.skin = skin;
    this.slotIndex = slotIndex;
    this.parent = parent
}
;
goog.exportSymbol('spine.SkeletonJson.LinkedMesh', spine.SkeletonJson.LinkedMesh);
spine.SkeletonJson.LinkedMesh.prototype.parent;
spine.SkeletonJson.LinkedMesh.prototype.skin;
spine.SkeletonJson.LinkedMesh.prototype.slotIndex = 0;
spine.SkeletonJson.LinkedMesh.prototype.mesh;
spine.SkeletonJson.LinkedMesh.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'LinkedMesh',
        qName: 'spine.SkeletonJson.LinkedMesh',
        kind: 'class'
    }]
};
spine.SkeletonJson.LinkedMesh.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'LinkedMesh': {
                    type: '',
                    declaredBy: 'spine.SkeletonJson.LinkedMesh',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.attachments.MeshAttachment',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }, {
                            index: 3,
                            type: 'int',
                            optional: false
                        }, {
                            index: 4,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.manager.ThroughObjectManager = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._adjstTargetPos = -51 / 2;
    this.RECT_POINT_MARSHMALLOW = []
}
;
goog.inherits(pigg.puzzle.manager.ThroughObjectManager, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.manager.ThroughObjectManager', pigg.puzzle.manager.ThroughObjectManager);
pigg.puzzle.manager.ThroughObjectManager.prototype._main;
pigg.puzzle.manager.ThroughObjectManager.prototype._gameMaterialContainer;
pigg.puzzle.manager.ThroughObjectManager.prototype._gameMenuThemeContainer;
pigg.puzzle.manager.ThroughObjectManager.prototype._menuEffectContainer;
pigg.puzzle.manager.ThroughObjectManager.prototype._gameView;
pigg.puzzle.manager.ThroughObjectManager.prototype._themeContainer;
pigg.puzzle.manager.ThroughObjectManager.prototype._adjstTargetPos;
pigg.puzzle.manager.ThroughObjectManager.prototype._throughTilemap;
pigg.puzzle.manager.ThroughObjectManager.prototype._throughTileset;
pigg.puzzle.manager.ThroughObjectManager.prototype._throughTileRect;
pigg.puzzle.manager.ThroughObjectManager.prototype._throughTile;
pigg.puzzle.manager.ThroughObjectManager.prototype._gmcScale = 1;
pigg.puzzle.manager.ThroughObjectManager.prototype._gmcX = 1;
pigg.puzzle.manager.ThroughObjectManager.prototype._gmcY = 1;
pigg.puzzle.manager.ThroughObjectManager.prototype.RECT_POINT_MARSHMALLOW;
pigg.puzzle.manager.ThroughObjectManager.prototype._moveTimeDelayCnt = 0;
pigg.puzzle.manager.ThroughObjectManager.prototype.ADJST_SHEET_X = 384;
pigg.puzzle.manager.ThroughObjectManager.prototype.clean = function() {}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.init = function(main, gameView, gameMat, gameMenu, menuEffect, themeContainer) {
    this._main = main;
    this._gameView = gameView;
    this._gameMaterialContainer = gameMat;
    this._gameMenuThemeContainer = gameMenu;
    this._menuEffectContainer = menuEffect;
    this._themeContainer = themeContainer;
    this._throughTileset = this._main.gamePieceTileset.clone();
    this._throughTileRect = [];
    var cnt = 0
      , cnt2 = 0;
    for (cnt = 0; cnt < 3; cnt++)
        for (cnt2 = 0; cnt2 < 6; cnt2++)
            if (cnt < 2)
                this._throughTileRect.push(this._throughTileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE + this.ADJST_SHEET_X,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE)));
            else if (cnt == 2)
                if (cnt2 == 0)
                    this._throughTileRect.push(this._throughTileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE + this.ADJST_SHEET_X,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE * 2)));
                else if (cnt2 == 1)
                    this._throughTileRect.push(this._throughTileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE + this.ADJST_SHEET_X,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE * 2,248)));
                else if (cnt2 == 2)
                    this._throughTileRect.push(this._throughTileset.addRect(new openfl.geom.Rectangle(cnt2 * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.BALL_SIZE + this.ADJST_SHEET_X,cnt * pigg.puzzle.view.CommonView.BALL_SIZE,pigg.puzzle.view.CommonView.BALL_SIZE * 3,pigg.puzzle.view.CommonView.BALL_SIZE * 6)));
    this.RECT_POINT_MARSHMALLOW.push(this._throughTileset.addRect(new openfl.geom.Rectangle(0 + this.ADJST_SHEET_X,376,100,40)));
    this.RECT_POINT_MARSHMALLOW.push(this._throughTileset.addRect(new openfl.geom.Rectangle(0 + this.ADJST_SHEET_X,416,100,40)));
    this.RECT_POINT_MARSHMALLOW.push(this._throughTileset.addRect(new openfl.geom.Rectangle(0 + this.ADJST_SHEET_X,456,120,40)));
    this._throughTileset.addRect(new openfl.geom.Rectangle(0 + this.ADJST_SHEET_X,256,64,64));
    for (cnt = 0; cnt < 4; cnt++)
        pigg.puzzle.view.CommonView.RECT_THROUGH_SELECT_POTION[cnt] = this._throughTileset.addRect(new openfl.geom.Rectangle(cnt * 62 + this.ADJST_SHEET_X,512,62,78));
    this._throughTilemap = new openfl.display.Tilemap(pigg.puzzle.view.CommonView.TILEMAP_WIDTH,pigg.puzzle.view.CommonView.TILEMAP_HEIGHT + 200,this._throughTileset)
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.onLoadThroughSheetPng = function(code, bmd) {
    this._throughTileset.bitmapData = bmd
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.updateMaterial = function() {
    this._gmcScale = this._gameMaterialContainer.scaleX;
    this._gmcX = this._gameMaterialContainer.x;
    this._gmcY = this._gameMaterialContainer.y
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.setThroughObject = function(type, mInfo, throughTarget, ballType, px, py) {
    mInfo = typeof mInfo !== 'undefined' ? mInfo : null;
    throughTarget = typeof throughTarget !== 'undefined' ? throughTarget : null;
    ballType = typeof ballType !== 'undefined' ? ballType : 0;
    px = typeof px !== 'undefined' ? px : 0;
    py = typeof py !== 'undefined' ? py : 0;
    this.traceLog('setThroughObject::gmcPoint::', this._gmcScale, this._gmcX, this._gmcY);
    if (this._throughTilemap.parent == null)
        this._menuEffectContainer.addChild(this._throughTilemap);
    var nX, nY, distance;
    var tx = 0
      , ty = 0;
    var mc;
    var targetObj = throughTarget;
    if (type == pigg.puzzle.view.CommonView.THEME_PIECE) {
        mc = new TileBase(ballType - 1);
        tx = this._themeContainer.x + targetObj.x;
        ty = this._themeContainer.y + targetObj.y;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        this.traceLog('_gmcScale - 1 * 4::', (this._gmcScale - 1) * 8);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        this.moveThroughObject(type, mc, distance, targetObj)
    } else if (type == pigg.puzzle.view.CommonView.THEME_JELLY) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_JELLY);
        tx = this._themeContainer.x + targetObj.x;
        ty = this._themeContainer.y + targetObj.y;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        this.moveThroughObject(type, mc, distance, targetObj, tx, ty)
    } else if (type == pigg.puzzle.view.CommonView.THEME_ORDER) {
        if (ballType == 10)
            mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_ORDER[0]);
        else if (ballType == 11)
            mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_ORDER[1]);
        tx = this._themeContainer.x + targetObj.x;
        ty = this._themeContainer.y + targetObj.y;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        com.greensock.TweenMax.to(mc, .3, {
            y: (mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + pigg.puzzle.view.CommonView.BALL_SIZE) * this._gmcScale + this._gameMaterialContainer.y,
            scaleX: 1.2,
            scaleY: 1.2,
            ease: com.greensock.easing.Expo.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.moveThroughObject, this, 'moveThroughObject'),
            onCompleteParams: [type, mc, distance, targetObj, tx, ty]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_SCORE) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_POINT);
        tx = this._themeContainer.x + targetObj.x - 4;
        ty = this._themeContainer.y + targetObj.y + 120 - 4;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.x = px * this._gmcScale + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = py * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        this.traceLog('throughtPoint::', px, py, mc.x, mc.y);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        this.moveThroughObject(type, mc, distance, targetObj, ballType)
    } else if (type == pigg.puzzle.view.CommonView.THEME_BEAR) {
        var bearType = mInfo.hasMarshmallowType;
        var addX = 0;
        var addY = 0;
        var posY = 0;
        var posX = 0;
        var scl = 0;
        var mcy = 0;
        var mcx = 0;
        var scoreType = 0;
        var twx = 0;
        var twy = 0;
        var asx = 0;
        var asy = 0;
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_BEAR[(bearType - 1) % 3]);
        this._throughTilemap.addTile(mc);
        if (bearType == 1 || bearType == 4) {
            scl = 1 / 3;
            scoreType = pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_S
        } else if (bearType == 2 || bearType == 5) {
            scl = 1 * .67;
            scoreType = pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_M
        } else if (bearType == 3 || bearType == 6) {
            scl = 1;
            scoreType = pigg.puzzle.view.CommonView.POINT_MARSHMALLOW_L
        }
        if (bearType == 1)
            ;
        else if (bearType == 2)
            ;
        else if (bearType == 3)
            ;
        else if (bearType == 4)
            if (mInfo.my == 0)
                addY = pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS * 1 * this._gmcScale;
            else {
                if (mInfo.my == 7)
                    addY = -pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS * 1 * this._gmcScale
            }
        else if (bearType == 5)
            if (mInfo.my == 0)
                addY = pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            else {
                if (mInfo.my == 7)
                    addY = -pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale
            }
        else if (bearType == 6)
            if (mInfo.my == 0)
                addY = pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            else if (mInfo.my == 6)
                addY = -pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
        mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        var r;
        distance = 600;
        r = this._throughTileset.getRect(pigg.puzzle.view.CommonView.RECT_THROUGH_BEAR[(bearType - 1) % 3]);
        if (bearType == 1) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * .5 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            twx = mcx;
            twy = mcy;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE / 1.5 * this._gmcScale;
            asy = mcy - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + 20
        } else if (bearType == 2) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * 2 * this._gmcScale;
            twx = mcx;
            twy = mcy;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + 15;
            asy = mcy - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + 15
        } else if (bearType == 3) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * 1.5 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * 4 * this._gmcScale;
            twx = mcx;
            twy = mcy;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale;
            asy = mcy - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale
        } else if (bearType == 4) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * .5 * this._gmcScale;
            twx = mcx;
            twy = mcy;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE / 1.5 * this._gmcScale;
            asy = mcy - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + 20
        } else if (bearType == 5) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * 2 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            twx = mcx;
            twy = mcy + addY;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + 15;
            asy = mcy - pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + addY
        } else if (bearType == 6) {
            mcx = mc.x + pigg.puzzle.view.CommonView.BALL_SIZE * 4 * this._gmcScale;
            mcy = mc.y + pigg.puzzle.view.CommonView.BALL_SIZE * 1.5 * this._gmcScale;
            twx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale;
            twy = mcy + pigg.puzzle.view.CommonView.BALL_SIZE * 1 * this._gmcScale + addY;
            asx = mcx - pigg.puzzle.view.CommonView.BALL_SIZE * 2 * this._gmcScale + 5;
            asy = mcy + addY
        }
        mc.x = mcx;
        mc.y = mcy;
        mc.originX += r.width / 2;
        mc.originY += r.height / 2;
        mc.scaleX = mc.scaleY = .8 * this._gmcScale;
        if (bearType > 3)
            mc.rotation = -90;
        tx = this._themeContainer.x + targetObj.x - 4;
        ty = this._themeContainer.y + targetObj.y + 120 - 4;
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        com.greensock.TweenMax.to(mc, scl + .5, {
            x: twx,
            y: twy,
            scaleX: 1 * this._gmcScale,
            scaleY: 1 * this._gmcScale,
            rotation: 0,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.moveThroughObject, this, 'moveThroughObject'),
            onCompleteParams: [type, mc, distance, targetObj, scl]
        });
        this._gameView.addScoreTxt(asx, asy, scoreType, scoreType, true);
        mInfo.hasMarshmallow = -1;
        mInfo.hasMarshmallowType = 0;
        this._main.playSE(pigg.puzzle.data.CommonData.SE_CRUSH_MARSHMALLOW)
    } else if (type == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_FLOWER);
        this._gameView.currentThroughFlower++;
        tx = this._themeContainer.x + targetObj.x;
        ty = this._themeContainer.y + targetObj.y;
        mc.scaleX = mc.scaleY = .8 * this._gmcScale;
        mc.x = px * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = py * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        com.greensock.TweenMax.to(mc, .15, {
            x: mc.x + 10,
            y: mc.y - 35,
            rotation: 30,
            scaleX: 1.2 * this._gmcScale,
            scaleY: 1.2 * this._gmcScale,
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.moveThroughObject, this, 'moveThroughObject'),
            onUpdate: org.apache.royale.utils.Language.closure(mc.setOrigin, mc, 'setOrigin'),
            onCompleteParams: [type, mc, distance, targetObj, tx, ty]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MISSION) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_MISSION);
        this._gameView.currentThroughMissionPiece++;
        tx = px;
        ty = py;
        mc.scaleX = mc.scaleY = .8 * this._gmcScale;
        mc.x = mInfo.mx * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS + (this._gmcX - pigg.puzzle.view.CommonView.MATERIAL_VIEW_X) + (this._gmcScale - 1) * pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = mInfo.my * pigg.puzzle.view.CommonView.BALL_SIZE * this._gmcScale + pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y + (this._gmcY - pigg.puzzle.view.CommonView.MATERIAL_VIEW_Y);
        mc.setOrigin();
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x + 13.75;
        nY = ty - mc.y + 13.75;
        distance = Math.sqrt(nX * nX + nY * nY);
        com.greensock.TweenMax.to(mc, .15, {
            x: mc.x - 10,
            y: mc.y - 25,
            scaleX: 1.2 * this._gmcScale,
            scaleY: 1.2 * this._gmcScale,
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.moveThroughObject, this, 'moveThroughObject'),
            onCompleteParams: [type, mc, distance, targetObj, tx, ty]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MOVETIMES) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_MOVETIMES);
        tx = 50;
        ty = 50;
        mc.x = px;
        mc.y = py;
        mc.scaleX = mc.scaleY = .1;
        mc.originX = mc.originY = 32;
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        com.greensock.TweenMax.to(mc, .15, {
            x: px + 50 + Math.random() * 30,
            y: py + 50 + Math.random() * 30,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.moveThroughObject, this, 'moveThroughObject'),
            onCompleteParams: [type, mc, distance, targetObj, tx, ty]
        });
        this._moveTimeDelayCnt++
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_SELECT_POTION) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_SELECT_POTION[ballType]);
        tx = 530;
        ty = 60;
        mc.x = px + 60 / 2;
        mc.y = py + 78 / 2;
        mc.scaleX = mc.scaleY = 1.2;
        mc.originX = 60 / 2;
        mc.originY = 78 / 2;
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        this.moveThroughObject(type, mc, distance, targetObj, tx, ty)
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE) {
        mc = new TileBase(pigg.puzzle.view.CommonView.RECT_THROUGH_POINT);
        tx = px;
        ty = py;
        mc.x = 50 + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.y = 35 + pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.scaleX = mc.scaleY = 1;
        mc.originX = pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        mc.originY = pigg.puzzle.view.CommonView.ADJUST_OBJCT_POS;
        this._throughTilemap.addTile(mc);
        nX = tx - mc.x;
        nY = ty - mc.y;
        distance = Math.sqrt(nX * nX + nY * nY);
        this.moveThroughObject(type, mc, distance, targetObj, tx, ty)
    }
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.moveThroughObject = function(type, mc, distance, targetObj, tarX, tarY) {
    tarX = typeof tarX !== 'undefined' ? tarX : 0;
    tarY = typeof tarY !== 'undefined' ? tarY : 0;
    var tx;
    var ty;
    var ox, oy;
    if (type == pigg.puzzle.view.CommonView.THEME_PIECE) {
        tx = this._themeContainer.x + targetObj.x + this._adjstTargetPos;
        ty = this._themeContainer.y + targetObj.y + this._adjstTargetPos;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.setOrigin();
        com.greensock.TweenMax.to(mc, .4 + distance / 1E3, {
            bezier: [{
                x: tx + (mc.x - tx) / 2,
                y: ty - 20,
                scaleX: 1.2 * this._gmcScale,
                scaleY: 1.2 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                scaleX: .7,
                scaleY: .7
            }],
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_JELLY) {
        tx = tarX + this._adjstTargetPos;
        ty = tarY + this._adjstTargetPos;
        mc.scaleX = mc.scaleY = this._gmcScale;
        mc.setOrigin();
        com.greensock.TweenMax.to(mc, .4 + distance / 1E3, {
            bezier: [{
                x: tx + (mc.x - tx) / 3,
                y: ty - 20,
                scaleX: .9 * this._gmcScale,
                scaleY: .9 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                scaleX: .7,
                scaleY: .7
            }],
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_ORDER) {
        tx = tarX + this._adjstTargetPos;
        ty = tarY + this._adjstTargetPos;
        com.greensock.TweenMax.to(mc, .5 + distance / 1200, {
            bezier: [{
                x: tx + (mc.x - tx) / 1.5,
                y: 445,
                scaleX: 1.2 * this._gmcScale,
                scaleY: 1.2 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                scaleX: .9,
                scaleY: .9
            }],
            ease: com.greensock.easing.Sine.easeInOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_SCORE) {
        tx = this._themeContainer.x + targetObj.x + this._adjstTargetPos;
        ty = this._themeContainer.y + targetObj.y + this._adjstTargetPos;
        mc.scaleX = mc.scaleY += tarX * .001;
        if (mc.scaleX > 2)
            mc.scaleX = mc.scaleY = 2;
        mc.setOrigin();
        com.greensock.TweenMax.to(mc, .3 + distance / 1E3, {
            bezier: [{
                x: tx + (mc.x - tx) / 2,
                y: ty - 20,
                scaleX: 1.2 * this._gmcScale,
                scaleY: 1.2 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                scaleX: .8,
                scaleY: .8
            }],
            ease: com.greensock.easing.Sine.easeOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj, tarX]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_BEAR) {
        tx = this._themeContainer.x + targetObj.x + this._adjstTargetPos + 10;
        ty = this._themeContainer.y + targetObj.y;
        ox = mc.originX;
        oy = mc.originY;
        com.greensock.TweenMax.to(mc, .4 + distance / 1E3, {
            bezier: [{
                x: tx + (mc.x - tx) / 2,
                y: ty - 30,
                rotation: -90 / 2,
                scaleX: .5 * this._gmcScale,
                scaleY: .5 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                rotation: -90,
                scaleX: .38 * this._gmcScale,
                scaleY: .38 * this._gmcScale
            }],
            ease: com.greensock.easing.Sine.easeInOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        tx = tarX + this._adjstTargetPos;
        ty = tarY + this._adjstTargetPos;
        com.greensock.TweenMax.to(mc, .35 + distance / 1E3 + Math.random() * .5, {
            bezier: [{
                x: tx + (mc.x - tx) / 3,
                y: ty - 10,
                scaleX: .9 * this._gmcScale,
                scaleY: .9 * this._gmcScale,
                rotation: 15
            }, {
                x: tx,
                y: ty,
                scaleX: .7,
                scaleY: .7,
                rotation: 0
            }],
            ease: com.greensock.easing.Power1.easeInOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MISSION) {
        tx = tarX + this._adjstTargetPos;
        ty = tarY + this._adjstTargetPos;
        com.greensock.TweenMax.to(mc, .3 + distance / 1200 + Math.random() * .3, {
            bezier: [{
                x: tx + (mc.x - tx) / 2,
                y: ty - 20,
                scaleX: 1.3 * this._gmcScale,
                scaleY: 1.3 * this._gmcScale
            }, {
                x: tx,
                y: ty,
                scaleX: .7,
                scaleY: .7
            }],
            ease: com.greensock.easing.Sine.easeInOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MOVETIMES) {
        tx = tarX;
        ty = tarY;
        com.greensock.TweenMax.to(mc, 1, {
            bezier: [{
                x: tx + (mc.x - tx) / 2 - 100,
                y: mc.y - 200,
                scaleX: 1.2,
                scaleY: 1.2
            }, {
                x: tx,
                y: ty,
                scaleX: .8,
                scaleY: .8
            }],
            ease: com.greensock.easing.Sine.easeInOut,
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_SELECT_POTION) {
        tx = tarX;
        ty = tarY;
        com.greensock.TweenMax.to(mc, .8, {
            bezier: [{
                x: 300,
                y: 300,
                rotation: Math.random() * 40 - 20,
                scaleX: 1.8,
                scaleY: 1.8
            }, {
                x: tx,
                y: ty,
                rotation: 0,
                scaleX: 1,
                scaleY: 1
            }],
            ease: com.greensock.easing.SlowMo.ease.config(.1, .3, false),
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE) {
        tx = tarX;
        ty = tarY;
        com.greensock.TweenMax.to(mc, .5, {
            bezier: [{
                x: tx / 2 + 50,
                y: 200,
                rotation: Math.random() * 40 - 20,
                scaleX: 1.5,
                scaleY: 1.5
            }, {
                x: tx,
                y: ty,
                rotation: 0,
                scaleX: .9,
                scaleY: .9
            }],
            ease: com.greensock.easing.SlowMo.ease.config(.1, .3, false),
            onComplete: org.apache.royale.utils.Language.closure(this.removeThroughObject, this, 'removeThroughObject'),
            onCompleteParams: [type, mc, targetObj]
        })
    }
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.removeThroughObject = function(type, removeMc, targetObj, score) {
    score = typeof score !== 'undefined' ? score : 0;
    if (type == pigg.puzzle.view.CommonView.THEME_PIECE) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.2;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_JELLY) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.1;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_ORDER) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.2;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_SCORE) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = .8;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj, score);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_BEAR) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.2;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
    } else if (type == pigg.puzzle.view.CommonView.THEME_FLOWER) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.1;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_POINT_GET)
        }
        this._gameView.currentThroughFlower--
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MISSION) {
        if (targetObj) {
            com.greensock.TweenMax.killTweensOf(targetObj);
            targetObj.scaleX = targetObj.scaleY = 1.1;
            targetObj.rotation = Math.random() * 30 - 15;
            if (targetObj.rotation < 0 && targetObj.rotation > -10)
                targetObj.rotation = -10;
            else if (targetObj.rotation > 0 && targetObj.rotation < 10)
                targetObj.rotation = 10;
            com.greensock.TweenMax.to(targetObj, .7, {
                scaleX: 1,
                scaleY: 1,
                rotation: 0,
                ease: com.greensock.easing.Elastic.easeOut.config(1.25, .4)
            });
            this._gameView.updateDispThemeCount(type, targetObj);
            this._main.playSE(pigg.puzzle.data.CommonData.SE_MISSION_PIECE_GET)
        }
        this._gameView.currentThroughMissionPiece--
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_MOVETIMES) {
        if (targetObj)
            com.greensock.TweenMax.killTweensOf(targetObj);
        this._gameView.removeThroughMoveTimes()
    } else if (type == pigg.puzzle.view.CommonView.THROUGH_SELECT_POTION)
        this._gameView.removeThroughSelectPotion();
    else if (type == pigg.puzzle.view.CommonView.THROUGH_BONUS_SCORE)
        this._gameView.removeThroughBonusScore();
    this._throughTilemap.removeTile(removeMc);
    removeMc = null;
    if (this._throughTilemap.numTiles == 0) {
        this.traceLog('removeChild(_throughTilemap)');
        this._menuEffectContainer.removeChild(this._throughTilemap)
    }
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.get__throughTilemap = function() {
    return this._throughTilemap
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.set__throughTilemap = function(value) {
    this._throughTilemap = value
}
;
pigg.puzzle.manager.ThroughObjectManager.prototype.set__moveTimeDelayCnt = function(v) {
    this._moveTimeDelayCnt = v
}
;
Object.defineProperties(pigg.puzzle.manager.ThroughObjectManager.prototype, {
    throughTilemap: {
        get: pigg.puzzle.manager.ThroughObjectManager.prototype.get__throughTilemap,
        set: pigg.puzzle.manager.ThroughObjectManager.prototype.set__throughTilemap
    },
    moveTimeDelayCnt: {
        set: pigg.puzzle.manager.ThroughObjectManager.prototype.set__moveTimeDelayCnt
    }
});
pigg.puzzle.manager.ThroughObjectManager.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ThroughObjectManager',
        qName: 'pigg.puzzle.manager.ThroughObjectManager',
        kind: 'class'
    }]
};
pigg.puzzle.manager.ThroughObjectManager.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'throughTilemap': {
                    type: 'openfl.display.Tilemap',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager'
                },
                'moveTimeDelayCnt': {
                    type: 'int',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager'
                }
            }
        },
        methods: function() {
            return {
                'ThroughObjectManager': {
                    type: '',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.view.GameView',
                            optional: false
                        }, {
                            index: 3,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }, {
                            index: 4,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }, {
                            index: 5,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }, {
                            index: 6,
                            type: 'openfl.display.Sprite',
                            optional: false
                        }]
                    }
                },
                'onLoadThroughSheetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }]
                    }
                },
                'updateMaterial': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager'
                },
                'setThroughObject': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'pigg.puzzle.data.MapInfo',
                            optional: true
                        }, {
                            index: 3,
                            type: 'openfl.display.Tile',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }, {
                            index: 5,
                            type: 'int',
                            optional: true
                        }, {
                            index: 6,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'moveThroughObject': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'TileBase',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'openfl.display.Tile',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: true
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'removeThroughObject': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.manager.ThroughObjectManager',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.Tile',
                            optional: false
                        }, {
                            index: 3,
                            type: 'TileBase',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.ScrollView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this.traceLog('ScrollView')
}
;
goog.inherits(pigg.puzzle.view.ScrollView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.ScrollView', pigg.puzzle.view.ScrollView);
pigg.puzzle.view.ScrollView.prototype._scrollMain;
pigg.puzzle.view.ScrollView.prototype._scrollContant;
pigg.puzzle.view.ScrollView.prototype._scrollContantInner;
pigg.puzzle.view.ScrollView.prototype._bg;
pigg.puzzle.view.ScrollView.prototype._scrollBar;
pigg.puzzle.view.ScrollView.prototype._baseWidth = 0;
pigg.puzzle.view.ScrollView.prototype._baseHeight = 0;
pigg.puzzle.view.ScrollView.prototype._contentWidth = 0;
pigg.puzzle.view.ScrollView.prototype._contentHeight = 0;
pigg.puzzle.view.ScrollView.prototype._innerWidth = 0;
pigg.puzzle.view.ScrollView.prototype._innerHeight = 0;
pigg.puzzle.view.ScrollView.prototype._topMargin = 0;
pigg.puzzle.view.ScrollView.prototype._leftMargin = 0;
pigg.puzzle.view.ScrollView.prototype._contentScale;
pigg.puzzle.view.ScrollView.prototype._maxScrollY;
pigg.puzzle.view.ScrollView.prototype._scrollBarHeight;
pigg.puzzle.view.ScrollView.prototype._baseMouseY;
pigg.puzzle.view.ScrollView.prototype._baseContentY;
pigg.puzzle.view.ScrollView.prototype._addY;
pigg.puzzle.view.ScrollView.prototype._mouseSpr;
pigg.puzzle.view.ScrollView.prototype._mouseDownFunc;
pigg.puzzle.view.ScrollView.prototype._isCache = true;
pigg.puzzle.view.ScrollView.prototype.init = function(baseW, baseH, contW, contH, topM, leftM) {
    baseW = typeof baseW !== 'undefined' ? baseW : pigg.puzzle.view.CommonView.STAGE_WIDTH - 60;
    baseH = typeof baseH !== 'undefined' ? baseH : 700;
    contW = typeof contW !== 'undefined' ? contW : pigg.puzzle.view.CommonView.STAGE_WIDTH - 100;
    contH = typeof contH !== 'undefined' ? contH : 560;
    topM = typeof topM !== 'undefined' ? topM : 100;
    leftM = typeof leftM !== 'undefined' ? leftM : 40;
    this._baseWidth = baseW;
    this._baseHeight = baseH;
    this._contentWidth = contW;
    this._contentHeight = contH;
    this._topMargin = topM;
    this._leftMargin = leftM;
    this.traceLog('ScrollView::init', this._baseWidth, this._baseHeight, this._contentWidth, this._contentHeight, this._topMargin, this._leftMargin);
    this._scrollMain = new openfl.display.Sprite;
    this.addChild(this._scrollMain);
    this._mouseSpr = new openfl.display.Sprite;
    this._mouseSpr.graphics.beginFill(16777215, 0);
    this._mouseSpr.graphics.drawRect(-this._leftMargin, -this._topMargin, pigg.puzzle.view.CommonView.STAGE_WIDTH, pigg.puzzle.view.CommonView.STAGE_HEIGHT);
    this._mouseSpr.graphics.endFill();
    this._mouseSpr.visible = false;
    this.addChild(this._mouseSpr);
    var rect = new openfl.geom.Rectangle(0,0,this._contentWidth,this._contentHeight);
    this._scrollContant = new openfl.display.Sprite;
    this._scrollContant.scrollRect = rect;
    this._scrollContant.y = this._topMargin;
    this._scrollContant.x = this._leftMargin;
    this._scrollMain.addChild(this._scrollContant);
    this._scrollContantInner = new openfl.display.Sprite;
    this._scrollContant.addChild(this._scrollContantInner);
    this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.sclMD, this, 'sclMD'))
}
;
pigg.puzzle.view.ScrollView.prototype.mlv = function(e) {
    this.traceLog('MOUSE_LEAVE')
}
;
pigg.puzzle.view.ScrollView.prototype.mov = function(e) {
    this.traceLog('MOUSE_LEAVE')
}
;
pigg.puzzle.view.ScrollView.prototype.makeScrollBar = function() {
    this._contentScale = this._contentHeight / this._innerHeight;
    if (this._scrollBar == null) {
        this._scrollBar = new openfl.display.Sprite;
        this._scrollMain.addChild(this._scrollBar)
    }
    this._scrollBar.graphics.clear();
    this._scrollBar.graphics.beginFill(0, .3);
    this._scrollBar.graphics.drawRoundRect(0, 0, 4, this._scrollBarHeight, 2);
    this._scrollBar.graphics.endFill();
    this._scrollBar.x = this._contentWidth + 16;
    this._scrollBar.y = this._topMargin
}
;
pigg.puzzle.view.ScrollView.prototype.setContent = function(obj) {
    this.traceLog('setContent::', obj.height);
    this._scrollContantInner.addChild(obj);
    this.updateContent()
}
;
pigg.puzzle.view.ScrollView.prototype.updateContent = function() {
    if (this._scrollContant.scrollRect.height != this._contentHeight) {
        var rect = new openfl.geom.Rectangle(0,0,this._contentWidth,this._contentHeight);
        this._scrollContant.scrollRect = rect
    }
    this._innerHeight = this._scrollContantInner.height;
    this._maxScrollY = this._contentHeight - this._scrollContantInner.height;
    this._scrollBarHeight = this._contentHeight * (this._contentHeight / this._innerHeight);
    this._contentScale = this._contentHeight / this._innerHeight;
    this.traceLog('updateContent::', this._innerHeight, this._contentHeight, this._maxScrollY, this._scrollBarHeight, this._contentScale);
    if (this._innerHeight < this._contentHeight)
        ;
    else {
        this.updatePosition();
        this.makeScrollBar()
    }
}
;
pigg.puzzle.view.ScrollView.prototype.sclMD = function(e) {
    this.traceLog('sclMD');
    com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
    this.parent.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.sclMM, this, 'sclMM'));
    this.parent.addEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.sclMU, this, 'sclMU'));
    this._addY = 0;
    this._baseMouseY = this.mouseY;
    this._baseContentY = this._scrollContantInner.y;
    this._mouseSpr.visible = true
}
;
pigg.puzzle.view.ScrollView.prototype.sclMM = function(e) {
    if (this._innerHeight < this._contentHeight)
        return;
    if (!this._scrollContantInner.cacheAsBitmap && this._isCache)
        this._scrollContantInner.cacheAsBitmap = true;
    if (this.mouseY < 0 || this.mouseY > pigg.puzzle.view.CommonView.STAGE_HEIGHT - 150) {
        this.traceLog('\u3046\u3048\u304b\u3057\u305f\u304b\u306b\u3044\u3063\u305f');
        this.sclMU(null);
        this._scrollContantInner.cacheAsBitmap = false;
        return
    }
    com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
    this._addY = this._baseMouseY - this.mouseY;
    if (this._scrollContantInner.y > 0)
        this._scrollContantInner.y -= this._addY / 5;
    else if (this._scrollContantInner.y < this._contentHeight - this._scrollContantInner.height)
        this._scrollContantInner.y -= this._addY / 5;
    else
        this._scrollContantInner.y -= this._addY;
    this._baseMouseY = this.mouseY;
    this.setScrollBarPos()
}
;
pigg.puzzle.view.ScrollView.prototype.sclMU = function(e) {
    if (this._addY < 10 && this._addY > -10 && this._mouseDownFunc)
        this._mouseDownFunc(this._scrollContantInner.y);
    this._mouseSpr.visible = false;
    this.parent.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.sclMM, this, 'sclMM'));
    this.parent.removeEventListener(openfl.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.sclMU, this, 'sclMU'));
    if (this._innerHeight < this._contentHeight)
        return;
    if (this._scrollContantInner.y > 0)
        com.greensock.TweenMax.to(this._scrollContantInner, .3, {
            y: 0,
            ease: com.greensock.easing.Cubic.easeOut,
            onUpdate: org.apache.royale.utils.Language.closure(this.setScrollBarPos, this, 'setScrollBarPos'),
            onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
        });
    else if (this._scrollContantInner.y < this._maxScrollY)
        com.greensock.TweenMax.to(this._scrollContantInner, .3, {
            y: this._maxScrollY,
            ease: com.greensock.easing.Cubic.easeOut,
            onUpdate: org.apache.royale.utils.Language.closure(this.updatePosition, this, 'updatePosition'),
            onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
        });
    if (com.greensock.TweenMax.getTweensOf(this._scrollContantInner).length > 0) {
        this._scrollContantInner.cacheAsBitmap = false;
        return
    }
    var smy = this._scrollContantInner.y;
    if (this._addY > 10 || this._addY < -10)
        com.greensock.TweenMax.to(this._scrollContantInner, .3 + Math.abs(this._addY) * .005, {
            y: smy - this._addY * 10,
            ease: com.greensock.easing.Cubic.easeOut,
            onUpdate: org.apache.royale.utils.Language.closure(this.updatePosition, this, 'updatePosition'),
            onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
        });
    else
        this._scrollContantInner.cacheAsBitmap = false
}
;
pigg.puzzle.view.ScrollView.prototype.endScroll = function() {
    this._scrollContantInner.cacheAsBitmap = false
}
;
pigg.puzzle.view.ScrollView.prototype.stopTween = function() {
    com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
    this._scrollContantInner.cacheAsBitmap = false
}
;
pigg.puzzle.view.ScrollView.prototype.updatePosition = function(target, animate) {
    target = typeof target !== 'undefined' ? target : 1;
    animate = typeof animate !== 'undefined' ? animate : true;
    if (target <= 0) {
        if (target < this._maxScrollY)
            target = this._maxScrollY;
        if (!animate) {
            this._scrollContantInner.cacheAsBitmap = false;
            com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
            this._scrollContantInner.y = target
        } else {
            if (this._innerHeight < this._contentHeight && !this._scrollContantInner.cacheAsBitmap && this._isCache)
                this._scrollContantInner.cacheAsBitmap = true;
            com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
            com.greensock.TweenMax.to(this._scrollContantInner, .5, {
                y: target,
                ease: com.greensock.easing.Cubic.easeOut,
                onUpdate: org.apache.royale.utils.Language.closure(this.setScrollBarPos, this, 'setScrollBarPos'),
                onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
            })
        }
    } else if (this._scrollContantInner.y > 0) {
        if (this._innerHeight < this._contentHeight && !this._scrollContantInner.cacheAsBitmap && this._isCache)
            this._scrollContantInner.cacheAsBitmap = true;
        com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
        com.greensock.TweenMax.to(this._scrollContantInner, .3, {
            y: 0,
            ease: com.greensock.easing.Cubic.easeOut,
            onUpdate: org.apache.royale.utils.Language.closure(this.setScrollBarPos, this, 'setScrollBarPos'),
            onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
        })
    } else if (this._scrollContantInner.y < this._maxScrollY) {
        if (this._innerHeight < this._contentHeight && !this._scrollContantInner.cacheAsBitmap && this._isCache)
            this._scrollContantInner.cacheAsBitmap = true;
        com.greensock.TweenMax.killTweensOf(this._scrollContantInner);
        com.greensock.TweenMax.to(this._scrollContantInner, .3, {
            y: this._maxScrollY,
            ease: com.greensock.easing.Cubic.easeOut,
            onUpdate: org.apache.royale.utils.Language.closure(this.setScrollBarPos, this, 'setScrollBarPos'),
            onComplete: org.apache.royale.utils.Language.closure(this.endScroll, this, 'endScroll')
        })
    }
    this.setScrollBarPos()
}
;
pigg.puzzle.view.ScrollView.prototype.setScrollBarPos = function() {
    if (this._scrollBar == null)
        return;
    var pos = -(this._scrollContantInner.y * this._contentScale) + this._topMargin;
    if (pos >= this._topMargin) {
        this._scrollBar.y = pos;
        if (this._contentHeight + this._topMargin < pos + this._scrollBarHeight) {
            this._scrollBar.graphics.clear();
            this._scrollBar.graphics.beginFill(0, .3);
            this._scrollBar.graphics.drawRoundRect(0, 0, 4, this._scrollBarHeight + (this._contentHeight + this._topMargin - (pos + this._scrollBarHeight)), 3);
            this._scrollBar.graphics.endFill()
        }
    } else if (pos < this._topMargin) {
        this._scrollBar.y = this._topMargin;
        this._scrollBar.graphics.clear();
        this._scrollBar.graphics.beginFill(0, .3);
        this._scrollBar.graphics.drawRoundRect(0, 0, 4, this._scrollBarHeight + (pos - this._topMargin) * 2, 3);
        this._scrollBar.graphics.endFill()
    }
}
;
pigg.puzzle.view.ScrollView.prototype.get__contentHeight = function() {
    return this._contentHeight
}
;
pigg.puzzle.view.ScrollView.prototype.set__contentHeight = function(v) {
    this._contentHeight = v
}
;
pigg.puzzle.view.ScrollView.prototype.set__mouseDownFunc = function(v) {
    this._mouseDownFunc = v
}
;
pigg.puzzle.view.ScrollView.prototype.set__isCache = function(v) {
    this._isCache = v
}
;
Object.defineProperties(pigg.puzzle.view.ScrollView.prototype, {
    contentHeight: {
        get: pigg.puzzle.view.ScrollView.prototype.get__contentHeight,
        set: pigg.puzzle.view.ScrollView.prototype.set__contentHeight
    },
    mouseDownFunc: {
        set: pigg.puzzle.view.ScrollView.prototype.set__mouseDownFunc
    },
    isCache: {
        set: pigg.puzzle.view.ScrollView.prototype.set__isCache
    }
});
pigg.puzzle.view.ScrollView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ScrollView',
        qName: 'pigg.puzzle.view.ScrollView',
        kind: 'class'
    }]
};
pigg.puzzle.view.ScrollView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'contentHeight': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                },
                'mouseDownFunc': {
                    type: 'Function',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                },
                'isCache': {
                    type: 'Boolean',
                    access: 'writeonly',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                }
            }
        },
        methods: function() {
            return {
                'ScrollView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ScrollView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }, {
                            index: 4,
                            type: 'int',
                            optional: true
                        }, {
                            index: 5,
                            type: 'int',
                            optional: true
                        }, {
                            index: 6,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'setContent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ScrollView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.display.DisplayObject',
                            optional: false
                        }]
                    }
                },
                'updateContent': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                },
                'stopTween': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ScrollView'
                },
                'updatePosition': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.ScrollView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Boolean',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.view.TutorialMypageView = function() {
    pigg.puzzle.view.CommonView.call(this);
    this._messageTileRect = [];
    this._footerTileRect = [];
    this.traceLog('TutorialMypageView')
}
;
goog.inherits(pigg.puzzle.view.TutorialMypageView, pigg.puzzle.view.CommonView);
goog.exportSymbol('pigg.puzzle.view.TutorialMypageView', pigg.puzzle.view.TutorialMypageView);
pigg.puzzle.view.TutorialMypageView.prototype._main;
pigg.puzzle.view.TutorialMypageView.prototype._container;
pigg.puzzle.view.TutorialMypageView.prototype._backBlackContainer;
pigg.puzzle.view.TutorialMypageView.prototype._black;
pigg.puzzle.view.TutorialMypageView.prototype._blackEmpty;
pigg.puzzle.view.TutorialMypageView.prototype._blackEmpty2;
pigg.puzzle.view.TutorialMypageView.prototype._balloonContainer;
pigg.puzzle.view.TutorialMypageView.prototype._balloon;
pigg.puzzle.view.TutorialMypageView.prototype._balloonTilemap;
pigg.puzzle.view.TutorialMypageView.prototype._balloonFooterTile;
pigg.puzzle.view.TutorialMypageView.prototype._balloonMessageTile;
pigg.puzzle.view.TutorialMypageView.prototype._nextBtnSpr;
pigg.puzzle.view.TutorialMypageView.prototype._currentPage = 0;
pigg.puzzle.view.TutorialMypageView.prototype._thisView;
pigg.puzzle.view.TutorialMypageView.prototype._tutorialType = 0;
pigg.puzzle.view.TutorialMypageView.prototype._hukurouContainer;
pigg.puzzle.view.TutorialMypageView.prototype._isShow;
pigg.puzzle.view.TutorialMypageView.prototype._messageTileRect;
pigg.puzzle.view.TutorialMypageView.prototype._footerTileRect;
pigg.puzzle.view.TutorialMypageView.prototype.RECT_RANKING_RESULT_DISCRIPTION_START = 0;
pigg.puzzle.view.TutorialMypageView.prototype.RECT_RANKING_RESULT_DISCRIPTION_END = 0;
pigg.puzzle.view.TutorialMypageView.prototype.clean = function() {}
;
pigg.puzzle.view.TutorialMypageView.prototype.init = function(main, type) {
    var self = this;
    var __localFn0__ = function() {
        self.btnDownAction(self._nextBtnSpr)
    };
    this._thisView = this;
    this._tutorialType = type;
    this._main = main;
    this.visible = false;
    this._container = new openfl.display.Sprite;
    this.addChild(this._container);
    this._backBlackContainer = new openfl.display.Sprite;
    this._container.addChild(this._backBlackContainer);
    this.makeTutotialBlack();
    this._balloon = new openfl.display.Sprite;
    this._balloonContainer = new openfl.display.Sprite;
    this._balloonContainer.addChild(this._balloon);
    this._container.addChild(this._balloonContainer);
    this._hukurouContainer = new openfl.display.Sprite;
    this._container.addChild(this._hukurouContainer);
    var tileset = new openfl.display.Tileset(null);
    this._main.loadDataManager.loadPng(this.getVersionUrl(pigg.puzzle.data.CommonData.URL_MYPAGE_TUTORIAL_PARTS), 'mypageTutorial', org.apache.royale.utils.Language.closure(this.onLoadMypageTutorialSheetPng, this, 'onLoadMypageTutorialSheetPng'), [tileset]);
    this._balloonTilemap = new openfl.display.Tilemap(347,165,tileset);
    this._balloonTilemap.addTile(new openfl.display.Tile(tileset.addRect(new openfl.geom.Rectangle(0,0,347,116))));
    this._footerTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,115,347,52)));
    this._footerTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,167,347,52)));
    this._footerTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,222,347,52)));
    this._balloonTilemap.addTile(this._balloonFooterTile = new TileBase(this._footerTileRect[1]));
    this._balloonFooterTile.y = 115;
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,274,310,83)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,362,310,83)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,445,310,53)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,498,310,83)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,581,310,54)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,635,310,53)));
    this._messageTileRect.push(tileset.addRect(new openfl.geom.Rectangle(0,688,310,54)));
    this.RECT_RANKING_RESULT_DISCRIPTION_START = tileset.addRect(new openfl.geom.Rectangle(0,743,310,53));
    this.RECT_RANKING_RESULT_DISCRIPTION_END = tileset.addRect(new openfl.geom.Rectangle(0,797,310,84));
    this._balloonTilemap.addTile(this._balloonMessageTile = new TileBase(this._messageTileRect[0]));
    this._balloonMessageTile.x = 17;
    this._balloonMessageTile.y = 30;
    this._balloonTilemap.y = -154;
    this._balloonTilemap.x = -170;
    this._balloonContainer.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
    this._balloonContainer.y = 360;
    this._balloonContainer.scaleX = this._balloonContainer.scaleY = 0;
    this._main.addSpine(this._main.spineHukurouQuarter, this._hukurouContainer);
    this._hukurouContainer.x = pigg.puzzle.view.CommonView.STAGE_WIDTH + 100;
    this._hukurouContainer.y = 0;
    this._hukurouContainer.scaleX = -1.2;
    this._hukurouContainer.scaleY = 1.2;
    this._balloon.addChild(this._balloonTilemap);
    this._nextBtnSpr = new openfl.display.Sprite;
    var tilemap = this.makeBtnBg(this._main);
    this._nextBtnSpr.addChild(tilemap);
    var tl;
    tilemap.addTile(tl = new openfl.display.Tile(tilemap.tileset.addRect(new openfl.geom.Rectangle(607,722,62,29))));
    tl.x = 119;
    tl.y = 35;
    tilemap.x = -150;
    tilemap.y = -50;
    this._nextBtnSpr.x = pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2;
    this._nextBtnSpr.y = 718 + 50;
    this._nextBtnSpr.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn0__);
    this._nextBtnSpr.scaleX = this._nextBtnSpr.scaleY = 0;
    this._container.addChild(this._nextBtnSpr);
    if (this._tutorialType == 1) {
        this._currentPage = 5;
        this._balloonMessageTile.updateId(this._messageTileRect[5]);
        this._balloonMessageTile.y = 44
    }
}
;
pigg.puzzle.view.TutorialMypageView.prototype.onLoadMypageTutorialSheetPng = function(code, bmd, option) {
    option = typeof option !== 'undefined' ? option : null;
    option[0].bitmapData = bmd;
    if (this._tutorialType == 2)
        this.showRankingResultDescription();
    else
        this.show()
}
;
pigg.puzzle.view.TutorialMypageView.prototype.show = function() {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            com.greensock.TweenMax.to(self._nextBtnSpr, .4, {
                delay: 0,
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Cubic.easeOut
            });
            self._nextBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.nextPage, self, 'nextPage'))
        };
        self._main.spineHukurouQuarter.playAction('joy', 0, true);
        com.greensock.TweenMax.to(self._hukurouContainer, 1, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH / 2,
            y: 520,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .8,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: __localFn0__
        })
    };
    this.visible = true;
    this._isShow = true;
    this._backBlackContainer.alpha = 0;
    com.greensock.TweenMax.to(this._backBlackContainer, .2, {
        alpha: 1,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.TutorialMypageView.prototype.hide = function() {
    this.hideTutorialBlack();
    this.visible = false;
    this._isShow = false
}
;
pigg.puzzle.view.TutorialMypageView.prototype.makeTutotialBlack = function(num) {
    num = typeof num !== 'undefined' ? num : 0;
    this.traceLog('makeTutotialBlack::', num);
    var cnt = 0
      , len = 0;
    if (this._black == null) {
        this._black = this.makeBackBlack();
        this._backBlackContainer.addChild(this._black);
        this._blackEmpty = new openfl.display.Sprite;
        this._blackEmpty2 = new openfl.display.Sprite;
        this._backBlackContainer.addChild(this._black);
        this._backBlackContainer.addChild(this._blackEmpty);
        this._backBlackContainer.addChild(this._blackEmpty2);
        this._backBlackContainer.filters = [new openfl.filters.ColorMatrixFilter([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 1, 1, 0])]
    }
    this._blackEmpty.graphics.clear();
    this._blackEmpty2.graphics.clear();
    if (num == 1) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawCircle(pigg.puzzle.view.CommonView.MYPAGE_WIDTH / 2 + 2, 476, 140);
        this._blackEmpty.graphics.endFill();
        this._blackEmpty2.graphics.beginFill(65280, 1);
        this._blackEmpty2.graphics.drawRoundRect(247, 574, 138, 64, 20);
        this._blackEmpty2.graphics.endFill()
    } else if (num == 2) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawRoundRect(168, 582, 300, 125, 20);
        this._blackEmpty.graphics.endFill()
    } else if (num == 3) {
        this._blackEmpty.graphics.beginFill(65280, 1);
        this._blackEmpty.graphics.drawCircle(356 + 100, 504 + 100, 100);
        this._blackEmpty.graphics.endFill()
    }
}
;
pigg.puzzle.view.TutorialMypageView.prototype.hideTutorialBlack = function() {
    var self = this;
    var __localFn0__ = function() {
        self._backBlackContainer.visible = false
    };
    com.greensock.TweenMax.to(this._backBlackContainer, .2, {
        alpha: 0,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.TutorialMypageView.prototype.nextPage = function() {
    var self = this;
    var __localFn0__ = function() {
        self.makeTutotialBlack(1);
        self._main.showTutotiralIncentive()
    };
    var __localFn1__ = function() {
        self._balloonContainer.x = 280;
        self._balloonContainer.y = 240;
        self._balloonFooterTile.updateId(self._footerTileRect[2]);
        self._balloonMessageTile.updateId(self._messageTileRect[1]);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .8,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    };
    var __localFn2__ = function() {
        self.makeTutotialBlack(2)
    };
    var __localFn3__ = function() {
        self._balloonMessageTile.y = 44;
        self._balloonContainer.x = 280;
        self._balloonContainer.y = 360;
        self._balloonMessageTile.updateId(self._messageTileRect[2]);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    };
    var __localFn4__ = function() {
        self.makeTutotialBlack(3);
        self._main.spineAnimal.playAction('joy', 3)
    };
    var __localFn5__ = function() {
        self._balloonMessageTile.y = 30;
        self._balloonContainer.x = 240;
        self._balloonContainer.y = 380;
        self._balloonFooterTile.updateId(self._footerTileRect[1]);
        self._balloonMessageTile.updateId(self._messageTileRect[3]);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut
        })
    };
    var __localFn6__ = function() {
        self.btnDownAction(self._nextBtnSpr)
    };
    var __localFn7__ = function() {
        var __localFn0__ = function() {
            self._hukurouContainer.visible = false;
            self._main.spineHukurouQuarter.stopAction();
            self._thisView.visible = false;
            self.removeFromParent(self._thisView);
            self._thisView = null
        };
        self._main.showMypagePlayButton();
        com.greensock.TweenMax.to(self._hukurouContainer, 1, {
            delay: 3,
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH + 100,
            y: 0,
            ease: com.greensock.easing.Expo.easeIn,
            onComplete: __localFn0__
        })
    };
    var __localFn8__ = function() {
        var __localFn0__ = function() {
            com.greensock.TweenMax.to(self._balloonContainer, .2, {
                delay: 3,
                scaleX: 0,
                scaleY: 0,
                ease: com.greensock.easing.Cubic.easeOut
            })
        };
        self._balloonMessageTile.y = 44;
        self._balloonContainer.x = 300;
        self._balloonContainer.y = 240;
        self._balloonFooterTile.updateId(self._footerTileRect[0]);
        self._balloonMessageTile.updateId(self._messageTileRect[4]);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: __localFn0__
        })
    };
    var __localFn9__ = function() {
        self.btnDownAction(self._nextBtnSpr)
    };
    var __localFn10__ = function() {
        var __localFn0__ = function() {
            self._hukurouContainer.visible = false;
            self._main.spineHukurouQuarter.stopAction();
            self._thisView.visible = false;
            self.removeFromParent(self._thisView);
            self._thisView = null
        };
        self._main.showMypagePlayButton();
        com.greensock.TweenMax.to(self._hukurouContainer, 1, {
            delay: 2,
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH + 100,
            y: 0,
            ease: com.greensock.easing.Expo.easeIn,
            onComplete: __localFn0__
        })
    };
    var __localFn11__ = function() {
        var __localFn0__ = function() {
            com.greensock.TweenMax.to(self._balloonContainer, .2, {
                delay: 2,
                scaleX: 0,
                scaleY: 0,
                ease: com.greensock.easing.Cubic.easeOut
            })
        };
        self._balloonMessageTile.y = 44;
        self._balloonContainer.x = 300;
        self._balloonContainer.y = 240;
        self._balloonFooterTile.updateId(self._footerTileRect[0]);
        self._balloonMessageTile.updateId(self._messageTileRect[6]);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: __localFn0__
        })
    };
    this._currentPage++;
    com.greensock.TweenMax.killTweensOf(this._hukurouContainer);
    com.greensock.TweenMax.killTweensOf(this._balloonContainer);
    if (this._currentPage == 1) {
        this._main.spineHukurouQuarter.playAction('joy', 0, true);
        this._hukurouContainer.scaleX = 1.2;
        com.greensock.TweenMax.to(this._hukurouContainer, 1.2, {
            x: 120,
            y: 360,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn0__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn1__
        })
    } else if (this._currentPage == 2) {
        this._main.showTutotiralIncentive();
        this._main.spineHukurouQuarter.playAction('joy', 0, true);
        com.greensock.TweenMax.to(this._hukurouContainer, .6, {
            x: 120,
            y: 500,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn2__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn3__
        })
    } else if (this._currentPage == 3) {
        this._main.spineHukurouQuarter.playAction('joy', 0, true);
        this._hukurouContainer.scaleX = 1.2;
        com.greensock.TweenMax.to(this._hukurouContainer, .6, {
            x: 240,
            y: 520,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn4__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn5__
        })
    } else if (this._currentPage == 4) {
        com.greensock.TweenMax.to(this._nextBtnSpr, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeOut
        });
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.nextPage, this, 'nextPage'));
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn6__);
        this.hideTutorialBlack();
        this._main.spineHukurouQuarter.playAction('joy', 0, true);
        this._hukurouContainer.scaleX = -1.2;
        com.greensock.TweenMax.to(this._hukurouContainer, 1, {
            x: 460,
            y: 370,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn7__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn8__
        })
    } else if (this._currentPage == 6) {
        com.greensock.TweenMax.to(this._nextBtnSpr, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeOut
        });
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.nextPage, this, 'nextPage'));
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN, __localFn9__);
        this.hideTutorialBlack();
        this._main.spineHukurouQuarter.playAction('joy', 0, true);
        this._hukurouContainer.scaleX = -1.2;
        com.greensock.TweenMax.to(this._hukurouContainer, 1, {
            x: 460,
            y: 370,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn10__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn11__
        })
    }
}
;
pigg.puzzle.view.TutorialMypageView.prototype.skipTutorial = function() {
    com.greensock.TweenMax.killTweensOf(this._hukurouContainer);
    com.greensock.TweenMax.killTweensOf(this._balloonContainer);
    com.greensock.TweenMax.to(this._hukurouContainer, .6, {
        y: -100,
        ease: com.greensock.easing.Expo.easeIn
    });
    com.greensock.TweenMax.to(this._balloonContainer, .2, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeIn
    });
    com.greensock.TweenMax.to(this._nextBtnSpr, .2, {
        scaleX: 0,
        scaleY: 0,
        ease: com.greensock.easing.Cubic.easeOut
    });
    this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.nextPage, this, 'nextPage'));
    this._main.spineHukurouQuarter.playAction('joy', 2);
    this.hideTutorialBlack();
    this._main.showTutotiralIncentive();
    this._main.showMypagePlayButton();
    this._main.spineAnimal.playAction('joy', 3)
}
;
pigg.puzzle.view.TutorialMypageView.prototype.showRankingResultDescription = function() {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            com.greensock.TweenMax.to(self._nextBtnSpr, .4, {
                delay: 0,
                scaleX: 1,
                scaleY: 1,
                ease: com.greensock.easing.Cubic.easeOut
            });
            self._nextBtnSpr.addEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(self.nextRankingResultDescription, self, 'nextRankingResultDescription'))
        };
        self._main.spineHukurouQuarter.playAction('joy', 0, true);
        com.greensock.TweenMax.to(self._hukurouContainer, 1, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH / 2,
            y: 520,
            ease: com.greensock.easing.Cubic.easeOut
        });
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .8,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: __localFn0__
        })
    };
    this.traceLog('TMV:::showRankingResultDescription');
    this.visible = true;
    this._isShow = true;
    this._balloonMessageTile.updateId(this.RECT_RANKING_RESULT_DISCRIPTION_START);
    this._balloonMessageTile.y = 44;
    this._backBlackContainer.alpha = 0;
    com.greensock.TweenMax.to(this._backBlackContainer, .2, {
        alpha: 1,
        onComplete: __localFn0__
    })
}
;
pigg.puzzle.view.TutorialMypageView.prototype.nextRankingResultDescription = function() {
    var self = this;
    var __localFn0__ = function() {
        var __localFn0__ = function() {
            self._hukurouContainer.visible = false;
            self._main.spineHukurouQuarter.stopAction();
            self._thisView.visible = false;
            self.removeFromParent(self._thisView);
            self._thisView = null
        };
        var __localFn1__ = function() {
            self._main.showApiLoading();
            self._main.showAnnounce();
            self._main.userEventStatus = 1;
            self._main.loadDataManager.setUserStatus(String(self._main.userTutorialStatus) + ',' + self._main.userEventStatus + ',' + self._main.userTutorialStatus2nd + ',' + self._main.userTutorialStatusTemp + ',' + self._main.userSpStatus)
        };
        self._main.showMypagePlayButton();
        com.greensock.TweenMax.to(self._hukurouContainer, 1, {
            delay: 2,
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH + 100,
            y: 0,
            ease: com.greensock.easing.Expo.easeIn,
            onComplete: __localFn0__
        });
        com.greensock.TweenMax.to(self._thisView, 1.5, {
            onComplete: __localFn1__
        })
    };
    var __localFn1__ = function() {
        var __localFn0__ = function() {
            com.greensock.TweenMax.to(self._balloonContainer, .2, {
                delay: 2,
                scaleX: 0,
                scaleY: 0,
                ease: com.greensock.easing.Cubic.easeOut
            })
        };
        self._balloonMessageTile.y = 30;
        self._balloonContainer.x = 300;
        self._balloonContainer.y = 240;
        self._balloonFooterTile.updateId(self._footerTileRect[0]);
        self._balloonMessageTile.updateId(self.RECT_RANKING_RESULT_DISCRIPTION_END);
        com.greensock.TweenMax.to(self._balloonContainer, .6, {
            delay: .6,
            scaleX: 1,
            scaleY: 1,
            ease: com.greensock.easing.Elastic.easeOut,
            onComplete: __localFn0__
        })
    };
    this.traceLog('nextRankingResultDescription');
    this._currentPage++;
    if (this._currentPage == 1) {
        com.greensock.TweenMax.to(this._hukurouContainer, .6, {
            x: pigg.puzzle.view.CommonView.STAGE_WIDTH - 50,
            y: 670,
            ease: com.greensock.easing.Cubic.easeInOut
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn
        });
        com.greensock.TweenMax.to(this._nextBtnSpr, .2, {
            delay: 0,
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeOut
        });
        this._nextBtnSpr.removeEventListener(openfl.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.nextRankingResultDescription, this, 'nextRankingResultDescription'));
        this._main.showRankingResultIncentive();
        this._black.visible = false;
        this.traceLog('\u30a4\u30f3\u30bb\u30f3\u30fb\u7d50\u679c\u8868\u793a')
    } else if (this._currentPage == 2) {
        this.traceLog('\u5e30\u9084\u3059\u308b');
        com.greensock.TweenMax.to(this._hukurouContainer, 1, {
            x: 460,
            y: 370,
            ease: com.greensock.easing.Cubic.easeInOut,
            onComplete: __localFn0__
        });
        com.greensock.TweenMax.to(this._balloonContainer, .2, {
            scaleX: 0,
            scaleY: 0,
            ease: com.greensock.easing.Cubic.easeIn,
            onComplete: __localFn1__
        })
    }
}
;
pigg.puzzle.view.TutorialMypageView.prototype.get__isShow = function() {
    return this._isShow
}
;
pigg.puzzle.view.TutorialMypageView.prototype.set__isShow = function(value) {
    this._isShow = value
}
;
Object.defineProperties(pigg.puzzle.view.TutorialMypageView.prototype, {
    isShow: {
        get: pigg.puzzle.view.TutorialMypageView.prototype.get__isShow,
        set: pigg.puzzle.view.TutorialMypageView.prototype.set__isShow
    }
});
pigg.puzzle.view.TutorialMypageView.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TutorialMypageView',
        qName: 'pigg.puzzle.view.TutorialMypageView',
        kind: 'class'
    }]
};
pigg.puzzle.view.TutorialMypageView.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isShow': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                }
            }
        },
        methods: function() {
            return {
                'TutorialMypageView': {
                    type: '',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                },
                'init': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'pigg.puzzle.view.MainView',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'onLoadMypageTutorialSheetPng': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }, {
                            index: 2,
                            type: 'openfl.display.BitmapData',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Array',
                            optional: true
                        }]
                    }
                },
                'show': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                },
                'hide': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                },
                'showRankingResultDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                },
                'nextRankingResultDescription': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.view.TutorialMypageView'
                }
            }
        }
    }
}
;
spine.animation.IkConstraintTimeline = function(frameCount) {
    spine.animation.CurveTimeline.call(this, frameCount);
    this.frames = org.apache.royale.utils.Language.Vector(frameCount * spine.animation.IkConstraintTimeline.ENTRIES, 'Number')
}
;
goog.inherits(spine.animation.IkConstraintTimeline, spine.animation.CurveTimeline);
goog.exportSymbol('spine.animation.IkConstraintTimeline', spine.animation.IkConstraintTimeline);
spine.animation.IkConstraintTimeline.ENTRIES = 3;
spine.animation.IkConstraintTimeline.PREV_TIME = -3;
spine.animation.IkConstraintTimeline.PREV_MIX = -2;
spine.animation.IkConstraintTimeline.PREV_BEND_DIRECTION = -1;
spine.animation.IkConstraintTimeline.MIX = 1;
spine.animation.IkConstraintTimeline.BEND_DIRECTION = 2;
spine.animation.IkConstraintTimeline.prototype.ikConstraintIndex = 0;
spine.animation.IkConstraintTimeline.prototype.frames;
spine.animation.IkConstraintTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.ikConstraint.ordinal << 24) + this.ikConstraintIndex
}
;
spine.animation.IkConstraintTimeline.prototype.setFrame = function(frameIndex, time, mix, bendDirection) {
    frameIndex *= spine.animation.IkConstraintTimeline.ENTRIES;
    this.frames[frameIndex] = time;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.IkConstraintTimeline.MIX)] = mix;
    this.frames[org.apache.royale.utils.Language._int(frameIndex + spine.animation.IkConstraintTimeline.BEND_DIRECTION)] = bendDirection
}
;
spine.animation.IkConstraintTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
    if (time < this.frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            constraint.mix = constraint.data.mix;
            constraint.bendDirection = constraint.data.bendDirection;
            return;
        case spine.animation.MixPose.current:
            constraint.mix += (constraint.data.mix - constraint.mix) * alpha;
            constraint.bendDirection = constraint.data.bendDirection
        }
        return
    }
    if (time >= this.frames[org.apache.royale.utils.Language._int(this.frames.length - spine.animation.IkConstraintTimeline.ENTRIES)]) {
        if (pose == spine.animation.MixPose.setup) {
            constraint.mix = constraint.data.mix + (this.frames[this.frames.length + spine.animation.IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;
            constraint.bendDirection = direction == spine.animation.MixDirection.Out ? constraint.data.bendDirection : org.apache.royale.utils.Language._int(this.frames[this.frames.length + spine.animation.IkConstraintTimeline.PREV_BEND_DIRECTION])
        } else {
            constraint.mix += (this.frames[this.frames.length + spine.animation.IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;
            if (direction == spine.animation.MixDirection.In)
                constraint.bendDirection = org.apache.royale.utils.Language._int(this.frames[this.frames.length + spine.animation.IkConstraintTimeline.PREV_BEND_DIRECTION])
        }
        return
    }
    var frame = spine.animation.Animation.binarySearch(this.frames, time, spine.animation.IkConstraintTimeline.ENTRIES);
    var mix = Number(this.frames[org.apache.royale.utils.Language._int(frame + spine.animation.IkConstraintTimeline.PREV_MIX)]);
    var frameTime = Number(this.frames[frame]);
    var percent = this.getCurvePercent(frame / spine.animation.IkConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (this.frames[frame + spine.animation.IkConstraintTimeline.PREV_TIME] - frameTime));
    if (pose == spine.animation.MixPose.setup) {
        constraint.mix = constraint.data.mix + (mix + (this.frames[frame + spine.animation.IkConstraintTimeline.MIX] - mix) * percent - constraint.data.mix) * alpha;
        constraint.bendDirection = direction == spine.animation.MixDirection.Out ? constraint.data.bendDirection : org.apache.royale.utils.Language._int(this.frames[frame + spine.animation.IkConstraintTimeline.PREV_BEND_DIRECTION])
    } else {
        constraint.mix += (mix + (this.frames[frame + spine.animation.IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;
        if (direction == spine.animation.MixDirection.In)
            constraint.bendDirection = org.apache.royale.utils.Language._int(this.frames[frame + spine.animation.IkConstraintTimeline.PREV_BEND_DIRECTION])
    }
}
;
spine.animation.IkConstraintTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'IkConstraintTimeline',
        qName: 'spine.animation.IkConstraintTimeline',
        kind: 'class'
    }]
};
spine.animation.IkConstraintTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ikConstraintIndex': {
                    type: 'int'
                },
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'IkConstraintTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.IkConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.IkConstraintTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.IkConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.IkConstraintTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas.Atlas = function(object, textureLoader) {
    this.pages = org.apache.royale.utils.Language.Vector();
    this.regions = org.apache.royale.utils.Language.Vector();
    if (!object)
        return;
    if (org.apache.royale.utils.Language.is(object, String))
        this.load(String(object), textureLoader);
    else if (org.apache.royale.utils.Language.is(object, openfl.utils.ByteArray))
        this.load(org.apache.royale.utils.Language.as(object, openfl.utils.ByteArray, true).readUTFBytes(org.apache.royale.utils.Language.as(object, openfl.utils.ByteArray, true).length), textureLoader);
    else
        throw new openfl.errors.ArgumentError('object must be a TextureAtlas or AttachmentLoader.');
}
;
goog.exportSymbol('spine.atlas.Atlas', spine.atlas.Atlas);
spine.atlas.Atlas.prototype.pages;
spine.atlas.Atlas.prototype.regions;
spine.atlas.Atlas.prototype.textureLoader;
spine.atlas.Atlas.prototype.load = function(atlasText, textureLoader) {
    if (textureLoader == null)
        throw new openfl.errors.ArgumentError('textureLoader cannot be null.');
    this.textureLoader = textureLoader;
    var reader = new spine.atlas.Atlas.Reader(atlasText);
    var tuple = new Array;
    tuple.length = 4;
    var page = null;
    while (true) {
        var line = reader.readLine();
        if (line == null)
            break;
        line = reader.trim(line);
        if (line.length == 0)
            page = null;
        else if (!page) {
            page = new spine.atlas.AtlasPage;
            page.name = line;
            if (reader.readTuple(tuple) == 2) {
                page.width = parseInt(tuple[0], undefined);
                page.height = parseInt(tuple[1], undefined);
                reader.readTuple(tuple)
            }
            page.format = spine.atlas.Format[tuple[0]];
            reader.readTuple(tuple);
            page.minFilter = spine.atlas.TextureFilter[tuple[0]];
            page.magFilter = spine.atlas.TextureFilter[tuple[1]];
            var direction = reader.readValue();
            page.uWrap = spine.atlas.TextureWrap.clampToEdge;
            page.vWrap = spine.atlas.TextureWrap.clampToEdge;
            if (direction == 'x')
                page.uWrap = spine.atlas.TextureWrap.repeat;
            else if (direction == 'y')
                page.vWrap = spine.atlas.TextureWrap.repeat;
            else if (direction == 'xy')
                page.uWrap = page.vWrap = spine.atlas.TextureWrap.repeat;
            textureLoader.loadPage(page, line);
            this.pages[this.pages.length] = page
        } else {
            var region = new spine.atlas.AtlasRegion;
            region.name = line;
            region.page = page;
            region.rotate = reader.readValue() == 'true';
            reader.readTuple(tuple);
            var x = parseInt(tuple[0], undefined);
            var y = parseInt(tuple[1], undefined);
            reader.readTuple(tuple);
            var width = parseInt(tuple[0], undefined);
            var height = parseInt(tuple[1], undefined);
            region.u = x / page.width;
            region.v = y / page.height;
            if (region.rotate) {
                region.u2 = (x + height) / page.width;
                region.v2 = (y + width) / page.height
            } else {
                region.u2 = (x + width) / page.width;
                region.v2 = (y + height) / page.height
            }
            region.x = x;
            region.y = y;
            region.width = Math.abs(width);
            region.height = Math.abs(height);
            if (reader.readTuple(tuple) == 4) {
                region.splits = org.apache.royale.utils.Language.Vector(parseInt(tuple[0], undefined), 'int');
                if (reader.readTuple(tuple) == 4) {
                    region.pads = org.apache.royale.utils.Language.Vector(parseInt(tuple[0], undefined), 'int');
                    reader.readTuple(tuple)
                }
            }
            region.originalWidth = parseInt(tuple[0], undefined);
            region.originalHeight = parseInt(tuple[1], undefined);
            reader.readTuple(tuple);
            region.offsetX = parseInt(tuple[0], undefined);
            region.offsetY = parseInt(tuple[1], undefined);
            region.index = parseInt(reader.readValue(), undefined);
            textureLoader.loadRegion(region);
            this.regions[this.regions.length] = region
        }
    }
}
;
spine.atlas.Atlas.prototype.findRegion = function(name) {
    var n = this.regions.length;
    for (var i = 0; i < n; i++)
        if (this.regions[i].name == name)
            return this.regions[i];
    return null
}
;
spine.atlas.Atlas.prototype.dispose = function() {
    var n = this.pages.length;
    for (var i = 0; i < n; i++)
        this.textureLoader.unloadPage(this.pages[i])
}
;
spine.atlas.Atlas.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Atlas',
        qName: 'spine.atlas.Atlas',
        kind: 'class'
    }]
};
spine.atlas.Atlas.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'Atlas': {
                    type: '',
                    declaredBy: 'spine.atlas.Atlas',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: '*',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.atlas.TextureLoader',
                            optional: false
                        }]
                    }
                },
                'findRegion': {
                    type: 'spine.atlas.AtlasRegion',
                    declaredBy: 'spine.atlas.Atlas',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'dispose': {
                    type: 'void',
                    declaredBy: 'spine.atlas.Atlas'
                }
            }
        }
    }
}
;
spine.atlas.Atlas.Reader = function(text) {
    this.lines = text.split(/\u000d\u000a|\u000d|\u000a/)
}
;
goog.exportSymbol('spine.atlas.Atlas.Reader', spine.atlas.Atlas.Reader);
spine.atlas.Atlas.Reader.prototype.lines;
spine.atlas.Atlas.Reader.prototype.index = 0;
spine.atlas.Atlas.Reader.prototype.trim = function(value) {
    return value.replace(/^\s+|\s+$/g, '')
}
;
spine.atlas.Atlas.Reader.prototype.readLine = function() {
    if (this.index >= this.lines.length)
        return null;
    return this.lines[this.index++]
}
;
spine.atlas.Atlas.Reader.prototype.readValue = function() {
    var line = this.readLine();
    var colon = line.indexOf(':');
    if (colon == -1)
        throw new Error('Invalid line: ' + line);
    return this.trim(line.substring(colon + 1))
}
;
spine.atlas.Atlas.Reader.prototype.readTuple = function(tuple) {
    var line = this.readLine();
    var colon = line.indexOf(':');
    if (colon == -1)
        throw new Error('Invalid line: ' + line);
    var i = 0
      , lastMatch = colon + 1;
    for (i = 0; i < 3; i++) {
        var comma = line.indexOf(',', lastMatch);
        if (comma == -1)
            break;
        tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));
        lastMatch = comma + 1
    }
    tuple[i] = this.trim(line.substring(lastMatch));
    return i + 1
}
;
spine.atlas.Atlas.Reader.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Reader',
        qName: 'spine.atlas.Atlas.Reader',
        kind: 'class'
    }]
};
spine.atlas.Atlas.Reader.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'Reader': {
                    type: '',
                    declaredBy: 'spine.atlas.Atlas.Reader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'trim': {
                    type: 'String',
                    declaredBy: 'spine.atlas.Atlas.Reader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'readLine': {
                    type: 'String',
                    declaredBy: 'spine.atlas.Atlas.Reader'
                },
                'readValue': {
                    type: 'String',
                    declaredBy: 'spine.atlas.Atlas.Reader'
                },
                'readTuple': {
                    type: 'int',
                    declaredBy: 'spine.atlas.Atlas.Reader',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.DrawOrderTimeline = function(frameCount) {
    this.frames = org.apache.royale.utils.Language.Vector(frameCount, 'Number');
    this.drawOrders = org.apache.royale.utils.Language.Vector(frameCount, 'Vector.\x3cint\x3e')
}
;
goog.exportSymbol('spine.animation.DrawOrderTimeline', spine.animation.DrawOrderTimeline);
spine.animation.DrawOrderTimeline.prototype.frames;
spine.animation.DrawOrderTimeline.prototype.drawOrders;
spine.animation.DrawOrderTimeline.prototype.getPropertyId = function() {
    return spine.animation.TimelineType.drawOrder.ordinal << 24
}
;
spine.animation.DrawOrderTimeline.prototype.setFrame = function(frameIndex, time, drawOrder) {
    this.frames[frameIndex] = time;
    this.drawOrders[frameIndex] = drawOrder
}
;
spine.animation.DrawOrderTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    if (direction == spine.animation.MixDirection.Out && pose == spine.animation.MixPose.setup) {
        var n = skeleton.slots.length;
        for (var ii = 0; ii < n; ii++)
            skeleton.drawOrder[ii] = skeleton.slots[ii];
        return
    }
    var drawOrder = skeleton.drawOrder;
    var slots = skeleton.slots;
    var slot;
    var i = 0;
    if (time < this.frames[0]) {
        if (pose == spine.animation.MixPose.setup) {
            var foreachiter0_target = slots;
            for (var foreachiter0 in foreachiter0_target) {
                slot = foreachiter0_target[foreachiter0];
                drawOrder[i++] = slot
            }
        }
        return
    }
    var frameIndex = 0;
    if (time >= this.frames[org.apache.royale.utils.Language._int(this.frames.length - 1)])
        frameIndex = this.frames.length - 1;
    else
        frameIndex = spine.animation.Animation.binarySearch1(this.frames, time) - 1;
    var drawOrderToSetupIndex = this.drawOrders[frameIndex];
    i = 0;
    if (!drawOrderToSetupIndex) {
        var foreachiter1_target = slots;
        for (var foreachiter1 in foreachiter1_target) {
            slot = foreachiter1_target[foreachiter1];
            drawOrder[i++] = slot
        }
    } else {
        var foreachiter2_target = drawOrderToSetupIndex;
        for (var foreachiter2 in foreachiter2_target) {
            var setupIndex = foreachiter2_target[foreachiter2];
            drawOrder[i++] = slots[setupIndex]
        }
    }
}
;
spine.animation.DrawOrderTimeline.prototype.get__frameCount = function() {
    return this.frames.length
}
;
Object.defineProperties(spine.animation.DrawOrderTimeline.prototype, {
    frameCount: {
        get: spine.animation.DrawOrderTimeline.prototype.get__frameCount
    }
});
spine.animation.DrawOrderTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'DrawOrderTimeline',
        qName: 'spine.animation.DrawOrderTimeline',
        kind: 'class'
    }],
    interfaces: [spine.animation.Timeline]
};
spine.animation.DrawOrderTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'frames': {
                    type: 'Vector.\x3cNumber\x3e'
                },
                'drawOrders': {
                    type: 'Vector.\x3cVector.\x3cint\x3e\x3e'
                }
            }
        },
        accessors: function() {
            return {
                'frameCount': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'spine.animation.DrawOrderTimeline'
                }
            }
        },
        methods: function() {
            return {
                'DrawOrderTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.DrawOrderTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.DrawOrderTimeline'
                },
                'setFrame': {
                    type: 'void',
                    declaredBy: 'spine.animation.DrawOrderTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Vector.\x3cint\x3e',
                            optional: false
                        }]
                    }
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.DrawOrderTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleStepData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleStepData', pigg.data.puzzle.PuzzleStepData);
pigg.data.puzzle.PuzzleStepData.prototype._step = 0;
pigg.data.puzzle.PuzzleStepData.prototype._point = 0;
pigg.data.puzzle.PuzzleStepData.prototype._incentiveItemSize = 0;
pigg.data.puzzle.PuzzleStepData.prototype._eventIncentiveItemData;
pigg.data.puzzle.PuzzleStepData.prototype._itemName;
pigg.data.puzzle.PuzzleStepData.prototype.get__step = function() {
    return this._step
}
;
pigg.data.puzzle.PuzzleStepData.prototype.set__step = function(v) {
    this._step = v
}
;
pigg.data.puzzle.PuzzleStepData.prototype.get__point = function() {
    return this._point
}
;
pigg.data.puzzle.PuzzleStepData.prototype.set__point = function(v) {
    this._point = v
}
;
pigg.data.puzzle.PuzzleStepData.prototype.get__incentiveItemSize = function() {
    return this._incentiveItemSize
}
;
pigg.data.puzzle.PuzzleStepData.prototype.set__incentiveItemSize = function(v) {
    this._incentiveItemSize = v
}
;
pigg.data.puzzle.PuzzleStepData.prototype.get__eventIncentiveItemData = function() {
    return this._eventIncentiveItemData
}
;
pigg.data.puzzle.PuzzleStepData.prototype.set__eventIncentiveItemData = function(v) {
    this._eventIncentiveItemData = v
}
;
pigg.data.puzzle.PuzzleStepData.prototype.get__itemName = function() {
    return this._itemName
}
;
pigg.data.puzzle.PuzzleStepData.prototype.set__itemName = function(v) {
    this._itemName = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleStepData.prototype, {
    step: {
        get: pigg.data.puzzle.PuzzleStepData.prototype.get__step,
        set: pigg.data.puzzle.PuzzleStepData.prototype.set__step
    },
    point: {
        get: pigg.data.puzzle.PuzzleStepData.prototype.get__point,
        set: pigg.data.puzzle.PuzzleStepData.prototype.set__point
    },
    incentiveItemSize: {
        get: pigg.data.puzzle.PuzzleStepData.prototype.get__incentiveItemSize,
        set: pigg.data.puzzle.PuzzleStepData.prototype.set__incentiveItemSize
    },
    eventIncentiveItemData: {
        get: pigg.data.puzzle.PuzzleStepData.prototype.get__eventIncentiveItemData,
        set: pigg.data.puzzle.PuzzleStepData.prototype.set__eventIncentiveItemData
    },
    itemName: {
        get: pigg.data.puzzle.PuzzleStepData.prototype.get__itemName,
        set: pigg.data.puzzle.PuzzleStepData.prototype.set__itemName
    }
});
pigg.data.puzzle.PuzzleStepData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleStepData',
        qName: 'pigg.data.puzzle.PuzzleStepData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleStepData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'step': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                },
                'point': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                },
                'incentiveItemSize': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                },
                'eventIncentiveItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleIncentiveItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                },
                'itemName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleStepData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleStepData'
                }
            }
        }
    }
}
;
spine.animation.PathConstraintSpacingTimeline = function(frameCount) {
    spine.animation.PathConstraintPositionTimeline.call(this, frameCount)
}
;
goog.inherits(spine.animation.PathConstraintSpacingTimeline, spine.animation.PathConstraintPositionTimeline);
goog.exportSymbol('spine.animation.PathConstraintSpacingTimeline', spine.animation.PathConstraintSpacingTimeline);
spine.animation.PathConstraintSpacingTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.pathConstraintSpacing.ordinal << 24) + this.pathConstraintIndex
}
;
spine.animation.PathConstraintSpacingTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
    if (time < this.frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            constraint.spacing = constraint.data.spacing;
            return;
        case spine.animation.MixPose.current:
            constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha
        }
        return
    }
    var spacing;
    if (time >= this.frames[this.frames.length - spine.animation.PathConstraintPositionTimeline.ENTRIES])
        spacing = Number(this.frames[this.frames.length + spine.animation.PathConstraintPositionTimeline.PREV_VALUE]);
    else {
        var frame = spine.animation.Animation.binarySearch(this.frames, time, spine.animation.PathConstraintPositionTimeline.ENTRIES);
        spacing = Number(this.frames[frame + spine.animation.PathConstraintPositionTimeline.PREV_VALUE]);
        var frameTime = Number(this.frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.PathConstraintPositionTimeline.ENTRIES - 1, 1 - (time - frameTime) / (this.frames[frame + spine.animation.PathConstraintPositionTimeline.PREV_TIME] - frameTime));
        spacing += (this.frames[frame + spine.animation.PathConstraintPositionTimeline.VALUE] - spacing) * percent
    }
    if (pose == spine.animation.MixPose.setup)
        constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;
    else
        constraint.spacing += (spacing - constraint.spacing) * alpha
}
;
spine.animation.PathConstraintSpacingTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PathConstraintSpacingTimeline',
        qName: 'spine.animation.PathConstraintSpacingTimeline',
        kind: 'class'
    }]
};
spine.animation.PathConstraintSpacingTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'PathConstraintSpacingTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.PathConstraintSpacingTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.PathConstraintSpacingTimeline'
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.PathConstraintSpacingTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas.AtlasPage = function() {}
;
goog.exportSymbol('spine.atlas.AtlasPage', spine.atlas.AtlasPage);
spine.atlas.AtlasPage.prototype.name;
spine.atlas.AtlasPage.prototype.format;
spine.atlas.AtlasPage.prototype.minFilter;
spine.atlas.AtlasPage.prototype.magFilter;
spine.atlas.AtlasPage.prototype.uWrap;
spine.atlas.AtlasPage.prototype.vWrap;
spine.atlas.AtlasPage.prototype.rendererObject;
spine.atlas.AtlasPage.prototype.width = 0;
spine.atlas.AtlasPage.prototype.height = 0;
spine.atlas.AtlasPage.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AtlasPage',
        qName: 'spine.atlas.AtlasPage',
        kind: 'class'
    }]
};
spine.atlas.AtlasPage.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'name': {
                    type: 'String'
                },
                'format': {
                    type: 'spine.atlas.Format'
                },
                'minFilter': {
                    type: 'spine.atlas.TextureFilter'
                },
                'magFilter': {
                    type: 'spine.atlas.TextureFilter'
                },
                'uWrap': {
                    type: 'spine.atlas.TextureWrap'
                },
                'vWrap': {
                    type: 'spine.atlas.TextureWrap'
                },
                'rendererObject': {
                    type: 'Object'
                },
                'width': {
                    type: 'int'
                },
                'height': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AtlasPage': {
                    type: '',
                    declaredBy: 'spine.atlas.AtlasPage'
                }
            }
        }
    }
}
;
pigg.puzzle.data.NumberFontInfo = function() {}
;
goog.exportSymbol('pigg.puzzle.data.NumberFontInfo', pigg.puzzle.data.NumberFontInfo);
pigg.puzzle.data.NumberFontInfo.prototype._rect;
pigg.puzzle.data.NumberFontInfo.prototype._tilemap;
pigg.puzzle.data.NumberFontInfo.prototype._tileset;
pigg.puzzle.data.NumberFontInfo.prototype._tile;
pigg.puzzle.data.NumberFontInfo.prototype._tiles;
pigg.puzzle.data.NumberFontInfo.prototype._id = 0;
pigg.puzzle.data.NumberFontInfo.prototype._color;
pigg.puzzle.data.NumberFontInfo.prototype._backColor;
pigg.puzzle.data.NumberFontInfo.prototype._baseX;
pigg.puzzle.data.NumberFontInfo.prototype._baseY;
pigg.puzzle.data.NumberFontInfo.prototype._align;
pigg.puzzle.data.NumberFontInfo.prototype._size;
pigg.puzzle.data.NumberFontInfo.prototype._isQuantity;
pigg.puzzle.data.NumberFontInfo.prototype._bigBack;
pigg.puzzle.data.NumberFontInfo.prototype._num = 0;
pigg.puzzle.data.NumberFontInfo.prototype.clean = function() {}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__rect = function() {
    return this._rect
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__rect = function(value) {
    this._rect = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__tilemap = function() {
    return this._tilemap
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__tilemap = function(value) {
    this._tilemap = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__tileset = function() {
    return this._tileset
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__tileset = function(value) {
    this._tileset = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__tile = function() {
    return this._tile
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__tile = function(value) {
    this._tile = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__tiles = function() {
    return this._tiles
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__tiles = function(value) {
    this._tiles = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__id = function() {
    return this._id
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__id = function(value) {
    this._id = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__color = function() {
    return this._color
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__color = function(value) {
    this._color = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__backColor = function() {
    return this._backColor
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__backColor = function(value) {
    this._backColor = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__baseX = function() {
    return this._baseX
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__baseX = function(value) {
    this._baseX = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__baseY = function() {
    return this._baseY
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__baseY = function(value) {
    this._baseY = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__align = function() {
    return this._align
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__align = function(value) {
    this._align = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__size = function() {
    return this._size
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__size = function(value) {
    this._size = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__isQuantity = function() {
    return this._isQuantity
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__isQuantity = function(value) {
    this._isQuantity = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__bigBack = function() {
    return this._bigBack
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__bigBack = function(value) {
    this._bigBack = value
}
;
pigg.puzzle.data.NumberFontInfo.prototype.get__num = function() {
    return this._num
}
;
pigg.puzzle.data.NumberFontInfo.prototype.set__num = function(value) {
    this._num = value
}
;
Object.defineProperties(pigg.puzzle.data.NumberFontInfo.prototype, {
    rect: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__rect,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__rect
    },
    tilemap: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__tilemap,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__tilemap
    },
    tileset: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__tileset,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__tileset
    },
    tile: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__tile,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__tile
    },
    tiles: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__tiles,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__tiles
    },
    id: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__id,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__id
    },
    color: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__color,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__color
    },
    backColor: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__backColor,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__backColor
    },
    baseX: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__baseX,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__baseX
    },
    baseY: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__baseY,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__baseY
    },
    align: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__align,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__align
    },
    size: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__size,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__size
    },
    isQuantity: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__isQuantity,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__isQuantity
    },
    bigBack: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__bigBack,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__bigBack
    },
    num: {
        get: pigg.puzzle.data.NumberFontInfo.prototype.get__num,
        set: pigg.puzzle.data.NumberFontInfo.prototype.set__num
    }
});
pigg.puzzle.data.NumberFontInfo.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'NumberFontInfo',
        qName: 'pigg.puzzle.data.NumberFontInfo',
        kind: 'class'
    }]
};
pigg.puzzle.data.NumberFontInfo.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'rect': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'tilemap': {
                    type: 'openfl.display.Tilemap',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'tileset': {
                    type: 'openfl.display.Tileset',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'tile': {
                    type: 'TileBase',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'tiles': {
                    type: 'Array',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'id': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'color': {
                    type: 'Vector.\x3cuint\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'backColor': {
                    type: 'Vector.\x3cuint\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'baseX': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'baseY': {
                    type: 'Vector.\x3cint\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'align': {
                    type: 'Vector.\x3cString\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'size': {
                    type: 'Vector.\x3cNumber\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'isQuantity': {
                    type: 'Vector.\x3cBoolean\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'bigBack': {
                    type: 'Vector.\x3cBoolean\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'num': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                }
            }
        },
        methods: function() {
            return {
                'NumberFontInfo': {
                    type: '',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                },
                'clean': {
                    type: 'void',
                    declaredBy: 'pigg.puzzle.data.NumberFontInfo'
                }
            }
        }
    }
}
;
spine.Bone = function(data, skeleton, parent) {
    this._children = org.apache.royale.utils.Language.Vector();
    if (data == null)
        throw new openfl.errors.ArgumentError('Bone::data cannot be null.');
    if (skeleton == null)
        throw new openfl.errors.ArgumentError('skeleton cannot be null.');
    this._data = data;
    this._skeleton = skeleton;
    this._parent = parent;
    this.setToSetupPose()
}
;
goog.exportSymbol('spine.Bone', spine.Bone);
spine.Bone.yDown;
spine.Bone.prototype._data;
spine.Bone.prototype._skeleton;
spine.Bone.prototype._parent;
spine.Bone.prototype._children;
spine.Bone.prototype.x;
spine.Bone.prototype.y;
spine.Bone.prototype.rotation;
spine.Bone.prototype.scaleX;
spine.Bone.prototype.scaleY;
spine.Bone.prototype.shearX;
spine.Bone.prototype.shearY;
spine.Bone.prototype.ax;
spine.Bone.prototype.ay;
spine.Bone.prototype.arotation;
spine.Bone.prototype.ascaleX;
spine.Bone.prototype.ascaleY;
spine.Bone.prototype.ashearX;
spine.Bone.prototype.ashearY;
spine.Bone.prototype.appliedValid;
spine.Bone.prototype.a;
spine.Bone.prototype.b;
spine.Bone.prototype.c;
spine.Bone.prototype.d;
spine.Bone.prototype.worldX;
spine.Bone.prototype.worldY;
spine.Bone.prototype._sorted;
spine.Bone.prototype.update = function() {
    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
}
;
spine.Bone.prototype.updateWorldTransform = function() {
    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
}
;
spine.Bone.prototype.updateWorldTransformWith = function(x, y, rotation, scaleX, scaleY, shearX, shearY) {
    this.ax = x;
    this.ay = y;
    this.arotation = rotation;
    this.ascaleX = scaleX;
    this.ascaleY = scaleY;
    this.ashearX = shearX;
    this.ashearY = shearY;
    this.appliedValid = true;
    var rotationY = 0
      , la = 0
      , lb = 0
      , lc = 0
      , ld = 0;
    var sin = 0
      , cos = 0;
    var s = 0;
    var parent = this._parent;
    if (!parent) {
        rotationY = rotation + 90 + shearY;
        la = spine.MathUtils.cosDeg(rotation + shearX) * scaleX;
        lb = spine.MathUtils.cosDeg(rotationY) * scaleY;
        lc = spine.MathUtils.sinDeg(rotation + shearX) * scaleX;
        ld = spine.MathUtils.sinDeg(rotationY) * scaleY;
        var skeleton = this._skeleton;
        if (skeleton.flipX) {
            x = -x;
            la = -la;
            lb = -lb
        }
        if (skeleton.flipY != spine.Bone.yDown) {
            y = -y;
            lc = -lc;
            ld = -ld
        }
        this.a = la;
        this.b = lb;
        this.c = lc;
        this.d = ld;
        this.worldX = x + skeleton.x;
        this.worldY = y + skeleton.y;
        return
    }
    var pa = parent.a
      , pb = parent.b
      , pc = parent.c
      , pd = parent.d;
    this.worldX = pa * x + pb * y + parent.worldX;
    this.worldY = pc * x + pd * y + parent.worldY;
    switch (this.data.transformMode) {
    case spine.TransformMode.normal:
        rotationY = rotation + 90 + shearY;
        la = spine.MathUtils.cosDeg(rotation + shearX) * scaleX;
        lb = spine.MathUtils.cosDeg(rotationY) * scaleY;
        lc = spine.MathUtils.sinDeg(rotation + shearX) * scaleX;
        ld = spine.MathUtils.sinDeg(rotationY) * scaleY;
        this.a = pa * la + pb * lc;
        this.b = pa * lb + pb * ld;
        this.c = pc * la + pd * lc;
        this.d = pc * lb + pd * ld;
        return;
    case spine.TransformMode.onlyTranslation:
        rotationY = rotation + 90 + shearY;
        this.a = spine.MathUtils.cosDeg(rotation + shearX) * scaleX;
        this.b = spine.MathUtils.cosDeg(rotationY) * scaleY;
        this.c = spine.MathUtils.sinDeg(rotation + shearX) * scaleX;
        this.d = spine.MathUtils.sinDeg(rotationY) * scaleY;
        break;
    case spine.TransformMode.noRotationOrReflection:
        s = pa * pa + pc * pc;
        var prx = 0;
        if (s > 1E-4) {
            s = Math.abs(pa * pd - pb * pc) / s;
            pb = pc * s;
            pd = pa * s;
            prx = Math.atan2(pc, pa) * spine.MathUtils.radDeg
        } else {
            pa = 0;
            pc = 0;
            prx = 90 - Math.atan2(pd, pb) * spine.MathUtils.radDeg
        }
        var rx = rotation + shearX - prx;
        var ry = rotation + shearY - prx + 90;
        la = spine.MathUtils.cosDeg(rx) * scaleX;
        lb = spine.MathUtils.cosDeg(ry) * scaleY;
        lc = spine.MathUtils.sinDeg(rx) * scaleX;
        ld = spine.MathUtils.sinDeg(ry) * scaleY;
        this.a = pa * la - pb * lc;
        this.b = pa * lb - pb * ld;
        this.c = pc * la + pd * lc;
        this.d = pc * lb + pd * ld;
        break;
    case spine.TransformMode.noScale:
    case spine.TransformMode.noScaleOrReflection:
        cos = spine.MathUtils.cosDeg(rotation);
        sin = spine.MathUtils.sinDeg(rotation);
        var za = pa * cos + pb * sin;
        var zc = pc * cos + pd * sin;
        s = Math.sqrt(za * za + zc * zc);
        if (s > 1E-5)
            s = 1 / s;
        za *= s;
        zc *= s;
        s = Math.sqrt(za * za + zc * zc);
        var r = Math.PI / 2 + Math.atan2(zc, za);
        var zb = Math.cos(r) * s;
        var zd = Math.sin(r) * s;
        la = spine.MathUtils.cosDeg(shearX) * scaleX;
        lb = spine.MathUtils.cosDeg(90 + shearY) * scaleY;
        lc = spine.MathUtils.sinDeg(shearX) * scaleX;
        ld = spine.MathUtils.sinDeg(90 + shearY) * scaleY;
        if (this.data.transformMode != spine.TransformMode.noScaleOrReflection ? pa * pd - pb * pc < 0 : this.skeleton.flipX != this.skeleton.flipY) {
            zb = -zb;
            zd = -zd
        }
        this.a = za * la + zb * lc;
        this.b = za * lb + zb * ld;
        this.c = zc * la + zd * lc;
        this.d = zc * lb + zd * ld;
        return
    }
    if (this._skeleton.flipX) {
        this.a = -this.a;
        this.b = -this.b
    }
    if (this._skeleton.flipY != spine.Bone.yDown) {
        this.c = -this.c;
        this.d = -this.d
    }
}
;
spine.Bone.prototype.setToSetupPose = function() {
    this.x = this.data.x;
    this.y = this.data.y;
    this.rotation = this.data.rotation;
    this.scaleX = this.data.scaleX;
    this.scaleY = this.data.scaleY;
    this.shearX = this.data.shearX;
    this.shearY = this.data.shearY
}
;
spine.Bone.prototype.updateAppliedTransform = function() {
    this.appliedValid = true;
    var parent = this.parent;
    if (parent == null) {
        this.ax = this.worldX;
        this.ay = this.worldY;
        this.arotation = Math.atan2(this.c, this.a) * spine.MathUtils.radDeg;
        this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
        this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
        this.ashearX = 0;
        this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * spine.MathUtils.radDeg;
        return
    }
    var pa = parent.a
      , pb = parent.b
      , pc = parent.c
      , pd = parent.d;
    var pid = 1 / (pa * pd - pb * pc);
    var dx = this.worldX - parent.worldX
      , dy = this.worldY - parent.worldY;
    this.ax = dx * pd * pid - dy * pb * pid;
    this.ay = dy * pa * pid - dx * pc * pid;
    var ia = pid * pd;
    var id = pid * pa;
    var ib = pid * pb;
    var ic = pid * pc;
    var ra = ia * this.a - ib * this.c;
    var rb = ia * this.b - ib * this.d;
    var rc = id * this.c - ic * this.a;
    var rd = id * this.d - ic * this.b;
    this.ashearX = 0;
    this.ascaleX = Math.sqrt(ra * ra + rc * rc);
    if (this.scaleX > 1E-4) {
        var det = ra * rd - rb * rc;
        this.ascaleY = det / this.ascaleX;
        this.ashearY = Math.atan2(ra * rb + rc * rd, det) * spine.MathUtils.radDeg;
        this.arotation = Math.atan2(rc, ra) * spine.MathUtils.radDeg
    } else {
        this.ascaleX = 0;
        this.ascaleY = Math.sqrt(rb * rb + rd * rd);
        this.ashearY = 0;
        this.arotation = 90 - Math.atan2(rd, rb) * spine.MathUtils.radDeg
    }
}
;
spine.Bone.prototype.worldToLocal = function(world) {
    var a = this.a
      , b = this.b
      , c = this.c
      , d = this.d;
    var invDet = 1 / (a * d - b * c);
    var x = world[0] - this.worldX
      , y = world[1] - this.worldY;
    world[0] = x * d * invDet - y * b * invDet;
    world[1] = y * a * invDet - x * c * invDet
}
;
spine.Bone.prototype.localToWorld = function(local) {
    var localX = Number(local[0])
      , localY = Number(local[1]);
    local[0] = localX * this.a + localY * this.b + this.worldX;
    local[1] = localX * this.c + localY * this.d + this.worldY
}
;
spine.Bone.prototype.worldToLocalRotation = function(worldRotation) {
    var sin = spine.MathUtils.sinDeg(worldRotation)
      , cos = spine.MathUtils.cosDeg(worldRotation);
    return Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * spine.MathUtils.radDeg
}
;
spine.Bone.prototype.localToWorldRotation = function(localRotation) {
    var sin = spine.MathUtils.sinDeg(localRotation)
      , cos = spine.MathUtils.cosDeg(localRotation);
    return Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * spine.MathUtils.radDeg
}
;
spine.Bone.prototype.rotateWorld = function(degrees) {
    var a = this.a
      , b = this.b
      , c = this.c
      , d = this.d;
    var cos = spine.MathUtils.cosDeg(degrees)
      , sin = spine.MathUtils.sinDeg(degrees);
    this.a = cos * a - sin * c;
    this.b = cos * b - sin * d;
    this.c = sin * a + cos * c;
    this.d = sin * b + cos * d;
    this.appliedValid = false
}
;
spine.Bone.prototype.toString = function() {
    return this.data._name
}
;
spine.Bone.prototype.get__data = function() {
    return this._data
}
;
spine.Bone.prototype.get__skeleton = function() {
    return this._skeleton
}
;
spine.Bone.prototype.get__parent = function() {
    return this._parent
}
;
spine.Bone.prototype.get__children = function() {
    return this._children
}
;
spine.Bone.prototype.get__worldRotationX = function() {
    return Math.atan2(this.c, this.a) * spine.MathUtils.radDeg
}
;
spine.Bone.prototype.get__worldRotationY = function() {
    return Math.atan2(this.d, this.b) * spine.MathUtils.radDeg
}
;
spine.Bone.prototype.get__worldScaleX = function() {
    return Math.sqrt(this.a * this.a + this.c * this.c)
}
;
spine.Bone.prototype.get__worldScaleY = function() {
    return Math.sqrt(this.b * this.b + this.d * this.d)
}
;
Object.defineProperties(spine.Bone.prototype, {
    data: {
        get: spine.Bone.prototype.get__data
    },
    skeleton: {
        get: spine.Bone.prototype.get__skeleton
    },
    parent: {
        get: spine.Bone.prototype.get__parent
    },
    children: {
        get: spine.Bone.prototype.get__children
    },
    worldRotationX: {
        get: spine.Bone.prototype.get__worldRotationX
    },
    worldRotationY: {
        get: spine.Bone.prototype.get__worldRotationY
    },
    worldScaleX: {
        get: spine.Bone.prototype.get__worldScaleX
    },
    worldScaleY: {
        get: spine.Bone.prototype.get__worldScaleY
    }
});
spine.Bone.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Bone',
        qName: 'spine.Bone',
        kind: 'class'
    }],
    interfaces: [spine.Updatable]
};
spine.Bone.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '|yDown': {
                    type: 'Boolean'
                },
                'x': {
                    type: 'Number'
                },
                'y': {
                    type: 'Number'
                },
                'rotation': {
                    type: 'Number'
                },
                'scaleX': {
                    type: 'Number'
                },
                'scaleY': {
                    type: 'Number'
                },
                'shearX': {
                    type: 'Number'
                },
                'shearY': {
                    type: 'Number'
                },
                'ax': {
                    type: 'Number'
                },
                'ay': {
                    type: 'Number'
                },
                'arotation': {
                    type: 'Number'
                },
                'ascaleX': {
                    type: 'Number'
                },
                'ascaleY': {
                    type: 'Number'
                },
                'ashearX': {
                    type: 'Number'
                },
                'ashearY': {
                    type: 'Number'
                },
                'appliedValid': {
                    type: 'Boolean'
                },
                'a': {
                    type: 'Number'
                },
                'b': {
                    type: 'Number'
                },
                'c': {
                    type: 'Number'
                },
                'd': {
                    type: 'Number'
                },
                'worldX': {
                    type: 'Number'
                },
                'worldY': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {
                'data': {
                    type: 'spine.BoneData',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'skeleton': {
                    type: 'spine.Skeleton',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'parent': {
                    type: 'spine.Bone',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'children': {
                    type: 'Vector.\x3cspine.Bone\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'worldRotationX': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'worldRotationY': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'worldScaleX': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                },
                'worldScaleY': {
                    type: 'Number',
                    access: 'readonly',
                    declaredBy: 'spine.Bone'
                }
            }
        },
        methods: function() {
            return {
                'Bone': {
                    type: '',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.BoneData',
                            optional: false
                        }, {
                            index: 2,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 3,
                            type: 'spine.Bone',
                            optional: false
                        }]
                    }
                },
                'update': {
                    type: 'void',
                    declaredBy: 'spine.Bone'
                },
                'updateWorldTransform': {
                    type: 'void',
                    declaredBy: 'spine.Bone'
                },
                'updateWorldTransformWith': {
                    type: 'void',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 7,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'setToSetupPose': {
                    type: 'void',
                    declaredBy: 'spine.Bone'
                },
                'worldToLocal': {
                    type: 'void',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }]
                    }
                },
                'localToWorld': {
                    type: 'void',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Vector.\x3cNumber\x3e',
                            optional: false
                        }]
                    }
                },
                'worldToLocalRotation': {
                    type: 'Number',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'localToWorldRotation': {
                    type: 'Number',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'rotateWorld': {
                    type: 'void',
                    declaredBy: 'spine.Bone',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.Bone'
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleUserData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleUserData', pigg.data.puzzle.PuzzleUserData);
pigg.data.puzzle.PuzzleUserData.prototype._status;
pigg.data.puzzle.PuzzleUserData.prototype._equippedScoreItemCategory = '';
pigg.data.puzzle.PuzzleUserData.prototype._scoreItemData;
pigg.data.puzzle.PuzzleUserData.prototype._cheatItemData;
pigg.data.puzzle.PuzzleUserData.prototype._hasLimitedTermIncentive;
pigg.data.puzzle.PuzzleUserData.prototype._hasLimitedQuantityIncentive;
pigg.data.puzzle.PuzzleUserData.prototype._hasEvent;
pigg.data.puzzle.PuzzleUserData.prototype._eventCode;
pigg.data.puzzle.PuzzleUserData.prototype._eventPoint = 0;
pigg.data.puzzle.PuzzleUserData.prototype._eventWinningStreakCount = 0;
pigg.data.puzzle.PuzzleUserData.prototype._hasTheme;
pigg.data.puzzle.PuzzleUserData.prototype._boardCode;
pigg.data.puzzle.PuzzleUserData.prototype._boardUUID;
pigg.data.puzzle.PuzzleUserData.prototype._boardBaseData;
pigg.data.puzzle.PuzzleUserData.prototype._boardData;
pigg.data.puzzle.PuzzleUserData.prototype._boardPoint = 0;
pigg.data.puzzle.PuzzleUserData.prototype._boardRemainingMoveCount = 0;
pigg.data.puzzle.PuzzleUserData.prototype._isScoreItemUsing;
pigg.data.puzzle.PuzzleUserData.prototype._boardUsingPuzzleScoreItemCategory = '';
pigg.data.puzzle.PuzzleUserData.prototype._boardUsingPuzzleScoreItemMagnification = 0;
pigg.data.puzzle.PuzzleUserData.prototype._progressCount = 0;
pigg.data.puzzle.PuzzleUserData.prototype._scoreItemSize = 0;
pigg.data.puzzle.PuzzleUserData.prototype._cheatItemSize = 0;
pigg.data.puzzle.PuzzleUserData.prototype._themeMissionPoint = 0;
pigg.data.puzzle.PuzzleUserData.prototype._missionPoint = 0;
pigg.data.puzzle.PuzzleUserData.prototype._isDuringRoulette;
pigg.data.puzzle.PuzzleUserData.prototype._hasRanking;
pigg.data.puzzle.PuzzleUserData.prototype._piggCode;
pigg.data.puzzle.PuzzleUserData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__equippedScoreItemCategory = function() {
    return this._equippedScoreItemCategory
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__equippedScoreItemCategory = function(v) {
    this._equippedScoreItemCategory = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__eventCode = function() {
    return this._eventCode
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__eventCode = function(v) {
    this._eventCode = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardCode = function() {
    return this._boardCode
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardCode = function(v) {
    this._boardCode = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardUUID = function() {
    return this._boardUUID
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardUUID = function(v) {
    this._boardUUID = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardBaseData = function() {
    return this._boardBaseData
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardBaseData = function(v) {
    this._boardBaseData = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardData = function() {
    return this._boardData
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardData = function(v) {
    this._boardData = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardUsingPuzzleScoreItemCategory = function() {
    return this._boardUsingPuzzleScoreItemCategory
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardUsingPuzzleScoreItemCategory = function(v) {
    this._boardUsingPuzzleScoreItemCategory = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__scoreItemData = function() {
    return this._scoreItemData
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__scoreItemData = function(v) {
    this._scoreItemData = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__cheatItemData = function() {
    return this._cheatItemData
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__cheatItemData = function(v) {
    this._cheatItemData = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__hasLimitedTermIncentive = function() {
    return this._hasLimitedTermIncentive
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__hasLimitedTermIncentive = function(v) {
    this._hasLimitedTermIncentive = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__hasLimitedQuantityIncentive = function() {
    return this._hasLimitedQuantityIncentive
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__hasLimitedQuantityIncentive = function(v) {
    this._hasLimitedQuantityIncentive = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__hasEvent = function() {
    return this._hasEvent
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__hasEvent = function(v) {
    this._hasEvent = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__hasTheme = function() {
    return this._hasTheme
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__hasTheme = function(v) {
    this._hasTheme = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__isScoreItemUsing = function() {
    return this._isScoreItemUsing
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__isScoreItemUsing = function(v) {
    this._isScoreItemUsing = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__isDuringRoulette = function() {
    return this._isDuringRoulette
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__isDuringRoulette = function(v) {
    this._isDuringRoulette = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__hasRanking = function() {
    return this._hasRanking
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__hasRanking = function(v) {
    this._hasRanking = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__eventPoint = function() {
    return this._eventPoint
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__eventPoint = function(v) {
    this._eventPoint = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__eventWinningStreakCount = function() {
    return this._eventWinningStreakCount
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__eventWinningStreakCount = function(v) {
    this._eventWinningStreakCount = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardPoint = function() {
    return this._boardPoint
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardPoint = function(v) {
    this._boardPoint = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardRemainingMoveCount = function() {
    return this._boardRemainingMoveCount
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardRemainingMoveCount = function(v) {
    this._boardRemainingMoveCount = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__boardUsingPuzzleScoreItemMagnification = function() {
    return this._boardUsingPuzzleScoreItemMagnification
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__boardUsingPuzzleScoreItemMagnification = function(v) {
    this._boardUsingPuzzleScoreItemMagnification = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__progressCount = function() {
    return this._progressCount
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__progressCount = function(v) {
    this._progressCount = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__themeMissionPoint = function() {
    return this._themeMissionPoint
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__themeMissionPoint = function(v) {
    this._themeMissionPoint = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__missionPoint = function() {
    return this._missionPoint
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__missionPoint = function(v) {
    this._missionPoint = v
}
;
pigg.data.puzzle.PuzzleUserData.prototype.get__piggCode = function() {
    return this._piggCode
}
;
pigg.data.puzzle.PuzzleUserData.prototype.set__piggCode = function(v) {
    this._piggCode = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleUserData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__status
    },
    equippedScoreItemCategory: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__equippedScoreItemCategory,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__equippedScoreItemCategory
    },
    eventCode: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__eventCode,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__eventCode
    },
    boardCode: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardCode,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardCode
    },
    boardUUID: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardUUID,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardUUID
    },
    boardBaseData: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardBaseData,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardBaseData
    },
    boardData: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardData,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardData
    },
    boardUsingPuzzleScoreItemCategory: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardUsingPuzzleScoreItemCategory,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardUsingPuzzleScoreItemCategory
    },
    scoreItemData: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__scoreItemData,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__scoreItemData
    },
    cheatItemData: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__cheatItemData,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__cheatItemData
    },
    hasLimitedTermIncentive: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__hasLimitedTermIncentive,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__hasLimitedTermIncentive
    },
    hasLimitedQuantityIncentive: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__hasLimitedQuantityIncentive,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__hasLimitedQuantityIncentive
    },
    hasEvent: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__hasEvent,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__hasEvent
    },
    hasTheme: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__hasTheme,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__hasTheme
    },
    isScoreItemUsing: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__isScoreItemUsing,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__isScoreItemUsing
    },
    isDuringRoulette: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__isDuringRoulette,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__isDuringRoulette
    },
    hasRanking: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__hasRanking,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__hasRanking
    },
    eventPoint: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__eventPoint,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__eventPoint
    },
    eventWinningStreakCount: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__eventWinningStreakCount,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__eventWinningStreakCount
    },
    boardPoint: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardPoint,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardPoint
    },
    boardRemainingMoveCount: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardRemainingMoveCount,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardRemainingMoveCount
    },
    boardUsingPuzzleScoreItemMagnification: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__boardUsingPuzzleScoreItemMagnification,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__boardUsingPuzzleScoreItemMagnification
    },
    progressCount: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__progressCount,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__progressCount
    },
    themeMissionPoint: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__themeMissionPoint,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__themeMissionPoint
    },
    missionPoint: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__missionPoint,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__missionPoint
    },
    piggCode: {
        get: pigg.data.puzzle.PuzzleUserData.prototype.get__piggCode,
        set: pigg.data.puzzle.PuzzleUserData.prototype.set__piggCode
    }
});
pigg.data.puzzle.PuzzleUserData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleUserData',
        qName: 'pigg.data.puzzle.PuzzleUserData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleUserData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'equippedScoreItemCategory': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'eventCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardUUID': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardBaseData': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardData': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardUsingPuzzleScoreItemCategory': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'scoreItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleUserItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'cheatItemData': {
                    type: 'Vector.\x3cpigg.data.puzzle.PuzzleUserItemData\x3e',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'hasLimitedTermIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'hasLimitedQuantityIncentive': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'hasEvent': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'hasTheme': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'isScoreItemUsing': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'isDuringRoulette': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'hasRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'eventPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'eventWinningStreakCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardRemainingMoveCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'boardUsingPuzzleScoreItemMagnification': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'progressCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'themeMissionPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'missionPoint': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                },
                'piggCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleUserData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserData'
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleOpenData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleOpenData', pigg.data.puzzle.PuzzleOpenData);
pigg.data.puzzle.PuzzleOpenData.prototype._status;
pigg.data.puzzle.PuzzleOpenData.prototype._isEventFirstTime;
pigg.data.puzzle.PuzzleOpenData.prototype._hasPrevEventRanking;
pigg.data.puzzle.PuzzleOpenData.prototype._prevRankingData;
pigg.data.puzzle.PuzzleOpenData.prototype._prevEventCode;
pigg.data.puzzle.PuzzleOpenData.prototype._prevEventTitle;
pigg.data.puzzle.PuzzleOpenData.prototype.readData = function(data) {
    this._hasPrevEventRanking = true;
    if (!this._hasPrevEventRanking)
        return;
    this._prevEventCode = org.apache.royale.utils.Language.string(data['prevEventCode']);
    this._prevEventTitle = org.apache.royale.utils.Language.string(data['prevEventTitle']);
    this._prevRankingData = new pigg.data.puzzle.PuzzleRankingUserData;
    var rankSize = Number(data['rankings'].length);
    if (rankSize == 0) {
        this._hasPrevEventRanking = false;
        return
    }
    var cnt = 0
      , cnt2 = 0;
    var rankingType;
    var rankingIncentiveSize = 0;
    var item;
    var rankingInfo;
    var rankingItemInfo;
    for (cnt = 0; cnt < rankSize; cnt++) {
        rankingInfo = data['rankings'][cnt];
        rankingType = org.apache.royale.utils.Language.string(rankingInfo['rankingTypeCode']);
        if (rankingType == 'score') {
            this._prevRankingData.pointRank = Number(rankingInfo['rank']);
            this._prevRankingData.pointAwardName = org.apache.royale.utils.Language.string(rankingInfo['awardTypeCode']);
            this._prevRankingData.pointValue = Number(rankingInfo['value']);
            this._prevRankingData.pointAwardIndex = this._prevRankingData.awardIndex(this._prevRankingData.pointAwardName);
            rankingIncentiveSize = Number(rankingInfo['rankingIncentives'].length);
            this._prevRankingData.pointRankIncentive = org.apache.royale.utils.Language.Vector();
            for (cnt2 = 0; cnt2 < rankingIncentiveSize; cnt2++) {
                rankingItemInfo = rankingInfo['rankingIncentives'][cnt2];
                item = new pigg.data.puzzle.PuzzleIncentiveItemData;
                item.itemCode = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemCode']);
                item.itemType = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemType']);
                item.itemType = this.checkItemType(item.itemType);
                item.itemName = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemName']);
                item.itemQuantity = Number(rankingItemInfo['rankingIncentiveItemQuantity']);
                item.isRankingSpecial = rankingItemInfo['rankingIncentiveItemSpecial'];
                if (!item.isRankingSpecial)
                    this._prevRankingData.pointRankIncentive.push(item);
                else {
                    this._prevRankingData.pointHasSpecialIncentive++;
                    this._prevRankingData.pointRankIncentive.unshift(item)
                }
            }
        } else if (rankingType == 'winning_streak') {
            this._prevRankingData.winningRank = Number(rankingInfo['rank']);
            this._prevRankingData.winningAwardName = org.apache.royale.utils.Language.string(rankingInfo['awardTypeCode']);
            this._prevRankingData.winningValue = Number(rankingInfo['value']);
            this._prevRankingData.winningAwardIndex = this._prevRankingData.awardIndex(this._prevRankingData.winningAwardName);
            rankingIncentiveSize = Number(rankingInfo['rankingIncentives'].length);
            this._prevRankingData.winningRankIncentive = org.apache.royale.utils.Language.Vector();
            for (cnt2 = 0; cnt2 < rankingIncentiveSize; cnt2++) {
                rankingItemInfo = rankingInfo['rankingIncentives'][cnt2];
                item = new pigg.data.puzzle.PuzzleIncentiveItemData;
                item.itemCode = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemCode']);
                item.itemType = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemType']);
                item.itemType = this.checkItemType(item.itemType);
                item.itemName = org.apache.royale.utils.Language.string(rankingItemInfo['rankingIncentiveItemName']);
                item.itemQuantity = Number(rankingItemInfo['rankingIncentiveItemQuantity']);
                item.isRankingSpecial = rankingItemInfo['rankingIncentiveItemSpecial'];
                if (!item.isRankingSpecial)
                    this._prevRankingData.winningRankIncentive.push(item);
                else {
                    this._prevRankingData.winningHasSpecialIncentive++;
                    this._prevRankingData.winningRankIncentive.unshift(item)
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.checkItemType = function(itemType) {
    var str;
    if (itemType == 'exterior')
        str = 'furniture';
    else if (itemType == 'cosmeticitem')
        str = 'cosmetic';
    else
        str = itemType;
    return str
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__prevEventCode = function() {
    return this._prevEventCode
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__prevEventCode = function(v) {
    this._prevEventCode = v
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__prevEventTitle = function() {
    return this._prevEventTitle
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__prevEventTitle = function(v) {
    this._prevEventTitle = v
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__isEventFirstTime = function() {
    return this._isEventFirstTime
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__isEventFirstTime = function(v) {
    this._isEventFirstTime = v
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__hasPrevEventRanking = function() {
    return this._hasPrevEventRanking
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__hasPrevEventRanking = function(v) {
    this._hasPrevEventRanking = v
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.get__prevRankingData = function() {
    return this._prevRankingData
}
;
pigg.data.puzzle.PuzzleOpenData.prototype.set__prevRankingData = function(v) {
    this._prevRankingData = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleOpenData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__status
    },
    prevEventCode: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__prevEventCode,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__prevEventCode
    },
    prevEventTitle: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__prevEventTitle,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__prevEventTitle
    },
    isEventFirstTime: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__isEventFirstTime,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__isEventFirstTime
    },
    hasPrevEventRanking: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__hasPrevEventRanking,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__hasPrevEventRanking
    },
    prevRankingData: {
        get: pigg.data.puzzle.PuzzleOpenData.prototype.get__prevRankingData,
        set: pigg.data.puzzle.PuzzleOpenData.prototype.set__prevRankingData
    }
});
pigg.data.puzzle.PuzzleOpenData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleOpenData',
        qName: 'pigg.data.puzzle.PuzzleOpenData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleOpenData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'prevEventCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'prevEventTitle': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'isEventFirstTime': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'hasPrevEventRanking': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'prevRankingData': {
                    type: 'pigg.data.puzzle.PuzzleRankingUserData',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleOpenData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleOpenData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.ShearTimeline = function(frameCount) {
    spine.animation.TranslateTimeline.call(this, frameCount)
}
;
goog.inherits(spine.animation.ShearTimeline, spine.animation.TranslateTimeline);
goog.exportSymbol('spine.animation.ShearTimeline', spine.animation.ShearTimeline);
spine.animation.ShearTimeline.prototype.getPropertyId = function() {
    return (spine.animation.TimelineType.shear.ordinal << 24) + this.boneIndex
}
;
spine.animation.ShearTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, pose, direction) {
    var frames = this.frames;
    var bone = skeleton.bones[this.boneIndex];
    if (time < frames[0]) {
        switch (pose) {
        case spine.animation.MixPose.setup:
            bone.shearX = bone.data.shearX;
            bone.shearY = bone.data.shearY;
            return;
        case spine.animation.MixPose.current:
            bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
            bone.shearY += (bone.data.shearY - bone.shearY) * alpha
        }
        return
    }
    var x, y;
    if (time >= frames[frames.length - spine.animation.TranslateTimeline.ENTRIES]) {
        x = Number(frames[frames.length + spine.animation.TranslateTimeline.PREV_X]);
        y = Number(frames[frames.length + spine.animation.TranslateTimeline.PREV_Y])
    } else {
        var frame = spine.animation.Animation.binarySearch(frames, time, spine.animation.TranslateTimeline.ENTRIES);
        x = Number(frames[frame + spine.animation.TranslateTimeline.PREV_X]);
        y = Number(frames[frame + spine.animation.TranslateTimeline.PREV_Y]);
        var frameTime = Number(frames[frame]);
        var percent = this.getCurvePercent(frame / spine.animation.TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + spine.animation.TranslateTimeline.PREV_TIME] - frameTime));
        x = x + (frames[frame + spine.animation.TranslateTimeline.X] - x) * percent;
        y = y + (frames[frame + spine.animation.TranslateTimeline.Y] - y) * percent
    }
    if (pose == spine.animation.MixPose.setup) {
        bone.shearX = bone.data.shearX + x * alpha;
        bone.shearY = bone.data.shearY + y * alpha
    } else {
        bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
        bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha
    }
}
;
spine.animation.ShearTimeline.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'ShearTimeline',
        qName: 'spine.animation.ShearTimeline',
        kind: 'class'
    }]
};
spine.animation.ShearTimeline.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'ShearTimeline': {
                    type: '',
                    declaredBy: 'spine.animation.ShearTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'getPropertyId': {
                    type: 'int',
                    declaredBy: 'spine.animation.ShearTimeline'
                },
                'apply': {
                    type: 'void',
                    declaredBy: 'spine.animation.ShearTimeline',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Skeleton',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Vector.\x3cspine.Event\x3e',
                            optional: false
                        }, {
                            index: 5,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 6,
                            type: 'spine.animation.MixPose',
                            optional: false
                        }, {
                            index: 7,
                            type: 'spine.animation.MixDirection',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.EventType = function() {}
;
goog.exportSymbol('spine.animation.EventType', spine.animation.EventType);
spine.animation.EventType.start;
spine.animation.EventType.interrupt;
spine.animation.EventType.end;
spine.animation.EventType.dispose;
spine.animation.EventType.complete;
spine.animation.EventType.event;
spine.animation.EventType.start = new spine.animation.EventType;
spine.animation.EventType.interrupt = new spine.animation.EventType;
spine.animation.EventType.end = new spine.animation.EventType;
spine.animation.EventType.dispose = new spine.animation.EventType;
spine.animation.EventType.complete = new spine.animation.EventType;
spine.animation.EventType.event = new spine.animation.EventType;
spine.animation.EventType.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'EventType',
        qName: 'spine.animation.EventType',
        kind: 'class'
    }]
};
spine.animation.EventType.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
spine.animation.TimelineType = function(order) {
    this.ordinal = order
}
;
goog.exportSymbol('spine.animation.TimelineType', spine.animation.TimelineType);
spine.animation.TimelineType.prototype.ordinal = 0;
spine.animation.TimelineType.rotate;
spine.animation.TimelineType.translate;
spine.animation.TimelineType.scale;
spine.animation.TimelineType.shear;
spine.animation.TimelineType.attachment;
spine.animation.TimelineType.color;
spine.animation.TimelineType.deform;
spine.animation.TimelineType.event;
spine.animation.TimelineType.drawOrder;
spine.animation.TimelineType.ikConstraint;
spine.animation.TimelineType.transformConstraint;
spine.animation.TimelineType.pathConstraintPosition;
spine.animation.TimelineType.pathConstraintSpacing;
spine.animation.TimelineType.pathConstraintMix;
spine.animation.TimelineType.twoColor;
spine.animation.TimelineType.rotate = new spine.animation.TimelineType(0);
spine.animation.TimelineType.translate = new spine.animation.TimelineType(1);
spine.animation.TimelineType.scale = new spine.animation.TimelineType(2);
spine.animation.TimelineType.shear = new spine.animation.TimelineType(3);
spine.animation.TimelineType.attachment = new spine.animation.TimelineType(4);
spine.animation.TimelineType.color = new spine.animation.TimelineType(5);
spine.animation.TimelineType.deform = new spine.animation.TimelineType(6);
spine.animation.TimelineType.event = new spine.animation.TimelineType(7);
spine.animation.TimelineType.drawOrder = new spine.animation.TimelineType(8);
spine.animation.TimelineType.ikConstraint = new spine.animation.TimelineType(9);
spine.animation.TimelineType.transformConstraint = new spine.animation.TimelineType(10);
spine.animation.TimelineType.pathConstraintPosition = new spine.animation.TimelineType(11);
spine.animation.TimelineType.pathConstraintSpacing = new spine.animation.TimelineType(12);
spine.animation.TimelineType.pathConstraintMix = new spine.animation.TimelineType(13);
spine.animation.TimelineType.twoColor = new spine.animation.TimelineType(14);
spine.animation.TimelineType.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TimelineType',
        qName: 'spine.animation.TimelineType',
        kind: 'class'
    }]
};
spine.animation.TimelineType.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TimelineType': {
                    type: '',
                    declaredBy: 'spine.animation.TimelineType',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.Color = function(r, g, b, a) {
    a = typeof a !== 'undefined' ? a : 0;
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a
}
;
goog.exportSymbol('spine.Color', spine.Color);
spine.Color.WHITE;
spine.Color.RED;
spine.Color.GREEN;
spine.Color.BLUE;
spine.Color.MAGENTA;
spine.Color.prototype.r = 0;
spine.Color.prototype.g = 0;
spine.Color.prototype.b = 0;
spine.Color.prototype.a = 0;
spine.Color.prototype.setFrom = function(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    this.clamp();
    return this
}
;
spine.Color.prototype.setFromColor = function(c) {
    this.r = c.r;
    this.g = c.g;
    this.b = c.b;
    this.a = c.a;
    return this
}
;
spine.Color.prototype.setFromString = function(hex) {
    hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;
    this.r = parseInt(hex.substr(0, 2), 16) / 255;
    this.g = parseInt(hex.substr(2, 2), 16) / 255;
    this.b = parseInt(hex.substr(4, 2), 16) / 255;
    this.a = (hex.length != 8 ? 255 : parseInt(hex.substr(6, 2), 16)) / 255;
    return this
}
;
spine.Color.prototype.add = function(r, g, b, a) {
    this.r += r;
    this.g += g;
    this.b += b;
    this.a += a;
    this.clamp();
    return this
}
;
spine.Color.prototype.clamp = function() {
    if (this.r < 0)
        this.r = 0;
    else if (this.r > 1)
        this.r = 1;
    if (this.g < 0)
        this.g = 0;
    else if (this.g > 1)
        this.g = 1;
    if (this.b < 0)
        this.b = 0;
    else if (this.b > 1)
        this.b = 1;
    if (this.a < 0)
        this.a = 0;
    else if (this.a > 1)
        this.a = 1;
    return this
}
;
spine.Color.WHITE = new spine.Color(1,1,1,1);
spine.Color.RED = new spine.Color(1,0,0,1);
spine.Color.GREEN = new spine.Color(0,1,0,1);
spine.Color.BLUE = new spine.Color(0,0,1,1);
spine.Color.MAGENTA = new spine.Color(1,0,1,1);
spine.Color.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Color',
        qName: 'spine.Color',
        kind: 'class'
    }]
};
spine.Color.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '|WHITE': {
                    type: 'spine.Color'
                },
                '|RED': {
                    type: 'spine.Color'
                },
                '|GREEN': {
                    type: 'spine.Color'
                },
                '|BLUE': {
                    type: 'spine.Color'
                },
                '|MAGENTA': {
                    type: 'spine.Color'
                },
                'r': {
                    type: 'Number'
                },
                'g': {
                    type: 'Number'
                },
                'b': {
                    type: 'Number'
                },
                'a': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'Color': {
                    type: '',
                    declaredBy: 'spine.Color',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: true
                        }]
                    }
                },
                'setFrom': {
                    type: 'spine.Color',
                    declaredBy: 'spine.Color',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'setFromColor': {
                    type: 'spine.Color',
                    declaredBy: 'spine.Color',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'spine.Color',
                            optional: false
                        }]
                    }
                },
                'setFromString': {
                    type: 'spine.Color',
                    declaredBy: 'spine.Color',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'add': {
                    type: 'spine.Color',
                    declaredBy: 'spine.Color',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 4,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                'clamp': {
                    type: 'spine.Color',
                    declaredBy: 'spine.Color'
                }
            }
        }
    }
}
;
comm.adobe.serialization.json.JSONTokenType = function() {}
;
goog.exportSymbol('comm.adobe.serialization.json.JSONTokenType', comm.adobe.serialization.json.JSONTokenType);
comm.adobe.serialization.json.JSONTokenType.UNKNOWN = -1;
comm.adobe.serialization.json.JSONTokenType.COMMA = 0;
comm.adobe.serialization.json.JSONTokenType.LEFT_BRACE = 1;
comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACE = 2;
comm.adobe.serialization.json.JSONTokenType.LEFT_BRACKET = 3;
comm.adobe.serialization.json.JSONTokenType.RIGHT_BRACKET = 4;
comm.adobe.serialization.json.JSONTokenType.COLON = 6;
comm.adobe.serialization.json.JSONTokenType.TRUE = 7;
comm.adobe.serialization.json.JSONTokenType.FALSE = 8;
comm.adobe.serialization.json.JSONTokenType.NULL = 9;
comm.adobe.serialization.json.JSONTokenType.STRING = 10;
comm.adobe.serialization.json.JSONTokenType.NUMBER = 11;
comm.adobe.serialization.json.JSONTokenType.NAN = 12;
comm.adobe.serialization.json.JSONTokenType.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSONTokenType',
        qName: 'comm.adobe.serialization.json.JSONTokenType',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSONTokenType.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
spine.EventData = function(name) {
    if (name == null)
        throw new openfl.errors.ArgumentError('name cannot be null.');
    this._name = name
}
;
goog.exportSymbol('spine.EventData', spine.EventData);
spine.EventData.prototype._name;
spine.EventData.prototype.intValue = 0;
spine.EventData.prototype.floatValue;
spine.EventData.prototype.stringValue;
spine.EventData.prototype.toString = function() {
    return this._name
}
;
spine.EventData.prototype.get__name = function() {
    return this._name
}
;
Object.defineProperties(spine.EventData.prototype, {
    name: {
        get: spine.EventData.prototype.get__name
    }
});
spine.EventData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'EventData',
        qName: 'spine.EventData',
        kind: 'class'
    }]
};
spine.EventData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'intValue': {
                    type: 'int'
                },
                'floatValue': {
                    type: 'Number'
                },
                'stringValue': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {
                'name': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'spine.EventData'
                }
            }
        },
        methods: function() {
            return {
                'EventData': {
                    type: '',
                    declaredBy: 'spine.EventData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'toString': {
                    type: 'String',
                    declaredBy: 'spine.EventData'
                }
            }
        }
    }
}
;
spine.SpacingMode = function() {}
;
goog.exportSymbol('spine.SpacingMode', spine.SpacingMode);
spine.SpacingMode._length;
spine.SpacingMode.fixed;
spine.SpacingMode.percent;
spine.SpacingMode._length = new spine.SpacingMode;
spine.SpacingMode.fixed = new spine.SpacingMode;
spine.SpacingMode.percent = new spine.SpacingMode;
spine.SpacingMode.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'SpacingMode',
        qName: 'spine.SpacingMode',
        kind: 'class'
    }]
};
spine.SpacingMode.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
pigg.data.puzzle.PuzzleContinueInfoData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleContinueInfoData', pigg.data.puzzle.PuzzleContinueInfoData);
pigg.data.puzzle.PuzzleContinueInfoData.prototype._status;
pigg.data.puzzle.PuzzleContinueInfoData.prototype._continuePrice = 0;
pigg.data.puzzle.PuzzleContinueInfoData.prototype._continueAddMoveCount = 0;
pigg.data.puzzle.PuzzleContinueInfoData.prototype._asCoinCount = 0;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.readData = function(data) {
    this._status = org.apache.royale.utils.Language.string(data['status']);
    if (this._status == 'SUCCESS') {
        this._continuePrice = Number(data['continueInfo']['continuePrice']);
        this._continueAddMoveCount = Number(data['continueInfo']['continueAddMoveCount']);
        this._asCoinCount = Number(data['continueInfo']['asCoinCount'])
    }
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__status = function(v) {
    this._status = v
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__continuePrice = function() {
    return this._continuePrice
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__continuePrice = function(v) {
    this._continuePrice = v
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__continueAddMoveCount = function() {
    return this._continueAddMoveCount
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__continueAddMoveCount = function(v) {
    this._continueAddMoveCount = v
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__asCoinCount = function() {
    return this._asCoinCount
}
;
pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__asCoinCount = function(v) {
    this._asCoinCount = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleContinueInfoData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__status
    },
    continuePrice: {
        get: pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__continuePrice,
        set: pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__continuePrice
    },
    continueAddMoveCount: {
        get: pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__continueAddMoveCount,
        set: pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__continueAddMoveCount
    },
    asCoinCount: {
        get: pigg.data.puzzle.PuzzleContinueInfoData.prototype.get__asCoinCount,
        set: pigg.data.puzzle.PuzzleContinueInfoData.prototype.set__asCoinCount
    }
});
pigg.data.puzzle.PuzzleContinueInfoData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleContinueInfoData',
        qName: 'pigg.data.puzzle.PuzzleContinueInfoData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleContinueInfoData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData'
                },
                'continuePrice': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData'
                },
                'continueAddMoveCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData'
                },
                'asCoinCount': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleContinueInfoData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueInfoData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleUserItemData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleUserItemData', pigg.data.puzzle.PuzzleUserItemData);
pigg.data.puzzle.PuzzleUserItemData.prototype._itemCode;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemCategory;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemName;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemDiscription;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemExpireTime;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemQuantity = 0;
pigg.data.puzzle.PuzzleUserItemData.prototype._itemMagnification = 0;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemCode = function() {
    return this._itemCode
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemCode = function(v) {
    this._itemCode = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemCategory = function() {
    return this._itemCategory
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemCategory = function(v) {
    this._itemCategory = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemName = function() {
    return this._itemName
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemName = function(v) {
    this._itemName = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemDiscription = function() {
    return this._itemDiscription
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemDiscription = function(v) {
    this._itemDiscription = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemExpireTime = function() {
    return this._itemExpireTime
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemExpireTime = function(v) {
    this._itemExpireTime = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemQuantity = function() {
    return this._itemQuantity
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemQuantity = function(v) {
    this._itemQuantity = v
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemMagnification = function() {
    return this._itemMagnification
}
;
pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemMagnification = function(v) {
    this._itemMagnification = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleUserItemData.prototype, {
    itemCode: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemCode,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemCode
    },
    itemCategory: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemCategory,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemCategory
    },
    itemName: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemName,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemName
    },
    itemDiscription: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemDiscription,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemDiscription
    },
    itemExpireTime: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemExpireTime,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemExpireTime
    },
    itemQuantity: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemQuantity,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemQuantity
    },
    itemMagnification: {
        get: pigg.data.puzzle.PuzzleUserItemData.prototype.get__itemMagnification,
        set: pigg.data.puzzle.PuzzleUserItemData.prototype.set__itemMagnification
    }
});
pigg.data.puzzle.PuzzleUserItemData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleUserItemData',
        qName: 'pigg.data.puzzle.PuzzleUserItemData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleUserItemData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'itemCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemCategory': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemDiscription': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemExpireTime': {
                    type: 'Number',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemQuantity': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                },
                'itemMagnification': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleUserItemData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleUserItemData'
                }
            }
        }
    }
}
;
spine.MathUtils = function() {}
;
goog.exportSymbol('spine.MathUtils', spine.MathUtils);
spine.MathUtils.PI = Math.PI;
spine.MathUtils.PI2 = Math.PI * 2;
spine.MathUtils.radDeg = 180 / Math.PI;
spine.MathUtils.degRad = Math.PI / 180;
spine.MathUtils.cosDeg = function(degrees) {
    return Math.cos(degrees * spine.MathUtils.degRad)
}
;
spine.MathUtils.sinDeg = function(degrees) {
    return Math.sin(degrees * spine.MathUtils.degRad)
}
;
spine.MathUtils.clamp = function(value, min, max) {
    if (value < min)
        return min;
    if (value > max)
        return max;
    return value
}
;
spine.MathUtils.signum = function(value) {
    return value > 0 ? 1 : value < 0 ? -1 : 0
}
;
spine.MathUtils.randomTriangular = function(min, max) {
    return spine.MathUtils.randomTriangularWith(min, max, (min + max) * .5)
}
;
spine.MathUtils.randomTriangularWith = function(min, max, mode) {
    var u = Math.random();
    var d = max - min;
    if (u <= (mode - min) / d)
        return min + Math.sqrt(u * d * (mode - min));
    return max - Math.sqrt((1 - u) * d * (max - mode))
}
;
spine.MathUtils.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MathUtils',
        qName: 'spine.MathUtils',
        kind: 'class'
    }]
};
spine.MathUtils.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '|PI': {
                    type: 'Number'
                },
                '|PI2': {
                    type: 'Number'
                },
                '|radDeg': {
                    type: 'Number'
                },
                '|degRad': {
                    type: 'Number'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                '|cosDeg': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|sinDeg': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|clamp': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|signum': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|randomTriangular': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }]
                    }
                },
                '|randomTriangularWith': {
                    type: 'Number',
                    declaredBy: 'spine.MathUtils',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 2,
                            type: 'Number',
                            optional: false
                        }, {
                            index: 3,
                            type: 'Number',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.RotateMode = function() {}
;
goog.exportSymbol('spine.RotateMode', spine.RotateMode);
spine.RotateMode.tangent;
spine.RotateMode.chain;
spine.RotateMode.chainScale;
spine.RotateMode.tangent = new spine.RotateMode;
spine.RotateMode.chain = new spine.RotateMode;
spine.RotateMode.chainScale = new spine.RotateMode;
spine.RotateMode.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'RotateMode',
        qName: 'spine.RotateMode',
        kind: 'class'
    }]
};
spine.RotateMode.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
var AsData = function() {
    openfl.events.EventDispatcher.call(this)
};
goog.inherits(AsData, openfl.events.EventDispatcher);
goog.exportSymbol('AsData', AsData);
AsData.animation = true;
AsData.isSpineAnimation = 0;
AsData.eventContainer = new openfl.events.EventDispatcher;
AsData.log = false;
AsData.ua = -1;
AsData.mypageWindow;
AsData.gameWindow;
AsData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AsData',
        qName: 'AsData',
        kind: 'class'
    }]
};
AsData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                '|animation': {
                    type: 'Boolean'
                },
                '|isSpineAnimation': {
                    type: 'int'
                },
                '|eventContainer': {
                    type: 'openfl.events.EventDispatcher'
                },
                '|log': {
                    type: 'Boolean'
                },
                '|ua': {
                    type: 'int'
                },
                '|mypageWindow': {
                    type: 'Window'
                },
                '|gameWindow': {
                    type: 'Window'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AsData': {
                    type: '',
                    declaredBy: 'AsData'
                }
            }
        }
    }
}
;
spine.BlendMode = function(ordinal) {
    this.ordinal = ordinal
}
;
goog.exportSymbol('spine.BlendMode', spine.BlendMode);
spine.BlendMode.normal;
spine.BlendMode.additive;
spine.BlendMode.multiply;
spine.BlendMode.screen;
spine.BlendMode.prototype.ordinal = 0;
spine.BlendMode.normal = new spine.BlendMode(0);
spine.BlendMode.additive = new spine.BlendMode(1);
spine.BlendMode.multiply = new spine.BlendMode(2);
spine.BlendMode.screen = new spine.BlendMode(3);
spine.BlendMode.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'BlendMode',
        qName: 'spine.BlendMode',
        kind: 'class'
    }]
};
spine.BlendMode.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'BlendMode': {
                    type: '',
                    declaredBy: 'spine.BlendMode',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.MixDirection = function(order) {
    this.ordinal = order
}
;
goog.exportSymbol('spine.animation.MixDirection', spine.animation.MixDirection);
spine.animation.MixDirection.prototype.ordinal = 0;
spine.animation.MixDirection.In;
spine.animation.MixDirection.Out;
spine.animation.MixDirection.In = new spine.animation.MixDirection(0);
spine.animation.MixDirection.Out = new spine.animation.MixDirection(1);
spine.animation.MixDirection.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MixDirection',
        qName: 'spine.animation.MixDirection',
        kind: 'class'
    }]
};
spine.animation.MixDirection.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MixDirection': {
                    type: '',
                    declaredBy: 'spine.animation.MixDirection',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.Listeners = function() {
    this._listeners = org.apache.royale.utils.Language.Vector()
}
;
goog.exportSymbol('spine.animation.Listeners', spine.animation.Listeners);
spine.animation.Listeners.prototype._listeners;
spine.animation.Listeners.prototype.add = function(listener) {
    if (listener == null)
        throw new openfl.errors.ArgumentError('listener cannot be null.');
    var indexOf = this._listeners.indexOf(listener);
    if (indexOf == -1)
        this._listeners[this._listeners.length] = listener
}
;
spine.animation.Listeners.prototype.remove = function(listener) {
    if (listener == null)
        throw new openfl.errors.ArgumentError('listener cannot be null.');
    var indexOf = this._listeners.indexOf(listener);
    if (indexOf != -1)
        this._listeners.splice(this._listeners.indexOf(listener), 1)
}
;
spine.animation.Listeners.prototype.invoke = function(args) {
    args = Array.prototype.slice.call(arguments, 0);
    var foreachiter0_target = this._listeners;
    for (var foreachiter0 in foreachiter0_target) {
        var listener = foreachiter0_target[foreachiter0];
        listener.apply(null, args)
    }
}
;
spine.animation.Listeners.prototype.get__listeners = function() {
    return this._listeners
}
;
Object.defineProperties(spine.animation.Listeners.prototype, {
    listeners: {
        get: spine.animation.Listeners.prototype.get__listeners
    }
});
spine.animation.Listeners.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Listeners',
        qName: 'spine.animation.Listeners',
        kind: 'class'
    }]
};
spine.animation.Listeners.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'listeners': {
                    type: 'Vector.\x3cFunction\x3e',
                    access: 'readonly',
                    declaredBy: 'spine.animation.Listeners'
                }
            }
        },
        methods: function() {
            return {
                'Listeners': {
                    type: '',
                    declaredBy: 'spine.animation.Listeners'
                },
                'add': {
                    type: 'void',
                    declaredBy: 'spine.animation.Listeners',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Function',
                            optional: false
                        }]
                    }
                },
                'remove': {
                    type: 'void',
                    declaredBy: 'spine.animation.Listeners',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Function',
                            optional: false
                        }]
                    }
                },
                'invoke': {
                    type: 'void',
                    declaredBy: 'spine.animation.Listeners',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.data.puzzle.PuzzleContinueData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleContinueData', pigg.data.puzzle.PuzzleContinueData);
pigg.data.puzzle.PuzzleContinueData.prototype._status;
pigg.data.puzzle.PuzzleContinueData.prototype.readData = function(data) {
    this._status = org.apache.royale.utils.Language.string(data['status'])
}
;
pigg.data.puzzle.PuzzleContinueData.prototype.get__status = function() {
    return this._status
}
;
pigg.data.puzzle.PuzzleContinueData.prototype.set__status = function(v) {
    this._status = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleContinueData.prototype, {
    status: {
        get: pigg.data.puzzle.PuzzleContinueData.prototype.get__status,
        set: pigg.data.puzzle.PuzzleContinueData.prototype.set__status
    }
});
pigg.data.puzzle.PuzzleContinueData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleContinueData',
        qName: 'pigg.data.puzzle.PuzzleContinueData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleContinueData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'status': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleContinueData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueData'
                },
                'readData': {
                    type: 'void',
                    declaredBy: 'pigg.data.puzzle.PuzzleContinueData',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'Array',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.animation.MixPose = function(order) {
    this.ordinal = order
}
;
goog.exportSymbol('spine.animation.MixPose', spine.animation.MixPose);
spine.animation.MixPose.prototype.ordinal = 0;
spine.animation.MixPose.setup;
spine.animation.MixPose.current;
spine.animation.MixPose.currentLayered;
spine.animation.MixPose.setup = new spine.animation.MixPose(0);
spine.animation.MixPose.current = new spine.animation.MixPose(1);
spine.animation.MixPose.currentLayered = new spine.animation.MixPose(2);
spine.animation.MixPose.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MixPose',
        qName: 'spine.animation.MixPose',
        kind: 'class'
    }]
};
spine.animation.MixPose.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MixPose': {
                    type: '',
                    declaredBy: 'spine.animation.MixPose',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.attachments.AttachmentType = function(ordinal, name) {
    this.ordinal = ordinal;
    this.name = name
}
;
goog.exportSymbol('spine.attachments.AttachmentType', spine.attachments.AttachmentType);
spine.attachments.AttachmentType.region;
spine.attachments.AttachmentType.regionsequence;
spine.attachments.AttachmentType.boundingbox;
spine.attachments.AttachmentType.mesh;
spine.attachments.AttachmentType.linkedmesh;
spine.attachments.AttachmentType.path;
spine.attachments.AttachmentType.point;
spine.attachments.AttachmentType.clipping;
spine.attachments.AttachmentType.prototype.ordinal = 0;
spine.attachments.AttachmentType.prototype.name;
spine.attachments.AttachmentType.region = new spine.attachments.AttachmentType(0,'region');
spine.attachments.AttachmentType.regionsequence = new spine.attachments.AttachmentType(1,'regionsequence');
spine.attachments.AttachmentType.boundingbox = new spine.attachments.AttachmentType(2,'boundingbox');
spine.attachments.AttachmentType.mesh = new spine.attachments.AttachmentType(3,'mesh');
spine.attachments.AttachmentType.linkedmesh = new spine.attachments.AttachmentType(3,'linkedmesh');
spine.attachments.AttachmentType.path = new spine.attachments.AttachmentType(4,'path');
spine.attachments.AttachmentType.point = new spine.attachments.AttachmentType(5,'point');
spine.attachments.AttachmentType.clipping = new spine.attachments.AttachmentType(6,'clipping');
spine.attachments.AttachmentType.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'AttachmentType',
        qName: 'spine.attachments.AttachmentType',
        kind: 'class'
    }]
};
spine.attachments.AttachmentType.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                },
                'name': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'AttachmentType': {
                    type: '',
                    declaredBy: 'spine.attachments.AttachmentType',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
var TileGummy = function(type) {
    type = typeof type !== 'undefined' ? type : 0;
    openfl.display.Tile.call(this, type);
    this._currentBallType = type
};
goog.inherits(TileGummy, openfl.display.Tile);
goog.exportSymbol('TileGummy', TileGummy);
TileGummy.prototype._isFixVoid = false;
TileGummy.prototype._isThroughVoid = false;
TileGummy.prototype._isBomb = false;
TileGummy.prototype._isStripe = false;
TileGummy.prototype._isBorder = false;
TileGummy.prototype._isWrapping = false;
TileGummy.prototype._isIcing = false;
TileGummy.prototype._isVoid = false;
TileGummy.prototype._currentCrushType = 0;
TileGummy.prototype._currentBallType = 0;
TileGummy.prototype._isOrder = false;
TileGummy.prototype._isAcorn = -1;
TileGummy.prototype._hasMission = -1;
TileGummy.prototype._ball_size = 64;
TileGummy.prototype.init = function() {}
;
TileGummy.prototype.setOrigin = function() {
    if (this.rotation > 0) {
        this.originX = -Math.sin(this.rotation * Math.PI * 2 / 180) * 8;
        this.originY = -(-this.rotation % 90 / 90 * this._ball_size)
    } else {
        this.originX = -this.rotation % 90 / 90 * this._ball_size;
        this.originY = Math.sin(this.rotation * Math.PI * 2 / 180) * 8
    }
    this.originX += (this.scaleX - 1) * (this._ball_size / (2 * this.scaleX));
    this.originY += (this.scaleY - 1) * (this._ball_size / (2 * this.scaleX))
}
;
TileGummy.prototype.updateType = function(crushType, colorType, pieceType) {
    colorType = typeof colorType !== 'undefined' ? colorType : 0;
    pieceType = typeof pieceType !== 'undefined' ? pieceType : 0;
    if (pieceType == 0)
        if (crushType == 0)
            if (this._hasMission == -1)
                this.id = colorType;
            else
                this.id = colorType + 42;
        else if (crushType < 4) {
            this.id = crushType * 6 + colorType;
            if (this._hasMission != -1)
                this.id += 42
        } else {
            if (crushType == 4)
                this.id = 24
        }
    else
        this.id = pieceType;
    this._currentCrushType = crushType;
    this._currentBallType = colorType;
    this.parent.addTile(this)
}
;
TileGummy.prototype.changeCrushType = function(type) {
    var pieceType = 0;
    this._isBomb = false;
    this._isStripe = false;
    this._isBorder = false;
    this._isWrapping = false;
    if (this._isFixVoid)
        return;
    if (this._isThroughVoid)
        return;
    if (this._isIcing)
        return;
    if (this._isOrder)
        return;
    if (this._isAcorn != -1 && type == 0) {
        if (this._isAcorn == 0)
            pieceType = 31;
        else if (this._isAcorn == 1)
            pieceType = 28;
        else if (this._isAcorn == 2)
            pieceType = 29;
        else if (this._isAcorn == 3)
            pieceType = 30;
        this.updateType(0, 0, pieceType);
        return
    }
    if (type == 0)
        ;
    else if (type == 1)
        this._isStripe = true;
    else if (type == 2)
        this._isBorder = true;
    else if (type == 3)
        this._isWrapping = true;
    else if (type == 4)
        this._isBomb = true;
    if (this._currentCrushType == type)
        return;
    this._currentCrushType = type;
    this.updateType(this._currentCrushType, this._currentBallType)
}
;
TileGummy.prototype.changeBallType = function(type, addOrder, addMission) {
    addOrder = typeof addOrder !== 'undefined' ? addOrder : -1;
    addMission = typeof addMission !== 'undefined' ? addMission : -1;
    var pieceType = 0;
    this._currentBallType = type;
    this._isIcing = false;
    this._isOrder = false;
    this._isAcorn = -1;
    if (this._isFixVoid)
        return;
    if (this._isThroughVoid)
        return;
    if (type == -1)
        ;
    else if (type == 20) {
        this._isIcing = true;
        pieceType = 27
    } else if (type == 21) {
        this._isIcing = true;
        pieceType = 26
    } else if (type == 6)
        ;
    else if (type == 10) {
        this._isOrder = true;
        if (addOrder == 0)
            pieceType = 32;
        else
            pieceType = 33
    } else if (type == 12) {
        this._isAcorn = 0;
        pieceType = 31
    } else if (type == 13) {
        this._isAcorn = 1;
        pieceType = 28
    } else if (type == 14) {
        this._isAcorn = 2;
        pieceType = 29
    } else if (type == 15) {
        this._isAcorn = 3;
        pieceType = 30
    } else if (type == 99)
        ;
    else
        ;if (addMission != -1)
        this.hasMission = addMission;
    else
        this.hasMission = -1;
    this.updateType(this._currentCrushType, this._currentBallType, pieceType)
}
;
TileGummy.prototype.get__isFixVoid = function() {
    return this._isFixVoid
}
;
TileGummy.prototype.set__isFixVoid = function(v) {
    this._isFixVoid = v
}
;
TileGummy.prototype.get__isThroughVoid = function() {
    return this._isThroughVoid
}
;
TileGummy.prototype.set__isThroughVoid = function(v) {
    this._isThroughVoid = v
}
;
TileGummy.prototype.get__isBomb = function() {
    return this._isBomb
}
;
TileGummy.prototype.set__isBomb = function(v) {
    this._isBomb = v
}
;
TileGummy.prototype.get__isStripe = function() {
    return this._isStripe
}
;
TileGummy.prototype.set__isStripe = function(v) {
    this._isStripe = v
}
;
TileGummy.prototype.get__isBorder = function() {
    return this._isBorder
}
;
TileGummy.prototype.set__isBorder = function(v) {
    this._isBorder = v
}
;
TileGummy.prototype.get__isWrapping = function() {
    return this._isWrapping
}
;
TileGummy.prototype.set__isWrapping = function(v) {
    this._isWrapping = v
}
;
TileGummy.prototype.get__isIcing = function() {
    return this._isIcing
}
;
TileGummy.prototype.set__isIcing = function(v) {
    this._isIcing = v
}
;
TileGummy.prototype.get__isVoid = function() {
    return this._isVoid
}
;
TileGummy.prototype.set__isVoid = function(v) {
    this._isVoid = v
}
;
TileGummy.prototype.get__currentCrushType = function() {
    return this._currentCrushType
}
;
TileGummy.prototype.set__currentCrushType = function(v) {
    this._currentCrushType = v
}
;
TileGummy.prototype.get__currentBallType = function() {
    return this._currentBallType
}
;
TileGummy.prototype.set__currentBallType = function(v) {
    this._currentBallType = v
}
;
TileGummy.prototype.get__isOrder = function() {
    return this._isOrder
}
;
TileGummy.prototype.set__isOrder = function(v) {
    this._isOrder = v
}
;
TileGummy.prototype.get__isAcorn = function() {
    return this._isAcorn
}
;
TileGummy.prototype.set__isAcorn = function(v) {
    this._isAcorn = v
}
;
TileGummy.prototype.get__hasMission = function() {
    return this._hasMission
}
;
TileGummy.prototype.set__hasMission = function(v) {
    this._hasMission = v
}
;
Object.defineProperties(TileGummy.prototype, {
    isFixVoid: {
        get: TileGummy.prototype.get__isFixVoid,
        set: TileGummy.prototype.set__isFixVoid
    },
    isThroughVoid: {
        get: TileGummy.prototype.get__isThroughVoid,
        set: TileGummy.prototype.set__isThroughVoid
    },
    isBomb: {
        get: TileGummy.prototype.get__isBomb,
        set: TileGummy.prototype.set__isBomb
    },
    isStripe: {
        get: TileGummy.prototype.get__isStripe,
        set: TileGummy.prototype.set__isStripe
    },
    isBorder: {
        get: TileGummy.prototype.get__isBorder,
        set: TileGummy.prototype.set__isBorder
    },
    isWrapping: {
        get: TileGummy.prototype.get__isWrapping,
        set: TileGummy.prototype.set__isWrapping
    },
    isIcing: {
        get: TileGummy.prototype.get__isIcing,
        set: TileGummy.prototype.set__isIcing
    },
    isVoid: {
        get: TileGummy.prototype.get__isVoid,
        set: TileGummy.prototype.set__isVoid
    },
    currentCrushType: {
        get: TileGummy.prototype.get__currentCrushType,
        set: TileGummy.prototype.set__currentCrushType
    },
    currentBallType: {
        get: TileGummy.prototype.get__currentBallType,
        set: TileGummy.prototype.set__currentBallType
    },
    isOrder: {
        get: TileGummy.prototype.get__isOrder,
        set: TileGummy.prototype.set__isOrder
    },
    isAcorn: {
        get: TileGummy.prototype.get__isAcorn,
        set: TileGummy.prototype.set__isAcorn
    },
    hasMission: {
        get: TileGummy.prototype.get__hasMission,
        set: TileGummy.prototype.set__hasMission
    }
});
TileGummy.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TileGummy',
        qName: 'TileGummy',
        kind: 'class'
    }]
};
TileGummy.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'isFixVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isThroughVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isBomb': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isStripe': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isBorder': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isWrapping': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isIcing': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isVoid': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'currentCrushType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'currentBallType': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isOrder': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'isAcorn': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                },
                'hasMission': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'TileGummy'
                }
            }
        },
        methods: function() {
            return {
                'TileGummy': {
                    type: '',
                    declaredBy: 'TileGummy',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'init': {
                    type: 'void',
                    declaredBy: 'TileGummy'
                },
                'setOrigin': {
                    type: 'void',
                    declaredBy: 'TileGummy'
                },
                'updateType': {
                    type: 'void',
                    declaredBy: 'TileGummy',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'changeCrushType': {
                    type: 'void',
                    declaredBy: 'TileGummy',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'changeBallType': {
                    type: 'void',
                    declaredBy: 'TileGummy',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
pigg.puzzle.data.CommonData = function() {}
;
goog.exportSymbol('pigg.puzzle.data.CommonData', pigg.puzzle.data.CommonData);
pigg.puzzle.data.CommonData.URL_IMG_COMMON_PARTS = '/assets/puzzle/img/common/commonPartsSheet.png';
pigg.puzzle.data.CommonData.URL_IMG_GAME_PARTS = '/assets/puzzle/img/game/gamePartsSheet.png';
pigg.puzzle.data.CommonData.URL_IMG_GAME_PIECE = '/assets/puzzle/img/game/pieceSheet.png';
pigg.puzzle.data.CommonData.URL_IMG_GAME_PANEL = '/assets/puzzle/img/game/gamePanelSheet.png';
pigg.puzzle.data.CommonData.URL_SPINE_BASE = '/assets/puzzle/spine/common/';
pigg.puzzle.data.CommonData.URL_GAME_BG_BASE = '/assets/puzzle/img/game/bg';
pigg.puzzle.data.CommonData.URL_MYPAGE_BG_BASE = '/assets/puzzle/img/mypage/bg';
pigg.puzzle.data.CommonData.URL_IMG_MYPAGE_PARTS = '/assets/puzzle/img/mypage/mypagePartsSheet.png';
pigg.puzzle.data.CommonData.URL_IMG_EVENT_PARTS = '/assets/puzzle/img/common/eventPartsSheet.png';
pigg.puzzle.data.CommonData.URL_GAME_STEP_INCENTIVE_PARTS = '/assets/puzzle/img/game/gameStepIncentiveSheet.png';
pigg.puzzle.data.CommonData.URL_GAME_LIMITED_INCENTIVE_PARTS = '/assets/puzzle/img/game/gameLimitedIncentiveSheet.png';
pigg.puzzle.data.CommonData.URL_COMMON_MENU_PARTS = '/assets/puzzle/img/common/commonMenuSheet.png';
pigg.puzzle.data.CommonData.URL_HOWTOPLAY_PARTS = '/assets/puzzle/img/common/howToPlayPartsSheet.png';
pigg.puzzle.data.CommonData.URL_GAME_MISSION_INFO = '/assets/puzzle/img/game/gameMissionInfo.png';
pigg.puzzle.data.CommonData.URL_ROULETTE_PARTS = '/assets/puzzle/img/common/roulettePartsSheet.png';
pigg.puzzle.data.CommonData.URL_MYPAGE_TUTORIAL_PARTS = '/assets/puzzle/img/mypage/mypageTutorialSheet.png';
pigg.puzzle.data.CommonData.URL_GAME_TUTORIAL_PARTS = '/assets/puzzle/img/game/gameTutorialSheet.png';
pigg.puzzle.data.CommonData.URL_COMMON_RANKING_PARTS = '/assets/puzzle/img/common/commonRankingSheet.png';
pigg.puzzle.data.CommonData.URL_MYPAGE_OUTOFTERM = '/assets/puzzle/img/mypage/mypageOutofterm.png';
pigg.puzzle.data.CommonData.URL_MYPAGE_RANKING_RESULT = '/assets/puzzle/img/mypage/rankingResultParts.png';
pigg.puzzle.data.CommonData.URL_JOIN_RANKING_PANEL = '/assets/puzzle/img/game/joinRankingPanel.png';
pigg.puzzle.data.CommonData.URL_SOUND_PATH = '/assets/puzzle/sound/';
pigg.puzzle.data.CommonData.URL_PUZZLE_MAINTENANCE = '/puzzle/maintenance';
pigg.puzzle.data.CommonData.URL_PUZZLE_GAME = '/puzzle/game';
pigg.puzzle.data.CommonData.URL_PUZZLE_MYPAGE = '/puzzle/mypage';
pigg.puzzle.data.CommonData.URL_PUZZLE_SHOP = '/puzzle/shop';
pigg.puzzle.data.CommonData.URL_USER_PAGE = '/user/';
pigg.puzzle.data.CommonData.URL_TRADELAW = 'https://www.ameba.jp/tradelaw/a250260e15df22d1c97cbd6a72e3e6c33494dc07fdf01a1ab43db53738170c8f';
pigg.puzzle.data.CommonData.URL_BUY_COIN = 'https://payment.amebame.com/coin/';
pigg.puzzle.data.CommonData.URL_CONTACT = 'https://cs.ameba.jp/contact/';
pigg.puzzle.data.CommonData.URL_MISSION_INFO = 'https://ameblo.jp/pigg-puzzlestaff/entry-12354420174.html';
pigg.puzzle.data.CommonData.URL_ABOUT_ITEM = 'https://ameblo.jp/pigg-puzzlestaff/entry-12418773199.html';
pigg.puzzle.data.CommonData.URL_USER_THUMB_API = '/image/piggface/';
pigg.puzzle.data.CommonData.URL_USER_THUMB_API_LOCAL = 'https://contents.pigg.ameba.jp/api/0/user/';
pigg.puzzle.data.CommonData.URL_PUZZLE_BLOG = 'https://ameblo.jp/pigg-puzzlestaff/';
pigg.puzzle.data.CommonData.URL_ABOUT_RANKING = 'https://ameblo.jp/pigg-puzzlestaff/entry-12361762800.html';
pigg.puzzle.data.CommonData.BGM_MAP = 'sound_puzzle_map.mp3';
pigg.puzzle.data.CommonData.BGM_GAME_INTRO = 'sound_puzzle_game_intro.mp3';
pigg.puzzle.data.CommonData.BGM_GAME_LOOP = 'sound_puzzle_game_loop.mp3';
pigg.puzzle.data.CommonData.BGM_CLEAR_INTRO = 'sound_puzzle_clear_intro.mp3';
pigg.puzzle.data.CommonData.BGM_CLEAR_LOOP = 'sound_puzzle_clear_loop.mp3';
pigg.puzzle.data.CommonData.BGM_FAILED_INTRO = 'sound_puzzle_failed_intro.mp3';
pigg.puzzle.data.CommonData.BGM_FAILED_LOOP = 'sound_puzzle_failed_loop.mp3';
pigg.puzzle.data.CommonData.SE_MATCH = 'sound_puzzle_se_match.mp3';
pigg.puzzle.data.CommonData.SE_FALL = 'sound_puzzle_se_fall.mp3';
pigg.puzzle.data.CommonData.SE_ERASE = 'sound_puzzle_se_erase.mp3';
pigg.puzzle.data.CommonData.SE_MAKE_SPECIAL = 'sound_puzzle_se_make_special.mp3';
pigg.puzzle.data.CommonData.SE_SWITCH = 'sound_puzzle_se_slide.mp3';
pigg.puzzle.data.CommonData.SE_SWITCH_CANCEL = 'sound_puzzle_se_slide_cancel.mp3';
pigg.puzzle.data.CommonData.SE_ARROW_START = 'sound_puzzle_se_arrow_start.mp3';
pigg.puzzle.data.CommonData.SE_TOGETOGE_START = 'sound_puzzle_se_togetoge_start.mp3';
pigg.puzzle.data.CommonData.SE_TOGETOGE_LARGE_START = 'sound_puzzle_se_togetoge_large.mp3';
pigg.puzzle.data.CommonData.SE_RAINBOW_THROUGH = 'sound_puzzle_se_rainbaw_through.mp3';
pigg.puzzle.data.CommonData.SE_RAINBOW_HIT = 'sound_puzzle_se_rainbaw_hit.mp3';
pigg.puzzle.data.CommonData.SE_FINISH = 'sound_puzzle_se_finish.mp3';
pigg.puzzle.data.CommonData.SE_BONUS_POINT = 'sound_puzzle_se_bonuspoint.mp3';
pigg.puzzle.data.CommonData.SE_HO_START = 'sound_puzzle_se_ho_start.mp3';
pigg.puzzle.data.CommonData.SE_POINT_GET = 'sound_puzzle_se_get_point.mp3';
pigg.puzzle.data.CommonData.SE_SCROLL = 'sound_puzzle_se_scroll.mp3';
pigg.puzzle.data.CommonData.SE_HO_VOICE = 'sound_puzzle_se_ho_voice.mp3';
pigg.puzzle.data.CommonData.SE_CRUSH_MARSHMALLOW = 'sound_puzzle_se_crush_marshmallow.mp3';
pigg.puzzle.data.CommonData.SE_CRUSH_SILVERGOLD = 'sound_puzzle_se_crush_silverGold.mp3';
pigg.puzzle.data.CommonData.SE_ROULETTE_ROTATION = 'sound_puzzle_se_roulette_rotate.mp3';
pigg.puzzle.data.CommonData.SE_ROULETTE_END = 'sound_puzzle_se_roulette_end.mp3';
pigg.puzzle.data.CommonData.SE_MISSION_PIECE_GET = 'sound_puzzle_se_mission_get.mp3';
pigg.puzzle.data.CommonData.SE_RANKING_RESULT = 'sound_puzzle_se_ranking_result.mp3';
pigg.puzzle.data.CommonData.SE_BUTTON_DOWN = 'sound_puzzle_se_button.mp3';
pigg.puzzle.data.CommonData.SE_BUTTON_CANCEL = 'sound_puzzle_se_cancel.mp3';
pigg.puzzle.data.CommonData.SE_USE_POTION = 'sound_puzzle_se_usePotion.mp3';
pigg.puzzle.data.CommonData.SE_EMPTY = 'sound_puzzle_se_empty.mp3';
pigg.puzzle.data.CommonData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'CommonData',
        qName: 'pigg.puzzle.data.CommonData',
        kind: 'class'
    }]
};
pigg.puzzle.data.CommonData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'CommonData': {
                    type: '',
                    declaredBy: 'pigg.puzzle.data.CommonData'
                }
            }
        }
    }
}
;
spine.atlas.Format = function(ordinal, name) {
    this.ordinal = ordinal;
    this.name = name
}
;
goog.exportSymbol('spine.atlas.Format', spine.atlas.Format);
spine.atlas.Format.alpha;
spine.atlas.Format.intensity;
spine.atlas.Format.luminanceAlpha;
spine.atlas.Format.rgb565;
spine.atlas.Format.rgba4444;
spine.atlas.Format.rgb888;
spine.atlas.Format.rgba8888;
spine.atlas.Format.prototype.ordinal = 0;
spine.atlas.Format.prototype.name;
spine.atlas.Format.alpha = new spine.atlas.Format(0,'alpha');
spine.atlas.Format.intensity = new spine.atlas.Format(1,'intensity');
spine.atlas.Format.luminanceAlpha = new spine.atlas.Format(2,'luminanceAlpha');
spine.atlas.Format.rgb565 = new spine.atlas.Format(3,'rgb565');
spine.atlas.Format.rgba4444 = new spine.atlas.Format(4,'rgba4444');
spine.atlas.Format.rgb888 = new spine.atlas.Format(5,'rgb888');
spine.atlas.Format.rgba8888 = new spine.atlas.Format(6,'rgba8888');
spine.atlas.Format.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Format',
        qName: 'spine.atlas.Format',
        kind: 'class'
    }]
};
spine.atlas.Format.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                },
                'name': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'Format': {
                    type: '',
                    declaredBy: 'spine.atlas.Format',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.TransformMode = function() {}
;
goog.exportSymbol('spine.TransformMode', spine.TransformMode);
spine.TransformMode.normal;
spine.TransformMode.onlyTranslation;
spine.TransformMode.noRotationOrReflection;
spine.TransformMode.noScale;
spine.TransformMode.noScaleOrReflection;
spine.TransformMode.normal = new spine.TransformMode;
spine.TransformMode.onlyTranslation = new spine.TransformMode;
spine.TransformMode.noRotationOrReflection = new spine.TransformMode;
spine.TransformMode.noScale = new spine.TransformMode;
spine.TransformMode.noScaleOrReflection = new spine.TransformMode;
spine.TransformMode.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TransformMode',
        qName: 'spine.TransformMode',
        kind: 'class'
    }]
};
spine.TransformMode.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
comm.adobe.serialization.json.JSONParseError = function(message, location, text) {
    message = typeof message !== 'undefined' ? message : '';
    location = typeof location !== 'undefined' ? location : 0;
    text = typeof text !== 'undefined' ? text : '';
    Error.call(this, message);
    this.name = 'JSONParseError';
    this._location = location;
    this._text = text
}
;
goog.inherits(comm.adobe.serialization.json.JSONParseError, Error);
goog.exportSymbol('comm.adobe.serialization.json.JSONParseError', comm.adobe.serialization.json.JSONParseError);
comm.adobe.serialization.json.JSONParseError.prototype._location = 0;
comm.adobe.serialization.json.JSONParseError.prototype._text;
comm.adobe.serialization.json.JSONParseError.prototype.get__location = function() {
    return this._location
}
;
comm.adobe.serialization.json.JSONParseError.prototype.get__text = function() {
    return this._text
}
;
Object.defineProperties(comm.adobe.serialization.json.JSONParseError.prototype, {
    location: {
        get: comm.adobe.serialization.json.JSONParseError.prototype.get__location
    },
    text: {
        get: comm.adobe.serialization.json.JSONParseError.prototype.get__text
    }
});
comm.adobe.serialization.json.JSONParseError.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSONParseError',
        qName: 'comm.adobe.serialization.json.JSONParseError',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSONParseError.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'location': {
                    type: 'int',
                    access: 'readonly',
                    declaredBy: 'comm.adobe.serialization.json.JSONParseError'
                },
                'text': {
                    type: 'String',
                    access: 'readonly',
                    declaredBy: 'comm.adobe.serialization.json.JSONParseError'
                }
            }
        },
        methods: function() {
            return {
                'JSONParseError': {
                    type: '',
                    declaredBy: 'comm.adobe.serialization.json.JSONParseError',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'String',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas.TextureWrap = function(ordinal, name) {
    this.ordinal = ordinal;
    this.name = name
}
;
goog.exportSymbol('spine.atlas.TextureWrap', spine.atlas.TextureWrap);
spine.atlas.TextureWrap.mirroredRepeat;
spine.atlas.TextureWrap.clampToEdge;
spine.atlas.TextureWrap.repeat;
spine.atlas.TextureWrap.prototype.ordinal = 0;
spine.atlas.TextureWrap.prototype.name;
spine.atlas.TextureWrap.mirroredRepeat = new spine.atlas.TextureWrap(0,'mirroredRepeat');
spine.atlas.TextureWrap.clampToEdge = new spine.atlas.TextureWrap(1,'clampToEdge');
spine.atlas.TextureWrap.repeat = new spine.atlas.TextureWrap(2,'repeat');
spine.atlas.TextureWrap.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TextureWrap',
        qName: 'spine.atlas.TextureWrap',
        kind: 'class'
    }]
};
spine.atlas.TextureWrap.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                },
                'name': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TextureWrap': {
                    type: '',
                    declaredBy: 'spine.atlas.TextureWrap',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
comm.adobe.serialization.json.JSONToken = function(type, value) {
    type = typeof type !== 'undefined' ? type : -1;
    value = typeof value !== 'undefined' ? value : null;
    this._type = type;
    this._value = value
}
;
goog.exportSymbol('comm.adobe.serialization.json.JSONToken', comm.adobe.serialization.json.JSONToken);
comm.adobe.serialization.json.JSONToken.prototype._type = 0;
comm.adobe.serialization.json.JSONToken.prototype._value;
comm.adobe.serialization.json.JSONToken.token;
comm.adobe.serialization.json.JSONToken.create = function(type, value) {
    type = typeof type !== 'undefined' ? type : -1;
    value = typeof value !== 'undefined' ? value : null;
    comm.adobe.serialization.json.JSONToken.token.type = type;
    comm.adobe.serialization.json.JSONToken.token.value = value;
    return comm.adobe.serialization.json.JSONToken.token
}
;
comm.adobe.serialization.json.JSONToken.prototype.get__type = function() {
    return this._type
}
;
comm.adobe.serialization.json.JSONToken.prototype.set__type = function(v) {
    this._type = v
}
;
comm.adobe.serialization.json.JSONToken.prototype.get__value = function() {
    return this._value
}
;
comm.adobe.serialization.json.JSONToken.prototype.set__value = function(v) {
    this._value = v
}
;
Object.defineProperties(comm.adobe.serialization.json.JSONToken.prototype, {
    type: {
        get: comm.adobe.serialization.json.JSONToken.prototype.get__type,
        set: comm.adobe.serialization.json.JSONToken.prototype.set__type
    },
    value: {
        get: comm.adobe.serialization.json.JSONToken.prototype.get__value,
        set: comm.adobe.serialization.json.JSONToken.prototype.set__value
    }
});
comm.adobe.serialization.json.JSONToken.token = new comm.adobe.serialization.json.JSONToken;
comm.adobe.serialization.json.JSONToken.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'JSONToken',
        qName: 'comm.adobe.serialization.json.JSONToken',
        kind: 'class'
    }]
};
comm.adobe.serialization.json.JSONToken.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'type': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'comm.adobe.serialization.json.JSONToken'
                },
                'value': {
                    type: 'Object',
                    access: 'readwrite',
                    declaredBy: 'comm.adobe.serialization.json.JSONToken'
                }
            }
        },
        methods: function() {
            return {
                'JSONToken': {
                    type: '',
                    declaredBy: 'comm.adobe.serialization.json.JSONToken',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'Object',
                            optional: true
                        }]
                    }
                }
            }
        }
    }
}
;
spine.atlas.TextureFilter = function(ordinal, name) {
    this.ordinal = ordinal;
    this.name = name
}
;
goog.exportSymbol('spine.atlas.TextureFilter', spine.atlas.TextureFilter);
spine.atlas.TextureFilter.nearest;
spine.atlas.TextureFilter.linear;
spine.atlas.TextureFilter.mipMap;
spine.atlas.TextureFilter.mipMapNearestNearest;
spine.atlas.TextureFilter.mipMapLinearNearest;
spine.atlas.TextureFilter.mipMapNearestLinear;
spine.atlas.TextureFilter.mipMapLinearLinear;
spine.atlas.TextureFilter.prototype.ordinal = 0;
spine.atlas.TextureFilter.prototype.name;
spine.atlas.TextureFilter.nearest = new spine.atlas.TextureFilter(0,'nearest');
spine.atlas.TextureFilter.linear = new spine.atlas.TextureFilter(1,'linear');
spine.atlas.TextureFilter.mipMap = new spine.atlas.TextureFilter(2,'mipMap');
spine.atlas.TextureFilter.mipMapNearestNearest = new spine.atlas.TextureFilter(3,'mipMapNearestNearest');
spine.atlas.TextureFilter.mipMapLinearNearest = new spine.atlas.TextureFilter(4,'mipMapLinearNearest');
spine.atlas.TextureFilter.mipMapNearestLinear = new spine.atlas.TextureFilter(5,'mipMapNearestLinear');
spine.atlas.TextureFilter.mipMapLinearLinear = new spine.atlas.TextureFilter(6,'mipMapLinearLinear');
spine.atlas.TextureFilter.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TextureFilter',
        qName: 'spine.atlas.TextureFilter',
        kind: 'class'
    }]
};
spine.atlas.TextureFilter.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {
                'ordinal': {
                    type: 'int'
                },
                'name': {
                    type: 'String'
                }
            }
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TextureFilter': {
                    type: '',
                    declaredBy: 'spine.atlas.TextureFilter',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }, {
                            index: 2,
                            type: 'String',
                            optional: false
                        }]
                    }
                }
            }
        }
    }
}
;
spine.PositionMode = function() {}
;
goog.exportSymbol('spine.PositionMode', spine.PositionMode);
spine.PositionMode.fixed;
spine.PositionMode.percent;
spine.PositionMode.fixed = new spine.PositionMode;
spine.PositionMode.percent = new spine.PositionMode;
spine.PositionMode.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PositionMode',
        qName: 'spine.PositionMode',
        kind: 'class'
    }]
};
spine.PositionMode.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {}
        }
    }
}
;
pigg.data.puzzle.PuzzleIncentiveItemData = function() {}
;
goog.exportSymbol('pigg.data.puzzle.PuzzleIncentiveItemData', pigg.data.puzzle.PuzzleIncentiveItemData);
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._itemCode;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._itemType;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._itemName;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._stepIncentiveItemImageURL;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._itemQuantity = 0;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._itemIndex = 0;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype._isRankingSpecial;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemCode = function() {
    return this._itemCode
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemCode = function(v) {
    this._itemCode = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemType = function() {
    return this._itemType
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemType = function(v) {
    this._itemType = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemName = function() {
    return this._itemName
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemName = function(v) {
    this._itemName = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__stepIncentiveItemImageURL = function() {
    return this._stepIncentiveItemImageURL
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__stepIncentiveItemImageURL = function(v) {
    this._stepIncentiveItemImageURL = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__isRankingSpecial = function() {
    return this._isRankingSpecial
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__isRankingSpecial = function(v) {
    this._isRankingSpecial = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemQuantity = function() {
    return this._itemQuantity
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemQuantity = function(v) {
    this._itemQuantity = v
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemIndex = function() {
    return this._itemIndex
}
;
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemIndex = function(v) {
    this._itemIndex = v
}
;
Object.defineProperties(pigg.data.puzzle.PuzzleIncentiveItemData.prototype, {
    itemCode: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemCode,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemCode
    },
    itemType: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemType,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemType
    },
    itemName: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemName,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemName
    },
    stepIncentiveItemImageURL: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__stepIncentiveItemImageURL,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__stepIncentiveItemImageURL
    },
    isRankingSpecial: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__isRankingSpecial,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__isRankingSpecial
    },
    itemQuantity: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemQuantity,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemQuantity
    },
    itemIndex: {
        get: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.get__itemIndex,
        set: pigg.data.puzzle.PuzzleIncentiveItemData.prototype.set__itemIndex
    }
});
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'PuzzleIncentiveItemData',
        qName: 'pigg.data.puzzle.PuzzleIncentiveItemData',
        kind: 'class'
    }]
};
pigg.data.puzzle.PuzzleIncentiveItemData.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {
                'itemCode': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'itemType': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'itemName': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'stepIncentiveItemImageURL': {
                    type: 'String',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'isRankingSpecial': {
                    type: 'Boolean',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'itemQuantity': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                },
                'itemIndex': {
                    type: 'int',
                    access: 'readwrite',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                }
            }
        },
        methods: function() {
            return {
                'PuzzleIncentiveItemData': {
                    type: '',
                    declaredBy: 'pigg.data.puzzle.PuzzleIncentiveItemData'
                }
            }
        }
    }
}
;
var TileBase = function(type, posX, posY) {
    type = typeof type !== 'undefined' ? type : 0;
    posX = typeof posX !== 'undefined' ? posX : 0;
    posY = typeof posY !== 'undefined' ? posY : 0;
    openfl.display.Tile.call(this, type, posX, posY)
};
goog.inherits(TileBase, openfl.display.Tile);
goog.exportSymbol('TileBase', TileBase);
TileBase.prototype._ball_size = 64;
TileBase.prototype.updateId = function(id) {
    this.id = id;
    if (this.parent != null)
        this.parent.addTile(this)
}
;
TileBase.prototype.setOrigin = function() {
    if (this.rotation > 0) {
        this.originX = -Math.sin(this.rotation * Math.PI * 2 / 180) * 8;
        this.originY = -(-this.rotation % 90 / 90 * this._ball_size)
    } else {
        this.originX = -this.rotation % 90 / 90 * this._ball_size;
        this.originY = Math.sin(this.rotation * Math.PI * 2 / 180) * 8
    }
    this.originX += (this.scaleX - 1) * (this._ball_size / (2 * this.scaleX));
    this.originY += (this.scaleY - 1) * (this._ball_size / (2 * this.scaleX))
}
;
TileBase.prototype.setCenter = function() {}
;
TileBase.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'TileBase',
        qName: 'TileBase',
        kind: 'class'
    }]
};
TileBase.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'TileBase': {
                    type: '',
                    declaredBy: 'TileBase',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: true
                        }, {
                            index: 2,
                            type: 'int',
                            optional: true
                        }, {
                            index: 3,
                            type: 'int',
                            optional: true
                        }]
                    }
                },
                'updateId': {
                    type: 'void',
                    declaredBy: 'TileBase',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'int',
                            optional: false
                        }]
                    }
                },
                'setOrigin': {
                    type: 'void',
                    declaredBy: 'TileBase'
                },
                'setCenter': {
                    type: 'void',
                    declaredBy: 'TileBase'
                }
            }
        }
    }
}
;
comm.hurlant = {};
comm.hurlant.util = {};
comm.hurlant.util.Base64 = function() {
    throw new Error('Base64 class is static container only');
}
;
goog.exportSymbol('comm.hurlant.util.Base64', comm.hurlant.util.Base64);
comm.hurlant.util.Base64.BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d';
comm.hurlant.util.Base64.version = '1.0.0';
comm.hurlant.util.Base64.encode = function(data) {
    var bytes = new openfl.utils.ByteArray;
    bytes.writeUTFBytes(data);
    return comm.hurlant.util.Base64.encodeByteArray(bytes)
}
;
comm.hurlant.util.Base64.encodeByteArray = function(data) {
    var output = '';
    var dataBuffer;
    var outputBuffer = new Array(4);
    data.position = 0;
    while (data.bytesAvailable > 0) {
        dataBuffer = new Array;
        for (var i = 0; i < 3 && data.bytesAvailable > 0; i++)
            dataBuffer[i] = data.readUnsignedByte();
        outputBuffer[0] = (dataBuffer[0] & 252) >> 2;
        outputBuffer[1] = (dataBuffer[0] & 3) << 4 | dataBuffer[1] >> 4;
        outputBuffer[2] = (dataBuffer[1] & 15) << 2 | dataBuffer[2] >> 6;
        outputBuffer[3] = dataBuffer[2] & 63;
        for (var j = dataBuffer.length; j < 3; j++)
            outputBuffer[j + 1] = 64;
        for (var k = 0; k < outputBuffer.length; k++)
            output += comm.hurlant.util.Base64.BASE64_CHARS.charAt(outputBuffer[k])
    }
    return output
}
;
comm.hurlant.util.Base64.decode = function(data) {
    var bytes = comm.hurlant.util.Base64.decodeToByteArray(data);
    return bytes.readUTFBytes(bytes.length)
}
;
comm.hurlant.util.Base64.decodeToByteArray = function(data) {
    var output = new openfl.utils.ByteArray;
    var dataBuffer = new Array(4);
    var outputBuffer = new Array(3);
    for (var i = 0; i < data.length; i += 4) {
        for (var j = 0; j < 4 && i + j < data.length; j++)
            dataBuffer[j] = comm.hurlant.util.Base64.BASE64_CHARS.indexOf(data.charAt(i + j));
        outputBuffer[0] = (dataBuffer[0] << 2) + ((dataBuffer[1] & 48) >> 4);
        outputBuffer[1] = ((dataBuffer[1] & 15) << 4) + ((dataBuffer[2] & 60) >> 2);
        outputBuffer[2] = ((dataBuffer[2] & 3) << 6) + dataBuffer[3];
        for (var k = 0; k < outputBuffer.length; k++) {
            if (dataBuffer[k + 1] == 64)
                break;
            output.writeByte(outputBuffer[k])
        }
    }
    output.position = 0;
    return output
}
;
comm.hurlant.util.Base64.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'Base64',
        qName: 'comm.hurlant.util.Base64',
        kind: 'class'
    }]
};
comm.hurlant.util.Base64.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                '|encode': {
                    type: 'String',
                    declaredBy: 'comm.hurlant.util.Base64',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                '|encodeByteArray': {
                    type: 'String',
                    declaredBy: 'comm.hurlant.util.Base64',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'openfl.utils.ByteArray',
                            optional: false
                        }]
                    }
                },
                '|decode': {
                    type: 'String',
                    declaredBy: 'comm.hurlant.util.Base64',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                '|decodeToByteArray': {
                    type: 'openfl.utils.ByteArray',
                    declaredBy: 'comm.hurlant.util.Base64',
                    parameters: function() {
                        return [{
                            index: 1,
                            type: 'String',
                            optional: false
                        }]
                    }
                },
                'Base64': {
                    type: '',
                    declaredBy: 'comm.hurlant.util.Base64'
                }
            }
        }
    }
}
;
var MainGame = function() {
    var stage = new openfl.display.Stage(640,906,0,App)
};
goog.exportSymbol('MainGame', MainGame);
MainGame.prototype.ROYALE_CLASS_INFO = {
    names: [{
        name: 'MainGame',
        qName: 'MainGame',
        kind: 'class'
    }]
};
MainGame.prototype.ROYALE_REFLECTION_INFO = function() {
    return {
        variables: function() {
            return {}
        },
        accessors: function() {
            return {}
        },
        methods: function() {
            return {
                'MainGame': {
                    type: '',
                    declaredBy: 'MainGame'
                }
            }
        }
    }
}
;
//# sourceMappingURL=./MainGame.js.map
